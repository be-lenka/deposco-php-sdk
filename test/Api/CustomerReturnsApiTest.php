<?php
/**
 * CustomerReturnsApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deposco API
 *
 * Welcome to the Deposco API Reference! The Deposco API enables you to integrate your system with Deposco.  * Integrate a product information system (PIM) by creating and retrieving data for items, packs, UPCs, and kits. * Set up warehouse data by creating facilities, zones, locations, and storage details. * Create inbound orders that can be received and outbound orders that can be fulfilled with Deposco warehouse management processes.  This reference provides details on available operations, endpoints, parameters, schemas, and responses.  Example requests and responses are also available for you to use as a reference. You can copy the examples to use as a starting point for your own requests.  Review the guides to learn how the API is used in common business scenarios such as setting up the warehouse and integrating a Product Information Management (PIM) system.  When you're ready to get started, register for a developer account and then log in to create your application in the developer portal.
 *
 * The version of the OpenAPI document: 2.0.2519
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace BeLenka\Deposco\Test\Api;

use \BeLenka\Deposco\Configuration;
use \BeLenka\Deposco\ApiException;
use \BeLenka\Deposco\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * CustomerReturnsApiTest Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CustomerReturnsApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for getCustomerReturn
     *
     * Get a customer return.
     *
     */
    public function testGetCustomerReturn()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCustomerReturnLine
     *
     * Get an order line for a customer return.
     *
     */
    public function testGetCustomerReturnLine()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCustomerReturnLines
     *
     * Get a list of order lines for a customer returns.
     *
     */
    public function testGetCustomerReturnLines()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCustomerReturnOrderStatus
     *
     * Get the status of a customer return.
     *
     */
    public function testGetCustomerReturnOrderStatus()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCustomerReturns
     *
     * Get a list of customer returns.
     *
     */
    public function testGetCustomerReturns()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for postCustomerReturnOrderStatus
     *
     * Updates the status of a customer return.
     *
     */
    public function testPostCustomerReturnOrderStatus()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for postCustomerReturns
     *
     * Create or update a customer return.
     *
     */
    public function testPostCustomerReturns()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for postCustomerReturnsCancellation
     *
     * Cancel all or part of an customer return.
     *
     */
    public function testPostCustomerReturnsCancellation()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateCustomerReturnLine
     *
     * Update an order line for a customer return.
     *
     */
    public function testUpdateCustomerReturnLine()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
