<?php
/**
 * VendorReturnsApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deposco API
 *
 * Welcome to the Deposco API Reference! The Deposco API enables you to integrate your system with Deposco.  * Integrate a product information system (PIM) by creating and retrieving data for items, packs, UPCs, and kits. * Set up warehouse data by creating facilities, zones, locations, and storage details. * Create inbound orders that can be received and outbound orders that can be fulfilled with Deposco warehouse management processes.  This reference provides details on available operations, endpoints, parameters, schemas, and responses.  Example requests and responses are also available for you to use as a reference. You can copy the examples to use as a starting point for your own requests.  Review the guides to learn how the API is used in common business scenarios such as setting up the warehouse and integrating a Product Information Management (PIM) system.  When you're ready to get started, register for a developer account and then log in to create your application in the developer portal.
 *
 * The version of the OpenAPI document: 2.0.2519
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace BeLenka\Deposco\Test\Api;

use \BeLenka\Deposco\Configuration;
use \BeLenka\Deposco\ApiException;
use \BeLenka\Deposco\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * VendorReturnsApiTest Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class VendorReturnsApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for getVendorReturn
     *
     * Get a vendor return.
     *
     */
    public function testGetVendorReturn()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getVendorReturnLine
     *
     * Get an order line for a vendor return.
     *
     */
    public function testGetVendorReturnLine()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getVendorReturnLines
     *
     * Get a list of order lines for a vendor return.
     *
     */
    public function testGetVendorReturnLines()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getVendorReturnStatus
     *
     * Get the status of a vendor return.
     *
     */
    public function testGetVendorReturnStatus()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getVendorReturns
     *
     * Get a list of vendor returns.
     *
     */
    public function testGetVendorReturns()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for postVendorReturnStatus
     *
     * Update the status of a vendor return.
     *
     */
    public function testPostVendorReturnStatus()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for postVendorReturns
     *
     * Create or update a vendor return.
     *
     */
    public function testPostVendorReturns()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for postVendorReturnsCancellation
     *
     * Cancel all or part of a vendor return.
     *
     */
    public function testPostVendorReturnsCancellation()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateVendorReturnLine
     *
     * Update an order line for a vendor return.
     *
     */
    public function testUpdateVendorReturnLine()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
