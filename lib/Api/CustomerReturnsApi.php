<?php
/**
 * CustomerReturnsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deposco API
 *
 * Welcome to the Deposco API Reference! The Deposco API enables you to integrate your system with Deposco.  * Integrate a product information system (PIM) by creating and retrieving data for items, packs, UPCs, and kits. * Set up warehouse data by creating facilities, zones, locations, and storage details. * Create inbound orders that can be received and outbound orders that can be fulfilled with Deposco warehouse management processes.  This reference provides details on available operations, endpoints, parameters, schemas, and responses.  Example requests and responses are also available for you to use as a reference. You can copy the examples to use as a starting point for your own requests.  Review the guides to learn how the API is used in common business scenarios such as setting up the warehouse and integrating a Product Information Management (PIM) system.  When you're ready to get started, register for a developer account and then log in to create your application in the developer portal.
 *
 * The version of the OpenAPI document: 2.0.2519
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\Deposco\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use BeLenka\Deposco\ApiException;
use BeLenka\Deposco\Configuration;
use BeLenka\Deposco\HeaderSelector;
use BeLenka\Deposco\ObjectSerializer;

/**
 * CustomerReturnsApi Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CustomerReturnsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getCustomerReturn' => [
            'application/json',
        ],
        'getCustomerReturnLine' => [
            'application/json',
        ],
        'getCustomerReturnLines' => [
            'application/json',
        ],
        'getCustomerReturnOrderStatus' => [
            'application/json',
        ],
        'getCustomerReturns' => [
            'application/json',
        ],
        'postCustomerReturnOrderStatus' => [
            'application/json',
        ],
        'postCustomerReturns' => [
            'application/json',
        ],
        'postCustomerReturnsCancellation' => [
            'application/json',
        ],
        'updateCustomerReturnLine' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getCustomerReturn
     *
     * Get a customer return
     *
     * @param  int $order_id ID of the requested order header. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerReturn'] to see the possible values for this operation
     *
     * @throws \BeLenka\Deposco\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \BeLenka\Deposco\Model\CustomerReturnDTO|\BeLenka\Deposco\Model\BadRequestAPIResponse|\BeLenka\Deposco\Model\UnauthorizedAPIResponse|\BeLenka\Deposco\Model\ForbiddenAPIResponse|\BeLenka\Deposco\Model\RateLimitAPIResponse
     */
    public function getCustomerReturn($order_id, string $contentType = self::contentTypes['getCustomerReturn'][0])
    {
        list($response) = $this->getCustomerReturnWithHttpInfo($order_id, $contentType);
        return $response;
    }

    /**
     * Operation getCustomerReturnWithHttpInfo
     *
     * Get a customer return
     *
     * @param  int $order_id ID of the requested order header. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerReturn'] to see the possible values for this operation
     *
     * @throws \BeLenka\Deposco\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\Deposco\Model\CustomerReturnDTO|\BeLenka\Deposco\Model\BadRequestAPIResponse|\BeLenka\Deposco\Model\UnauthorizedAPIResponse|\BeLenka\Deposco\Model\ForbiddenAPIResponse|\BeLenka\Deposco\Model\RateLimitAPIResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomerReturnWithHttpInfo($order_id, string $contentType = self::contentTypes['getCustomerReturn'][0])
    {
        $request = $this->getCustomerReturnRequest($order_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\Deposco\Model\CustomerReturnDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Deposco\Model\CustomerReturnDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Deposco\Model\CustomerReturnDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\BeLenka\Deposco\Model\BadRequestAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Deposco\Model\BadRequestAPIResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Deposco\Model\BadRequestAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\BeLenka\Deposco\Model\UnauthorizedAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Deposco\Model\UnauthorizedAPIResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Deposco\Model\UnauthorizedAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\BeLenka\Deposco\Model\ForbiddenAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Deposco\Model\ForbiddenAPIResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Deposco\Model\ForbiddenAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\BeLenka\Deposco\Model\RateLimitAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Deposco\Model\RateLimitAPIResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Deposco\Model\RateLimitAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BeLenka\Deposco\Model\CustomerReturnDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Deposco\Model\CustomerReturnDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Deposco\Model\BadRequestAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Deposco\Model\UnauthorizedAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Deposco\Model\ForbiddenAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Deposco\Model\RateLimitAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCustomerReturnAsync
     *
     * Get a customer return
     *
     * @param  int $order_id ID of the requested order header. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerReturn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerReturnAsync($order_id, string $contentType = self::contentTypes['getCustomerReturn'][0])
    {
        return $this->getCustomerReturnAsyncWithHttpInfo($order_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCustomerReturnAsyncWithHttpInfo
     *
     * Get a customer return
     *
     * @param  int $order_id ID of the requested order header. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerReturn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerReturnAsyncWithHttpInfo($order_id, string $contentType = self::contentTypes['getCustomerReturn'][0])
    {
        $returnType = '\BeLenka\Deposco\Model\CustomerReturnDTO';
        $request = $this->getCustomerReturnRequest($order_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCustomerReturn'
     *
     * @param  int $order_id ID of the requested order header. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerReturn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCustomerReturnRequest($order_id, string $contentType = self::contentTypes['getCustomerReturn'][0])
    {

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling getCustomerReturn'
            );
        }


        $resourcePath = '/orders/customerReturns/{orderId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCustomerReturnLine
     *
     * Get an order line for a customer return
     *
     * @param  int $order_id ID of the requested order header. (required)
     * @param  int $order_line_id ID of the requested order line. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerReturnLine'] to see the possible values for this operation
     *
     * @throws \BeLenka\Deposco\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \BeLenka\Deposco\Model\CustomerReturnLineDTO|\BeLenka\Deposco\Model\BadRequestAPIResponse|\BeLenka\Deposco\Model\UnauthorizedAPIResponse|\BeLenka\Deposco\Model\ForbiddenAPIResponse|\BeLenka\Deposco\Model\RateLimitAPIResponse
     */
    public function getCustomerReturnLine($order_id, $order_line_id, string $contentType = self::contentTypes['getCustomerReturnLine'][0])
    {
        list($response) = $this->getCustomerReturnLineWithHttpInfo($order_id, $order_line_id, $contentType);
        return $response;
    }

    /**
     * Operation getCustomerReturnLineWithHttpInfo
     *
     * Get an order line for a customer return
     *
     * @param  int $order_id ID of the requested order header. (required)
     * @param  int $order_line_id ID of the requested order line. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerReturnLine'] to see the possible values for this operation
     *
     * @throws \BeLenka\Deposco\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\Deposco\Model\CustomerReturnLineDTO|\BeLenka\Deposco\Model\BadRequestAPIResponse|\BeLenka\Deposco\Model\UnauthorizedAPIResponse|\BeLenka\Deposco\Model\ForbiddenAPIResponse|\BeLenka\Deposco\Model\RateLimitAPIResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomerReturnLineWithHttpInfo($order_id, $order_line_id, string $contentType = self::contentTypes['getCustomerReturnLine'][0])
    {
        $request = $this->getCustomerReturnLineRequest($order_id, $order_line_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\Deposco\Model\CustomerReturnLineDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Deposco\Model\CustomerReturnLineDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Deposco\Model\CustomerReturnLineDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\BeLenka\Deposco\Model\BadRequestAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Deposco\Model\BadRequestAPIResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Deposco\Model\BadRequestAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\BeLenka\Deposco\Model\UnauthorizedAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Deposco\Model\UnauthorizedAPIResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Deposco\Model\UnauthorizedAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\BeLenka\Deposco\Model\ForbiddenAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Deposco\Model\ForbiddenAPIResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Deposco\Model\ForbiddenAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\BeLenka\Deposco\Model\RateLimitAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Deposco\Model\RateLimitAPIResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Deposco\Model\RateLimitAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BeLenka\Deposco\Model\CustomerReturnLineDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Deposco\Model\CustomerReturnLineDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Deposco\Model\BadRequestAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Deposco\Model\UnauthorizedAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Deposco\Model\ForbiddenAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Deposco\Model\RateLimitAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCustomerReturnLineAsync
     *
     * Get an order line for a customer return
     *
     * @param  int $order_id ID of the requested order header. (required)
     * @param  int $order_line_id ID of the requested order line. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerReturnLine'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerReturnLineAsync($order_id, $order_line_id, string $contentType = self::contentTypes['getCustomerReturnLine'][0])
    {
        return $this->getCustomerReturnLineAsyncWithHttpInfo($order_id, $order_line_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCustomerReturnLineAsyncWithHttpInfo
     *
     * Get an order line for a customer return
     *
     * @param  int $order_id ID of the requested order header. (required)
     * @param  int $order_line_id ID of the requested order line. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerReturnLine'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerReturnLineAsyncWithHttpInfo($order_id, $order_line_id, string $contentType = self::contentTypes['getCustomerReturnLine'][0])
    {
        $returnType = '\BeLenka\Deposco\Model\CustomerReturnLineDTO';
        $request = $this->getCustomerReturnLineRequest($order_id, $order_line_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCustomerReturnLine'
     *
     * @param  int $order_id ID of the requested order header. (required)
     * @param  int $order_line_id ID of the requested order line. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerReturnLine'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCustomerReturnLineRequest($order_id, $order_line_id, string $contentType = self::contentTypes['getCustomerReturnLine'][0])
    {

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling getCustomerReturnLine'
            );
        }

        // verify the required parameter 'order_line_id' is set
        if ($order_line_id === null || (is_array($order_line_id) && count($order_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_line_id when calling getCustomerReturnLine'
            );
        }


        $resourcePath = '/orders/customerReturns/{orderId}/orderLines/{orderLineId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }
        // path params
        if ($order_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderLineId' . '}',
                ObjectSerializer::toPathValue($order_line_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCustomerReturnLines
     *
     * Get a list of order lines for a customer returns
     *
     * @param  int $order_id ID of the requested order header. (required)
     * @param  string $search_id ID that is returned in the links section of incomplete search results. Specify the search ID in this parameter to continue retrieving search results. Other search-related parameters are overridden by this parameter. (optional)
     * @param  int $page_size Number of records returned on each page of the search results. The default page size is 25. (optional, default to 25)
     * @param  \DateTime $created_after Search field for finding records created after the specified date and time in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. (optional)
     * @param  \DateTime $updated_after Search field for finding records updated after the specified date and time in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. (optional)
     * @param  string $line_number Line number of the requested order line. (optional)
     * @param  CustomerReturnLineStatusDTOPropertiesOrderLineStatus $order_line_status Status of the requested order line. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerReturnLines'] to see the possible values for this operation
     *
     * @throws \BeLenka\Deposco\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \BeLenka\Deposco\Model\CustomerReturnLineCollectionDTO|\BeLenka\Deposco\Model\BadRequestAPIResponse|\BeLenka\Deposco\Model\UnauthorizedAPIResponse|\BeLenka\Deposco\Model\ForbiddenAPIResponse|\BeLenka\Deposco\Model\RateLimitAPIResponse
     */
    public function getCustomerReturnLines($order_id, $search_id = null, $page_size = 25, $created_after = null, $updated_after = null, $line_number = null, $order_line_status = null, string $contentType = self::contentTypes['getCustomerReturnLines'][0])
    {
        list($response) = $this->getCustomerReturnLinesWithHttpInfo($order_id, $search_id, $page_size, $created_after, $updated_after, $line_number, $order_line_status, $contentType);
        return $response;
    }

    /**
     * Operation getCustomerReturnLinesWithHttpInfo
     *
     * Get a list of order lines for a customer returns
     *
     * @param  int $order_id ID of the requested order header. (required)
     * @param  string $search_id ID that is returned in the links section of incomplete search results. Specify the search ID in this parameter to continue retrieving search results. Other search-related parameters are overridden by this parameter. (optional)
     * @param  int $page_size Number of records returned on each page of the search results. The default page size is 25. (optional, default to 25)
     * @param  \DateTime $created_after Search field for finding records created after the specified date and time in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. (optional)
     * @param  \DateTime $updated_after Search field for finding records updated after the specified date and time in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. (optional)
     * @param  string $line_number Line number of the requested order line. (optional)
     * @param  CustomerReturnLineStatusDTOPropertiesOrderLineStatus $order_line_status Status of the requested order line. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerReturnLines'] to see the possible values for this operation
     *
     * @throws \BeLenka\Deposco\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\Deposco\Model\CustomerReturnLineCollectionDTO|\BeLenka\Deposco\Model\BadRequestAPIResponse|\BeLenka\Deposco\Model\UnauthorizedAPIResponse|\BeLenka\Deposco\Model\ForbiddenAPIResponse|\BeLenka\Deposco\Model\RateLimitAPIResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomerReturnLinesWithHttpInfo($order_id, $search_id = null, $page_size = 25, $created_after = null, $updated_after = null, $line_number = null, $order_line_status = null, string $contentType = self::contentTypes['getCustomerReturnLines'][0])
    {
        $request = $this->getCustomerReturnLinesRequest($order_id, $search_id, $page_size, $created_after, $updated_after, $line_number, $order_line_status, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\Deposco\Model\CustomerReturnLineCollectionDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Deposco\Model\CustomerReturnLineCollectionDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Deposco\Model\CustomerReturnLineCollectionDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\BeLenka\Deposco\Model\BadRequestAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Deposco\Model\BadRequestAPIResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Deposco\Model\BadRequestAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\BeLenka\Deposco\Model\UnauthorizedAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Deposco\Model\UnauthorizedAPIResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Deposco\Model\UnauthorizedAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\BeLenka\Deposco\Model\ForbiddenAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Deposco\Model\ForbiddenAPIResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Deposco\Model\ForbiddenAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\BeLenka\Deposco\Model\RateLimitAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Deposco\Model\RateLimitAPIResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Deposco\Model\RateLimitAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BeLenka\Deposco\Model\CustomerReturnLineCollectionDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Deposco\Model\CustomerReturnLineCollectionDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Deposco\Model\BadRequestAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Deposco\Model\UnauthorizedAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Deposco\Model\ForbiddenAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Deposco\Model\RateLimitAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCustomerReturnLinesAsync
     *
     * Get a list of order lines for a customer returns
     *
     * @param  int $order_id ID of the requested order header. (required)
     * @param  string $search_id ID that is returned in the links section of incomplete search results. Specify the search ID in this parameter to continue retrieving search results. Other search-related parameters are overridden by this parameter. (optional)
     * @param  int $page_size Number of records returned on each page of the search results. The default page size is 25. (optional, default to 25)
     * @param  \DateTime $created_after Search field for finding records created after the specified date and time in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. (optional)
     * @param  \DateTime $updated_after Search field for finding records updated after the specified date and time in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. (optional)
     * @param  string $line_number Line number of the requested order line. (optional)
     * @param  CustomerReturnLineStatusDTOPropertiesOrderLineStatus $order_line_status Status of the requested order line. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerReturnLines'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerReturnLinesAsync($order_id, $search_id = null, $page_size = 25, $created_after = null, $updated_after = null, $line_number = null, $order_line_status = null, string $contentType = self::contentTypes['getCustomerReturnLines'][0])
    {
        return $this->getCustomerReturnLinesAsyncWithHttpInfo($order_id, $search_id, $page_size, $created_after, $updated_after, $line_number, $order_line_status, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCustomerReturnLinesAsyncWithHttpInfo
     *
     * Get a list of order lines for a customer returns
     *
     * @param  int $order_id ID of the requested order header. (required)
     * @param  string $search_id ID that is returned in the links section of incomplete search results. Specify the search ID in this parameter to continue retrieving search results. Other search-related parameters are overridden by this parameter. (optional)
     * @param  int $page_size Number of records returned on each page of the search results. The default page size is 25. (optional, default to 25)
     * @param  \DateTime $created_after Search field for finding records created after the specified date and time in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. (optional)
     * @param  \DateTime $updated_after Search field for finding records updated after the specified date and time in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. (optional)
     * @param  string $line_number Line number of the requested order line. (optional)
     * @param  CustomerReturnLineStatusDTOPropertiesOrderLineStatus $order_line_status Status of the requested order line. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerReturnLines'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerReturnLinesAsyncWithHttpInfo($order_id, $search_id = null, $page_size = 25, $created_after = null, $updated_after = null, $line_number = null, $order_line_status = null, string $contentType = self::contentTypes['getCustomerReturnLines'][0])
    {
        $returnType = '\BeLenka\Deposco\Model\CustomerReturnLineCollectionDTO';
        $request = $this->getCustomerReturnLinesRequest($order_id, $search_id, $page_size, $created_after, $updated_after, $line_number, $order_line_status, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCustomerReturnLines'
     *
     * @param  int $order_id ID of the requested order header. (required)
     * @param  string $search_id ID that is returned in the links section of incomplete search results. Specify the search ID in this parameter to continue retrieving search results. Other search-related parameters are overridden by this parameter. (optional)
     * @param  int $page_size Number of records returned on each page of the search results. The default page size is 25. (optional, default to 25)
     * @param  \DateTime $created_after Search field for finding records created after the specified date and time in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. (optional)
     * @param  \DateTime $updated_after Search field for finding records updated after the specified date and time in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. (optional)
     * @param  string $line_number Line number of the requested order line. (optional)
     * @param  CustomerReturnLineStatusDTOPropertiesOrderLineStatus $order_line_status Status of the requested order line. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerReturnLines'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCustomerReturnLinesRequest($order_id, $search_id = null, $page_size = 25, $created_after = null, $updated_after = null, $line_number = null, $order_line_status = null, string $contentType = self::contentTypes['getCustomerReturnLines'][0])
    {

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling getCustomerReturnLines'
            );
        }


        if ($page_size !== null && $page_size > 50) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling CustomerReturnsApi.getCustomerReturnLines, must be smaller than or equal to 50.');
        }
        if ($page_size !== null && $page_size < 1) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling CustomerReturnsApi.getCustomerReturnLines, must be bigger than or equal to 1.');
        }
        





        $resourcePath = '/orders/customerReturns/{orderId}/orderLines';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search_id,
            'searchId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_after,
            'createdAfter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $updated_after,
            'updatedAfter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $line_number,
            'lineNumber', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_line_status,
            'orderLineStatus', // param base name
            'CustomerReturnLineStatusDTOPropertiesOrderLineStatus', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCustomerReturnOrderStatus
     *
     * Get the status of a customer return
     *
     * @param  int $order_id ID of the requested order header. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerReturnOrderStatus'] to see the possible values for this operation
     *
     * @throws \BeLenka\Deposco\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \BeLenka\Deposco\Model\CustomerReturnStatusDTO|\BeLenka\Deposco\Model\BadRequestAPIResponse|\BeLenka\Deposco\Model\UnauthorizedAPIResponse|\BeLenka\Deposco\Model\ForbiddenAPIResponse|\BeLenka\Deposco\Model\RateLimitAPIResponse
     */
    public function getCustomerReturnOrderStatus($order_id, string $contentType = self::contentTypes['getCustomerReturnOrderStatus'][0])
    {
        list($response) = $this->getCustomerReturnOrderStatusWithHttpInfo($order_id, $contentType);
        return $response;
    }

    /**
     * Operation getCustomerReturnOrderStatusWithHttpInfo
     *
     * Get the status of a customer return
     *
     * @param  int $order_id ID of the requested order header. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerReturnOrderStatus'] to see the possible values for this operation
     *
     * @throws \BeLenka\Deposco\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\Deposco\Model\CustomerReturnStatusDTO|\BeLenka\Deposco\Model\BadRequestAPIResponse|\BeLenka\Deposco\Model\UnauthorizedAPIResponse|\BeLenka\Deposco\Model\ForbiddenAPIResponse|\BeLenka\Deposco\Model\RateLimitAPIResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomerReturnOrderStatusWithHttpInfo($order_id, string $contentType = self::contentTypes['getCustomerReturnOrderStatus'][0])
    {
        $request = $this->getCustomerReturnOrderStatusRequest($order_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\Deposco\Model\CustomerReturnStatusDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Deposco\Model\CustomerReturnStatusDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Deposco\Model\CustomerReturnStatusDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\BeLenka\Deposco\Model\BadRequestAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Deposco\Model\BadRequestAPIResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Deposco\Model\BadRequestAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\BeLenka\Deposco\Model\UnauthorizedAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Deposco\Model\UnauthorizedAPIResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Deposco\Model\UnauthorizedAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\BeLenka\Deposco\Model\ForbiddenAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Deposco\Model\ForbiddenAPIResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Deposco\Model\ForbiddenAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\BeLenka\Deposco\Model\RateLimitAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Deposco\Model\RateLimitAPIResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Deposco\Model\RateLimitAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BeLenka\Deposco\Model\CustomerReturnStatusDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Deposco\Model\CustomerReturnStatusDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Deposco\Model\BadRequestAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Deposco\Model\UnauthorizedAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Deposco\Model\ForbiddenAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Deposco\Model\RateLimitAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCustomerReturnOrderStatusAsync
     *
     * Get the status of a customer return
     *
     * @param  int $order_id ID of the requested order header. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerReturnOrderStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerReturnOrderStatusAsync($order_id, string $contentType = self::contentTypes['getCustomerReturnOrderStatus'][0])
    {
        return $this->getCustomerReturnOrderStatusAsyncWithHttpInfo($order_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCustomerReturnOrderStatusAsyncWithHttpInfo
     *
     * Get the status of a customer return
     *
     * @param  int $order_id ID of the requested order header. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerReturnOrderStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerReturnOrderStatusAsyncWithHttpInfo($order_id, string $contentType = self::contentTypes['getCustomerReturnOrderStatus'][0])
    {
        $returnType = '\BeLenka\Deposco\Model\CustomerReturnStatusDTO';
        $request = $this->getCustomerReturnOrderStatusRequest($order_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCustomerReturnOrderStatus'
     *
     * @param  int $order_id ID of the requested order header. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerReturnOrderStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCustomerReturnOrderStatusRequest($order_id, string $contentType = self::contentTypes['getCustomerReturnOrderStatus'][0])
    {

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling getCustomerReturnOrderStatus'
            );
        }


        $resourcePath = '/orders/customerReturns/{orderId}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCustomerReturns
     *
     * Get a list of customer returns
     *
     * @param  string $business_unit Code for the company (business unit) to which the resource is assigned. Optional if the application is restricted to one company. (optional)
     * @param  \DateTime $created_after Search field for finding records created after the specified date and time in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. (optional)
     * @param  \DateTime $updated_after Search field for finding records updated after the specified date and time in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. (optional)
     * @param  string $search_id ID that is returned in the links section of incomplete search results. Specify the search ID in this parameter to continue retrieving search results. Other search-related parameters are overridden by this parameter. (optional)
     * @param  int $page_size Number of records returned on each page of the search results. The default page size is 25. (optional, default to 25)
     * @param  string $number Order number of the requested order. (optional)
     * @param  CustomerReturnStatusDTO $order_status Status of the requested order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerReturns'] to see the possible values for this operation
     *
     * @throws \BeLenka\Deposco\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \BeLenka\Deposco\Model\CustomerReturnCollectionDTO|\BeLenka\Deposco\Model\BadRequestAPIResponse|\BeLenka\Deposco\Model\UnauthorizedAPIResponse|\BeLenka\Deposco\Model\ForbiddenAPIResponse|\BeLenka\Deposco\Model\RateLimitAPIResponse
     */
    public function getCustomerReturns($business_unit = null, $created_after = null, $updated_after = null, $search_id = null, $page_size = 25, $number = null, $order_status = null, string $contentType = self::contentTypes['getCustomerReturns'][0])
    {
        list($response) = $this->getCustomerReturnsWithHttpInfo($business_unit, $created_after, $updated_after, $search_id, $page_size, $number, $order_status, $contentType);
        return $response;
    }

    /**
     * Operation getCustomerReturnsWithHttpInfo
     *
     * Get a list of customer returns
     *
     * @param  string $business_unit Code for the company (business unit) to which the resource is assigned. Optional if the application is restricted to one company. (optional)
     * @param  \DateTime $created_after Search field for finding records created after the specified date and time in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. (optional)
     * @param  \DateTime $updated_after Search field for finding records updated after the specified date and time in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. (optional)
     * @param  string $search_id ID that is returned in the links section of incomplete search results. Specify the search ID in this parameter to continue retrieving search results. Other search-related parameters are overridden by this parameter. (optional)
     * @param  int $page_size Number of records returned on each page of the search results. The default page size is 25. (optional, default to 25)
     * @param  string $number Order number of the requested order. (optional)
     * @param  CustomerReturnStatusDTO $order_status Status of the requested order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerReturns'] to see the possible values for this operation
     *
     * @throws \BeLenka\Deposco\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\Deposco\Model\CustomerReturnCollectionDTO|\BeLenka\Deposco\Model\BadRequestAPIResponse|\BeLenka\Deposco\Model\UnauthorizedAPIResponse|\BeLenka\Deposco\Model\ForbiddenAPIResponse|\BeLenka\Deposco\Model\RateLimitAPIResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomerReturnsWithHttpInfo($business_unit = null, $created_after = null, $updated_after = null, $search_id = null, $page_size = 25, $number = null, $order_status = null, string $contentType = self::contentTypes['getCustomerReturns'][0])
    {
        $request = $this->getCustomerReturnsRequest($business_unit, $created_after, $updated_after, $search_id, $page_size, $number, $order_status, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\Deposco\Model\CustomerReturnCollectionDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Deposco\Model\CustomerReturnCollectionDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Deposco\Model\CustomerReturnCollectionDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\BeLenka\Deposco\Model\BadRequestAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Deposco\Model\BadRequestAPIResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Deposco\Model\BadRequestAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\BeLenka\Deposco\Model\UnauthorizedAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Deposco\Model\UnauthorizedAPIResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Deposco\Model\UnauthorizedAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\BeLenka\Deposco\Model\ForbiddenAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Deposco\Model\ForbiddenAPIResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Deposco\Model\ForbiddenAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\BeLenka\Deposco\Model\RateLimitAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Deposco\Model\RateLimitAPIResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Deposco\Model\RateLimitAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BeLenka\Deposco\Model\CustomerReturnCollectionDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Deposco\Model\CustomerReturnCollectionDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Deposco\Model\BadRequestAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Deposco\Model\UnauthorizedAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Deposco\Model\ForbiddenAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Deposco\Model\RateLimitAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCustomerReturnsAsync
     *
     * Get a list of customer returns
     *
     * @param  string $business_unit Code for the company (business unit) to which the resource is assigned. Optional if the application is restricted to one company. (optional)
     * @param  \DateTime $created_after Search field for finding records created after the specified date and time in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. (optional)
     * @param  \DateTime $updated_after Search field for finding records updated after the specified date and time in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. (optional)
     * @param  string $search_id ID that is returned in the links section of incomplete search results. Specify the search ID in this parameter to continue retrieving search results. Other search-related parameters are overridden by this parameter. (optional)
     * @param  int $page_size Number of records returned on each page of the search results. The default page size is 25. (optional, default to 25)
     * @param  string $number Order number of the requested order. (optional)
     * @param  CustomerReturnStatusDTO $order_status Status of the requested order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerReturns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerReturnsAsync($business_unit = null, $created_after = null, $updated_after = null, $search_id = null, $page_size = 25, $number = null, $order_status = null, string $contentType = self::contentTypes['getCustomerReturns'][0])
    {
        return $this->getCustomerReturnsAsyncWithHttpInfo($business_unit, $created_after, $updated_after, $search_id, $page_size, $number, $order_status, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCustomerReturnsAsyncWithHttpInfo
     *
     * Get a list of customer returns
     *
     * @param  string $business_unit Code for the company (business unit) to which the resource is assigned. Optional if the application is restricted to one company. (optional)
     * @param  \DateTime $created_after Search field for finding records created after the specified date and time in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. (optional)
     * @param  \DateTime $updated_after Search field for finding records updated after the specified date and time in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. (optional)
     * @param  string $search_id ID that is returned in the links section of incomplete search results. Specify the search ID in this parameter to continue retrieving search results. Other search-related parameters are overridden by this parameter. (optional)
     * @param  int $page_size Number of records returned on each page of the search results. The default page size is 25. (optional, default to 25)
     * @param  string $number Order number of the requested order. (optional)
     * @param  CustomerReturnStatusDTO $order_status Status of the requested order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerReturns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerReturnsAsyncWithHttpInfo($business_unit = null, $created_after = null, $updated_after = null, $search_id = null, $page_size = 25, $number = null, $order_status = null, string $contentType = self::contentTypes['getCustomerReturns'][0])
    {
        $returnType = '\BeLenka\Deposco\Model\CustomerReturnCollectionDTO';
        $request = $this->getCustomerReturnsRequest($business_unit, $created_after, $updated_after, $search_id, $page_size, $number, $order_status, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCustomerReturns'
     *
     * @param  string $business_unit Code for the company (business unit) to which the resource is assigned. Optional if the application is restricted to one company. (optional)
     * @param  \DateTime $created_after Search field for finding records created after the specified date and time in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. (optional)
     * @param  \DateTime $updated_after Search field for finding records updated after the specified date and time in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. (optional)
     * @param  string $search_id ID that is returned in the links section of incomplete search results. Specify the search ID in this parameter to continue retrieving search results. Other search-related parameters are overridden by this parameter. (optional)
     * @param  int $page_size Number of records returned on each page of the search results. The default page size is 25. (optional, default to 25)
     * @param  string $number Order number of the requested order. (optional)
     * @param  CustomerReturnStatusDTO $order_status Status of the requested order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerReturns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCustomerReturnsRequest($business_unit = null, $created_after = null, $updated_after = null, $search_id = null, $page_size = 25, $number = null, $order_status = null, string $contentType = self::contentTypes['getCustomerReturns'][0])
    {





        if ($page_size !== null && $page_size > 50) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling CustomerReturnsApi.getCustomerReturns, must be smaller than or equal to 50.');
        }
        if ($page_size !== null && $page_size < 1) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling CustomerReturnsApi.getCustomerReturns, must be bigger than or equal to 1.');
        }
        



        $resourcePath = '/orders/customerReturns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $business_unit,
            'businessUnit', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_after,
            'createdAfter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $updated_after,
            'updatedAfter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search_id,
            'searchId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number,
            'number', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_status,
            'orderStatus', // param base name
            'object', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postCustomerReturnOrderStatus
     *
     * Updates the status of a customer return
     *
     * @param  int $order_id ID of the requested order header. (required)
     * @param  string $value Status to which the requested purchase order should be updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCustomerReturnOrderStatus'] to see the possible values for this operation
     *
     * @throws \BeLenka\Deposco\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \BeLenka\Deposco\Model\CustomerReturnDTO|\BeLenka\Deposco\Model\BadRequestAPIResponse|\BeLenka\Deposco\Model\UnauthorizedAPIResponse|\BeLenka\Deposco\Model\ForbiddenAPIResponse|\BeLenka\Deposco\Model\RateLimitAPIResponse
     */
    public function postCustomerReturnOrderStatus($order_id, $value, string $contentType = self::contentTypes['postCustomerReturnOrderStatus'][0])
    {
        list($response) = $this->postCustomerReturnOrderStatusWithHttpInfo($order_id, $value, $contentType);
        return $response;
    }

    /**
     * Operation postCustomerReturnOrderStatusWithHttpInfo
     *
     * Updates the status of a customer return
     *
     * @param  int $order_id ID of the requested order header. (required)
     * @param  string $value Status to which the requested purchase order should be updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCustomerReturnOrderStatus'] to see the possible values for this operation
     *
     * @throws \BeLenka\Deposco\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\Deposco\Model\CustomerReturnDTO|\BeLenka\Deposco\Model\BadRequestAPIResponse|\BeLenka\Deposco\Model\UnauthorizedAPIResponse|\BeLenka\Deposco\Model\ForbiddenAPIResponse|\BeLenka\Deposco\Model\RateLimitAPIResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postCustomerReturnOrderStatusWithHttpInfo($order_id, $value, string $contentType = self::contentTypes['postCustomerReturnOrderStatus'][0])
    {
        $request = $this->postCustomerReturnOrderStatusRequest($order_id, $value, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\Deposco\Model\CustomerReturnDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Deposco\Model\CustomerReturnDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Deposco\Model\CustomerReturnDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\BeLenka\Deposco\Model\BadRequestAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Deposco\Model\BadRequestAPIResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Deposco\Model\BadRequestAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\BeLenka\Deposco\Model\UnauthorizedAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Deposco\Model\UnauthorizedAPIResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Deposco\Model\UnauthorizedAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\BeLenka\Deposco\Model\ForbiddenAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Deposco\Model\ForbiddenAPIResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Deposco\Model\ForbiddenAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\BeLenka\Deposco\Model\RateLimitAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Deposco\Model\RateLimitAPIResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Deposco\Model\RateLimitAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BeLenka\Deposco\Model\CustomerReturnDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Deposco\Model\CustomerReturnDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Deposco\Model\BadRequestAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Deposco\Model\UnauthorizedAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Deposco\Model\ForbiddenAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Deposco\Model\RateLimitAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postCustomerReturnOrderStatusAsync
     *
     * Updates the status of a customer return
     *
     * @param  int $order_id ID of the requested order header. (required)
     * @param  string $value Status to which the requested purchase order should be updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCustomerReturnOrderStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCustomerReturnOrderStatusAsync($order_id, $value, string $contentType = self::contentTypes['postCustomerReturnOrderStatus'][0])
    {
        return $this->postCustomerReturnOrderStatusAsyncWithHttpInfo($order_id, $value, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postCustomerReturnOrderStatusAsyncWithHttpInfo
     *
     * Updates the status of a customer return
     *
     * @param  int $order_id ID of the requested order header. (required)
     * @param  string $value Status to which the requested purchase order should be updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCustomerReturnOrderStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCustomerReturnOrderStatusAsyncWithHttpInfo($order_id, $value, string $contentType = self::contentTypes['postCustomerReturnOrderStatus'][0])
    {
        $returnType = '\BeLenka\Deposco\Model\CustomerReturnDTO';
        $request = $this->postCustomerReturnOrderStatusRequest($order_id, $value, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postCustomerReturnOrderStatus'
     *
     * @param  int $order_id ID of the requested order header. (required)
     * @param  string $value Status to which the requested purchase order should be updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCustomerReturnOrderStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postCustomerReturnOrderStatusRequest($order_id, $value, string $contentType = self::contentTypes['postCustomerReturnOrderStatus'][0])
    {

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling postCustomerReturnOrderStatus'
            );
        }

        // verify the required parameter 'value' is set
        if ($value === null || (is_array($value) && count($value) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $value when calling postCustomerReturnOrderStatus'
            );
        }


        $resourcePath = '/orders/customerReturns/{orderId}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $value,
            'value', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postCustomerReturns
     *
     * Create or update a customer return
     *
     * @param  \BeLenka\Deposco\Model\CustomerReturnDTO $customer_return_dto customer_return_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCustomerReturns'] to see the possible values for this operation
     *
     * @throws \BeLenka\Deposco\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \BeLenka\Deposco\Model\CustomerReturnDTO|\BeLenka\Deposco\Model\CustomerReturnDTO|\BeLenka\Deposco\Model\BadRequestAPIResponse|\BeLenka\Deposco\Model\UnauthorizedAPIResponse|\BeLenka\Deposco\Model\ForbiddenAPIResponse|\BeLenka\Deposco\Model\RateLimitAPIResponse
     */
    public function postCustomerReturns($customer_return_dto, string $contentType = self::contentTypes['postCustomerReturns'][0])
    {
        list($response) = $this->postCustomerReturnsWithHttpInfo($customer_return_dto, $contentType);
        return $response;
    }

    /**
     * Operation postCustomerReturnsWithHttpInfo
     *
     * Create or update a customer return
     *
     * @param  \BeLenka\Deposco\Model\CustomerReturnDTO $customer_return_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCustomerReturns'] to see the possible values for this operation
     *
     * @throws \BeLenka\Deposco\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\Deposco\Model\CustomerReturnDTO|\BeLenka\Deposco\Model\CustomerReturnDTO|\BeLenka\Deposco\Model\BadRequestAPIResponse|\BeLenka\Deposco\Model\UnauthorizedAPIResponse|\BeLenka\Deposco\Model\ForbiddenAPIResponse|\BeLenka\Deposco\Model\RateLimitAPIResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postCustomerReturnsWithHttpInfo($customer_return_dto, string $contentType = self::contentTypes['postCustomerReturns'][0])
    {
        $request = $this->postCustomerReturnsRequest($customer_return_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\Deposco\Model\CustomerReturnDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Deposco\Model\CustomerReturnDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Deposco\Model\CustomerReturnDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\BeLenka\Deposco\Model\CustomerReturnDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Deposco\Model\CustomerReturnDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Deposco\Model\CustomerReturnDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\BeLenka\Deposco\Model\BadRequestAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Deposco\Model\BadRequestAPIResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Deposco\Model\BadRequestAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\BeLenka\Deposco\Model\UnauthorizedAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Deposco\Model\UnauthorizedAPIResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Deposco\Model\UnauthorizedAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\BeLenka\Deposco\Model\ForbiddenAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Deposco\Model\ForbiddenAPIResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Deposco\Model\ForbiddenAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\BeLenka\Deposco\Model\RateLimitAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Deposco\Model\RateLimitAPIResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Deposco\Model\RateLimitAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BeLenka\Deposco\Model\CustomerReturnDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Deposco\Model\CustomerReturnDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Deposco\Model\CustomerReturnDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Deposco\Model\BadRequestAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Deposco\Model\UnauthorizedAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Deposco\Model\ForbiddenAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Deposco\Model\RateLimitAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postCustomerReturnsAsync
     *
     * Create or update a customer return
     *
     * @param  \BeLenka\Deposco\Model\CustomerReturnDTO $customer_return_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCustomerReturns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCustomerReturnsAsync($customer_return_dto, string $contentType = self::contentTypes['postCustomerReturns'][0])
    {
        return $this->postCustomerReturnsAsyncWithHttpInfo($customer_return_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postCustomerReturnsAsyncWithHttpInfo
     *
     * Create or update a customer return
     *
     * @param  \BeLenka\Deposco\Model\CustomerReturnDTO $customer_return_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCustomerReturns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCustomerReturnsAsyncWithHttpInfo($customer_return_dto, string $contentType = self::contentTypes['postCustomerReturns'][0])
    {
        $returnType = '\BeLenka\Deposco\Model\CustomerReturnDTO';
        $request = $this->postCustomerReturnsRequest($customer_return_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postCustomerReturns'
     *
     * @param  \BeLenka\Deposco\Model\CustomerReturnDTO $customer_return_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCustomerReturns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postCustomerReturnsRequest($customer_return_dto, string $contentType = self::contentTypes['postCustomerReturns'][0])
    {

        // verify the required parameter 'customer_return_dto' is set
        if ($customer_return_dto === null || (is_array($customer_return_dto) && count($customer_return_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_return_dto when calling postCustomerReturns'
            );
        }


        $resourcePath = '/orders/customerReturns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($customer_return_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($customer_return_dto));
            } else {
                $httpBody = $customer_return_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postCustomerReturnsCancellation
     *
     * Cancel all or part of an customer return
     *
     * @param  int $order_id ID of the requested order header. (required)
     * @param  \BeLenka\Deposco\Model\OrderCancellationDTO $order_cancellation_dto order_cancellation_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCustomerReturnsCancellation'] to see the possible values for this operation
     *
     * @throws \BeLenka\Deposco\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \BeLenka\Deposco\Model\CustomerReturnDTO|\BeLenka\Deposco\Model\BadRequestAPIResponse|\BeLenka\Deposco\Model\UnauthorizedAPIResponse|\BeLenka\Deposco\Model\ForbiddenAPIResponse|\BeLenka\Deposco\Model\RateLimitAPIResponse
     */
    public function postCustomerReturnsCancellation($order_id, $order_cancellation_dto = null, string $contentType = self::contentTypes['postCustomerReturnsCancellation'][0])
    {
        list($response) = $this->postCustomerReturnsCancellationWithHttpInfo($order_id, $order_cancellation_dto, $contentType);
        return $response;
    }

    /**
     * Operation postCustomerReturnsCancellationWithHttpInfo
     *
     * Cancel all or part of an customer return
     *
     * @param  int $order_id ID of the requested order header. (required)
     * @param  \BeLenka\Deposco\Model\OrderCancellationDTO $order_cancellation_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCustomerReturnsCancellation'] to see the possible values for this operation
     *
     * @throws \BeLenka\Deposco\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\Deposco\Model\CustomerReturnDTO|\BeLenka\Deposco\Model\BadRequestAPIResponse|\BeLenka\Deposco\Model\UnauthorizedAPIResponse|\BeLenka\Deposco\Model\ForbiddenAPIResponse|\BeLenka\Deposco\Model\RateLimitAPIResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postCustomerReturnsCancellationWithHttpInfo($order_id, $order_cancellation_dto = null, string $contentType = self::contentTypes['postCustomerReturnsCancellation'][0])
    {
        $request = $this->postCustomerReturnsCancellationRequest($order_id, $order_cancellation_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\Deposco\Model\CustomerReturnDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Deposco\Model\CustomerReturnDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Deposco\Model\CustomerReturnDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\BeLenka\Deposco\Model\BadRequestAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Deposco\Model\BadRequestAPIResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Deposco\Model\BadRequestAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\BeLenka\Deposco\Model\UnauthorizedAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Deposco\Model\UnauthorizedAPIResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Deposco\Model\UnauthorizedAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\BeLenka\Deposco\Model\ForbiddenAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Deposco\Model\ForbiddenAPIResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Deposco\Model\ForbiddenAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\BeLenka\Deposco\Model\RateLimitAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Deposco\Model\RateLimitAPIResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Deposco\Model\RateLimitAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BeLenka\Deposco\Model\CustomerReturnDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Deposco\Model\CustomerReturnDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Deposco\Model\BadRequestAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Deposco\Model\UnauthorizedAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Deposco\Model\ForbiddenAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Deposco\Model\RateLimitAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postCustomerReturnsCancellationAsync
     *
     * Cancel all or part of an customer return
     *
     * @param  int $order_id ID of the requested order header. (required)
     * @param  \BeLenka\Deposco\Model\OrderCancellationDTO $order_cancellation_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCustomerReturnsCancellation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCustomerReturnsCancellationAsync($order_id, $order_cancellation_dto = null, string $contentType = self::contentTypes['postCustomerReturnsCancellation'][0])
    {
        return $this->postCustomerReturnsCancellationAsyncWithHttpInfo($order_id, $order_cancellation_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postCustomerReturnsCancellationAsyncWithHttpInfo
     *
     * Cancel all or part of an customer return
     *
     * @param  int $order_id ID of the requested order header. (required)
     * @param  \BeLenka\Deposco\Model\OrderCancellationDTO $order_cancellation_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCustomerReturnsCancellation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCustomerReturnsCancellationAsyncWithHttpInfo($order_id, $order_cancellation_dto = null, string $contentType = self::contentTypes['postCustomerReturnsCancellation'][0])
    {
        $returnType = '\BeLenka\Deposco\Model\CustomerReturnDTO';
        $request = $this->postCustomerReturnsCancellationRequest($order_id, $order_cancellation_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postCustomerReturnsCancellation'
     *
     * @param  int $order_id ID of the requested order header. (required)
     * @param  \BeLenka\Deposco\Model\OrderCancellationDTO $order_cancellation_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCustomerReturnsCancellation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postCustomerReturnsCancellationRequest($order_id, $order_cancellation_dto = null, string $contentType = self::contentTypes['postCustomerReturnsCancellation'][0])
    {

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling postCustomerReturnsCancellation'
            );
        }



        $resourcePath = '/orders/customerReturns/{orderId}/cancellations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($order_cancellation_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($order_cancellation_dto));
            } else {
                $httpBody = $order_cancellation_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCustomerReturnLine
     *
     * Update an order line for a customer return
     *
     * @param  int $order_id ID of the requested order header. (required)
     * @param  int $order_line_id ID of the requested order line. (required)
     * @param  \BeLenka\Deposco\Model\CustomerReturnLineDTO $customer_return_line_dto customer_return_line_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCustomerReturnLine'] to see the possible values for this operation
     *
     * @throws \BeLenka\Deposco\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \BeLenka\Deposco\Model\CustomerReturnLineDTO|\BeLenka\Deposco\Model\BadRequestAPIResponse|\BeLenka\Deposco\Model\UnauthorizedAPIResponse|\BeLenka\Deposco\Model\ForbiddenAPIResponse|\BeLenka\Deposco\Model\RateLimitAPIResponse|\BeLenka\Deposco\Model\GetItemsDefaultResponse
     */
    public function updateCustomerReturnLine($order_id, $order_line_id, $customer_return_line_dto, string $contentType = self::contentTypes['updateCustomerReturnLine'][0])
    {
        list($response) = $this->updateCustomerReturnLineWithHttpInfo($order_id, $order_line_id, $customer_return_line_dto, $contentType);
        return $response;
    }

    /**
     * Operation updateCustomerReturnLineWithHttpInfo
     *
     * Update an order line for a customer return
     *
     * @param  int $order_id ID of the requested order header. (required)
     * @param  int $order_line_id ID of the requested order line. (required)
     * @param  \BeLenka\Deposco\Model\CustomerReturnLineDTO $customer_return_line_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCustomerReturnLine'] to see the possible values for this operation
     *
     * @throws \BeLenka\Deposco\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\Deposco\Model\CustomerReturnLineDTO|\BeLenka\Deposco\Model\BadRequestAPIResponse|\BeLenka\Deposco\Model\UnauthorizedAPIResponse|\BeLenka\Deposco\Model\ForbiddenAPIResponse|\BeLenka\Deposco\Model\RateLimitAPIResponse|\BeLenka\Deposco\Model\GetItemsDefaultResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCustomerReturnLineWithHttpInfo($order_id, $order_line_id, $customer_return_line_dto, string $contentType = self::contentTypes['updateCustomerReturnLine'][0])
    {
        $request = $this->updateCustomerReturnLineRequest($order_id, $order_line_id, $customer_return_line_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\Deposco\Model\CustomerReturnLineDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Deposco\Model\CustomerReturnLineDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Deposco\Model\CustomerReturnLineDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\BeLenka\Deposco\Model\BadRequestAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Deposco\Model\BadRequestAPIResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Deposco\Model\BadRequestAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\BeLenka\Deposco\Model\UnauthorizedAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Deposco\Model\UnauthorizedAPIResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Deposco\Model\UnauthorizedAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\BeLenka\Deposco\Model\ForbiddenAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Deposco\Model\ForbiddenAPIResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Deposco\Model\ForbiddenAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\BeLenka\Deposco\Model\RateLimitAPIResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Deposco\Model\RateLimitAPIResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Deposco\Model\RateLimitAPIResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\BeLenka\Deposco\Model\GetItemsDefaultResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Deposco\Model\GetItemsDefaultResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Deposco\Model\GetItemsDefaultResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BeLenka\Deposco\Model\CustomerReturnLineDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Deposco\Model\CustomerReturnLineDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Deposco\Model\BadRequestAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Deposco\Model\UnauthorizedAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Deposco\Model\ForbiddenAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Deposco\Model\RateLimitAPIResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Deposco\Model\GetItemsDefaultResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCustomerReturnLineAsync
     *
     * Update an order line for a customer return
     *
     * @param  int $order_id ID of the requested order header. (required)
     * @param  int $order_line_id ID of the requested order line. (required)
     * @param  \BeLenka\Deposco\Model\CustomerReturnLineDTO $customer_return_line_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCustomerReturnLine'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCustomerReturnLineAsync($order_id, $order_line_id, $customer_return_line_dto, string $contentType = self::contentTypes['updateCustomerReturnLine'][0])
    {
        return $this->updateCustomerReturnLineAsyncWithHttpInfo($order_id, $order_line_id, $customer_return_line_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCustomerReturnLineAsyncWithHttpInfo
     *
     * Update an order line for a customer return
     *
     * @param  int $order_id ID of the requested order header. (required)
     * @param  int $order_line_id ID of the requested order line. (required)
     * @param  \BeLenka\Deposco\Model\CustomerReturnLineDTO $customer_return_line_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCustomerReturnLine'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCustomerReturnLineAsyncWithHttpInfo($order_id, $order_line_id, $customer_return_line_dto, string $contentType = self::contentTypes['updateCustomerReturnLine'][0])
    {
        $returnType = '\BeLenka\Deposco\Model\CustomerReturnLineDTO';
        $request = $this->updateCustomerReturnLineRequest($order_id, $order_line_id, $customer_return_line_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCustomerReturnLine'
     *
     * @param  int $order_id ID of the requested order header. (required)
     * @param  int $order_line_id ID of the requested order line. (required)
     * @param  \BeLenka\Deposco\Model\CustomerReturnLineDTO $customer_return_line_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCustomerReturnLine'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCustomerReturnLineRequest($order_id, $order_line_id, $customer_return_line_dto, string $contentType = self::contentTypes['updateCustomerReturnLine'][0])
    {

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling updateCustomerReturnLine'
            );
        }

        // verify the required parameter 'order_line_id' is set
        if ($order_line_id === null || (is_array($order_line_id) && count($order_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_line_id when calling updateCustomerReturnLine'
            );
        }

        // verify the required parameter 'customer_return_line_dto' is set
        if ($customer_return_line_dto === null || (is_array($customer_return_line_dto) && count($customer_return_line_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_return_line_dto when calling updateCustomerReturnLine'
            );
        }


        $resourcePath = '/orders/customerReturns/{orderId}/orderLines/{orderLineId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }
        // path params
        if ($order_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderLineId' . '}',
                ObjectSerializer::toPathValue($order_line_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($customer_return_line_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($customer_return_line_dto));
            } else {
                $httpBody = $customer_return_line_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
