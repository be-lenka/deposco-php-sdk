<?php
/**
 * CustomerOrderChargeAllowanceDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deposco API
 *
 * Welcome to the Deposco API Reference! The Deposco API enables you to integrate your system with Deposco.  * Integrate a product information system (PIM) by creating and retrieving data for items, packs, UPCs, and kits. * Set up warehouse data by creating facilities, zones, locations, and storage details. * Create inbound orders that can be received and outbound orders that can be fulfilled with Deposco warehouse management processes.  This reference provides details on available operations, endpoints, parameters, schemas, and responses.  Example requests and responses are also available for you to use as a reference. You can copy the examples to use as a starting point for your own requests.  Review the guides to learn how the API is used in common business scenarios such as setting up the warehouse and integrating a Product Information Management (PIM) system.  When you're ready to get started, register for a developer account and then log in to create your application in the developer portal.
 *
 * The version of the OpenAPI document: 2.0.2519
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\Deposco\Model;

use \ArrayAccess;
use \BeLenka\Deposco\ObjectSerializer;

/**
 * CustomerOrderChargeAllowanceDTO Class Doc Comment
 *
 * @category Class
 * @description Charge allowance for a customer order or order line, which identifies an expense or discount for the order or order line.
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CustomerOrderChargeAllowanceDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CustomerOrderChargeAllowanceDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'self' => '\BeLenka\Deposco\Model\EntityRef',
        'indicator' => 'string',
        'code' => 'string',
        'allow_charge_amount' => 'int',
        'agency' => 'string',
        'agency_code' => 'string',
        'allow_charge_percent_basis' => 'int',
        'allow_charge_percent' => 'int',
        'allow_charge_rate' => 'int',
        'allow_charge_qty' => 'int',
        'allow_charge_qty_uom' => 'string',
        'created_date' => '\DateTime',
        'updated_date' => '\DateTime',
        'created_by' => '\BeLenka\Deposco\Model\EntityRef',
        'updated_by' => '\BeLenka\Deposco\Model\EntityRef'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'self' => null,
        'indicator' => null,
        'code' => null,
        'allow_charge_amount' => 'double',
        'agency' => null,
        'agency_code' => null,
        'allow_charge_percent_basis' => 'double',
        'allow_charge_percent' => 'double',
        'allow_charge_rate' => 'double',
        'allow_charge_qty' => 'double',
        'allow_charge_qty_uom' => null,
        'created_date' => 'date-time',
        'updated_date' => 'date-time',
        'created_by' => null,
        'updated_by' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'self' => false,
        'indicator' => true,
        'code' => false,
        'allow_charge_amount' => false,
        'agency' => true,
        'agency_code' => true,
        'allow_charge_percent_basis' => true,
        'allow_charge_percent' => true,
        'allow_charge_rate' => true,
        'allow_charge_qty' => true,
        'allow_charge_qty_uom' => true,
        'created_date' => false,
        'updated_date' => false,
        'created_by' => false,
        'updated_by' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'self' => 'self',
        'indicator' => 'indicator',
        'code' => 'code',
        'allow_charge_amount' => 'allowChargeAmount',
        'agency' => 'agency',
        'agency_code' => 'agencyCode',
        'allow_charge_percent_basis' => 'allowChargePercentBasis',
        'allow_charge_percent' => 'allowChargePercent',
        'allow_charge_rate' => 'allowChargeRate',
        'allow_charge_qty' => 'allowChargeQty',
        'allow_charge_qty_uom' => 'allowChargeQtyUom',
        'created_date' => 'createdDate',
        'updated_date' => 'updatedDate',
        'created_by' => 'createdBy',
        'updated_by' => 'updatedBy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'self' => 'setSelf',
        'indicator' => 'setIndicator',
        'code' => 'setCode',
        'allow_charge_amount' => 'setAllowChargeAmount',
        'agency' => 'setAgency',
        'agency_code' => 'setAgencyCode',
        'allow_charge_percent_basis' => 'setAllowChargePercentBasis',
        'allow_charge_percent' => 'setAllowChargePercent',
        'allow_charge_rate' => 'setAllowChargeRate',
        'allow_charge_qty' => 'setAllowChargeQty',
        'allow_charge_qty_uom' => 'setAllowChargeQtyUom',
        'created_date' => 'setCreatedDate',
        'updated_date' => 'setUpdatedDate',
        'created_by' => 'setCreatedBy',
        'updated_by' => 'setUpdatedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'self' => 'getSelf',
        'indicator' => 'getIndicator',
        'code' => 'getCode',
        'allow_charge_amount' => 'getAllowChargeAmount',
        'agency' => 'getAgency',
        'agency_code' => 'getAgencyCode',
        'allow_charge_percent_basis' => 'getAllowChargePercentBasis',
        'allow_charge_percent' => 'getAllowChargePercent',
        'allow_charge_rate' => 'getAllowChargeRate',
        'allow_charge_qty' => 'getAllowChargeQty',
        'allow_charge_qty_uom' => 'getAllowChargeQtyUom',
        'created_date' => 'getCreatedDate',
        'updated_date' => 'getUpdatedDate',
        'created_by' => 'getCreatedBy',
        'updated_by' => 'getUpdatedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('self', $data ?? [], null);
        $this->setIfExists('indicator', $data ?? [], null);
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('allow_charge_amount', $data ?? [], null);
        $this->setIfExists('agency', $data ?? [], null);
        $this->setIfExists('agency_code', $data ?? [], null);
        $this->setIfExists('allow_charge_percent_basis', $data ?? [], null);
        $this->setIfExists('allow_charge_percent', $data ?? [], null);
        $this->setIfExists('allow_charge_rate', $data ?? [], null);
        $this->setIfExists('allow_charge_qty', $data ?? [], null);
        $this->setIfExists('allow_charge_qty_uom', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('updated_date', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('updated_by', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['indicator']) && (mb_strlen($this->container['indicator']) > 30)) {
            $invalidProperties[] = "invalid value for 'indicator', the character length must be smaller than or equal to 30.";
        }

        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        if ((mb_strlen($this->container['code']) > 30)) {
            $invalidProperties[] = "invalid value for 'code', the character length must be smaller than or equal to 30.";
        }

        if (!preg_match("/.*\\S.*/", $this->container['code'])) {
            $invalidProperties[] = "invalid value for 'code', must be conform to the pattern /.*\\S.*/.";
        }

        if ($this->container['allow_charge_amount'] === null) {
            $invalidProperties[] = "'allow_charge_amount' can't be null";
        }
        if (($this->container['allow_charge_amount'] > 10000000)) {
            $invalidProperties[] = "invalid value for 'allow_charge_amount', must be smaller than or equal to 10000000.";
        }

        if (($this->container['allow_charge_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'allow_charge_amount', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['agency']) && (mb_strlen($this->container['agency']) > 30)) {
            $invalidProperties[] = "invalid value for 'agency', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['agency_code']) && (mb_strlen($this->container['agency_code']) > 30)) {
            $invalidProperties[] = "invalid value for 'agency_code', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['allow_charge_percent_basis']) && ($this->container['allow_charge_percent_basis'] > 10000000)) {
            $invalidProperties[] = "invalid value for 'allow_charge_percent_basis', must be smaller than or equal to 10000000.";
        }

        if (!is_null($this->container['allow_charge_percent_basis']) && ($this->container['allow_charge_percent_basis'] < 0)) {
            $invalidProperties[] = "invalid value for 'allow_charge_percent_basis', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['allow_charge_percent']) && ($this->container['allow_charge_percent'] > 10000000)) {
            $invalidProperties[] = "invalid value for 'allow_charge_percent', must be smaller than or equal to 10000000.";
        }

        if (!is_null($this->container['allow_charge_percent']) && ($this->container['allow_charge_percent'] < 0)) {
            $invalidProperties[] = "invalid value for 'allow_charge_percent', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['allow_charge_rate']) && ($this->container['allow_charge_rate'] > 10000000)) {
            $invalidProperties[] = "invalid value for 'allow_charge_rate', must be smaller than or equal to 10000000.";
        }

        if (!is_null($this->container['allow_charge_rate']) && ($this->container['allow_charge_rate'] < 0)) {
            $invalidProperties[] = "invalid value for 'allow_charge_rate', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['allow_charge_qty']) && ($this->container['allow_charge_qty'] > 10000000)) {
            $invalidProperties[] = "invalid value for 'allow_charge_qty', must be smaller than or equal to 10000000.";
        }

        if (!is_null($this->container['allow_charge_qty']) && ($this->container['allow_charge_qty'] < 0)) {
            $invalidProperties[] = "invalid value for 'allow_charge_qty', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['allow_charge_qty_uom']) && (mb_strlen($this->container['allow_charge_qty_uom']) > 50)) {
            $invalidProperties[] = "invalid value for 'allow_charge_qty_uom', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets self
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $self self
     *
     * @return self
     */
    public function setSelf($self)
    {
        if (is_null($self)) {
            throw new \InvalidArgumentException('non-nullable self cannot be null');
        }
        $this->container['self'] = $self;

        return $this;
    }

    /**
     * Gets indicator
     *
     * @return string|null
     */
    public function getIndicator()
    {
        return $this->container['indicator'];
    }

    /**
     * Sets indicator
     *
     * @param string|null $indicator Code for whether this is an allowance or charge for the specified service. Possible values include `Charge`, `Allowance`, or both.
     *
     * @return self
     */
    public function setIndicator($indicator)
    {
        if (is_null($indicator)) {
            array_push($this->openAPINullablesSetToNull, 'indicator');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('indicator', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($indicator) && (mb_strlen($indicator) > 30)) {
            throw new \InvalidArgumentException('invalid length for $indicator when calling CustomerOrderChargeAllowanceDTO., must be smaller than or equal to 30.');
        }

        $this->container['indicator'] = $indicator;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code Code for the type of allowance or charge for the specified service.
     *
     * @return self
     */
    public function setCode($code)
    {
        if (is_null($code)) {
            throw new \InvalidArgumentException('non-nullable code cannot be null');
        }
        if ((mb_strlen($code) > 30)) {
            throw new \InvalidArgumentException('invalid length for $code when calling CustomerOrderChargeAllowanceDTO., must be smaller than or equal to 30.');
        }
        if ((!preg_match("/.*\\S.*/", ObjectSerializer::toString($code)))) {
            throw new \InvalidArgumentException("invalid value for \$code when calling CustomerOrderChargeAllowanceDTO., must conform to the pattern /.*\\S.*/.");
        }

        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets allow_charge_amount
     *
     * @return int
     */
    public function getAllowChargeAmount()
    {
        return $this->container['allow_charge_amount'];
    }

    /**
     * Sets allow_charge_amount
     *
     * @param int $allow_charge_amount Amount of the allowance or charge.
     *
     * @return self
     */
    public function setAllowChargeAmount($allow_charge_amount)
    {
        if (is_null($allow_charge_amount)) {
            throw new \InvalidArgumentException('non-nullable allow_charge_amount cannot be null');
        }

        if (($allow_charge_amount > 0)) {
            throw new \InvalidArgumentException('invalid value for $allow_charge_amount when calling CustomerOrderChargeAllowanceDTO., must be smaller than or equal to 10000000.');
        }
        if (($allow_charge_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $allow_charge_amount when calling CustomerOrderChargeAllowanceDTO., must be bigger than or equal to 0.');
        }

        $this->container['allow_charge_amount'] = $allow_charge_amount;

        return $this;
    }

    /**
     * Gets agency
     *
     * @return string|null
     */
    public function getAgency()
    {
        return $this->container['agency'];
    }

    /**
     * Sets agency
     *
     * @param string|null $agency Code for the agency that assigns the code values.
     *
     * @return self
     */
    public function setAgency($agency)
    {
        if (is_null($agency)) {
            array_push($this->openAPINullablesSetToNull, 'agency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('agency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($agency) && (mb_strlen($agency) > 30)) {
            throw new \InvalidArgumentException('invalid length for $agency when calling CustomerOrderChargeAllowanceDTO., must be smaller than or equal to 30.');
        }

        $this->container['agency'] = $agency;

        return $this;
    }

    /**
     * Gets agency_code
     *
     * @return string|null
     */
    public function getAgencyCode()
    {
        return $this->container['agency_code'];
    }

    /**
     * Sets agency_code
     *
     * @param string|null $agency_code Agency code for the service, promotion, allowance, or charge.
     *
     * @return self
     */
    public function setAgencyCode($agency_code)
    {
        if (is_null($agency_code)) {
            array_push($this->openAPINullablesSetToNull, 'agency_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('agency_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($agency_code) && (mb_strlen($agency_code) > 30)) {
            throw new \InvalidArgumentException('invalid length for $agency_code when calling CustomerOrderChargeAllowanceDTO., must be smaller than or equal to 30.');
        }

        $this->container['agency_code'] = $agency_code;

        return $this;
    }

    /**
     * Gets allow_charge_percent_basis
     *
     * @return int|null
     */
    public function getAllowChargePercentBasis()
    {
        return $this->container['allow_charge_percent_basis'];
    }

    /**
     * Sets allow_charge_percent_basis
     *
     * @param int|null $allow_charge_percent_basis Code for the basis on which an allowance or charge percent is calculated.
     *
     * @return self
     */
    public function setAllowChargePercentBasis($allow_charge_percent_basis)
    {
        if (is_null($allow_charge_percent_basis)) {
            array_push($this->openAPINullablesSetToNull, 'allow_charge_percent_basis');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('allow_charge_percent_basis', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($allow_charge_percent_basis) && ($allow_charge_percent_basis > 0)) {
            throw new \InvalidArgumentException('invalid value for $allow_charge_percent_basis when calling CustomerOrderChargeAllowanceDTO., must be smaller than or equal to 10000000.');
        }
        if (!is_null($allow_charge_percent_basis) && ($allow_charge_percent_basis < 0)) {
            throw new \InvalidArgumentException('invalid value for $allow_charge_percent_basis when calling CustomerOrderChargeAllowanceDTO., must be bigger than or equal to 0.');
        }

        $this->container['allow_charge_percent_basis'] = $allow_charge_percent_basis;

        return $this;
    }

    /**
     * Gets allow_charge_percent
     *
     * @return int|null
     */
    public function getAllowChargePercent()
    {
        return $this->container['allow_charge_percent'];
    }

    /**
     * Sets allow_charge_percent
     *
     * @param int|null $allow_charge_percent Percentage of the allowance or charge. Percentages should be represented as real numbers. (0% through 100% should be normalized to 0.0 through 100.00.)
     *
     * @return self
     */
    public function setAllowChargePercent($allow_charge_percent)
    {
        if (is_null($allow_charge_percent)) {
            array_push($this->openAPINullablesSetToNull, 'allow_charge_percent');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('allow_charge_percent', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($allow_charge_percent) && ($allow_charge_percent > 0)) {
            throw new \InvalidArgumentException('invalid value for $allow_charge_percent when calling CustomerOrderChargeAllowanceDTO., must be smaller than or equal to 10000000.');
        }
        if (!is_null($allow_charge_percent) && ($allow_charge_percent < 0)) {
            throw new \InvalidArgumentException('invalid value for $allow_charge_percent when calling CustomerOrderChargeAllowanceDTO., must be bigger than or equal to 0.');
        }

        $this->container['allow_charge_percent'] = $allow_charge_percent;

        return $this;
    }

    /**
     * Gets allow_charge_rate
     *
     * @return int|null
     */
    public function getAllowChargeRate()
    {
        return $this->container['allow_charge_rate'];
    }

    /**
     * Sets allow_charge_rate
     *
     * @param int|null $allow_charge_rate Value expressed in monetary currency that applies to the given quantity. Example: The rate is $5.00 off one dozen.
     *
     * @return self
     */
    public function setAllowChargeRate($allow_charge_rate)
    {
        if (is_null($allow_charge_rate)) {
            array_push($this->openAPINullablesSetToNull, 'allow_charge_rate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('allow_charge_rate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($allow_charge_rate) && ($allow_charge_rate > 0)) {
            throw new \InvalidArgumentException('invalid value for $allow_charge_rate when calling CustomerOrderChargeAllowanceDTO., must be smaller than or equal to 10000000.');
        }
        if (!is_null($allow_charge_rate) && ($allow_charge_rate < 0)) {
            throw new \InvalidArgumentException('invalid value for $allow_charge_rate when calling CustomerOrderChargeAllowanceDTO., must be bigger than or equal to 0.');
        }

        $this->container['allow_charge_rate'] = $allow_charge_rate;

        return $this;
    }

    /**
     * Gets allow_charge_qty
     *
     * @return int|null
     */
    public function getAllowChargeQty()
    {
        return $this->container['allow_charge_qty'];
    }

    /**
     * Sets allow_charge_qty
     *
     * @param int|null $allow_charge_qty Numeric value of the quantity for the allowance or charge.
     *
     * @return self
     */
    public function setAllowChargeQty($allow_charge_qty)
    {
        if (is_null($allow_charge_qty)) {
            array_push($this->openAPINullablesSetToNull, 'allow_charge_qty');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('allow_charge_qty', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($allow_charge_qty) && ($allow_charge_qty > 0)) {
            throw new \InvalidArgumentException('invalid value for $allow_charge_qty when calling CustomerOrderChargeAllowanceDTO., must be smaller than or equal to 10000000.');
        }
        if (!is_null($allow_charge_qty) && ($allow_charge_qty < 0)) {
            throw new \InvalidArgumentException('invalid value for $allow_charge_qty when calling CustomerOrderChargeAllowanceDTO., must be bigger than or equal to 0.');
        }

        $this->container['allow_charge_qty'] = $allow_charge_qty;

        return $this;
    }

    /**
     * Gets allow_charge_qty_uom
     *
     * @return string|null
     */
    public function getAllowChargeQtyUom()
    {
        return $this->container['allow_charge_qty_uom'];
    }

    /**
     * Sets allow_charge_qty_uom
     *
     * @param string|null $allow_charge_qty_uom Unit of measure for the quantity for the allowance or charge.
     *
     * @return self
     */
    public function setAllowChargeQtyUom($allow_charge_qty_uom)
    {
        if (is_null($allow_charge_qty_uom)) {
            array_push($this->openAPINullablesSetToNull, 'allow_charge_qty_uom');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('allow_charge_qty_uom', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($allow_charge_qty_uom) && (mb_strlen($allow_charge_qty_uom) > 50)) {
            throw new \InvalidArgumentException('invalid length for $allow_charge_qty_uom when calling CustomerOrderChargeAllowanceDTO., must be smaller than or equal to 50.');
        }

        $this->container['allow_charge_qty_uom'] = $allow_charge_qty_uom;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime|null $created_date Date and time that the charge allowance was created.
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets updated_date
     *
     * @return \DateTime|null
     */
    public function getUpdatedDate()
    {
        return $this->container['updated_date'];
    }

    /**
     * Sets updated_date
     *
     * @param \DateTime|null $updated_date Date and time that the charge allowance was last updated.
     *
     * @return self
     */
    public function setUpdatedDate($updated_date)
    {
        if (is_null($updated_date)) {
            throw new \InvalidArgumentException('non-nullable updated_date cannot be null');
        }
        $this->container['updated_date'] = $updated_date;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            throw new \InvalidArgumentException('non-nullable created_by cannot be null');
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $updated_by updated_by
     *
     * @return self
     */
    public function setUpdatedBy($updated_by)
    {
        if (is_null($updated_by)) {
            throw new \InvalidArgumentException('non-nullable updated_by cannot be null');
        }
        $this->container['updated_by'] = $updated_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


