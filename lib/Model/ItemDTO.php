<?php
/**
 * ItemDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deposco API
 *
 * Welcome to the Deposco API Reference! The Deposco API enables you to integrate your system with Deposco.  * Integrate a product information system (PIM) by creating and retrieving data for items, packs, UPCs, and kits. * Set up warehouse data by creating facilities, zones, locations, and storage details. * Create inbound orders that can be received and outbound orders that can be fulfilled with Deposco warehouse management processes.  This reference provides details on available operations, endpoints, parameters, schemas, and responses.  Example requests and responses are also available for you to use as a reference. You can copy the examples to use as a starting point for your own requests.  Review the guides to learn how the API is used in common business scenarios such as setting up the warehouse and integrating a Product Information Management (PIM) system.  When you're ready to get started, register for a developer account and then log in to create your application in the developer portal.
 *
 * The version of the OpenAPI document: 2.0.2519
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\Deposco\Model;

use \ArrayAccess;
use \BeLenka\Deposco\ObjectSerializer;

/**
 * ItemDTO Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ItemDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ItemDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'self' => '\BeLenka\Deposco\Model\EntityRef',
        'business_unit' => '\BeLenka\Deposco\Model\EntityRef',
        'number' => 'string',
        'name' => 'string',
        'packs' => '\BeLenka\Deposco\Model\PackDTO[]',
        'upcs' => '\BeLenka\Deposco\Model\ItemUPCCollectionDTO',
        'short_description' => 'string',
        'long_description' => 'string',
        'item_type' => 'string',
        'intangible_item_flag' => 'bool',
        'external_image_url' => 'string',
        'product_category' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'abc_category' => 'string',
        'brand_name' => 'string',
        'product_code' => 'string',
        'color_code' => 'string',
        'color_name' => 'string',
        'size' => 'string',
        'style_name' => 'string',
        'style_number' => 'string',
        'hazmat' => 'bool',
        'hazmat_code' => 'string',
        'inspection_required' => 'bool',
        'unit_price' => 'int',
        'purchase_cost' => 'int',
        'taxable' => 'bool',
        'lot_tracking_enabled' => 'bool',
        'serial_tracking_enabled' => 'bool',
        'born_on_date_required' => 'bool',
        'expiration_date_required' => 'bool',
        'serial_capture_point' => 'string',
        'inventory_tracking_enabled' => 'bool',
        'shippable' => 'bool',
        'sales_enabled_flag' => 'bool',
        'cycle_count' => 'bool',
        'cycle_count_frequency' => 'int',
        'receive_over_tolerance' => 'int',
        'reorder_point' => 'int',
        'reorder_quantity' => 'int',
        'trading_partner' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'item_vendors' => '\BeLenka\Deposco\Model\ItemVendorCollectionDTO',
        'components' => '\BeLenka\Deposco\Model\ComponentDTO[]',
        'kit_order_only' => 'bool',
        'kit_stock_only' => 'bool',
        'hs_codes' => '\BeLenka\Deposco\Model\HSCodeCollectionDTO',
        'origin_country' => 'string',
        'class_type' => 'string',
        'nmfc_number' => 'string',
        'transportation_class' => 'string',
        'weight' => '\BeLenka\Deposco\Model\ItemDTOWeight',
        'carrier_special_services' => '\BeLenka\Deposco\Model\CarrierSpecialServiceDTO[]',
        'custom_attribute1' => 'string',
        'custom_attribute2' => 'string',
        'custom_attribute3' => 'string',
        'custom_attribute4' => 'string',
        'custom_attribute5' => 'string',
        'custom_fields' => '\BeLenka\Deposco\Model\CustomFieldDTO[]',
        'channels' => '\BeLenka\Deposco\Model\ChannelListingDTO[]',
        'accounting_type' => 'string',
        'default_ledger_account' => 'string',
        'cogs_account' => 'string',
        'created_date' => '\DateTime',
        'updated_date' => '\DateTime',
        'created_by' => '\BeLenka\Deposco\Model\EntityRef',
        'updated_by' => '\BeLenka\Deposco\Model\EntityRef'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'self' => null,
        'business_unit' => null,
        'number' => null,
        'name' => null,
        'packs' => null,
        'upcs' => null,
        'short_description' => null,
        'long_description' => null,
        'item_type' => null,
        'intangible_item_flag' => null,
        'external_image_url' => null,
        'product_category' => null,
        'abc_category' => null,
        'brand_name' => null,
        'product_code' => null,
        'color_code' => null,
        'color_name' => null,
        'size' => null,
        'style_name' => null,
        'style_number' => null,
        'hazmat' => null,
        'hazmat_code' => null,
        'inspection_required' => null,
        'unit_price' => 'double',
        'purchase_cost' => 'double',
        'taxable' => null,
        'lot_tracking_enabled' => null,
        'serial_tracking_enabled' => null,
        'born_on_date_required' => null,
        'expiration_date_required' => null,
        'serial_capture_point' => null,
        'inventory_tracking_enabled' => null,
        'shippable' => null,
        'sales_enabled_flag' => null,
        'cycle_count' => null,
        'cycle_count_frequency' => null,
        'receive_over_tolerance' => 'double',
        'reorder_point' => null,
        'reorder_quantity' => null,
        'trading_partner' => null,
        'item_vendors' => null,
        'components' => null,
        'kit_order_only' => null,
        'kit_stock_only' => null,
        'hs_codes' => null,
        'origin_country' => null,
        'class_type' => null,
        'nmfc_number' => null,
        'transportation_class' => null,
        'weight' => null,
        'carrier_special_services' => null,
        'custom_attribute1' => null,
        'custom_attribute2' => null,
        'custom_attribute3' => null,
        'custom_attribute4' => null,
        'custom_attribute5' => null,
        'custom_fields' => null,
        'channels' => null,
        'accounting_type' => null,
        'default_ledger_account' => null,
        'cogs_account' => null,
        'created_date' => 'date-time',
        'updated_date' => 'date-time',
        'created_by' => null,
        'updated_by' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'self' => false,
        'business_unit' => false,
        'number' => false,
        'name' => true,
        'packs' => false,
        'upcs' => false,
        'short_description' => true,
        'long_description' => true,
        'item_type' => true,
        'intangible_item_flag' => false,
        'external_image_url' => true,
        'product_category' => true,
        'abc_category' => true,
        'brand_name' => true,
        'product_code' => true,
        'color_code' => true,
        'color_name' => true,
        'size' => true,
        'style_name' => true,
        'style_number' => true,
        'hazmat' => false,
        'hazmat_code' => true,
        'inspection_required' => false,
        'unit_price' => false,
        'purchase_cost' => false,
        'taxable' => false,
        'lot_tracking_enabled' => false,
        'serial_tracking_enabled' => false,
        'born_on_date_required' => false,
        'expiration_date_required' => false,
        'serial_capture_point' => true,
        'inventory_tracking_enabled' => false,
        'shippable' => false,
        'sales_enabled_flag' => false,
        'cycle_count' => false,
        'cycle_count_frequency' => false,
        'receive_over_tolerance' => true,
        'reorder_point' => false,
        'reorder_quantity' => false,
        'trading_partner' => true,
        'item_vendors' => false,
        'components' => false,
        'kit_order_only' => false,
        'kit_stock_only' => false,
        'hs_codes' => false,
        'origin_country' => true,
        'class_type' => true,
        'nmfc_number' => true,
        'transportation_class' => true,
        'weight' => false,
        'carrier_special_services' => false,
        'custom_attribute1' => true,
        'custom_attribute2' => true,
        'custom_attribute3' => true,
        'custom_attribute4' => true,
        'custom_attribute5' => true,
        'custom_fields' => false,
        'channels' => false,
        'accounting_type' => true,
        'default_ledger_account' => true,
        'cogs_account' => true,
        'created_date' => false,
        'updated_date' => false,
        'created_by' => false,
        'updated_by' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'self' => 'self',
        'business_unit' => 'businessUnit',
        'number' => 'number',
        'name' => 'name',
        'packs' => 'packs',
        'upcs' => 'upcs',
        'short_description' => 'shortDescription',
        'long_description' => 'longDescription',
        'item_type' => 'itemType',
        'intangible_item_flag' => 'intangibleItemFlag',
        'external_image_url' => 'externalImageUrl',
        'product_category' => 'productCategory',
        'abc_category' => 'abcCategory',
        'brand_name' => 'brandName',
        'product_code' => 'productCode',
        'color_code' => 'colorCode',
        'color_name' => 'colorName',
        'size' => 'size',
        'style_name' => 'styleName',
        'style_number' => 'styleNumber',
        'hazmat' => 'hazmat',
        'hazmat_code' => 'hazmatCode',
        'inspection_required' => 'inspectionRequired',
        'unit_price' => 'unitPrice',
        'purchase_cost' => 'purchaseCost',
        'taxable' => 'taxable',
        'lot_tracking_enabled' => 'lotTrackingEnabled',
        'serial_tracking_enabled' => 'serialTrackingEnabled',
        'born_on_date_required' => 'bornOnDateRequired',
        'expiration_date_required' => 'expirationDateRequired',
        'serial_capture_point' => 'serialCapturePoint',
        'inventory_tracking_enabled' => 'inventoryTrackingEnabled',
        'shippable' => 'shippable',
        'sales_enabled_flag' => 'salesEnabledFlag',
        'cycle_count' => 'cycleCount',
        'cycle_count_frequency' => 'cycleCountFrequency',
        'receive_over_tolerance' => 'receiveOverTolerance',
        'reorder_point' => 'reorderPoint',
        'reorder_quantity' => 'reorderQuantity',
        'trading_partner' => 'tradingPartner',
        'item_vendors' => 'itemVendors',
        'components' => 'components',
        'kit_order_only' => 'kitOrderOnly',
        'kit_stock_only' => 'kitStockOnly',
        'hs_codes' => 'hsCodes',
        'origin_country' => 'originCountry',
        'class_type' => 'classType',
        'nmfc_number' => 'nmfcNumber',
        'transportation_class' => 'transportationClass',
        'weight' => 'weight',
        'carrier_special_services' => 'carrierSpecialServices',
        'custom_attribute1' => 'customAttribute1',
        'custom_attribute2' => 'customAttribute2',
        'custom_attribute3' => 'customAttribute3',
        'custom_attribute4' => 'customAttribute4',
        'custom_attribute5' => 'customAttribute5',
        'custom_fields' => 'customFields',
        'channels' => 'channels',
        'accounting_type' => 'accountingType',
        'default_ledger_account' => 'defaultLedgerAccount',
        'cogs_account' => 'cogsAccount',
        'created_date' => 'createdDate',
        'updated_date' => 'updatedDate',
        'created_by' => 'createdBy',
        'updated_by' => 'updatedBy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'self' => 'setSelf',
        'business_unit' => 'setBusinessUnit',
        'number' => 'setNumber',
        'name' => 'setName',
        'packs' => 'setPacks',
        'upcs' => 'setUpcs',
        'short_description' => 'setShortDescription',
        'long_description' => 'setLongDescription',
        'item_type' => 'setItemType',
        'intangible_item_flag' => 'setIntangibleItemFlag',
        'external_image_url' => 'setExternalImageUrl',
        'product_category' => 'setProductCategory',
        'abc_category' => 'setAbcCategory',
        'brand_name' => 'setBrandName',
        'product_code' => 'setProductCode',
        'color_code' => 'setColorCode',
        'color_name' => 'setColorName',
        'size' => 'setSize',
        'style_name' => 'setStyleName',
        'style_number' => 'setStyleNumber',
        'hazmat' => 'setHazmat',
        'hazmat_code' => 'setHazmatCode',
        'inspection_required' => 'setInspectionRequired',
        'unit_price' => 'setUnitPrice',
        'purchase_cost' => 'setPurchaseCost',
        'taxable' => 'setTaxable',
        'lot_tracking_enabled' => 'setLotTrackingEnabled',
        'serial_tracking_enabled' => 'setSerialTrackingEnabled',
        'born_on_date_required' => 'setBornOnDateRequired',
        'expiration_date_required' => 'setExpirationDateRequired',
        'serial_capture_point' => 'setSerialCapturePoint',
        'inventory_tracking_enabled' => 'setInventoryTrackingEnabled',
        'shippable' => 'setShippable',
        'sales_enabled_flag' => 'setSalesEnabledFlag',
        'cycle_count' => 'setCycleCount',
        'cycle_count_frequency' => 'setCycleCountFrequency',
        'receive_over_tolerance' => 'setReceiveOverTolerance',
        'reorder_point' => 'setReorderPoint',
        'reorder_quantity' => 'setReorderQuantity',
        'trading_partner' => 'setTradingPartner',
        'item_vendors' => 'setItemVendors',
        'components' => 'setComponents',
        'kit_order_only' => 'setKitOrderOnly',
        'kit_stock_only' => 'setKitStockOnly',
        'hs_codes' => 'setHsCodes',
        'origin_country' => 'setOriginCountry',
        'class_type' => 'setClassType',
        'nmfc_number' => 'setNmfcNumber',
        'transportation_class' => 'setTransportationClass',
        'weight' => 'setWeight',
        'carrier_special_services' => 'setCarrierSpecialServices',
        'custom_attribute1' => 'setCustomAttribute1',
        'custom_attribute2' => 'setCustomAttribute2',
        'custom_attribute3' => 'setCustomAttribute3',
        'custom_attribute4' => 'setCustomAttribute4',
        'custom_attribute5' => 'setCustomAttribute5',
        'custom_fields' => 'setCustomFields',
        'channels' => 'setChannels',
        'accounting_type' => 'setAccountingType',
        'default_ledger_account' => 'setDefaultLedgerAccount',
        'cogs_account' => 'setCogsAccount',
        'created_date' => 'setCreatedDate',
        'updated_date' => 'setUpdatedDate',
        'created_by' => 'setCreatedBy',
        'updated_by' => 'setUpdatedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'self' => 'getSelf',
        'business_unit' => 'getBusinessUnit',
        'number' => 'getNumber',
        'name' => 'getName',
        'packs' => 'getPacks',
        'upcs' => 'getUpcs',
        'short_description' => 'getShortDescription',
        'long_description' => 'getLongDescription',
        'item_type' => 'getItemType',
        'intangible_item_flag' => 'getIntangibleItemFlag',
        'external_image_url' => 'getExternalImageUrl',
        'product_category' => 'getProductCategory',
        'abc_category' => 'getAbcCategory',
        'brand_name' => 'getBrandName',
        'product_code' => 'getProductCode',
        'color_code' => 'getColorCode',
        'color_name' => 'getColorName',
        'size' => 'getSize',
        'style_name' => 'getStyleName',
        'style_number' => 'getStyleNumber',
        'hazmat' => 'getHazmat',
        'hazmat_code' => 'getHazmatCode',
        'inspection_required' => 'getInspectionRequired',
        'unit_price' => 'getUnitPrice',
        'purchase_cost' => 'getPurchaseCost',
        'taxable' => 'getTaxable',
        'lot_tracking_enabled' => 'getLotTrackingEnabled',
        'serial_tracking_enabled' => 'getSerialTrackingEnabled',
        'born_on_date_required' => 'getBornOnDateRequired',
        'expiration_date_required' => 'getExpirationDateRequired',
        'serial_capture_point' => 'getSerialCapturePoint',
        'inventory_tracking_enabled' => 'getInventoryTrackingEnabled',
        'shippable' => 'getShippable',
        'sales_enabled_flag' => 'getSalesEnabledFlag',
        'cycle_count' => 'getCycleCount',
        'cycle_count_frequency' => 'getCycleCountFrequency',
        'receive_over_tolerance' => 'getReceiveOverTolerance',
        'reorder_point' => 'getReorderPoint',
        'reorder_quantity' => 'getReorderQuantity',
        'trading_partner' => 'getTradingPartner',
        'item_vendors' => 'getItemVendors',
        'components' => 'getComponents',
        'kit_order_only' => 'getKitOrderOnly',
        'kit_stock_only' => 'getKitStockOnly',
        'hs_codes' => 'getHsCodes',
        'origin_country' => 'getOriginCountry',
        'class_type' => 'getClassType',
        'nmfc_number' => 'getNmfcNumber',
        'transportation_class' => 'getTransportationClass',
        'weight' => 'getWeight',
        'carrier_special_services' => 'getCarrierSpecialServices',
        'custom_attribute1' => 'getCustomAttribute1',
        'custom_attribute2' => 'getCustomAttribute2',
        'custom_attribute3' => 'getCustomAttribute3',
        'custom_attribute4' => 'getCustomAttribute4',
        'custom_attribute5' => 'getCustomAttribute5',
        'custom_fields' => 'getCustomFields',
        'channels' => 'getChannels',
        'accounting_type' => 'getAccountingType',
        'default_ledger_account' => 'getDefaultLedgerAccount',
        'cogs_account' => 'getCogsAccount',
        'created_date' => 'getCreatedDate',
        'updated_date' => 'getUpdatedDate',
        'created_by' => 'getCreatedBy',
        'updated_by' => 'getUpdatedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ITEM_TYPE_SIMPLE = 'Simple';
    public const ITEM_TYPE_CUSTOM_FEE = 'Custom Fee';
    public const ABC_CATEGORY_A = 'A';
    public const ABC_CATEGORY_B = 'B';
    public const ABC_CATEGORY_C = 'C';
    public const SERIAL_CAPTURE_POINT_RECEIVING = 'Receiving';
    public const SERIAL_CAPTURE_POINT_PICKING = 'Picking';
    public const SERIAL_CAPTURE_POINT_PACKING = 'Packing';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getItemTypeAllowableValues()
    {
        return [
            self::ITEM_TYPE_SIMPLE,
            self::ITEM_TYPE_CUSTOM_FEE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAbcCategoryAllowableValues()
    {
        return [
            self::ABC_CATEGORY_A,
            self::ABC_CATEGORY_B,
            self::ABC_CATEGORY_C,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSerialCapturePointAllowableValues()
    {
        return [
            self::SERIAL_CAPTURE_POINT_RECEIVING,
            self::SERIAL_CAPTURE_POINT_PICKING,
            self::SERIAL_CAPTURE_POINT_PACKING,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('self', $data ?? [], null);
        $this->setIfExists('business_unit', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('packs', $data ?? [], null);
        $this->setIfExists('upcs', $data ?? [], null);
        $this->setIfExists('short_description', $data ?? [], null);
        $this->setIfExists('long_description', $data ?? [], null);
        $this->setIfExists('item_type', $data ?? [], null);
        $this->setIfExists('intangible_item_flag', $data ?? [], null);
        $this->setIfExists('external_image_url', $data ?? [], null);
        $this->setIfExists('product_category', $data ?? [], null);
        $this->setIfExists('abc_category', $data ?? [], null);
        $this->setIfExists('brand_name', $data ?? [], null);
        $this->setIfExists('product_code', $data ?? [], null);
        $this->setIfExists('color_code', $data ?? [], null);
        $this->setIfExists('color_name', $data ?? [], null);
        $this->setIfExists('size', $data ?? [], null);
        $this->setIfExists('style_name', $data ?? [], null);
        $this->setIfExists('style_number', $data ?? [], null);
        $this->setIfExists('hazmat', $data ?? [], null);
        $this->setIfExists('hazmat_code', $data ?? [], null);
        $this->setIfExists('inspection_required', $data ?? [], null);
        $this->setIfExists('unit_price', $data ?? [], null);
        $this->setIfExists('purchase_cost', $data ?? [], null);
        $this->setIfExists('taxable', $data ?? [], null);
        $this->setIfExists('lot_tracking_enabled', $data ?? [], null);
        $this->setIfExists('serial_tracking_enabled', $data ?? [], null);
        $this->setIfExists('born_on_date_required', $data ?? [], null);
        $this->setIfExists('expiration_date_required', $data ?? [], null);
        $this->setIfExists('serial_capture_point', $data ?? [], null);
        $this->setIfExists('inventory_tracking_enabled', $data ?? [], null);
        $this->setIfExists('shippable', $data ?? [], null);
        $this->setIfExists('sales_enabled_flag', $data ?? [], null);
        $this->setIfExists('cycle_count', $data ?? [], null);
        $this->setIfExists('cycle_count_frequency', $data ?? [], null);
        $this->setIfExists('receive_over_tolerance', $data ?? [], null);
        $this->setIfExists('reorder_point', $data ?? [], null);
        $this->setIfExists('reorder_quantity', $data ?? [], null);
        $this->setIfExists('trading_partner', $data ?? [], null);
        $this->setIfExists('item_vendors', $data ?? [], null);
        $this->setIfExists('components', $data ?? [], null);
        $this->setIfExists('kit_order_only', $data ?? [], null);
        $this->setIfExists('kit_stock_only', $data ?? [], null);
        $this->setIfExists('hs_codes', $data ?? [], null);
        $this->setIfExists('origin_country', $data ?? [], null);
        $this->setIfExists('class_type', $data ?? [], null);
        $this->setIfExists('nmfc_number', $data ?? [], null);
        $this->setIfExists('transportation_class', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
        $this->setIfExists('carrier_special_services', $data ?? [], null);
        $this->setIfExists('custom_attribute1', $data ?? [], null);
        $this->setIfExists('custom_attribute2', $data ?? [], null);
        $this->setIfExists('custom_attribute3', $data ?? [], null);
        $this->setIfExists('custom_attribute4', $data ?? [], null);
        $this->setIfExists('custom_attribute5', $data ?? [], null);
        $this->setIfExists('custom_fields', $data ?? [], null);
        $this->setIfExists('channels', $data ?? [], null);
        $this->setIfExists('accounting_type', $data ?? [], null);
        $this->setIfExists('default_ledger_account', $data ?? [], null);
        $this->setIfExists('cogs_account', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('updated_date', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('updated_by', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['business_unit'] === null) {
            $invalidProperties[] = "'business_unit' can't be null";
        }
        if ($this->container['number'] === null) {
            $invalidProperties[] = "'number' can't be null";
        }
        if ((mb_strlen($this->container['number']) > 40)) {
            $invalidProperties[] = "invalid value for 'number', the character length must be smaller than or equal to 40.";
        }

        if (!preg_match("/.*\\S.*/", $this->container['number'])) {
            $invalidProperties[] = "invalid value for 'number', must be conform to the pattern /.*\\S.*/.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 150)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 150.";
        }

        if ($this->container['packs'] === null) {
            $invalidProperties[] = "'packs' can't be null";
        }
        if (!is_null($this->container['short_description']) && (mb_strlen($this->container['short_description']) > 100)) {
            $invalidProperties[] = "invalid value for 'short_description', the character length must be smaller than or equal to 100.";
        }

        $allowedValues = $this->getItemTypeAllowableValues();
        if (!is_null($this->container['item_type']) && !in_array($this->container['item_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'item_type', must be one of '%s'",
                $this->container['item_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['external_image_url']) && (mb_strlen($this->container['external_image_url']) > 200)) {
            $invalidProperties[] = "invalid value for 'external_image_url', the character length must be smaller than or equal to 200.";
        }

        $allowedValues = $this->getAbcCategoryAllowableValues();
        if (!is_null($this->container['abc_category']) && !in_array($this->container['abc_category'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'abc_category', must be one of '%s'",
                $this->container['abc_category'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['brand_name']) && (mb_strlen($this->container['brand_name']) > 35)) {
            $invalidProperties[] = "invalid value for 'brand_name', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['product_code']) && (mb_strlen($this->container['product_code']) > 40)) {
            $invalidProperties[] = "invalid value for 'product_code', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['color_code']) && (mb_strlen($this->container['color_code']) > 100)) {
            $invalidProperties[] = "invalid value for 'color_code', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['color_name']) && (mb_strlen($this->container['color_name']) > 100)) {
            $invalidProperties[] = "invalid value for 'color_name', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['size']) && (mb_strlen($this->container['size']) > 100)) {
            $invalidProperties[] = "invalid value for 'size', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['style_name']) && (mb_strlen($this->container['style_name']) > 100)) {
            $invalidProperties[] = "invalid value for 'style_name', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['style_number']) && (mb_strlen($this->container['style_number']) > 100)) {
            $invalidProperties[] = "invalid value for 'style_number', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['hazmat_code']) && (mb_strlen($this->container['hazmat_code']) > 4)) {
            $invalidProperties[] = "invalid value for 'hazmat_code', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['unit_price']) && ($this->container['unit_price'] > 0)) {
            $invalidProperties[] = "invalid value for 'unit_price', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['unit_price']) && ($this->container['unit_price'] < 0)) {
            $invalidProperties[] = "invalid value for 'unit_price', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['purchase_cost']) && ($this->container['purchase_cost'] > 0)) {
            //$invalidProperties[] = "invalid value for 'purchase_cost', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['purchase_cost']) && ($this->container['purchase_cost'] < 0)) {
            //$invalidProperties[] = "invalid value for 'purchase_cost', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getSerialCapturePointAllowableValues();
        if (!is_null($this->container['serial_capture_point']) && !in_array($this->container['serial_capture_point'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'serial_capture_point', must be one of '%s'",
                $this->container['serial_capture_point'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['receive_over_tolerance']) && ($this->container['receive_over_tolerance'] > 0)) {
            $invalidProperties[] = "invalid value for 'receive_over_tolerance', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['receive_over_tolerance']) && ($this->container['receive_over_tolerance'] < 0)) {
            $invalidProperties[] = "invalid value for 'receive_over_tolerance', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['class_type']) && (mb_strlen($this->container['class_type']) > 20)) {
            $invalidProperties[] = "invalid value for 'class_type', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['nmfc_number']) && (mb_strlen($this->container['nmfc_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'nmfc_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['transportation_class']) && (mb_strlen($this->container['transportation_class']) > 50)) {
            $invalidProperties[] = "invalid value for 'transportation_class', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['custom_attribute1']) && (mb_strlen($this->container['custom_attribute1']) > 200)) {
            $invalidProperties[] = "invalid value for 'custom_attribute1', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['custom_attribute2']) && (mb_strlen($this->container['custom_attribute2']) > 200)) {
            $invalidProperties[] = "invalid value for 'custom_attribute2', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['custom_attribute3']) && (mb_strlen($this->container['custom_attribute3']) > 200)) {
            $invalidProperties[] = "invalid value for 'custom_attribute3', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['custom_attribute4']) && (mb_strlen($this->container['custom_attribute4']) > 200)) {
            $invalidProperties[] = "invalid value for 'custom_attribute4', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['custom_attribute5']) && (mb_strlen($this->container['custom_attribute5']) > 200)) {
            $invalidProperties[] = "invalid value for 'custom_attribute5', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['accounting_type']) && (mb_strlen($this->container['accounting_type']) > 50)) {
            $invalidProperties[] = "invalid value for 'accounting_type', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['default_ledger_account']) && (mb_strlen($this->container['default_ledger_account']) > 50)) {
            $invalidProperties[] = "invalid value for 'default_ledger_account', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['cogs_account']) && (mb_strlen($this->container['cogs_account']) > 40)) {
            $invalidProperties[] = "invalid value for 'cogs_account', the character length must be smaller than or equal to 40.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets self
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $self self
     *
     * @return self
     */
    public function setSelf($self)
    {
        if (is_null($self)) {
            throw new \InvalidArgumentException('non-nullable self cannot be null');
        }
        $this->container['self'] = $self;

        return $this;
    }

    /**
     * Gets business_unit
     *
     * @return \BeLenka\Deposco\Model\EntityRef
     */
    public function getBusinessUnit()
    {
        return $this->container['business_unit'];
    }

    /**
     * Sets business_unit
     *
     * @param \BeLenka\Deposco\Model\EntityRef $business_unit business_unit
     *
     * @return self
     */
    public function setBusinessUnit($business_unit)
    {
        if (is_null($business_unit)) {
            throw new \InvalidArgumentException('non-nullable business_unit cannot be null');
        }
        $this->container['business_unit'] = $business_unit;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number Unique identification code for the item.
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }
        if ((mb_strlen($number) > 40)) {
            throw new \InvalidArgumentException('invalid length for $number when calling ItemDTO., must be smaller than or equal to 40.');
        }
        if ((!preg_match("/.*\\S.*/", ObjectSerializer::toString($number)))) {
            throw new \InvalidArgumentException("invalid value for \$number when calling ItemDTO., must conform to the pattern /.*\\S.*/.");
        }

        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name that identifies the item.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($name) && (mb_strlen($name) > 150)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ItemDTO., must be smaller than or equal to 150.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets packs
     *
     * @return \BeLenka\Deposco\Model\PackDTO[]
     */
    public function getPacks()
    {
        return $this->container['packs'];
    }

    /**
     * Sets packs
     *
     * @param \BeLenka\Deposco\Model\PackDTO[] $packs Array of packs for the item.
     *
     * @return self
     */
    public function setPacks($packs)
    {
        if (is_null($packs)) {
            throw new \InvalidArgumentException('non-nullable packs cannot be null');
        }
        $this->container['packs'] = $packs;

        return $this;
    }

    /**
     * Gets upcs
     *
     * @return \BeLenka\Deposco\Model\ItemUPCCollectionDTO|null
     */
    public function getUpcs()
    {
        return $this->container['upcs'];
    }

    /**
     * Sets upcs
     *
     * @param \BeLenka\Deposco\Model\ItemUPCCollectionDTO|null $upcs upcs
     *
     * @return self
     */
    public function setUpcs($upcs)
    {
        if (is_null($upcs)) {
            throw new \InvalidArgumentException('non-nullable upcs cannot be null');
        }
        $this->container['upcs'] = $upcs;

        return $this;
    }

    /**
     * Gets short_description
     *
     * @return string|null
     */
    public function getShortDescription()
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     *
     * @param string|null $short_description Brief description of the item. This description appears to warehouse personnel who use the handheld menu. The description should include only Unicode characters that are encoded with UTF-8 using 1 to 3 bytes. Encoded symbols that take up to 4 bytes, such as emojis, are not supported.
     *
     * @return self
     */
    public function setShortDescription($short_description)
    {
        if (is_null($short_description)) {
            array_push($this->openAPINullablesSetToNull, 'short_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('short_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($short_description) && (mb_strlen($short_description) > 100)) {
            throw new \InvalidArgumentException('invalid length for $short_description when calling ItemDTO., must be smaller than or equal to 100.');
        }

        $this->container['short_description'] = $short_description;

        return $this;
    }

    /**
     * Gets long_description
     *
     * @return string|null
     */
    public function getLongDescription()
    {
        return $this->container['long_description'];
    }

    /**
     * Sets long_description
     *
     * @param string|null $long_description In-depth description of the item. This description may appear in reports for the item. The description should include only Unicode characters that are encoded with UTF-8 using 1 to 3 bytes. Encoded symbols that take up to 4 bytes, such as emojis, are not supported.
     *
     * @return self
     */
    public function setLongDescription($long_description)
    {
        if (is_null($long_description)) {
            array_push($this->openAPINullablesSetToNull, 'long_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('long_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['long_description'] = $long_description;

        return $this;
    }

    /**
     * Gets item_type
     *
     * @return string|null
     */
    public function getItemType()
    {
        return $this->container['item_type'];
    }

    /**
     * Sets item_type
     *
     * @param string|null $item_type Type of item. The default value is 'Simple'. The other available value is 'CustomFee'.
     *
     * @return self
     */
    public function setItemType($item_type)
    {
        if (is_null($item_type)) {
            array_push($this->openAPINullablesSetToNull, 'item_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getItemTypeAllowableValues();
        if (!is_null($item_type) && !in_array($item_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'item_type', must be one of '%s'",
                    $item_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['item_type'] = $item_type;

        return $this;
    }

    /**
     * Gets intangible_item_flag
     *
     * @return bool|null
     */
    public function getIntangibleItemFlag()
    {
        return $this->container['intangible_item_flag'];
    }

    /**
     * Sets intangible_item_flag
     *
     * @param bool|null $intangible_item_flag Used for items such as marketing collateral that are packed in shipment boxes in addition to the ordered items.
     *
     * @return self
     */
    public function setIntangibleItemFlag($intangible_item_flag)
    {
        if (is_null($intangible_item_flag)) {
            throw new \InvalidArgumentException('non-nullable intangible_item_flag cannot be null');
        }
        $this->container['intangible_item_flag'] = $intangible_item_flag;

        return $this;
    }

    /**
     * Gets external_image_url
     *
     * @return string|null
     */
    public function getExternalImageUrl()
    {
        return $this->container['external_image_url'];
    }

    /**
     * Sets external_image_url
     *
     * @param string|null $external_image_url URL for an image of the item that is typically stored in a content management system. A format of GIF, PNG, or JPG is recommended.
     *
     * @return self
     */
    public function setExternalImageUrl($external_image_url)
    {
        if (is_null($external_image_url)) {
            array_push($this->openAPINullablesSetToNull, 'external_image_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('external_image_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($external_image_url) && (mb_strlen($external_image_url) > 200)) {
            throw new \InvalidArgumentException('invalid length for $external_image_url when calling ItemDTO., must be smaller than or equal to 200.');
        }

        $this->container['external_image_url'] = $external_image_url;

        return $this;
    }

    /**
     * Gets product_category
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getProductCategory()
    {
        return $this->container['product_category'];
    }

    /**
     * Sets product_category
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $product_category product_category
     *
     * @return self
     */
    public function setProductCategory($product_category)
    {
        if (is_null($product_category)) {
            array_push($this->openAPINullablesSetToNull, 'product_category');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_category', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['product_category'] = $product_category;

        return $this;
    }

    /**
     * Gets abc_category
     *
     * @return string|null
     */
    public function getAbcCategory()
    {
        return $this->container['abc_category'];
    }

    /**
     * Sets abc_category
     *
     * @param string|null $abc_category Sales velocity of the item based on the item's sales history. Top selling items are A, then B, and so on. This field is informational only, and does not impact any workflow processes or other product functionality.
     *
     * @return self
     */
    public function setAbcCategory($abc_category)
    {
        if (is_null($abc_category)) {
            array_push($this->openAPINullablesSetToNull, 'abc_category');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('abc_category', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getAbcCategoryAllowableValues();
        if (!is_null($abc_category) && !in_array($abc_category, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'abc_category', must be one of '%s'",
                    $abc_category,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['abc_category'] = $abc_category;

        return $this;
    }

    /**
     * Gets brand_name
     *
     * @return string|null
     */
    public function getBrandName()
    {
        return $this->container['brand_name'];
    }

    /**
     * Sets brand_name
     *
     * @param string|null $brand_name Brand name associated with the product, typically used in retail merchandising.
     *
     * @return self
     */
    public function setBrandName($brand_name)
    {
        if (is_null($brand_name)) {
            array_push($this->openAPINullablesSetToNull, 'brand_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('brand_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($brand_name) && (mb_strlen($brand_name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $brand_name when calling ItemDTO., must be smaller than or equal to 35.');
        }

        $this->container['brand_name'] = $brand_name;

        return $this;
    }

    /**
     * Gets product_code
     *
     * @return string|null
     */
    public function getProductCode()
    {
        return $this->container['product_code'];
    }

    /**
     * Sets product_code
     *
     * @param string|null $product_code Identification code for the product, typically used in retail merchandising.
     *
     * @return self
     */
    public function setProductCode($product_code)
    {
        if (is_null($product_code)) {
            array_push($this->openAPINullablesSetToNull, 'product_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($product_code) && (mb_strlen($product_code) > 40)) {
            throw new \InvalidArgumentException('invalid length for $product_code when calling ItemDTO., must be smaller than or equal to 40.');
        }

        $this->container['product_code'] = $product_code;

        return $this;
    }

    /**
     * Gets color_code
     *
     * @return string|null
     */
    public function getColorCode()
    {
        return $this->container['color_code'];
    }

    /**
     * Sets color_code
     *
     * @param string|null $color_code Identification code of the color variation for the product, typically used in retail merchandising.
     *
     * @return self
     */
    public function setColorCode($color_code)
    {
        if (is_null($color_code)) {
            array_push($this->openAPINullablesSetToNull, 'color_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('color_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($color_code) && (mb_strlen($color_code) > 100)) {
            throw new \InvalidArgumentException('invalid length for $color_code when calling ItemDTO., must be smaller than or equal to 100.');
        }

        $this->container['color_code'] = $color_code;

        return $this;
    }

    /**
     * Gets color_name
     *
     * @return string|null
     */
    public function getColorName()
    {
        return $this->container['color_name'];
    }

    /**
     * Sets color_name
     *
     * @param string|null $color_name Name of the color variation for the product, typically used in retail merchandising.
     *
     * @return self
     */
    public function setColorName($color_name)
    {
        if (is_null($color_name)) {
            array_push($this->openAPINullablesSetToNull, 'color_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('color_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($color_name) && (mb_strlen($color_name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $color_name when calling ItemDTO., must be smaller than or equal to 100.');
        }

        $this->container['color_name'] = $color_name;

        return $this;
    }

    /**
     * Gets size
     *
     * @return string|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param string|null $size Size of the product, typically used in retail merchandising.
     *
     * @return self
     */
    public function setSize($size)
    {
        if (is_null($size)) {
            array_push($this->openAPINullablesSetToNull, 'size');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('size', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($size) && (mb_strlen($size) > 100)) {
            throw new \InvalidArgumentException('invalid length for $size when calling ItemDTO., must be smaller than or equal to 100.');
        }

        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets style_name
     *
     * @return string|null
     */
    public function getStyleName()
    {
        return $this->container['style_name'];
    }

    /**
     * Sets style_name
     *
     * @param string|null $style_name Name of the product, typically used in retail merchandising.
     *
     * @return self
     */
    public function setStyleName($style_name)
    {
        if (is_null($style_name)) {
            array_push($this->openAPINullablesSetToNull, 'style_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('style_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($style_name) && (mb_strlen($style_name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $style_name when calling ItemDTO., must be smaller than or equal to 100.');
        }

        $this->container['style_name'] = $style_name;

        return $this;
    }

    /**
     * Gets style_number
     *
     * @return string|null
     */
    public function getStyleNumber()
    {
        return $this->container['style_number'];
    }

    /**
     * Sets style_number
     *
     * @param string|null $style_number Style number for the product, typically used in retail merchandising. Note that in retail merchandising, the style number and product code for an item are the same.
     *
     * @return self
     */
    public function setStyleNumber($style_number)
    {
        if (is_null($style_number)) {
            array_push($this->openAPINullablesSetToNull, 'style_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('style_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($style_number) && (mb_strlen($style_number) > 100)) {
            throw new \InvalidArgumentException('invalid length for $style_number when calling ItemDTO., must be smaller than or equal to 100.');
        }

        $this->container['style_number'] = $style_number;

        return $this;
    }

    /**
     * Gets hazmat
     *
     * @return bool|null
     */
    public function getHazmat()
    {
        return $this->container['hazmat'];
    }

    /**
     * Sets hazmat
     *
     * @param bool|null $hazmat Whether the item includes hazardous materials.
     *
     * @return self
     */
    public function setHazmat($hazmat)
    {
        if (is_null($hazmat)) {
            throw new \InvalidArgumentException('non-nullable hazmat cannot be null');
        }
        $this->container['hazmat'] = $hazmat;

        return $this;
    }

    /**
     * Gets hazmat_code
     *
     * @return string|null
     */
    public function getHazmatCode()
    {
        return $this->container['hazmat_code'];
    }

    /**
     * Sets hazmat_code
     *
     * @param string|null $hazmat_code Code associated with the hazardous materials in the item.
     *
     * @return self
     */
    public function setHazmatCode($hazmat_code)
    {
        if (is_null($hazmat_code)) {
            array_push($this->openAPINullablesSetToNull, 'hazmat_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hazmat_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($hazmat_code) && (mb_strlen($hazmat_code) > 4)) {
            throw new \InvalidArgumentException('invalid length for $hazmat_code when calling ItemDTO., must be smaller than or equal to 4.');
        }

        $this->container['hazmat_code'] = $hazmat_code;

        return $this;
    }

    /**
     * Gets inspection_required
     *
     * @return bool|null
     */
    public function getInspectionRequired()
    {
        return $this->container['inspection_required'];
    }

    /**
     * Sets inspection_required
     *
     * @param bool|null $inspection_required Whether stock for the item must be inspected when it is received.
     *
     * @return self
     */
    public function setInspectionRequired($inspection_required)
    {
        if (is_null($inspection_required)) {
            throw new \InvalidArgumentException('non-nullable inspection_required cannot be null');
        }
        $this->container['inspection_required'] = $inspection_required;

        return $this;
    }

    /**
     * Gets unit_price
     *
     * @return int|null
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param int|null $unit_price Price per unit for the item.
     *
     * @return self
     */
    public function setUnitPrice($unit_price)
    {
        if (is_null($unit_price)) {
            throw new \InvalidArgumentException('non-nullable unit_price cannot be null');
        }

        if (($unit_price > 0)) {
            throw new \InvalidArgumentException('invalid value for $unit_price when calling ItemDTO., must be smaller than or equal to 0.');
        }
        if (($unit_price < 0)) {
            throw new \InvalidArgumentException('invalid value for $unit_price when calling ItemDTO., must be bigger than or equal to 0.');
        }

        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets purchase_cost
     *
     * @return int|null
     */
    public function getPurchaseCost()
    {
        return $this->container['purchase_cost'];
    }

    /**
     * Sets purchase_cost
     *
     * @param int|null $purchase_cost Cost to purchase the item; either the average purchase cost or the purchase cost for each vendor or pack.
     *
     * @return self
     */
    public function setPurchaseCost($purchase_cost)
    {
        if (is_null($purchase_cost)) {
            throw new \InvalidArgumentException('non-nullable purchase_cost cannot be null');
        }

        if (($purchase_cost > 0)) {
            //throw new \InvalidArgumentException('invalid value for $purchase_cost when calling ItemDTO., must be smaller than or equal to 0.');
        }
        if (($purchase_cost < 0)) {
            //throw new \InvalidArgumentException('invalid value for $purchase_cost when calling ItemDTO., must be bigger than or equal to 0.');
        }

        $this->container['purchase_cost'] = $purchase_cost;

        return $this;
    }

    /**
     * Gets taxable
     *
     * @return bool|null
     */
    public function getTaxable()
    {
        return $this->container['taxable'];
    }

    /**
     * Sets taxable
     *
     * @param bool|null $taxable Whether tax should be calculated for the item when the item is included on a sales order.
     *
     * @return self
     */
    public function setTaxable($taxable)
    {
        if (is_null($taxable)) {
            throw new \InvalidArgumentException('non-nullable taxable cannot be null');
        }
        $this->container['taxable'] = $taxable;

        return $this;
    }

    /**
     * Gets lot_tracking_enabled
     *
     * @return bool|null
     */
    public function getLotTrackingEnabled()
    {
        return $this->container['lot_tracking_enabled'];
    }

    /**
     * Sets lot_tracking_enabled
     *
     * @param bool|null $lot_tracking_enabled Whether stock for the item must include a lot number.
     *
     * @return self
     */
    public function setLotTrackingEnabled($lot_tracking_enabled)
    {
        if (is_null($lot_tracking_enabled)) {
            throw new \InvalidArgumentException('non-nullable lot_tracking_enabled cannot be null');
        }
        $this->container['lot_tracking_enabled'] = $lot_tracking_enabled;

        return $this;
    }

    /**
     * Gets serial_tracking_enabled
     *
     * @return bool|null
     */
    public function getSerialTrackingEnabled()
    {
        return $this->container['serial_tracking_enabled'];
    }

    /**
     * Sets serial_tracking_enabled
     *
     * @param bool|null $serial_tracking_enabled Whether stock for the item must include a serial number.
     *
     * @return self
     */
    public function setSerialTrackingEnabled($serial_tracking_enabled)
    {
        if (is_null($serial_tracking_enabled)) {
            throw new \InvalidArgumentException('non-nullable serial_tracking_enabled cannot be null');
        }
        $this->container['serial_tracking_enabled'] = $serial_tracking_enabled;

        return $this;
    }

    /**
     * Gets born_on_date_required
     *
     * @return bool|null
     */
    public function getBornOnDateRequired()
    {
        return $this->container['born_on_date_required'];
    }

    /**
     * Sets born_on_date_required
     *
     * @param bool|null $born_on_date_required Whether a born on date must be entered for the item.
     *
     * @return self
     */
    public function setBornOnDateRequired($born_on_date_required)
    {
        if (is_null($born_on_date_required)) {
            throw new \InvalidArgumentException('non-nullable born_on_date_required cannot be null');
        }
        $this->container['born_on_date_required'] = $born_on_date_required;

        return $this;
    }

    /**
     * Gets expiration_date_required
     *
     * @return bool|null
     */
    public function getExpirationDateRequired()
    {
        return $this->container['expiration_date_required'];
    }

    /**
     * Sets expiration_date_required
     *
     * @param bool|null $expiration_date_required Whether an expiration date must be entered for the item.
     *
     * @return self
     */
    public function setExpirationDateRequired($expiration_date_required)
    {
        if (is_null($expiration_date_required)) {
            throw new \InvalidArgumentException('non-nullable expiration_date_required cannot be null');
        }
        $this->container['expiration_date_required'] = $expiration_date_required;

        return $this;
    }

    /**
     * Gets serial_capture_point
     *
     * @return string|null
     */
    public function getSerialCapturePoint()
    {
        return $this->container['serial_capture_point'];
    }

    /**
     * Sets serial_capture_point
     *
     * @param string|null $serial_capture_point Controls when item tracking attributes are captured and entered into the stock unit records for an item. Available values include:  - `Null` - Capture all item tracking attributes during receiving, and confirm during picking, packing, and inventory move.  - `Receiving` - Capture all item tracking attributes during receiving, and confirm during picking, packing, and inventory move.  - `Picking` - Capture lot number, born on date, and expiration date at receiving, and confirm during picking, packing, and inventory move. Capture serial number during picking; confirm during packing and inventory move.  - `Packing` - Capture lot number, born on date, and expiration date at receiving, and confirm during picking, packing, and inventory move. Capture serial number during packing; confirm during inventory move.
     *
     * @return self
     */
    public function setSerialCapturePoint($serial_capture_point)
    {
        if (is_null($serial_capture_point)) {
            array_push($this->openAPINullablesSetToNull, 'serial_capture_point');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serial_capture_point', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getSerialCapturePointAllowableValues();
        if (!is_null($serial_capture_point) && !in_array($serial_capture_point, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'serial_capture_point', must be one of '%s'",
                    $serial_capture_point,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['serial_capture_point'] = $serial_capture_point;

        return $this;
    }

    /**
     * Gets inventory_tracking_enabled
     *
     * @return bool|null
     */
    public function getInventoryTrackingEnabled()
    {
        return $this->container['inventory_tracking_enabled'];
    }

    /**
     * Sets inventory_tracking_enabled
     *
     * @param bool|null $inventory_tracking_enabled Whether to track inventory for the item. Set to false if the item can be received, but no stock units should be created. If an item is considered intangible and should not be picked, then this field should be set to false.
     *
     * @return self
     */
    public function setInventoryTrackingEnabled($inventory_tracking_enabled)
    {
        if (is_null($inventory_tracking_enabled)) {
            throw new \InvalidArgumentException('non-nullable inventory_tracking_enabled cannot be null');
        }
        $this->container['inventory_tracking_enabled'] = $inventory_tracking_enabled;

        return $this;
    }

    /**
     * Gets shippable
     *
     * @return bool|null
     */
    public function getShippable()
    {
        return $this->container['shippable'];
    }

    /**
     * Sets shippable
     *
     * @param bool|null $shippable Whether the item can be shipped for order fulfillment.
     *
     * @return self
     */
    public function setShippable($shippable)
    {
        if (is_null($shippable)) {
            throw new \InvalidArgumentException('non-nullable shippable cannot be null');
        }
        $this->container['shippable'] = $shippable;

        return $this;
    }

    /**
     * Gets sales_enabled_flag
     *
     * @return bool|null
     */
    public function getSalesEnabledFlag()
    {
        return $this->container['sales_enabled_flag'];
    }

    /**
     * Sets sales_enabled_flag
     *
     * @param bool|null $sales_enabled_flag Whether to enable sales of the item through the Sales Order Entry feature.
     *
     * @return self
     */
    public function setSalesEnabledFlag($sales_enabled_flag)
    {
        if (is_null($sales_enabled_flag)) {
            throw new \InvalidArgumentException('non-nullable sales_enabled_flag cannot be null');
        }
        $this->container['sales_enabled_flag'] = $sales_enabled_flag;

        return $this;
    }

    /**
     * Gets cycle_count
     *
     * @return bool|null
     */
    public function getCycleCount()
    {
        return $this->container['cycle_count'];
    }

    /**
     * Sets cycle_count
     *
     * @param bool|null $cycle_count Whether locations that are associated with the item should be counted by using either a cycle count or a physical count.
     *
     * @return self
     */
    public function setCycleCount($cycle_count)
    {
        if (is_null($cycle_count)) {
            throw new \InvalidArgumentException('non-nullable cycle_count cannot be null');
        }
        $this->container['cycle_count'] = $cycle_count;

        return $this;
    }

    /**
     * Gets cycle_count_frequency
     *
     * @return int|null
     */
    public function getCycleCountFrequency()
    {
        return $this->container['cycle_count_frequency'];
    }

    /**
     * Sets cycle_count_frequency
     *
     * @param int|null $cycle_count_frequency How often the item should be cycle counted, measured in days. The frequency should be configured on the cycle count profile, and if configured there, takes precedence over the setting for the item.
     *
     * @return self
     */
    public function setCycleCountFrequency($cycle_count_frequency)
    {
        if (is_null($cycle_count_frequency)) {
            throw new \InvalidArgumentException('non-nullable cycle_count_frequency cannot be null');
        }
        $this->container['cycle_count_frequency'] = $cycle_count_frequency;

        return $this;
    }

    /**
     * Gets receive_over_tolerance
     *
     * @return int|null
     */
    public function getReceiveOverTolerance()
    {
        return $this->container['receive_over_tolerance'];
    }

    /**
     * Sets receive_over_tolerance
     *
     * @param int|null $receive_over_tolerance During the receiving process, the number of items that can be received over the order pack quantity of the order line. Provide a value based on the percentage over the order line; for example, a value of 1.2 allows receiving of 20% over tolerance.
     *
     * @return self
     */
    public function setReceiveOverTolerance($receive_over_tolerance)
    {
        if (is_null($receive_over_tolerance)) {
            array_push($this->openAPINullablesSetToNull, 'receive_over_tolerance');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('receive_over_tolerance', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($receive_over_tolerance) && ($receive_over_tolerance > 0)) {
            throw new \InvalidArgumentException('invalid value for $receive_over_tolerance when calling ItemDTO., must be smaller than or equal to 0.');
        }
        if (!is_null($receive_over_tolerance) && ($receive_over_tolerance < 0)) {
            throw new \InvalidArgumentException('invalid value for $receive_over_tolerance when calling ItemDTO., must be bigger than or equal to 0.');
        }

        $this->container['receive_over_tolerance'] = $receive_over_tolerance;

        return $this;
    }

    /**
     * Gets reorder_point
     *
     * @return int|null
     */
    public function getReorderPoint()
    {
        return $this->container['reorder_point'];
    }

    /**
     * Sets reorder_point
     *
     * @param int|null $reorder_point Minimum number of items to maintain inventory. This is the minimum value in a min/max inventory strategy. This field is informational only, and does not impact any workflow processes or other product functionality.
     *
     * @return self
     */
    public function setReorderPoint($reorder_point)
    {
        if (is_null($reorder_point)) {
            throw new \InvalidArgumentException('non-nullable reorder_point cannot be null');
        }
        $this->container['reorder_point'] = $reorder_point;

        return $this;
    }

    /**
     * Gets reorder_quantity
     *
     * @return int|null
     */
    public function getReorderQuantity()
    {
        return $this->container['reorder_quantity'];
    }

    /**
     * Sets reorder_quantity
     *
     * @param int|null $reorder_quantity Number of items to order to ensure sufficient inventory. This is the maximum value in a min/max inventory strategy.
     *
     * @return self
     */
    public function setReorderQuantity($reorder_quantity)
    {
        if (is_null($reorder_quantity)) {
            throw new \InvalidArgumentException('non-nullable reorder_quantity cannot be null');
        }
        $this->container['reorder_quantity'] = $reorder_quantity;

        return $this;
    }

    /**
     * Gets trading_partner
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getTradingPartner()
    {
        return $this->container['trading_partner'];
    }

    /**
     * Sets trading_partner
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $trading_partner trading_partner
     *
     * @return self
     */
    public function setTradingPartner($trading_partner)
    {
        if (is_null($trading_partner)) {
            array_push($this->openAPINullablesSetToNull, 'trading_partner');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('trading_partner', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['trading_partner'] = $trading_partner;

        return $this;
    }

    /**
     * Gets item_vendors
     *
     * @return \BeLenka\Deposco\Model\ItemVendorCollectionDTO|null
     */
    public function getItemVendors()
    {
        return $this->container['item_vendors'];
    }

    /**
     * Sets item_vendors
     *
     * @param \BeLenka\Deposco\Model\ItemVendorCollectionDTO|null $item_vendors item_vendors
     *
     * @return self
     */
    public function setItemVendors($item_vendors)
    {
        if (is_null($item_vendors)) {
            throw new \InvalidArgumentException('non-nullable item_vendors cannot be null');
        }
        $this->container['item_vendors'] = $item_vendors;

        return $this;
    }

    /**
     * Gets components
     *
     * @return \BeLenka\Deposco\Model\ComponentDTO[]|null
     */
    public function getComponents()
    {
        return $this->container['components'];
    }

    /**
     * Sets components
     *
     * @param \BeLenka\Deposco\Model\ComponentDTO[]|null $components For bundled products that are composed of multiple individual items, array of component items that are used to assemble the item.
     *
     * @return self
     */
    public function setComponents($components)
    {
        if (is_null($components)) {
            throw new \InvalidArgumentException('non-nullable components cannot be null');
        }
        $this->container['components'] = $components;

        return $this;
    }

    /**
     * Gets kit_order_only
     *
     * @return bool|null
     */
    public function getKitOrderOnly()
    {
        return $this->container['kit_order_only'];
    }

    /**
     * Sets kit_order_only
     *
     * @param bool|null $kit_order_only For bundled products that are composed of multiple individual items, whether the system will only release orders if component inventory is available. If inventory is only available for the parent kit, the system will move to a status of Back Ordered.
     *
     * @return self
     */
    public function setKitOrderOnly($kit_order_only)
    {
        if (is_null($kit_order_only)) {
            throw new \InvalidArgumentException('non-nullable kit_order_only cannot be null');
        }
        $this->container['kit_order_only'] = $kit_order_only;

        return $this;
    }

    /**
     * Gets kit_stock_only
     *
     * @return bool|null
     */
    public function getKitStockOnly()
    {
        return $this->container['kit_stock_only'];
    }

    /**
     * Sets kit_stock_only
     *
     * @param bool|null $kit_stock_only For bundled products that are composed of multiple individual items, whether to release only kitted items and not the individual items that could be assembled during order processing during the Build and Release Wave process. To release this item on a wave, the item must already be kit assembled through kit to stock processes. This item field setting overrides parameters on an order release profile during the Build and Release Wave process.
     *
     * @return self
     */
    public function setKitStockOnly($kit_stock_only)
    {
        if (is_null($kit_stock_only)) {
            throw new \InvalidArgumentException('non-nullable kit_stock_only cannot be null');
        }
        $this->container['kit_stock_only'] = $kit_stock_only;

        return $this;
    }

    /**
     * Gets hs_codes
     *
     * @return \BeLenka\Deposco\Model\HSCodeCollectionDTO|null
     */
    public function getHsCodes()
    {
        return $this->container['hs_codes'];
    }

    /**
     * Sets hs_codes
     *
     * @param \BeLenka\Deposco\Model\HSCodeCollectionDTO|null $hs_codes hs_codes
     *
     * @return self
     */
    public function setHsCodes($hs_codes)
    {
        if (is_null($hs_codes)) {
            throw new \InvalidArgumentException('non-nullable hs_codes cannot be null');
        }
        $this->container['hs_codes'] = $hs_codes;

        return $this;
    }

    /**
     * Gets origin_country
     *
     * @return string|null
     */
    public function getOriginCountry()
    {
        return $this->container['origin_country'];
    }

    /**
     * Sets origin_country
     *
     * @param string|null $origin_country Country in which the item was made. Required when shipping international orders.
     *
     * @return self
     */
    public function setOriginCountry($origin_country)
    {
        if (is_null($origin_country)) {
            array_push($this->openAPINullablesSetToNull, 'origin_country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('origin_country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['origin_country'] = $origin_country;

        return $this;
    }

    /**
     * Gets class_type
     *
     * @return string|null
     */
    public function getClassType()
    {
        return $this->container['class_type'];
    }

    /**
     * Sets class_type
     *
     * @param string|null $class_type Freight class of the commodity as classified by the National Motor Freight Classification (NMFC).
     *
     * @return self
     */
    public function setClassType($class_type)
    {
        if (is_null($class_type)) {
            array_push($this->openAPINullablesSetToNull, 'class_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('class_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($class_type) && (mb_strlen($class_type) > 20)) {
            throw new \InvalidArgumentException('invalid length for $class_type when calling ItemDTO., must be smaller than or equal to 20.');
        }

        $this->container['class_type'] = $class_type;

        return $this;
    }

    /**
     * Gets nmfc_number
     *
     * @return string|null
     */
    public function getNmfcNumber()
    {
        return $this->container['nmfc_number'];
    }

    /**
     * Sets nmfc_number
     *
     * @param string|null $nmfc_number NMFC number, which is used to classify an item and receive the most accurate pricing for freight shipping.
     *
     * @return self
     */
    public function setNmfcNumber($nmfc_number)
    {
        if (is_null($nmfc_number)) {
            array_push($this->openAPINullablesSetToNull, 'nmfc_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nmfc_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($nmfc_number) && (mb_strlen($nmfc_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $nmfc_number when calling ItemDTO., must be smaller than or equal to 50.');
        }

        $this->container['nmfc_number'] = $nmfc_number;

        return $this;
    }

    /**
     * Gets transportation_class
     *
     * @return string|null
     */
    public function getTransportationClass()
    {
        return $this->container['transportation_class'];
    }

    /**
     * Sets transportation_class
     *
     * @param string|null $transportation_class General product description as listed in the NMFC.
     *
     * @return self
     */
    public function setTransportationClass($transportation_class)
    {
        if (is_null($transportation_class)) {
            array_push($this->openAPINullablesSetToNull, 'transportation_class');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transportation_class', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($transportation_class) && (mb_strlen($transportation_class) > 50)) {
            throw new \InvalidArgumentException('invalid length for $transportation_class when calling ItemDTO., must be smaller than or equal to 50.');
        }

        $this->container['transportation_class'] = $transportation_class;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return \BeLenka\Deposco\Model\ItemDTOWeight|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param \BeLenka\Deposco\Model\ItemDTOWeight|null $weight weight
     *
     * @return self
     */
    public function setWeight($weight)
    {
        if (is_null($weight)) {
            throw new \InvalidArgumentException('non-nullable weight cannot be null');
        }
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets carrier_special_services
     *
     * @return \BeLenka\Deposco\Model\CarrierSpecialServiceDTO[]|null
     */
    public function getCarrierSpecialServices()
    {
        return $this->container['carrier_special_services'];
    }

    /**
     * Sets carrier_special_services
     *
     * @param \BeLenka\Deposco\Model\CarrierSpecialServiceDTO[]|null $carrier_special_services carrier_special_services
     *
     * @return self
     */
    public function setCarrierSpecialServices($carrier_special_services)
    {
        if (is_null($carrier_special_services)) {
            throw new \InvalidArgumentException('non-nullable carrier_special_services cannot be null');
        }
        $this->container['carrier_special_services'] = $carrier_special_services;

        return $this;
    }

    /**
     * Gets custom_attribute1
     *
     * @return string|null
     */
    public function getCustomAttribute1()
    {
        return $this->container['custom_attribute1'];
    }

    /**
     * Sets custom_attribute1
     *
     * @param string|null $custom_attribute1 Custom field for the item.
     *
     * @return self
     */
    public function setCustomAttribute1($custom_attribute1)
    {
        if (is_null($custom_attribute1)) {
            array_push($this->openAPINullablesSetToNull, 'custom_attribute1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_attribute1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($custom_attribute1) && (mb_strlen($custom_attribute1) > 200)) {
            throw new \InvalidArgumentException('invalid length for $custom_attribute1 when calling ItemDTO., must be smaller than or equal to 200.');
        }

        $this->container['custom_attribute1'] = $custom_attribute1;

        return $this;
    }

    /**
     * Gets custom_attribute2
     *
     * @return string|null
     */
    public function getCustomAttribute2()
    {
        return $this->container['custom_attribute2'];
    }

    /**
     * Sets custom_attribute2
     *
     * @param string|null $custom_attribute2 Custom field for the item.
     *
     * @return self
     */
    public function setCustomAttribute2($custom_attribute2)
    {
        if (is_null($custom_attribute2)) {
            array_push($this->openAPINullablesSetToNull, 'custom_attribute2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_attribute2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($custom_attribute2) && (mb_strlen($custom_attribute2) > 200)) {
            throw new \InvalidArgumentException('invalid length for $custom_attribute2 when calling ItemDTO., must be smaller than or equal to 200.');
        }

        $this->container['custom_attribute2'] = $custom_attribute2;

        return $this;
    }

    /**
     * Gets custom_attribute3
     *
     * @return string|null
     */
    public function getCustomAttribute3()
    {
        return $this->container['custom_attribute3'];
    }

    /**
     * Sets custom_attribute3
     *
     * @param string|null $custom_attribute3 Custom field for the item.
     *
     * @return self
     */
    public function setCustomAttribute3($custom_attribute3)
    {
        if (is_null($custom_attribute3)) {
            array_push($this->openAPINullablesSetToNull, 'custom_attribute3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_attribute3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($custom_attribute3) && (mb_strlen($custom_attribute3) > 200)) {
            throw new \InvalidArgumentException('invalid length for $custom_attribute3 when calling ItemDTO., must be smaller than or equal to 200.');
        }

        $this->container['custom_attribute3'] = $custom_attribute3;

        return $this;
    }

    /**
     * Gets custom_attribute4
     *
     * @return string|null
     */
    public function getCustomAttribute4()
    {
        return $this->container['custom_attribute4'];
    }

    /**
     * Sets custom_attribute4
     *
     * @param string|null $custom_attribute4 Custom field for the item.
     *
     * @return self
     */
    public function setCustomAttribute4($custom_attribute4)
    {
        if (is_null($custom_attribute4)) {
            array_push($this->openAPINullablesSetToNull, 'custom_attribute4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_attribute4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($custom_attribute4) && (mb_strlen($custom_attribute4) > 200)) {
            throw new \InvalidArgumentException('invalid length for $custom_attribute4 when calling ItemDTO., must be smaller than or equal to 200.');
        }

        $this->container['custom_attribute4'] = $custom_attribute4;

        return $this;
    }

    /**
     * Gets custom_attribute5
     *
     * @return string|null
     */
    public function getCustomAttribute5()
    {
        return $this->container['custom_attribute5'];
    }

    /**
     * Sets custom_attribute5
     *
     * @param string|null $custom_attribute5 Custom field for the item.
     *
     * @return self
     */
    public function setCustomAttribute5($custom_attribute5)
    {
        if (is_null($custom_attribute5)) {
            array_push($this->openAPINullablesSetToNull, 'custom_attribute5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_attribute5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($custom_attribute5) && (mb_strlen($custom_attribute5) > 200)) {
            throw new \InvalidArgumentException('invalid length for $custom_attribute5 when calling ItemDTO., must be smaller than or equal to 200.');
        }

        $this->container['custom_attribute5'] = $custom_attribute5;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return \BeLenka\Deposco\Model\CustomFieldDTO[]|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param \BeLenka\Deposco\Model\CustomFieldDTO[]|null $custom_fields Array of custom fields for the item.
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {
        if (is_null($custom_fields)) {
            throw new \InvalidArgumentException('non-nullable custom_fields cannot be null');
        }
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets channels
     *
     * @return \BeLenka\Deposco\Model\ChannelListingDTO[]|null
     */
    public function getChannels()
    {
        return $this->container['channels'];
    }

    /**
     * Sets channels
     *
     * @param \BeLenka\Deposco\Model\ChannelListingDTO[]|null $channels Array of channel listings for the item.
     *
     * @return self
     */
    public function setChannels($channels)
    {
        if (is_null($channels)) {
            throw new \InvalidArgumentException('non-nullable channels cannot be null');
        }
        $this->container['channels'] = $channels;

        return $this;
    }

    /**
     * Gets accounting_type
     *
     * @return string|null
     */
    public function getAccountingType()
    {
        return $this->container['accounting_type'];
    }

    /**
     * Sets accounting_type
     *
     * @param string|null $accounting_type Used by the QuickBooks Desktop socket.
     *
     * @return self
     */
    public function setAccountingType($accounting_type)
    {
        if (is_null($accounting_type)) {
            array_push($this->openAPINullablesSetToNull, 'accounting_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accounting_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($accounting_type) && (mb_strlen($accounting_type) > 50)) {
            throw new \InvalidArgumentException('invalid length for $accounting_type when calling ItemDTO., must be smaller than or equal to 50.');
        }

        $this->container['accounting_type'] = $accounting_type;

        return $this;
    }

    /**
     * Gets default_ledger_account
     *
     * @return string|null
     */
    public function getDefaultLedgerAccount()
    {
        return $this->container['default_ledger_account'];
    }

    /**
     * Sets default_ledger_account
     *
     * @param string|null $default_ledger_account Used by the QuickBooks Desktop socket.
     *
     * @return self
     */
    public function setDefaultLedgerAccount($default_ledger_account)
    {
        if (is_null($default_ledger_account)) {
            array_push($this->openAPINullablesSetToNull, 'default_ledger_account');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('default_ledger_account', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($default_ledger_account) && (mb_strlen($default_ledger_account) > 50)) {
            throw new \InvalidArgumentException('invalid length for $default_ledger_account when calling ItemDTO., must be smaller than or equal to 50.');
        }

        $this->container['default_ledger_account'] = $default_ledger_account;

        return $this;
    }

    /**
     * Gets cogs_account
     *
     * @return string|null
     */
    public function getCogsAccount()
    {
        return $this->container['cogs_account'];
    }

    /**
     * Sets cogs_account
     *
     * @param string|null $cogs_account Used by the QuickBooks Desktop socket.
     *
     * @return self
     */
    public function setCogsAccount($cogs_account)
    {
        if (is_null($cogs_account)) {
            array_push($this->openAPINullablesSetToNull, 'cogs_account');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cogs_account', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($cogs_account) && (mb_strlen($cogs_account) > 40)) {
            throw new \InvalidArgumentException('invalid length for $cogs_account when calling ItemDTO., must be smaller than or equal to 40.');
        }

        $this->container['cogs_account'] = $cogs_account;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime|null $created_date Date and time that the item was created.
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets updated_date
     *
     * @return \DateTime|null
     */
    public function getUpdatedDate()
    {
        return $this->container['updated_date'];
    }

    /**
     * Sets updated_date
     *
     * @param \DateTime|null $updated_date Date and time that the item was last updated.
     *
     * @return self
     */
    public function setUpdatedDate($updated_date)
    {
        if (is_null($updated_date)) {
            throw new \InvalidArgumentException('non-nullable updated_date cannot be null');
        }
        $this->container['updated_date'] = $updated_date;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            throw new \InvalidArgumentException('non-nullable created_by cannot be null');
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $updated_by updated_by
     *
     * @return self
     */
    public function setUpdatedBy($updated_by)
    {
        if (is_null($updated_by)) {
            throw new \InvalidArgumentException('non-nullable updated_by cannot be null');
        }
        $this->container['updated_by'] = $updated_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


