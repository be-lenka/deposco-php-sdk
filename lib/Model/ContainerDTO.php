<?php
/**
 * ContainerDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deposco API
 *
 * Welcome to the Deposco API Reference! The Deposco API enables you to integrate your system with Deposco.  * Integrate a product information system (PIM) by creating and retrieving data for items, packs, UPCs, and kits. * Set up warehouse data by creating facilities, zones, locations, and storage details. * Create inbound orders that can be received and outbound orders that can be fulfilled with Deposco warehouse management processes.  This reference provides details on available operations, endpoints, parameters, schemas, and responses.  Example requests and responses are also available for you to use as a reference. You can copy the examples to use as a starting point for your own requests.  Review the guides to learn how the API is used in common business scenarios such as setting up the warehouse and integrating a Product Information Management (PIM) system.  When you're ready to get started, register for a developer account and then log in to create your application in the developer portal.
 *
 * The version of the OpenAPI document: 2.0.2519
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\Deposco\Model;

use \ArrayAccess;
use \BeLenka\Deposco\ObjectSerializer;

/**
 * ContainerDTO Class Doc Comment
 *
 * @category Class
 * @description Container record for an object that holds stock, such as a cart, bin, pallet, or shipping box. A container can also hold other containers, such as when shipping boxes are stacked on a pallet.
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ContainerDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ContainerDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'self' => '\BeLenka\Deposco\Model\EntityRef',
        'business_unit' => '\BeLenka\Deposco\Model\EntityRef',
        'lpn_number' => 'string',
        'number' => 'string',
        'type' => 'string',
        'secondary_type' => 'string',
        'carton_type' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'description' => 'string',
        'status' => 'string',
        'gtin' => 'string',
        'dimensions' => '\BeLenka\Deposco\Model\Dimension',
        'weight' => 'int',
        'weight_uom' => 'string',
        'active_zone' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'location' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'cart' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'cart_slot_number' => 'int',
        'copy_source_lpn_number' => 'string',
        'parent' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'master_lpn_number' => 'string',
        'package_type' => 'string',
        'shipment' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'trip' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'insured_value' => 'int',
        'shipping_cost' => 'int',
        'base_tracking_link' => 'string',
        'tracking_url' => 'string',
        'tracking_number' => 'string',
        'tracking_number2' => 'string',
        'return_tracking_number' => 'string',
        'usps_construct_code' => 'string',
        'order_header_sequence' => 'int',
        'order_header_sequence_total' => 'int',
        'pick_wave_sequence' => 'int',
        'pick_wave_sequence_total' => 'int',
        'sequence' => 'int',
        'sequence_total' => 'int',
        'printed' => 'bool',
        'sscc_lpn_number' => 'string',
        'reference_number1' => 'string',
        'created_date' => '\DateTime',
        'updated_date' => '\DateTime',
        'created_by' => '\BeLenka\Deposco\Model\EntityRef',
        'updated_by' => '\BeLenka\Deposco\Model\EntityRef'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'self' => null,
        'business_unit' => null,
        'lpn_number' => null,
        'number' => null,
        'type' => null,
        'secondary_type' => null,
        'carton_type' => null,
        'description' => null,
        'status' => null,
        'gtin' => null,
        'dimensions' => null,
        'weight' => 'double',
        'weight_uom' => null,
        'active_zone' => null,
        'location' => null,
        'cart' => null,
        'cart_slot_number' => null,
        'copy_source_lpn_number' => null,
        'parent' => null,
        'master_lpn_number' => null,
        'package_type' => null,
        'shipment' => null,
        'trip' => null,
        'insured_value' => 'double',
        'shipping_cost' => 'double',
        'base_tracking_link' => null,
        'tracking_url' => null,
        'tracking_number' => null,
        'tracking_number2' => null,
        'return_tracking_number' => null,
        'usps_construct_code' => null,
        'order_header_sequence' => null,
        'order_header_sequence_total' => null,
        'pick_wave_sequence' => null,
        'pick_wave_sequence_total' => null,
        'sequence' => null,
        'sequence_total' => null,
        'printed' => null,
        'sscc_lpn_number' => null,
        'reference_number1' => null,
        'created_date' => 'date-time',
        'updated_date' => 'date-time',
        'created_by' => null,
        'updated_by' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'self' => false,
        'business_unit' => false,
        'lpn_number' => false,
        'number' => false,
        'type' => true,
        'secondary_type' => true,
        'carton_type' => true,
        'description' => true,
        'status' => true,
        'gtin' => true,
        'dimensions' => false,
        'weight' => false,
        'weight_uom' => true,
        'active_zone' => true,
        'location' => true,
        'cart' => true,
        'cart_slot_number' => false,
        'copy_source_lpn_number' => true,
        'parent' => true,
        'master_lpn_number' => true,
        'package_type' => true,
        'shipment' => true,
        'trip' => true,
        'insured_value' => false,
        'shipping_cost' => false,
        'base_tracking_link' => true,
        'tracking_url' => true,
        'tracking_number' => true,
        'tracking_number2' => true,
        'return_tracking_number' => true,
        'usps_construct_code' => true,
        'order_header_sequence' => false,
        'order_header_sequence_total' => false,
        'pick_wave_sequence' => false,
        'pick_wave_sequence_total' => false,
        'sequence' => false,
        'sequence_total' => false,
        'printed' => false,
        'sscc_lpn_number' => true,
        'reference_number1' => true,
        'created_date' => false,
        'updated_date' => false,
        'created_by' => false,
        'updated_by' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'self' => 'self',
        'business_unit' => 'businessUnit',
        'lpn_number' => 'lpnNumber',
        'number' => 'number',
        'type' => 'type',
        'secondary_type' => 'secondaryType',
        'carton_type' => 'cartonType',
        'description' => 'description',
        'status' => 'status',
        'gtin' => 'gtin',
        'dimensions' => 'dimensions',
        'weight' => 'weight',
        'weight_uom' => 'weightUOM',
        'active_zone' => 'activeZone',
        'location' => 'location',
        'cart' => 'cart',
        'cart_slot_number' => 'cartSlotNumber',
        'copy_source_lpn_number' => 'copySourceLpnNumber',
        'parent' => 'parent',
        'master_lpn_number' => 'masterLpnNumber',
        'package_type' => 'packageType',
        'shipment' => 'shipment',
        'trip' => 'trip',
        'insured_value' => 'insuredValue',
        'shipping_cost' => 'shippingCost',
        'base_tracking_link' => 'baseTrackingLink',
        'tracking_url' => 'trackingUrl',
        'tracking_number' => 'trackingNumber',
        'tracking_number2' => 'trackingNumber2',
        'return_tracking_number' => 'returnTrackingNumber',
        'usps_construct_code' => 'uspsConstructCode',
        'order_header_sequence' => 'orderHeaderSequence',
        'order_header_sequence_total' => 'orderHeaderSequenceTotal',
        'pick_wave_sequence' => 'pickWaveSequence',
        'pick_wave_sequence_total' => 'pickWaveSequenceTotal',
        'sequence' => 'sequence',
        'sequence_total' => 'sequenceTotal',
        'printed' => 'printed',
        'sscc_lpn_number' => 'ssccLpnNumber',
        'reference_number1' => 'referenceNumber1',
        'created_date' => 'createdDate',
        'updated_date' => 'updatedDate',
        'created_by' => 'createdBy',
        'updated_by' => 'updatedBy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'self' => 'setSelf',
        'business_unit' => 'setBusinessUnit',
        'lpn_number' => 'setLpnNumber',
        'number' => 'setNumber',
        'type' => 'setType',
        'secondary_type' => 'setSecondaryType',
        'carton_type' => 'setCartonType',
        'description' => 'setDescription',
        'status' => 'setStatus',
        'gtin' => 'setGtin',
        'dimensions' => 'setDimensions',
        'weight' => 'setWeight',
        'weight_uom' => 'setWeightUom',
        'active_zone' => 'setActiveZone',
        'location' => 'setLocation',
        'cart' => 'setCart',
        'cart_slot_number' => 'setCartSlotNumber',
        'copy_source_lpn_number' => 'setCopySourceLpnNumber',
        'parent' => 'setParent',
        'master_lpn_number' => 'setMasterLpnNumber',
        'package_type' => 'setPackageType',
        'shipment' => 'setShipment',
        'trip' => 'setTrip',
        'insured_value' => 'setInsuredValue',
        'shipping_cost' => 'setShippingCost',
        'base_tracking_link' => 'setBaseTrackingLink',
        'tracking_url' => 'setTrackingUrl',
        'tracking_number' => 'setTrackingNumber',
        'tracking_number2' => 'setTrackingNumber2',
        'return_tracking_number' => 'setReturnTrackingNumber',
        'usps_construct_code' => 'setUspsConstructCode',
        'order_header_sequence' => 'setOrderHeaderSequence',
        'order_header_sequence_total' => 'setOrderHeaderSequenceTotal',
        'pick_wave_sequence' => 'setPickWaveSequence',
        'pick_wave_sequence_total' => 'setPickWaveSequenceTotal',
        'sequence' => 'setSequence',
        'sequence_total' => 'setSequenceTotal',
        'printed' => 'setPrinted',
        'sscc_lpn_number' => 'setSsccLpnNumber',
        'reference_number1' => 'setReferenceNumber1',
        'created_date' => 'setCreatedDate',
        'updated_date' => 'setUpdatedDate',
        'created_by' => 'setCreatedBy',
        'updated_by' => 'setUpdatedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'self' => 'getSelf',
        'business_unit' => 'getBusinessUnit',
        'lpn_number' => 'getLpnNumber',
        'number' => 'getNumber',
        'type' => 'getType',
        'secondary_type' => 'getSecondaryType',
        'carton_type' => 'getCartonType',
        'description' => 'getDescription',
        'status' => 'getStatus',
        'gtin' => 'getGtin',
        'dimensions' => 'getDimensions',
        'weight' => 'getWeight',
        'weight_uom' => 'getWeightUom',
        'active_zone' => 'getActiveZone',
        'location' => 'getLocation',
        'cart' => 'getCart',
        'cart_slot_number' => 'getCartSlotNumber',
        'copy_source_lpn_number' => 'getCopySourceLpnNumber',
        'parent' => 'getParent',
        'master_lpn_number' => 'getMasterLpnNumber',
        'package_type' => 'getPackageType',
        'shipment' => 'getShipment',
        'trip' => 'getTrip',
        'insured_value' => 'getInsuredValue',
        'shipping_cost' => 'getShippingCost',
        'base_tracking_link' => 'getBaseTrackingLink',
        'tracking_url' => 'getTrackingUrl',
        'tracking_number' => 'getTrackingNumber',
        'tracking_number2' => 'getTrackingNumber2',
        'return_tracking_number' => 'getReturnTrackingNumber',
        'usps_construct_code' => 'getUspsConstructCode',
        'order_header_sequence' => 'getOrderHeaderSequence',
        'order_header_sequence_total' => 'getOrderHeaderSequenceTotal',
        'pick_wave_sequence' => 'getPickWaveSequence',
        'pick_wave_sequence_total' => 'getPickWaveSequenceTotal',
        'sequence' => 'getSequence',
        'sequence_total' => 'getSequenceTotal',
        'printed' => 'getPrinted',
        'sscc_lpn_number' => 'getSsccLpnNumber',
        'reference_number1' => 'getReferenceNumber1',
        'created_date' => 'getCreatedDate',
        'updated_date' => 'getUpdatedDate',
        'created_by' => 'getCreatedBy',
        'updated_by' => 'getUpdatedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE__20_FT = '20Ft';
    public const TYPE__40_FT = '40Ft';
    public const TYPE__40_FT_HICUBE = '40Ft Hicube';
    public const TYPE_CART = 'Cart';
    public const TYPE_PACKAGING = 'Packaging';
    public const TYPE_SHIPPING = 'Shipping';
    public const TYPE_TRANSIENT = 'Transient';
    public const TYPE_AUTO_SHIP = 'Auto Ship';
    public const TYPE__CASE = 'Case';
    public const SECONDARY_TYPE_PALLET = 'Pallet';
    public const STATUS_RECEIVING = 'Receiving';
    public const STATUS_COMPLETE = 'Complete';
    public const STATUS_READY = 'Ready';
    public const STATUS_INBOUND = 'Inbound';
    public const STATUS_STORAGE = 'Storage';
    public const STATUS_SHIPPING = 'Shipping';
    public const STATUS_LOADING = 'Loading';
    public const STATUS_PLANNED = 'Planned';
    public const STATUS_IN_TRANSIT = 'In-Transit';
    public const STATUS_OUTBOUND = 'Outbound';
    public const STATUS_NEEDS_ATTENTION = 'Needs Attention';
    public const STATUS_MISCOUNT = 'Miscount';
    public const STATUS_VALIDATED = 'Validated';
    public const STATUS_RELEASED = 'Released';
    public const STATUS_SHIPPED = 'Shipped';
    public const STATUS_EXCEPTION = 'Exception';
    public const STATUS_SSCC_GENERATED = 'SSCC Generated';
    public const STATUS_ON_HOLD = 'On Hold';
    public const WEIGHT_UOM_LB = 'LB';
    public const WEIGHT_UOM_KG = 'KG';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE__20_FT,
            self::TYPE__40_FT,
            self::TYPE__40_FT_HICUBE,
            self::TYPE_CART,
            self::TYPE_PACKAGING,
            self::TYPE_SHIPPING,
            self::TYPE_TRANSIENT,
            self::TYPE_AUTO_SHIP,
            self::TYPE__CASE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSecondaryTypeAllowableValues()
    {
        return [
            self::SECONDARY_TYPE_PALLET,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_RECEIVING,
            self::STATUS_COMPLETE,
            self::STATUS_READY,
            self::STATUS_INBOUND,
            self::STATUS_STORAGE,
            self::STATUS_SHIPPING,
            self::STATUS_LOADING,
            self::STATUS_PLANNED,
            self::STATUS_IN_TRANSIT,
            self::STATUS_OUTBOUND,
            self::STATUS_NEEDS_ATTENTION,
            self::STATUS_MISCOUNT,
            self::STATUS_VALIDATED,
            self::STATUS_RELEASED,
            self::STATUS_SHIPPED,
            self::STATUS_EXCEPTION,
            self::STATUS_SSCC_GENERATED,
            self::STATUS_ON_HOLD,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWeightUomAllowableValues()
    {
        return [
            self::WEIGHT_UOM_LB,
            self::WEIGHT_UOM_KG,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('self', $data ?? [], null);
        $this->setIfExists('business_unit', $data ?? [], null);
        $this->setIfExists('lpn_number', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('secondary_type', $data ?? [], null);
        $this->setIfExists('carton_type', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('gtin', $data ?? [], null);
        $this->setIfExists('dimensions', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
        $this->setIfExists('weight_uom', $data ?? [], null);
        $this->setIfExists('active_zone', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('cart', $data ?? [], null);
        $this->setIfExists('cart_slot_number', $data ?? [], null);
        $this->setIfExists('copy_source_lpn_number', $data ?? [], null);
        $this->setIfExists('parent', $data ?? [], null);
        $this->setIfExists('master_lpn_number', $data ?? [], null);
        $this->setIfExists('package_type', $data ?? [], null);
        $this->setIfExists('shipment', $data ?? [], null);
        $this->setIfExists('trip', $data ?? [], null);
        $this->setIfExists('insured_value', $data ?? [], null);
        $this->setIfExists('shipping_cost', $data ?? [], null);
        $this->setIfExists('base_tracking_link', $data ?? [], null);
        $this->setIfExists('tracking_url', $data ?? [], null);
        $this->setIfExists('tracking_number', $data ?? [], null);
        $this->setIfExists('tracking_number2', $data ?? [], null);
        $this->setIfExists('return_tracking_number', $data ?? [], null);
        $this->setIfExists('usps_construct_code', $data ?? [], null);
        $this->setIfExists('order_header_sequence', $data ?? [], null);
        $this->setIfExists('order_header_sequence_total', $data ?? [], null);
        $this->setIfExists('pick_wave_sequence', $data ?? [], null);
        $this->setIfExists('pick_wave_sequence_total', $data ?? [], null);
        $this->setIfExists('sequence', $data ?? [], null);
        $this->setIfExists('sequence_total', $data ?? [], null);
        $this->setIfExists('printed', $data ?? [], null);
        $this->setIfExists('sscc_lpn_number', $data ?? [], null);
        $this->setIfExists('reference_number1', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('updated_date', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('updated_by', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['business_unit'] === null) {
            $invalidProperties[] = "'business_unit' can't be null";
        }
        if ($this->container['lpn_number'] === null) {
            $invalidProperties[] = "'lpn_number' can't be null";
        }
        if ((mb_strlen($this->container['lpn_number']) > 30)) {
            $invalidProperties[] = "invalid value for 'lpn_number', the character length must be smaller than or equal to 30.";
        }

        if (!preg_match("/.*\\S.*/", $this->container['lpn_number'])) {
            $invalidProperties[] = "invalid value for 'lpn_number', must be conform to the pattern /.*\\S.*/.";
        }

        if ($this->container['number'] === null) {
            $invalidProperties[] = "'number' can't be null";
        }
        if ((mb_strlen($this->container['number']) > 30)) {
            $invalidProperties[] = "invalid value for 'number', the character length must be smaller than or equal to 30.";
        }

        if (!preg_match("/.*\\S.*/", $this->container['number'])) {
            $invalidProperties[] = "invalid value for 'number', must be conform to the pattern /.*\\S.*/.";
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSecondaryTypeAllowableValues();
        if (!is_null($this->container['secondary_type']) && !in_array($this->container['secondary_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'secondary_type', must be one of '%s'",
                $this->container['secondary_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 200)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 200.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['gtin']) && (mb_strlen($this->container['gtin']) > 20)) {
            $invalidProperties[] = "invalid value for 'gtin', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['weight']) && ($this->container['weight'] > 0)) {
            $invalidProperties[] = "invalid value for 'weight', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['weight']) && ($this->container['weight'] < 0)) {
            $invalidProperties[] = "invalid value for 'weight', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getWeightUomAllowableValues();
        if (!is_null($this->container['weight_uom']) && !in_array($this->container['weight_uom'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'weight_uom', must be one of '%s'",
                $this->container['weight_uom'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['copy_source_lpn_number']) && (mb_strlen($this->container['copy_source_lpn_number']) > 30)) {
            $invalidProperties[] = "invalid value for 'copy_source_lpn_number', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['master_lpn_number']) && (mb_strlen($this->container['master_lpn_number']) > 30)) {
            $invalidProperties[] = "invalid value for 'master_lpn_number', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['package_type']) && (mb_strlen($this->container['package_type']) > 45)) {
            $invalidProperties[] = "invalid value for 'package_type', the character length must be smaller than or equal to 45.";
        }

        if (!is_null($this->container['insured_value']) && ($this->container['insured_value'] > 0)) {
            $invalidProperties[] = "invalid value for 'insured_value', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['insured_value']) && ($this->container['insured_value'] < 0)) {
            $invalidProperties[] = "invalid value for 'insured_value', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['shipping_cost']) && ($this->container['shipping_cost'] > 0)) {
            $invalidProperties[] = "invalid value for 'shipping_cost', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['shipping_cost']) && ($this->container['shipping_cost'] < 0)) {
            $invalidProperties[] = "invalid value for 'shipping_cost', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['base_tracking_link']) && (mb_strlen($this->container['base_tracking_link']) > 400)) {
            $invalidProperties[] = "invalid value for 'base_tracking_link', the character length must be smaller than or equal to 400.";
        }

        if (!is_null($this->container['tracking_url']) && (mb_strlen($this->container['tracking_url']) > 400)) {
            $invalidProperties[] = "invalid value for 'tracking_url', the character length must be smaller than or equal to 400.";
        }

        if (!is_null($this->container['tracking_number']) && (mb_strlen($this->container['tracking_number']) > 100)) {
            $invalidProperties[] = "invalid value for 'tracking_number', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['tracking_number2']) && (mb_strlen($this->container['tracking_number2']) > 100)) {
            $invalidProperties[] = "invalid value for 'tracking_number2', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['return_tracking_number']) && (mb_strlen($this->container['return_tracking_number']) > 100)) {
            $invalidProperties[] = "invalid value for 'return_tracking_number', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['usps_construct_code']) && (mb_strlen($this->container['usps_construct_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'usps_construct_code', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['sscc_lpn_number']) && (mb_strlen($this->container['sscc_lpn_number']) > 30)) {
            $invalidProperties[] = "invalid value for 'sscc_lpn_number', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['reference_number1']) && (mb_strlen($this->container['reference_number1']) > 100)) {
            $invalidProperties[] = "invalid value for 'reference_number1', the character length must be smaller than or equal to 100.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets self
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $self self
     *
     * @return self
     */
    public function setSelf($self)
    {
        if (is_null($self)) {
            throw new \InvalidArgumentException('non-nullable self cannot be null');
        }
        $this->container['self'] = $self;

        return $this;
    }

    /**
     * Gets business_unit
     *
     * @return \BeLenka\Deposco\Model\EntityRef
     */
    public function getBusinessUnit()
    {
        return $this->container['business_unit'];
    }

    /**
     * Sets business_unit
     *
     * @param \BeLenka\Deposco\Model\EntityRef $business_unit business_unit
     *
     * @return self
     */
    public function setBusinessUnit($business_unit)
    {
        if (is_null($business_unit)) {
            throw new \InvalidArgumentException('non-nullable business_unit cannot be null');
        }
        $this->container['business_unit'] = $business_unit;

        return $this;
    }

    /**
     * Gets lpn_number
     *
     * @return string
     */
    public function getLpnNumber()
    {
        return $this->container['lpn_number'];
    }

    /**
     * Sets lpn_number
     *
     * @param string $lpn_number Unique LPN label number or barcode for the container that is scanned during warehouse management processes.
     *
     * @return self
     */
    public function setLpnNumber($lpn_number)
    {
        if (is_null($lpn_number)) {
            throw new \InvalidArgumentException('non-nullable lpn_number cannot be null');
        }
        if ((mb_strlen($lpn_number) > 30)) {
            throw new \InvalidArgumentException('invalid length for $lpn_number when calling ContainerDTO., must be smaller than or equal to 30.');
        }
        if ((!preg_match("/.*\\S.*/", ObjectSerializer::toString($lpn_number)))) {
            throw new \InvalidArgumentException("invalid value for \$lpn_number when calling ContainerDTO., must conform to the pattern /.*\\S.*/.");
        }

        $this->container['lpn_number'] = $lpn_number;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number Unique identification code for the container. May be the same as the value in `lpnNumber`.
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }
        if ((mb_strlen($number) > 30)) {
            throw new \InvalidArgumentException('invalid length for $number when calling ContainerDTO., must be smaller than or equal to 30.');
        }
        if ((!preg_match("/.*\\S.*/", ObjectSerializer::toString($number)))) {
            throw new \InvalidArgumentException("invalid value for \$number when calling ContainerDTO., must conform to the pattern /.*\\S.*/.");
        }

        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Type of container.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets secondary_type
     *
     * @return string|null
     */
    public function getSecondaryType()
    {
        return $this->container['secondary_type'];
    }

    /**
     * Sets secondary_type
     *
     * @param string|null $secondary_type When shipping on a pallet, the `type` of the container is `Shipping`, and the `secondaryType` is `Pallet`.
     *
     * @return self
     */
    public function setSecondaryType($secondary_type)
    {
        if (is_null($secondary_type)) {
            array_push($this->openAPINullablesSetToNull, 'secondary_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('secondary_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getSecondaryTypeAllowableValues();
        if (!is_null($secondary_type) && !in_array($secondary_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'secondary_type', must be one of '%s'",
                    $secondary_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['secondary_type'] = $secondary_type;

        return $this;
    }

    /**
     * Gets carton_type
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getCartonType()
    {
        return $this->container['carton_type'];
    }

    /**
     * Sets carton_type
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $carton_type carton_type
     *
     * @return self
     */
    public function setCartonType($carton_type)
    {
        if (is_null($carton_type)) {
            array_push($this->openAPINullablesSetToNull, 'carton_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('carton_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['carton_type'] = $carton_type;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Text that provides additional information about the container.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($description) && (mb_strlen($description) > 200)) {
            throw new \InvalidArgumentException('invalid length for $description when calling ContainerDTO., must be smaller than or equal to 200.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Status of the container. New containers should be created with a status of `Ready`.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets gtin
     *
     * @return string|null
     */
    public function getGtin()
    {
        return $this->container['gtin'];
    }

    /**
     * Sets gtin
     *
     * @param string|null $gtin Reserved for future use.
     *
     * @return self
     */
    public function setGtin($gtin)
    {
        if (is_null($gtin)) {
            array_push($this->openAPINullablesSetToNull, 'gtin');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gtin', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($gtin) && (mb_strlen($gtin) > 20)) {
            throw new \InvalidArgumentException('invalid length for $gtin when calling ContainerDTO., must be smaller than or equal to 20.');
        }

        $this->container['gtin'] = $gtin;

        return $this;
    }

    /**
     * Gets dimensions
     *
     * @return \BeLenka\Deposco\Model\Dimension|null
     */
    public function getDimensions()
    {
        return $this->container['dimensions'];
    }

    /**
     * Sets dimensions
     *
     * @param \BeLenka\Deposco\Model\Dimension|null $dimensions dimensions
     *
     * @return self
     */
    public function setDimensions($dimensions)
    {
        if (is_null($dimensions)) {
            throw new \InvalidArgumentException('non-nullable dimensions cannot be null');
        }
        $this->container['dimensions'] = $dimensions;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return int|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param int|null $weight Weight of the container.
     *
     * @return self
     */
    public function setWeight($weight)
    {
        if (is_null($weight)) {
            throw new \InvalidArgumentException('non-nullable weight cannot be null');
        }

        if (($weight > 0)) {
            throw new \InvalidArgumentException('invalid value for $weight when calling ContainerDTO., must be smaller than or equal to 0.');
        }
        if (($weight < 0)) {
            throw new \InvalidArgumentException('invalid value for $weight when calling ContainerDTO., must be bigger than or equal to 0.');
        }

        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets weight_uom
     *
     * @return string|null
     */
    public function getWeightUom()
    {
        return $this->container['weight_uom'];
    }

    /**
     * Sets weight_uom
     *
     * @param string|null $weight_uom Unit of measure for the weight of the container.
     *
     * @return self
     */
    public function setWeightUom($weight_uom)
    {
        if (is_null($weight_uom)) {
            array_push($this->openAPINullablesSetToNull, 'weight_uom');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('weight_uom', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getWeightUomAllowableValues();
        if (!is_null($weight_uom) && !in_array($weight_uom, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'weight_uom', must be one of '%s'",
                    $weight_uom,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['weight_uom'] = $weight_uom;

        return $this;
    }

    /**
     * Gets active_zone
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getActiveZone()
    {
        return $this->container['active_zone'];
    }

    /**
     * Sets active_zone
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $active_zone active_zone
     *
     * @return self
     */
    public function setActiveZone($active_zone)
    {
        if (is_null($active_zone)) {
            array_push($this->openAPINullablesSetToNull, 'active_zone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('active_zone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['active_zone'] = $active_zone;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $location location
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            array_push($this->openAPINullablesSetToNull, 'location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('location', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets cart
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getCart()
    {
        return $this->container['cart'];
    }

    /**
     * Sets cart
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $cart cart
     *
     * @return self
     */
    public function setCart($cart)
    {
        if (is_null($cart)) {
            array_push($this->openAPINullablesSetToNull, 'cart');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cart', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cart'] = $cart;

        return $this;
    }

    /**
     * Gets cart_slot_number
     *
     * @return int|null
     */
    public function getCartSlotNumber()
    {
        return $this->container['cart_slot_number'];
    }

    /**
     * Sets cart_slot_number
     *
     * @param int|null $cart_slot_number Slot on a cart in which the container is located. Used for cartonization.
     *
     * @return self
     */
    public function setCartSlotNumber($cart_slot_number)
    {
        if (is_null($cart_slot_number)) {
            throw new \InvalidArgumentException('non-nullable cart_slot_number cannot be null');
        }
        $this->container['cart_slot_number'] = $cart_slot_number;

        return $this;
    }

    /**
     * Gets copy_source_lpn_number
     *
     * @return string|null
     */
    public function getCopySourceLpnNumber()
    {
        return $this->container['copy_source_lpn_number'];
    }

    /**
     * Sets copy_source_lpn_number
     *
     * @param string|null $copy_source_lpn_number Previous source container for the current container. For example, if you pick into a transient container, and then move the stock into a shipping container, then this field can be used on the shipping container record to store the identification code of the transient container.
     *
     * @return self
     */
    public function setCopySourceLpnNumber($copy_source_lpn_number)
    {
        if (is_null($copy_source_lpn_number)) {
            array_push($this->openAPINullablesSetToNull, 'copy_source_lpn_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('copy_source_lpn_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($copy_source_lpn_number) && (mb_strlen($copy_source_lpn_number) > 30)) {
            throw new \InvalidArgumentException('invalid length for $copy_source_lpn_number when calling ContainerDTO., must be smaller than or equal to 30.');
        }

        $this->container['copy_source_lpn_number'] = $copy_source_lpn_number;

        return $this;
    }

    /**
     * Gets parent
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getParent()
    {
        return $this->container['parent'];
    }

    /**
     * Sets parent
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $parent parent
     *
     * @return self
     */
    public function setParent($parent)
    {
        if (is_null($parent)) {
            array_push($this->openAPINullablesSetToNull, 'parent');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parent'] = $parent;

        return $this;
    }

    /**
     * Gets master_lpn_number
     *
     * @return string|null
     */
    public function getMasterLpnNumber()
    {
        return $this->container['master_lpn_number'];
    }

    /**
     * Sets master_lpn_number
     *
     * @param string|null $master_lpn_number LPN number of an outer container in which other containers are packed for an inbound shipment (which may also be called an _advance ship notice_ or _ASN_).
     *
     * @return self
     */
    public function setMasterLpnNumber($master_lpn_number)
    {
        if (is_null($master_lpn_number)) {
            array_push($this->openAPINullablesSetToNull, 'master_lpn_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('master_lpn_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($master_lpn_number) && (mb_strlen($master_lpn_number) > 30)) {
            throw new \InvalidArgumentException('invalid length for $master_lpn_number when calling ContainerDTO., must be smaller than or equal to 30.');
        }

        $this->container['master_lpn_number'] = $master_lpn_number;

        return $this;
    }

    /**
     * Gets package_type
     *
     * @return string|null
     */
    public function getPackageType()
    {
        return $this->container['package_type'];
    }

    /**
     * Sets package_type
     *
     * @param string|null $package_type Type of package for the container, which enables shipping carriers to determine how the container is packed. Typically populated on the shipping service request.
     *
     * @return self
     */
    public function setPackageType($package_type)
    {
        if (is_null($package_type)) {
            array_push($this->openAPINullablesSetToNull, 'package_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('package_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($package_type) && (mb_strlen($package_type) > 45)) {
            throw new \InvalidArgumentException('invalid length for $package_type when calling ContainerDTO., must be smaller than or equal to 45.');
        }

        $this->container['package_type'] = $package_type;

        return $this;
    }

    /**
     * Gets shipment
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getShipment()
    {
        return $this->container['shipment'];
    }

    /**
     * Sets shipment
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $shipment shipment
     *
     * @return self
     */
    public function setShipment($shipment)
    {
        if (is_null($shipment)) {
            array_push($this->openAPINullablesSetToNull, 'shipment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shipment'] = $shipment;

        return $this;
    }

    /**
     * Gets trip
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getTrip()
    {
        return $this->container['trip'];
    }

    /**
     * Sets trip
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $trip trip
     *
     * @return self
     */
    public function setTrip($trip)
    {
        if (is_null($trip)) {
            array_push($this->openAPINullablesSetToNull, 'trip');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('trip', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['trip'] = $trip;

        return $this;
    }

    /**
     * Gets insured_value
     *
     * @return int|null
     */
    public function getInsuredValue()
    {
        return $this->container['insured_value'];
    }

    /**
     * Sets insured_value
     *
     * @param int|null $insured_value Value of the contents of a shipping container, which is used to calculate the insurance for the container that is sent to the shipping providers.
     *
     * @return self
     */
    public function setInsuredValue($insured_value)
    {
        if (is_null($insured_value)) {
            throw new \InvalidArgumentException('non-nullable insured_value cannot be null');
        }

        if (($insured_value > 0)) {
            throw new \InvalidArgumentException('invalid value for $insured_value when calling ContainerDTO., must be smaller than or equal to 0.');
        }
        if (($insured_value < 0)) {
            throw new \InvalidArgumentException('invalid value for $insured_value when calling ContainerDTO., must be bigger than or equal to 0.');
        }

        $this->container['insured_value'] = $insured_value;

        return $this;
    }

    /**
     * Gets shipping_cost
     *
     * @return int|null
     */
    public function getShippingCost()
    {
        return $this->container['shipping_cost'];
    }

    /**
     * Sets shipping_cost
     *
     * @param int|null $shipping_cost Cost to ship the container.
     *
     * @return self
     */
    public function setShippingCost($shipping_cost)
    {
        if (is_null($shipping_cost)) {
            throw new \InvalidArgumentException('non-nullable shipping_cost cannot be null');
        }

        if (($shipping_cost > 0)) {
            throw new \InvalidArgumentException('invalid value for $shipping_cost when calling ContainerDTO., must be smaller than or equal to 0.');
        }
        if (($shipping_cost < 0)) {
            throw new \InvalidArgumentException('invalid value for $shipping_cost when calling ContainerDTO., must be bigger than or equal to 0.');
        }

        $this->container['shipping_cost'] = $shipping_cost;

        return $this;
    }

    /**
     * Gets base_tracking_link
     *
     * @return string|null
     */
    public function getBaseTrackingLink()
    {
        return $this->container['base_tracking_link'];
    }

    /**
     * Sets base_tracking_link
     *
     * @param string|null $base_tracking_link Link for opening a page on the shipping carrier's website to track the status of the shipment that is assigned to the container.
     *
     * @return self
     */
    public function setBaseTrackingLink($base_tracking_link)
    {
        if (is_null($base_tracking_link)) {
            array_push($this->openAPINullablesSetToNull, 'base_tracking_link');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('base_tracking_link', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($base_tracking_link) && (mb_strlen($base_tracking_link) > 400)) {
            throw new \InvalidArgumentException('invalid length for $base_tracking_link when calling ContainerDTO., must be smaller than or equal to 400.');
        }

        $this->container['base_tracking_link'] = $base_tracking_link;

        return $this;
    }

    /**
     * Gets tracking_url
     *
     * @return string|null
     */
    public function getTrackingUrl()
    {
        return $this->container['tracking_url'];
    }

    /**
     * Sets tracking_url
     *
     * @param string|null $tracking_url URL that is used with the shipment tracking number for tracking the status of the shipment that is assigned to the container.
     *
     * @return self
     */
    public function setTrackingUrl($tracking_url)
    {
        if (is_null($tracking_url)) {
            array_push($this->openAPINullablesSetToNull, 'tracking_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tracking_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tracking_url) && (mb_strlen($tracking_url) > 400)) {
            throw new \InvalidArgumentException('invalid length for $tracking_url when calling ContainerDTO., must be smaller than or equal to 400.');
        }

        $this->container['tracking_url'] = $tracking_url;

        return $this;
    }

    /**
     * Gets tracking_number
     *
     * @return string|null
     */
    public function getTrackingNumber()
    {
        return $this->container['tracking_number'];
    }

    /**
     * Sets tracking_number
     *
     * @param string|null $tracking_number Tracking number for the shipment that is associated with the container.
     *
     * @return self
     */
    public function setTrackingNumber($tracking_number)
    {
        if (is_null($tracking_number)) {
            array_push($this->openAPINullablesSetToNull, 'tracking_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tracking_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tracking_number) && (mb_strlen($tracking_number) > 100)) {
            throw new \InvalidArgumentException('invalid length for $tracking_number when calling ContainerDTO., must be smaller than or equal to 100.');
        }

        $this->container['tracking_number'] = $tracking_number;

        return $this;
    }

    /**
     * Gets tracking_number2
     *
     * @return string|null
     */
    public function getTrackingNumber2()
    {
        return $this->container['tracking_number2'];
    }

    /**
     * Sets tracking_number2
     *
     * @param string|null $tracking_number2 Secondary tracking number that is provided by some services that use multiple tracking numbers.
     *
     * @return self
     */
    public function setTrackingNumber2($tracking_number2)
    {
        if (is_null($tracking_number2)) {
            array_push($this->openAPINullablesSetToNull, 'tracking_number2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tracking_number2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tracking_number2) && (mb_strlen($tracking_number2) > 100)) {
            throw new \InvalidArgumentException('invalid length for $tracking_number2 when calling ContainerDTO., must be smaller than or equal to 100.');
        }

        $this->container['tracking_number2'] = $tracking_number2;

        return $this;
    }

    /**
     * Gets return_tracking_number
     *
     * @return string|null
     */
    public function getReturnTrackingNumber()
    {
        return $this->container['return_tracking_number'];
    }

    /**
     * Sets return_tracking_number
     *
     * @param string|null $return_tracking_number Tracking number for the return shipping label that is included in the container.
     *
     * @return self
     */
    public function setReturnTrackingNumber($return_tracking_number)
    {
        if (is_null($return_tracking_number)) {
            array_push($this->openAPINullablesSetToNull, 'return_tracking_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('return_tracking_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($return_tracking_number) && (mb_strlen($return_tracking_number) > 100)) {
            throw new \InvalidArgumentException('invalid length for $return_tracking_number when calling ContainerDTO., must be smaller than or equal to 100.');
        }

        $this->container['return_tracking_number'] = $return_tracking_number;

        return $this;
    }

    /**
     * Gets usps_construct_code
     *
     * @return string|null
     */
    public function getUspsConstructCode()
    {
        return $this->container['usps_construct_code'];
    }

    /**
     * Sets usps_construct_code
     *
     * @param string|null $usps_construct_code Construct Code from the U.S. Postal Service. The Construct Code is a barcode that consolidates the ZIP code, mailer ID, and serial number.
     *
     * @return self
     */
    public function setUspsConstructCode($usps_construct_code)
    {
        if (is_null($usps_construct_code)) {
            array_push($this->openAPINullablesSetToNull, 'usps_construct_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('usps_construct_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($usps_construct_code) && (mb_strlen($usps_construct_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $usps_construct_code when calling ContainerDTO., must be smaller than or equal to 10.');
        }

        $this->container['usps_construct_code'] = $usps_construct_code;

        return $this;
    }

    /**
     * Gets order_header_sequence
     *
     * @return int|null
     */
    public function getOrderHeaderSequence()
    {
        return $this->container['order_header_sequence'];
    }

    /**
     * Sets order_header_sequence
     *
     * @param int|null $order_header_sequence Used during cartonization at the wave to identify the sequence of the container in relation to other containers that are created during the build and release wave process for a single order.
     *
     * @return self
     */
    public function setOrderHeaderSequence($order_header_sequence)
    {
        if (is_null($order_header_sequence)) {
            throw new \InvalidArgumentException('non-nullable order_header_sequence cannot be null');
        }
        $this->container['order_header_sequence'] = $order_header_sequence;

        return $this;
    }

    /**
     * Gets order_header_sequence_total
     *
     * @return int|null
     */
    public function getOrderHeaderSequenceTotal()
    {
        return $this->container['order_header_sequence_total'];
    }

    /**
     * Sets order_header_sequence_total
     *
     * @param int|null $order_header_sequence_total Used during cartonization at the wave to identify the sequence of the container in relation to other containers that are created during the build and release wave process for a single order.
     *
     * @return self
     */
    public function setOrderHeaderSequenceTotal($order_header_sequence_total)
    {
        if (is_null($order_header_sequence_total)) {
            throw new \InvalidArgumentException('non-nullable order_header_sequence_total cannot be null');
        }
        $this->container['order_header_sequence_total'] = $order_header_sequence_total;

        return $this;
    }

    /**
     * Gets pick_wave_sequence
     *
     * @return int|null
     */
    public function getPickWaveSequence()
    {
        return $this->container['pick_wave_sequence'];
    }

    /**
     * Sets pick_wave_sequence
     *
     * @param int|null $pick_wave_sequence Used in cubing to identify the sequence of the container in relation to other containers that are created during the build and release wave process. This sequence applies to the entire wave and can span multiple orders.
     *
     * @return self
     */
    public function setPickWaveSequence($pick_wave_sequence)
    {
        if (is_null($pick_wave_sequence)) {
            throw new \InvalidArgumentException('non-nullable pick_wave_sequence cannot be null');
        }
        $this->container['pick_wave_sequence'] = $pick_wave_sequence;

        return $this;
    }

    /**
     * Gets pick_wave_sequence_total
     *
     * @return int|null
     */
    public function getPickWaveSequenceTotal()
    {
        return $this->container['pick_wave_sequence_total'];
    }

    /**
     * Sets pick_wave_sequence_total
     *
     * @param int|null $pick_wave_sequence_total Used in cubing to identify the sequence of the container in relation to other containers that are created during the build and release wave process. This sequence applies to the entire wave and can span multiple orders.
     *
     * @return self
     */
    public function setPickWaveSequenceTotal($pick_wave_sequence_total)
    {
        if (is_null($pick_wave_sequence_total)) {
            throw new \InvalidArgumentException('non-nullable pick_wave_sequence_total cannot be null');
        }
        $this->container['pick_wave_sequence_total'] = $pick_wave_sequence_total;

        return $this;
    }

    /**
     * Gets sequence
     *
     * @return int|null
     */
    public function getSequence()
    {
        return $this->container['sequence'];
    }

    /**
     * Sets sequence
     *
     * @param int|null $sequence Used by the Print to Panda process to determine the x of y values for a container.
     *
     * @return self
     */
    public function setSequence($sequence)
    {
        if (is_null($sequence)) {
            throw new \InvalidArgumentException('non-nullable sequence cannot be null');
        }
        $this->container['sequence'] = $sequence;

        return $this;
    }

    /**
     * Gets sequence_total
     *
     * @return int|null
     */
    public function getSequenceTotal()
    {
        return $this->container['sequence_total'];
    }

    /**
     * Sets sequence_total
     *
     * @param int|null $sequence_total Used by the Print to Panda process to determine the x of y values for a container.
     *
     * @return self
     */
    public function setSequenceTotal($sequence_total)
    {
        if (is_null($sequence_total)) {
            throw new \InvalidArgumentException('non-nullable sequence_total cannot be null');
        }
        $this->container['sequence_total'] = $sequence_total;

        return $this;
    }

    /**
     * Gets printed
     *
     * @return bool|null
     */
    public function getPrinted()
    {
        return $this->container['printed'];
    }

    /**
     * Sets printed
     *
     * @param bool|null $printed Used by the Print to Panda process to indicate whether a retailer label was printed for the container.
     *
     * @return self
     */
    public function setPrinted($printed)
    {
        if (is_null($printed)) {
            throw new \InvalidArgumentException('non-nullable printed cannot be null');
        }
        $this->container['printed'] = $printed;

        return $this;
    }

    /**
     * Gets sscc_lpn_number
     *
     * @return string|null
     */
    public function getSsccLpnNumber()
    {
        return $this->container['sscc_lpn_number'];
    }

    /**
     * Sets sscc_lpn_number
     *
     * @param string|null $sscc_lpn_number Used by the Print to Panda process to store the SSCC number for the pallet, if the process is configured to generate one.
     *
     * @return self
     */
    public function setSsccLpnNumber($sscc_lpn_number)
    {
        if (is_null($sscc_lpn_number)) {
            array_push($this->openAPINullablesSetToNull, 'sscc_lpn_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sscc_lpn_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sscc_lpn_number) && (mb_strlen($sscc_lpn_number) > 30)) {
            throw new \InvalidArgumentException('invalid length for $sscc_lpn_number when calling ContainerDTO., must be smaller than or equal to 30.');
        }

        $this->container['sscc_lpn_number'] = $sscc_lpn_number;

        return $this;
    }

    /**
     * Gets reference_number1
     *
     * @return string|null
     */
    public function getReferenceNumber1()
    {
        return $this->container['reference_number1'];
    }

    /**
     * Sets reference_number1
     *
     * @param string|null $reference_number1 Used by the Assign Trip to Container process to store the trip number.
     *
     * @return self
     */
    public function setReferenceNumber1($reference_number1)
    {
        if (is_null($reference_number1)) {
            array_push($this->openAPINullablesSetToNull, 'reference_number1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reference_number1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($reference_number1) && (mb_strlen($reference_number1) > 100)) {
            throw new \InvalidArgumentException('invalid length for $reference_number1 when calling ContainerDTO., must be smaller than or equal to 100.');
        }

        $this->container['reference_number1'] = $reference_number1;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime|null $created_date Date and time that the container was created.
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets updated_date
     *
     * @return \DateTime|null
     */
    public function getUpdatedDate()
    {
        return $this->container['updated_date'];
    }

    /**
     * Sets updated_date
     *
     * @param \DateTime|null $updated_date Date and time that the container was last updated.
     *
     * @return self
     */
    public function setUpdatedDate($updated_date)
    {
        if (is_null($updated_date)) {
            throw new \InvalidArgumentException('non-nullable updated_date cannot be null');
        }
        $this->container['updated_date'] = $updated_date;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            throw new \InvalidArgumentException('non-nullable created_by cannot be null');
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $updated_by updated_by
     *
     * @return self
     */
    public function setUpdatedBy($updated_by)
    {
        if (is_null($updated_by)) {
            throw new \InvalidArgumentException('non-nullable updated_by cannot be null');
        }
        $this->container['updated_by'] = $updated_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


