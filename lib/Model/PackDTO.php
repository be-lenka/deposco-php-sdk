<?php
/**
 * PackDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deposco API
 *
 * Welcome to the Deposco API Reference! The Deposco API enables you to integrate your system with Deposco.  * Integrate a product information system (PIM) by creating and retrieving data for items, packs, UPCs, and kits. * Set up warehouse data by creating facilities, zones, locations, and storage details. * Create inbound orders that can be received and outbound orders that can be fulfilled with Deposco warehouse management processes.  This reference provides details on available operations, endpoints, parameters, schemas, and responses.  Example requests and responses are also available for you to use as a reference. You can copy the examples to use as a starting point for your own requests.  Review the guides to learn how the API is used in common business scenarios such as setting up the warehouse and integrating a Product Information Management (PIM) system.  When you're ready to get started, register for a developer account and then log in to create your application in the developer portal.
 *
 * The version of the OpenAPI document: 2.0.2519
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\Deposco\Model;

use \ArrayAccess;
use \BeLenka\Deposco\ObjectSerializer;

/**
 * PackDTO Class Doc Comment
 *
 * @category Class
 * @description Unit of measure for an item.
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PackDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PackDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'self' => '\BeLenka\Deposco\Model\EntityRef',
        'business_unit' => '\BeLenka\Deposco\Model\EntityRef',
        'item' => '\BeLenka\Deposco\Model\EntityRef',
        'type' => 'string',
        'quantity' => 'int',
        'key' => 'string',
        'name' => 'string',
        'new_pack_flag' => 'bool',
        'dimensions' => '\BeLenka\Deposco\Model\Dimension',
        'weight' => '\BeLenka\Deposco\Model\PackDTOWeight',
        'carton_group' => 'string',
        'preferred_carton_type' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'ready_to_ship' => 'bool',
        'lpn_tracking_enabled' => 'bool',
        'upcs' => '\BeLenka\Deposco\Model\PackUPCCollectionDTO',
        'carrier_special_services' => '\BeLenka\Deposco\Model\CarrierSpecialServiceDTO[]',
        'created_date' => '\DateTime',
        'updated_date' => '\DateTime',
        'created_by' => '\BeLenka\Deposco\Model\EntityRef',
        'updated_by' => '\BeLenka\Deposco\Model\EntityRef'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'self' => null,
        'business_unit' => null,
        'item' => null,
        'type' => null,
        'quantity' => null,
        'key' => null,
        'name' => null,
        'new_pack_flag' => null,
        'dimensions' => null,
        'weight' => null,
        'carton_group' => null,
        'preferred_carton_type' => null,
        'ready_to_ship' => null,
        'lpn_tracking_enabled' => null,
        'upcs' => null,
        'carrier_special_services' => null,
        'created_date' => 'date-time',
        'updated_date' => 'date-time',
        'created_by' => null,
        'updated_by' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'self' => false,
        'business_unit' => false,
        'item' => false,
        'type' => false,
        'quantity' => false,
        'key' => false,
        'name' => true,
        'new_pack_flag' => false,
        'dimensions' => false,
        'weight' => false,
        'carton_group' => true,
        'preferred_carton_type' => true,
        'ready_to_ship' => true,
        'lpn_tracking_enabled' => false,
        'upcs' => false,
        'carrier_special_services' => false,
        'created_date' => false,
        'updated_date' => false,
        'created_by' => false,
        'updated_by' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'self' => 'self',
        'business_unit' => 'businessUnit',
        'item' => 'item',
        'type' => 'type',
        'quantity' => 'quantity',
        'key' => 'key',
        'name' => 'name',
        'new_pack_flag' => 'newPackFlag',
        'dimensions' => 'dimensions',
        'weight' => 'weight',
        'carton_group' => 'cartonGroup',
        'preferred_carton_type' => 'preferredCartonType',
        'ready_to_ship' => 'readyToShip',
        'lpn_tracking_enabled' => 'lpnTrackingEnabled',
        'upcs' => 'upcs',
        'carrier_special_services' => 'carrierSpecialServices',
        'created_date' => 'createdDate',
        'updated_date' => 'updatedDate',
        'created_by' => 'createdBy',
        'updated_by' => 'updatedBy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'self' => 'setSelf',
        'business_unit' => 'setBusinessUnit',
        'item' => 'setItem',
        'type' => 'setType',
        'quantity' => 'setQuantity',
        'key' => 'setKey',
        'name' => 'setName',
        'new_pack_flag' => 'setNewPackFlag',
        'dimensions' => 'setDimensions',
        'weight' => 'setWeight',
        'carton_group' => 'setCartonGroup',
        'preferred_carton_type' => 'setPreferredCartonType',
        'ready_to_ship' => 'setReadyToShip',
        'lpn_tracking_enabled' => 'setLpnTrackingEnabled',
        'upcs' => 'setUpcs',
        'carrier_special_services' => 'setCarrierSpecialServices',
        'created_date' => 'setCreatedDate',
        'updated_date' => 'setUpdatedDate',
        'created_by' => 'setCreatedBy',
        'updated_by' => 'setUpdatedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'self' => 'getSelf',
        'business_unit' => 'getBusinessUnit',
        'item' => 'getItem',
        'type' => 'getType',
        'quantity' => 'getQuantity',
        'key' => 'getKey',
        'name' => 'getName',
        'new_pack_flag' => 'getNewPackFlag',
        'dimensions' => 'getDimensions',
        'weight' => 'getWeight',
        'carton_group' => 'getCartonGroup',
        'preferred_carton_type' => 'getPreferredCartonType',
        'ready_to_ship' => 'getReadyToShip',
        'lpn_tracking_enabled' => 'getLpnTrackingEnabled',
        'upcs' => 'getUpcs',
        'carrier_special_services' => 'getCarrierSpecialServices',
        'created_date' => 'getCreatedDate',
        'updated_date' => 'getUpdatedDate',
        'created_by' => 'getCreatedBy',
        'updated_by' => 'getUpdatedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('self', $data ?? [], null);
        $this->setIfExists('business_unit', $data ?? [], null);
        $this->setIfExists('item', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('key', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('new_pack_flag', $data ?? [], null);
        $this->setIfExists('dimensions', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
        $this->setIfExists('carton_group', $data ?? [], null);
        $this->setIfExists('preferred_carton_type', $data ?? [], null);
        $this->setIfExists('ready_to_ship', $data ?? [], null);
        $this->setIfExists('lpn_tracking_enabled', $data ?? [], null);
        $this->setIfExists('upcs', $data ?? [], null);
        $this->setIfExists('carrier_special_services', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('updated_date', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('updated_by', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ((mb_strlen($this->container['type']) > 50)) {
            $invalidProperties[] = "invalid value for 'type', the character length must be smaller than or equal to 50.";
        }

        if (!preg_match("/.*\\S.*/", $this->container['type'])) {
            $invalidProperties[] = "invalid value for 'type', must be conform to the pattern /.*\\S.*/.";
        }

        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if (($this->container['quantity'] < 1)) {
            $invalidProperties[] = "invalid value for 'quantity', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 100)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['carton_group']) && (mb_strlen($this->container['carton_group']) > 30)) {
            $invalidProperties[] = "invalid value for 'carton_group', the character length must be smaller than or equal to 30.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets self
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $self self
     *
     * @return self
     */
    public function setSelf($self)
    {
        if (is_null($self)) {
            throw new \InvalidArgumentException('non-nullable self cannot be null');
        }
        $this->container['self'] = $self;

        return $this;
    }

    /**
     * Gets business_unit
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getBusinessUnit()
    {
        return $this->container['business_unit'];
    }

    /**
     * Sets business_unit
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $business_unit business_unit
     *
     * @return self
     */
    public function setBusinessUnit($business_unit)
    {
        if (is_null($business_unit)) {
            throw new \InvalidArgumentException('non-nullable business_unit cannot be null');
        }
        $this->container['business_unit'] = $business_unit;

        return $this;
    }

    /**
     * Gets item
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getItem()
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $item item
     *
     * @return self
     */
    public function setItem($item)
    {
        if (is_null($item)) {
            throw new \InvalidArgumentException('non-nullable item cannot be null');
        }
        $this->container['item'] = $item;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Type of pack. Use one of the following values: `Each`, `Case`, `Bundle`, `Loose`, `Mill Unit`, `Outer`, `Unit`
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        if ((mb_strlen($type) > 50)) {
            throw new \InvalidArgumentException('invalid length for $type when calling PackDTO., must be smaller than or equal to 50.');
        }
        if ((!preg_match("/.*\\S.*/", ObjectSerializer::toString($type)))) {
            throw new \InvalidArgumentException("invalid value for \$type when calling PackDTO., must conform to the pattern /.*\\S.*/.");
        }

        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity Number of items in the pack. Must be a positive integer.
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }

        if (($quantity < 1)) {
            throw new \InvalidArgumentException('invalid value for $quantity when calling PackDTO., must be bigger than or equal to 1.');
        }

        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets key
     *
     * @return string|null
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string|null $key System-generated identification key for the pack, which is created by adding the item, pack type, and quantity.
     *
     * @return self
     */
    public function setKey($key)
    {
        if (is_null($key)) {
            throw new \InvalidArgumentException('non-nullable key cannot be null');
        }
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name that identifies the pack.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($name) && (mb_strlen($name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $name when calling PackDTO., must be smaller than or equal to 100.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets new_pack_flag
     *
     * @return bool|null
     */
    public function getNewPackFlag()
    {
        return $this->container['new_pack_flag'];
    }

    /**
     * Sets new_pack_flag
     *
     * @param bool|null $new_pack_flag Set to true to require users to capture the weight and dimensions of the pack the next time that the pack is received. This field is then automatically set to false.
     *
     * @return self
     */
    public function setNewPackFlag($new_pack_flag)
    {
        if (is_null($new_pack_flag)) {
            throw new \InvalidArgumentException('non-nullable new_pack_flag cannot be null');
        }
        $this->container['new_pack_flag'] = $new_pack_flag;

        return $this;
    }

    /**
     * Gets dimensions
     *
     * @return \BeLenka\Deposco\Model\Dimension|null
     */
    public function getDimensions()
    {
        return $this->container['dimensions'];
    }

    /**
     * Sets dimensions
     *
     * @param \BeLenka\Deposco\Model\Dimension|null $dimensions dimensions
     *
     * @return self
     */
    public function setDimensions($dimensions)
    {
        if (is_null($dimensions)) {
            throw new \InvalidArgumentException('non-nullable dimensions cannot be null');
        }
        $this->container['dimensions'] = $dimensions;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return \BeLenka\Deposco\Model\PackDTOWeight|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param \BeLenka\Deposco\Model\PackDTOWeight|null $weight weight
     *
     * @return self
     */
    public function setWeight($weight)
    {
        if (is_null($weight)) {
            throw new \InvalidArgumentException('non-nullable weight cannot be null');
        }
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets carton_group
     *
     * @return string|null
     */
    public function getCartonGroup()
    {
        return $this->container['carton_group'];
    }

    /**
     * Sets carton_group
     *
     * @param string|null $carton_group ID of the carton type. Used with cartonization to narrow the list of available box types to use for shipping.
     *
     * @return self
     */
    public function setCartonGroup($carton_group)
    {
        if (is_null($carton_group)) {
            array_push($this->openAPINullablesSetToNull, 'carton_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('carton_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($carton_group) && (mb_strlen($carton_group) > 30)) {
            throw new \InvalidArgumentException('invalid length for $carton_group when calling PackDTO., must be smaller than or equal to 30.');
        }

        $this->container['carton_group'] = $carton_group;

        return $this;
    }

    /**
     * Gets preferred_carton_type
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getPreferredCartonType()
    {
        return $this->container['preferred_carton_type'];
    }

    /**
     * Sets preferred_carton_type
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $preferred_carton_type preferred_carton_type
     *
     * @return self
     */
    public function setPreferredCartonType($preferred_carton_type)
    {
        if (is_null($preferred_carton_type)) {
            array_push($this->openAPINullablesSetToNull, 'preferred_carton_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('preferred_carton_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['preferred_carton_type'] = $preferred_carton_type;

        return $this;
    }

    /**
     * Gets ready_to_ship
     *
     * @return bool|null
     */
    public function getReadyToShip()
    {
        return $this->container['ready_to_ship'];
    }

    /**
     * Sets ready_to_ship
     *
     * @param bool|null $ready_to_ship Set to true if the item is already in a shipping container and therefore does not require any further packaging for shipping, or false if the item must be packed in a box for shipping. For example, a vacuum cleaner can be shipped in its own box.
     *
     * @return self
     */
    public function setReadyToShip($ready_to_ship)
    {
        if (is_null($ready_to_ship)) {
            array_push($this->openAPINullablesSetToNull, 'ready_to_ship');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ready_to_ship', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ready_to_ship'] = $ready_to_ship;

        return $this;
    }

    /**
     * Gets lpn_tracking_enabled
     *
     * @return bool|null
     */
    public function getLpnTrackingEnabled()
    {
        return $this->container['lpn_tracking_enabled'];
    }

    /**
     * Sets lpn_tracking_enabled
     *
     * @param bool|null $lpn_tracking_enabled Whether to enable LPN tracking for the pack.
     *
     * @return self
     */
    public function setLpnTrackingEnabled($lpn_tracking_enabled)
    {
        if (is_null($lpn_tracking_enabled)) {
            throw new \InvalidArgumentException('non-nullable lpn_tracking_enabled cannot be null');
        }
        $this->container['lpn_tracking_enabled'] = $lpn_tracking_enabled;

        return $this;
    }

    /**
     * Gets upcs
     *
     * @return \BeLenka\Deposco\Model\PackUPCCollectionDTO|null
     */
    public function getUpcs()
    {
        return $this->container['upcs'];
    }

    /**
     * Sets upcs
     *
     * @param \BeLenka\Deposco\Model\PackUPCCollectionDTO|null $upcs upcs
     *
     * @return self
     */
    public function setUpcs($upcs)
    {
        if (is_null($upcs)) {
            throw new \InvalidArgumentException('non-nullable upcs cannot be null');
        }
        $this->container['upcs'] = $upcs;

        return $this;
    }

    /**
     * Gets carrier_special_services
     *
     * @return \BeLenka\Deposco\Model\CarrierSpecialServiceDTO[]|null
     */
    public function getCarrierSpecialServices()
    {
        return $this->container['carrier_special_services'];
    }

    /**
     * Sets carrier_special_services
     *
     * @param \BeLenka\Deposco\Model\CarrierSpecialServiceDTO[]|null $carrier_special_services carrier_special_services
     *
     * @return self
     */
    public function setCarrierSpecialServices($carrier_special_services)
    {
        if (is_null($carrier_special_services)) {
            throw new \InvalidArgumentException('non-nullable carrier_special_services cannot be null');
        }
        $this->container['carrier_special_services'] = $carrier_special_services;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime|null $created_date Date and time that the pack was created.
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets updated_date
     *
     * @return \DateTime|null
     */
    public function getUpdatedDate()
    {
        return $this->container['updated_date'];
    }

    /**
     * Sets updated_date
     *
     * @param \DateTime|null $updated_date Date and time that the pack was last updated.
     *
     * @return self
     */
    public function setUpdatedDate($updated_date)
    {
        if (is_null($updated_date)) {
            throw new \InvalidArgumentException('non-nullable updated_date cannot be null');
        }
        $this->container['updated_date'] = $updated_date;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            throw new \InvalidArgumentException('non-nullable created_by cannot be null');
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $updated_by updated_by
     *
     * @return self
     */
    public function setUpdatedBy($updated_by)
    {
        if (is_null($updated_by)) {
            throw new \InvalidArgumentException('non-nullable updated_by cannot be null');
        }
        $this->container['updated_by'] = $updated_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


