<?php
/**
 * UserDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deposco API
 *
 * Welcome to the Deposco API Reference! The Deposco API enables you to integrate your system with Deposco.  * Integrate a product information system (PIM) by creating and retrieving data for items, packs, UPCs, and kits. * Set up warehouse data by creating facilities, zones, locations, and storage details. * Create inbound orders that can be received and outbound orders that can be fulfilled with Deposco warehouse management processes.  This reference provides details on available operations, endpoints, parameters, schemas, and responses.  Example requests and responses are also available for you to use as a reference. You can copy the examples to use as a starting point for your own requests.  Review the guides to learn how the API is used in common business scenarios such as setting up the warehouse and integrating a Product Information Management (PIM) system.  When you're ready to get started, register for a developer account and then log in to create your application in the developer portal.
 *
 * The version of the OpenAPI document: 2.0.2519
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\Deposco\Model;

use \ArrayAccess;
use \BeLenka\Deposco\ObjectSerializer;

/**
 * UserDTO Class Doc Comment
 *
 * @category Class
 * @description User account information.
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UserDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UserDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'self' => '\BeLenka\Deposco\Model\EntityRef',
        'username' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'email' => 'string',
        'enabled' => 'bool',
        'active' => 'bool',
        'last_logged_in_time' => '\DateTime',
        'last_log_in_attempt' => '\DateTime',
        'user_of_tenant' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'company_assignments' => '\BeLenka\Deposco\Model\EntityRef[]',
        'facility' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'active_zone' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'active_resource' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'home_page' => 'string',
        'handheld_menu' => 'string',
        'locale' => '\BeLenka\Deposco\Model\Locale',
        'time_zone' => '\BeLenka\Deposco\Model\TimeZone',
        'date_format' => '\BeLenka\Deposco\Model\DateFormat',
        'start_day_of_week' => 'string',
        'pin_code' => 'string',
        'cost_center' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'organization' => 'string',
        'division' => 'string',
        'department' => 'string',
        'job_title' => 'string',
        'participant_type' => 'string',
        'employee_number' => 'string',
        'profile' => 'string',
        'phone' => 'string',
        'mobile' => 'string',
        'fax' => 'string',
        'city' => 'string',
        'state_province' => 'string',
        'postal_code' => 'string',
        'country' => 'string',
        'custom_attribute1' => 'string',
        'custom_attribute2' => 'string',
        'created_date' => '\DateTime',
        'updated_date' => '\DateTime',
        'created_by' => '\BeLenka\Deposco\Model\EntityRef',
        'updated_by' => '\BeLenka\Deposco\Model\EntityRef'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'self' => null,
        'username' => null,
        'first_name' => null,
        'last_name' => null,
        'email' => null,
        'enabled' => null,
        'active' => null,
        'last_logged_in_time' => 'date-time',
        'last_log_in_attempt' => 'date-time',
        'user_of_tenant' => null,
        'company_assignments' => null,
        'facility' => null,
        'active_zone' => null,
        'active_resource' => null,
        'home_page' => null,
        'handheld_menu' => null,
        'locale' => null,
        'time_zone' => null,
        'date_format' => null,
        'start_day_of_week' => null,
        'pin_code' => null,
        'cost_center' => null,
        'organization' => null,
        'division' => null,
        'department' => null,
        'job_title' => null,
        'participant_type' => null,
        'employee_number' => null,
        'profile' => null,
        'phone' => null,
        'mobile' => null,
        'fax' => null,
        'city' => null,
        'state_province' => null,
        'postal_code' => null,
        'country' => null,
        'custom_attribute1' => null,
        'custom_attribute2' => null,
        'created_date' => 'date-time',
        'updated_date' => 'date-time',
        'created_by' => null,
        'updated_by' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'self' => false,
        'username' => true,
        'first_name' => true,
        'last_name' => true,
        'email' => true,
        'enabled' => false,
        'active' => false,
        'last_logged_in_time' => true,
        'last_log_in_attempt' => true,
        'user_of_tenant' => true,
        'company_assignments' => true,
        'facility' => true,
        'active_zone' => true,
        'active_resource' => true,
        'home_page' => true,
        'handheld_menu' => true,
        'locale' => true,
        'time_zone' => true,
        'date_format' => true,
        'start_day_of_week' => true,
        'pin_code' => true,
        'cost_center' => true,
        'organization' => true,
        'division' => true,
        'department' => true,
        'job_title' => true,
        'participant_type' => true,
        'employee_number' => true,
        'profile' => true,
        'phone' => true,
        'mobile' => true,
        'fax' => true,
        'city' => true,
        'state_province' => true,
        'postal_code' => true,
        'country' => true,
        'custom_attribute1' => true,
        'custom_attribute2' => true,
        'created_date' => false,
        'updated_date' => false,
        'created_by' => false,
        'updated_by' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'self' => 'self',
        'username' => 'username',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'email' => 'email',
        'enabled' => 'enabled',
        'active' => 'active',
        'last_logged_in_time' => 'lastLoggedInTime',
        'last_log_in_attempt' => 'lastLogInAttempt',
        'user_of_tenant' => 'userOfTenant',
        'company_assignments' => 'companyAssignments',
        'facility' => 'facility',
        'active_zone' => 'activeZone',
        'active_resource' => 'activeResource',
        'home_page' => 'homePage',
        'handheld_menu' => 'handheldMenu',
        'locale' => 'locale',
        'time_zone' => 'timeZone',
        'date_format' => 'dateFormat',
        'start_day_of_week' => 'startDayOfWeek',
        'pin_code' => 'pinCode',
        'cost_center' => 'costCenter',
        'organization' => 'organization',
        'division' => 'division',
        'department' => 'department',
        'job_title' => 'jobTitle',
        'participant_type' => 'participantType',
        'employee_number' => 'employeeNumber',
        'profile' => 'profile',
        'phone' => 'phone',
        'mobile' => 'mobile',
        'fax' => 'fax',
        'city' => 'city',
        'state_province' => 'stateProvince',
        'postal_code' => 'postalCode',
        'country' => 'country',
        'custom_attribute1' => 'customAttribute1',
        'custom_attribute2' => 'customAttribute2',
        'created_date' => 'createdDate',
        'updated_date' => 'updatedDate',
        'created_by' => 'createdBy',
        'updated_by' => 'updatedBy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'self' => 'setSelf',
        'username' => 'setUsername',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'email' => 'setEmail',
        'enabled' => 'setEnabled',
        'active' => 'setActive',
        'last_logged_in_time' => 'setLastLoggedInTime',
        'last_log_in_attempt' => 'setLastLogInAttempt',
        'user_of_tenant' => 'setUserOfTenant',
        'company_assignments' => 'setCompanyAssignments',
        'facility' => 'setFacility',
        'active_zone' => 'setActiveZone',
        'active_resource' => 'setActiveResource',
        'home_page' => 'setHomePage',
        'handheld_menu' => 'setHandheldMenu',
        'locale' => 'setLocale',
        'time_zone' => 'setTimeZone',
        'date_format' => 'setDateFormat',
        'start_day_of_week' => 'setStartDayOfWeek',
        'pin_code' => 'setPinCode',
        'cost_center' => 'setCostCenter',
        'organization' => 'setOrganization',
        'division' => 'setDivision',
        'department' => 'setDepartment',
        'job_title' => 'setJobTitle',
        'participant_type' => 'setParticipantType',
        'employee_number' => 'setEmployeeNumber',
        'profile' => 'setProfile',
        'phone' => 'setPhone',
        'mobile' => 'setMobile',
        'fax' => 'setFax',
        'city' => 'setCity',
        'state_province' => 'setStateProvince',
        'postal_code' => 'setPostalCode',
        'country' => 'setCountry',
        'custom_attribute1' => 'setCustomAttribute1',
        'custom_attribute2' => 'setCustomAttribute2',
        'created_date' => 'setCreatedDate',
        'updated_date' => 'setUpdatedDate',
        'created_by' => 'setCreatedBy',
        'updated_by' => 'setUpdatedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'self' => 'getSelf',
        'username' => 'getUsername',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'email' => 'getEmail',
        'enabled' => 'getEnabled',
        'active' => 'getActive',
        'last_logged_in_time' => 'getLastLoggedInTime',
        'last_log_in_attempt' => 'getLastLogInAttempt',
        'user_of_tenant' => 'getUserOfTenant',
        'company_assignments' => 'getCompanyAssignments',
        'facility' => 'getFacility',
        'active_zone' => 'getActiveZone',
        'active_resource' => 'getActiveResource',
        'home_page' => 'getHomePage',
        'handheld_menu' => 'getHandheldMenu',
        'locale' => 'getLocale',
        'time_zone' => 'getTimeZone',
        'date_format' => 'getDateFormat',
        'start_day_of_week' => 'getStartDayOfWeek',
        'pin_code' => 'getPinCode',
        'cost_center' => 'getCostCenter',
        'organization' => 'getOrganization',
        'division' => 'getDivision',
        'department' => 'getDepartment',
        'job_title' => 'getJobTitle',
        'participant_type' => 'getParticipantType',
        'employee_number' => 'getEmployeeNumber',
        'profile' => 'getProfile',
        'phone' => 'getPhone',
        'mobile' => 'getMobile',
        'fax' => 'getFax',
        'city' => 'getCity',
        'state_province' => 'getStateProvince',
        'postal_code' => 'getPostalCode',
        'country' => 'getCountry',
        'custom_attribute1' => 'getCustomAttribute1',
        'custom_attribute2' => 'getCustomAttribute2',
        'created_date' => 'getCreatedDate',
        'updated_date' => 'getUpdatedDate',
        'created_by' => 'getCreatedBy',
        'updated_by' => 'getUpdatedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const START_DAY_OF_WEEK_MONDAY = 'Monday';
    public const START_DAY_OF_WEEK_SUNDAY = 'Sunday';
    public const PARTICIPANT_TYPE_PROVIDER_OF_SERVICES = 'Provider of Services';
    public const PARTICIPANT_TYPE_ANALYST_OR_ACADEMIC = 'Analyst or Academic';
    public const PARTICIPANT_TYPE_PRACTITIONER = 'Practitioner';
    public const PARTICIPANT_TYPE_CONSULTANT = 'Consultant';
    public const PARTICIPANT_TYPE_PROVIDER_OF_SOLUTIONS = 'Provider of Solutions';
    public const PARTICIPANT_TYPE_SALES_ASSOCIATE = 'Sales Associate';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStartDayOfWeekAllowableValues()
    {
        return [
            self::START_DAY_OF_WEEK_MONDAY,
            self::START_DAY_OF_WEEK_SUNDAY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getParticipantTypeAllowableValues()
    {
        return [
            self::PARTICIPANT_TYPE_PROVIDER_OF_SERVICES,
            self::PARTICIPANT_TYPE_ANALYST_OR_ACADEMIC,
            self::PARTICIPANT_TYPE_PRACTITIONER,
            self::PARTICIPANT_TYPE_CONSULTANT,
            self::PARTICIPANT_TYPE_PROVIDER_OF_SOLUTIONS,
            self::PARTICIPANT_TYPE_SALES_ASSOCIATE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('self', $data ?? [], null);
        $this->setIfExists('username', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('enabled', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('last_logged_in_time', $data ?? [], null);
        $this->setIfExists('last_log_in_attempt', $data ?? [], null);
        $this->setIfExists('user_of_tenant', $data ?? [], null);
        $this->setIfExists('company_assignments', $data ?? [], null);
        $this->setIfExists('facility', $data ?? [], null);
        $this->setIfExists('active_zone', $data ?? [], null);
        $this->setIfExists('active_resource', $data ?? [], null);
        $this->setIfExists('home_page', $data ?? [], null);
        $this->setIfExists('handheld_menu', $data ?? [], null);
        $this->setIfExists('locale', $data ?? [], null);
        $this->setIfExists('time_zone', $data ?? [], null);
        $this->setIfExists('date_format', $data ?? [], null);
        $this->setIfExists('start_day_of_week', $data ?? [], null);
        $this->setIfExists('pin_code', $data ?? [], null);
        $this->setIfExists('cost_center', $data ?? [], null);
        $this->setIfExists('organization', $data ?? [], null);
        $this->setIfExists('division', $data ?? [], null);
        $this->setIfExists('department', $data ?? [], null);
        $this->setIfExists('job_title', $data ?? [], null);
        $this->setIfExists('participant_type', $data ?? [], null);
        $this->setIfExists('employee_number', $data ?? [], null);
        $this->setIfExists('profile', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('mobile', $data ?? [], null);
        $this->setIfExists('fax', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('state_province', $data ?? [], null);
        $this->setIfExists('postal_code', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('custom_attribute1', $data ?? [], null);
        $this->setIfExists('custom_attribute2', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('updated_date', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('updated_by', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['username']) && (mb_strlen($this->container['username']) > 30)) {
            $invalidProperties[] = "invalid value for 'username', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['first_name']) && (mb_strlen($this->container['first_name']) > 30)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['last_name']) && (mb_strlen($this->container['last_name']) > 30)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) > 50)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['home_page']) && (mb_strlen($this->container['home_page']) > 40)) {
            $invalidProperties[] = "invalid value for 'home_page', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['handheld_menu']) && (mb_strlen($this->container['handheld_menu']) > 100)) {
            $invalidProperties[] = "invalid value for 'handheld_menu', the character length must be smaller than or equal to 100.";
        }

        $allowedValues = $this->getStartDayOfWeekAllowableValues();
        if (!is_null($this->container['start_day_of_week']) && !in_array($this->container['start_day_of_week'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'start_day_of_week', must be one of '%s'",
                $this->container['start_day_of_week'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['pin_code']) && (mb_strlen($this->container['pin_code']) > 64)) {
            $invalidProperties[] = "invalid value for 'pin_code', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['organization']) && (mb_strlen($this->container['organization']) > 50)) {
            $invalidProperties[] = "invalid value for 'organization', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['division']) && (mb_strlen($this->container['division']) > 30)) {
            $invalidProperties[] = "invalid value for 'division', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['department']) && (mb_strlen($this->container['department']) > 50)) {
            $invalidProperties[] = "invalid value for 'department', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['job_title']) && (mb_strlen($this->container['job_title']) > 100)) {
            $invalidProperties[] = "invalid value for 'job_title', the character length must be smaller than or equal to 100.";
        }

        $allowedValues = $this->getParticipantTypeAllowableValues();
        if (!is_null($this->container['participant_type']) && !in_array($this->container['participant_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'participant_type', must be one of '%s'",
                $this->container['participant_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['employee_number']) && (mb_strlen($this->container['employee_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'employee_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['profile']) && (mb_strlen($this->container['profile']) > 500)) {
            $invalidProperties[] = "invalid value for 'profile', the character length must be smaller than or equal to 500.";
        }

        if (!is_null($this->container['phone']) && (mb_strlen($this->container['phone']) > 30)) {
            $invalidProperties[] = "invalid value for 'phone', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['mobile']) && (mb_strlen($this->container['mobile']) > 20)) {
            $invalidProperties[] = "invalid value for 'mobile', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['fax']) && (mb_strlen($this->container['fax']) > 20)) {
            $invalidProperties[] = "invalid value for 'fax', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) > 30)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['state_province']) && (mb_strlen($this->container['state_province']) > 100)) {
            $invalidProperties[] = "invalid value for 'state_province', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['postal_code']) && (mb_strlen($this->container['postal_code']) > 20)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['country']) && (mb_strlen($this->container['country']) > 100)) {
            $invalidProperties[] = "invalid value for 'country', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['custom_attribute1']) && (mb_strlen($this->container['custom_attribute1']) > 50)) {
            $invalidProperties[] = "invalid value for 'custom_attribute1', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['custom_attribute2']) && (mb_strlen($this->container['custom_attribute2']) > 50)) {
            $invalidProperties[] = "invalid value for 'custom_attribute2', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets self
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $self self
     *
     * @return self
     */
    public function setSelf($self)
    {
        if (is_null($self)) {
            throw new \InvalidArgumentException('non-nullable self cannot be null');
        }
        $this->container['self'] = $self;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username Username for the user account.
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (is_null($username)) {
            array_push($this->openAPINullablesSetToNull, 'username');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('username', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($username) && (mb_strlen($username) > 30)) {
            throw new \InvalidArgumentException('invalid length for $username when calling UserDTO., must be smaller than or equal to 30.');
        }

        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name First name of the user.
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            array_push($this->openAPINullablesSetToNull, 'first_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('first_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($first_name) && (mb_strlen($first_name) > 30)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling UserDTO., must be smaller than or equal to 30.');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name Last name of the user.
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            array_push($this->openAPINullablesSetToNull, 'last_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($last_name) && (mb_strlen($last_name) > 30)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling UserDTO., must be smaller than or equal to 30.');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Email address for contacting the user.
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            array_push($this->openAPINullablesSetToNull, 'email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($email) && (mb_strlen($email) > 50)) {
            throw new \InvalidArgumentException('invalid length for $email when calling UserDTO., must be smaller than or equal to 50.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled Whether the user account is enabled or disabled. An account should be disabled when the user should no longer be allowed to log in to Deposco on a more permanent basis, such as when a user leaves the company.
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active Whether the user account is active or inactive. This field is set to false when a user exceeds the maximum number of failed attempts to enter their password during login.
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets last_logged_in_time
     *
     * @return \DateTime|null
     */
    public function getLastLoggedInTime()
    {
        return $this->container['last_logged_in_time'];
    }

    /**
     * Sets last_logged_in_time
     *
     * @param \DateTime|null $last_logged_in_time Date and time that the user last logged in to Deposco.
     *
     * @return self
     */
    public function setLastLoggedInTime($last_logged_in_time)
    {
        if (is_null($last_logged_in_time)) {
            array_push($this->openAPINullablesSetToNull, 'last_logged_in_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_logged_in_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_logged_in_time'] = $last_logged_in_time;

        return $this;
    }

    /**
     * Gets last_log_in_attempt
     *
     * @return \DateTime|null
     */
    public function getLastLogInAttempt()
    {
        return $this->container['last_log_in_attempt'];
    }

    /**
     * Sets last_log_in_attempt
     *
     * @param \DateTime|null $last_log_in_attempt Date and time that the user last attempted to log in to Deposco.
     *
     * @return self
     */
    public function setLastLogInAttempt($last_log_in_attempt)
    {
        if (is_null($last_log_in_attempt)) {
            array_push($this->openAPINullablesSetToNull, 'last_log_in_attempt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_log_in_attempt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_log_in_attempt'] = $last_log_in_attempt;

        return $this;
    }

    /**
     * Gets user_of_tenant
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getUserOfTenant()
    {
        return $this->container['user_of_tenant'];
    }

    /**
     * Sets user_of_tenant
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $user_of_tenant user_of_tenant
     *
     * @return self
     */
    public function setUserOfTenant($user_of_tenant)
    {
        if (is_null($user_of_tenant)) {
            array_push($this->openAPINullablesSetToNull, 'user_of_tenant');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_of_tenant', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_of_tenant'] = $user_of_tenant;

        return $this;
    }

    /**
     * Gets company_assignments
     *
     * @return \BeLenka\Deposco\Model\EntityRef[]|null
     */
    public function getCompanyAssignments()
    {
        return $this->container['company_assignments'];
    }

    /**
     * Sets company_assignments
     *
     * @param \BeLenka\Deposco\Model\EntityRef[]|null $company_assignments Additional business units or tenant companies that are assigned to the user account.
     *
     * @return self
     */
    public function setCompanyAssignments($company_assignments)
    {
        if (is_null($company_assignments)) {
            array_push($this->openAPINullablesSetToNull, 'company_assignments');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('company_assignments', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['company_assignments'] = $company_assignments;

        return $this;
    }

    /**
     * Gets facility
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getFacility()
    {
        return $this->container['facility'];
    }

    /**
     * Sets facility
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $facility facility
     *
     * @return self
     */
    public function setFacility($facility)
    {
        if (is_null($facility)) {
            array_push($this->openAPINullablesSetToNull, 'facility');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('facility', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['facility'] = $facility;

        return $this;
    }

    /**
     * Gets active_zone
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getActiveZone()
    {
        return $this->container['active_zone'];
    }

    /**
     * Sets active_zone
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $active_zone active_zone
     *
     * @return self
     */
    public function setActiveZone($active_zone)
    {
        if (is_null($active_zone)) {
            array_push($this->openAPINullablesSetToNull, 'active_zone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('active_zone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['active_zone'] = $active_zone;

        return $this;
    }

    /**
     * Gets active_resource
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getActiveResource()
    {
        return $this->container['active_resource'];
    }

    /**
     * Sets active_resource
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $active_resource active_resource
     *
     * @return self
     */
    public function setActiveResource($active_resource)
    {
        if (is_null($active_resource)) {
            array_push($this->openAPINullablesSetToNull, 'active_resource');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('active_resource', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['active_resource'] = $active_resource;

        return $this;
    }

    /**
     * Gets home_page
     *
     * @return string|null
     */
    public function getHomePage()
    {
        return $this->container['home_page'];
    }

    /**
     * Sets home_page
     *
     * @param string|null $home_page First page of the application that appears when the user logs in.
     *
     * @return self
     */
    public function setHomePage($home_page)
    {
        if (is_null($home_page)) {
            array_push($this->openAPINullablesSetToNull, 'home_page');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('home_page', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($home_page) && (mb_strlen($home_page) > 40)) {
            throw new \InvalidArgumentException('invalid length for $home_page when calling UserDTO., must be smaller than or equal to 40.');
        }

        $this->container['home_page'] = $home_page;

        return $this;
    }

    /**
     * Gets handheld_menu
     *
     * @return string|null
     */
    public function getHandheldMenu()
    {
        return $this->container['handheld_menu'];
    }

    /**
     * Sets handheld_menu
     *
     * @param string|null $handheld_menu Handheld menu that is assigned to the user.
     *
     * @return self
     */
    public function setHandheldMenu($handheld_menu)
    {
        if (is_null($handheld_menu)) {
            array_push($this->openAPINullablesSetToNull, 'handheld_menu');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('handheld_menu', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($handheld_menu) && (mb_strlen($handheld_menu) > 100)) {
            throw new \InvalidArgumentException('invalid length for $handheld_menu when calling UserDTO., must be smaller than or equal to 100.');
        }

        $this->container['handheld_menu'] = $handheld_menu;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return \BeLenka\Deposco\Model\Locale|null
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param \BeLenka\Deposco\Model\Locale|null $locale locale
     *
     * @return self
     */
    public function setLocale($locale)
    {
        if (is_null($locale)) {
            array_push($this->openAPINullablesSetToNull, 'locale');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('locale', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets time_zone
     *
     * @return \BeLenka\Deposco\Model\TimeZone|null
     */
    public function getTimeZone()
    {
        return $this->container['time_zone'];
    }

    /**
     * Sets time_zone
     *
     * @param \BeLenka\Deposco\Model\TimeZone|null $time_zone time_zone
     *
     * @return self
     */
    public function setTimeZone($time_zone)
    {
        if (is_null($time_zone)) {
            array_push($this->openAPINullablesSetToNull, 'time_zone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('time_zone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['time_zone'] = $time_zone;

        return $this;
    }

    /**
     * Gets date_format
     *
     * @return \BeLenka\Deposco\Model\DateFormat|null
     */
    public function getDateFormat()
    {
        return $this->container['date_format'];
    }

    /**
     * Sets date_format
     *
     * @param \BeLenka\Deposco\Model\DateFormat|null $date_format date_format
     *
     * @return self
     */
    public function setDateFormat($date_format)
    {
        if (is_null($date_format)) {
            array_push($this->openAPINullablesSetToNull, 'date_format');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date_format', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['date_format'] = $date_format;

        return $this;
    }

    /**
     * Gets start_day_of_week
     *
     * @return string|null
     */
    public function getStartDayOfWeek()
    {
        return $this->container['start_day_of_week'];
    }

    /**
     * Sets start_day_of_week
     *
     * @param string|null $start_day_of_week Whether Sunday or Monday is the first day of the week when the user selects a date from a calendar control.
     *
     * @return self
     */
    public function setStartDayOfWeek($start_day_of_week)
    {
        if (is_null($start_day_of_week)) {
            array_push($this->openAPINullablesSetToNull, 'start_day_of_week');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('start_day_of_week', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getStartDayOfWeekAllowableValues();
        if (!is_null($start_day_of_week) && !in_array($start_day_of_week, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'start_day_of_week', must be one of '%s'",
                    $start_day_of_week,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['start_day_of_week'] = $start_day_of_week;

        return $this;
    }

    /**
     * Gets pin_code
     *
     * @return string|null
     */
    public function getPinCode()
    {
        return $this->container['pin_code'];
    }

    /**
     * Sets pin_code
     *
     * @param string|null $pin_code PIN code for entering an exception during picking.
     *
     * @return self
     */
    public function setPinCode($pin_code)
    {
        if (is_null($pin_code)) {
            array_push($this->openAPINullablesSetToNull, 'pin_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pin_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($pin_code) && (mb_strlen($pin_code) > 64)) {
            throw new \InvalidArgumentException('invalid length for $pin_code when calling UserDTO., must be smaller than or equal to 64.');
        }

        $this->container['pin_code'] = $pin_code;

        return $this;
    }

    /**
     * Gets cost_center
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getCostCenter()
    {
        return $this->container['cost_center'];
    }

    /**
     * Sets cost_center
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $cost_center cost_center
     *
     * @return self
     */
    public function setCostCenter($cost_center)
    {
        if (is_null($cost_center)) {
            array_push($this->openAPINullablesSetToNull, 'cost_center');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cost_center', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cost_center'] = $cost_center;

        return $this;
    }

    /**
     * Gets organization
     *
     * @return string|null
     */
    public function getOrganization()
    {
        return $this->container['organization'];
    }

    /**
     * Sets organization
     *
     * @param string|null $organization Organization that is assigned to the user.
     *
     * @return self
     */
    public function setOrganization($organization)
    {
        if (is_null($organization)) {
            array_push($this->openAPINullablesSetToNull, 'organization');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organization', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($organization) && (mb_strlen($organization) > 50)) {
            throw new \InvalidArgumentException('invalid length for $organization when calling UserDTO., must be smaller than or equal to 50.');
        }

        $this->container['organization'] = $organization;

        return $this;
    }

    /**
     * Gets division
     *
     * @return string|null
     */
    public function getDivision()
    {
        return $this->container['division'];
    }

    /**
     * Sets division
     *
     * @param string|null $division Division that is assigned to the user.
     *
     * @return self
     */
    public function setDivision($division)
    {
        if (is_null($division)) {
            array_push($this->openAPINullablesSetToNull, 'division');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('division', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($division) && (mb_strlen($division) > 30)) {
            throw new \InvalidArgumentException('invalid length for $division when calling UserDTO., must be smaller than or equal to 30.');
        }

        $this->container['division'] = $division;

        return $this;
    }

    /**
     * Gets department
     *
     * @return string|null
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param string|null $department Department that is assigned to the user.
     *
     * @return self
     */
    public function setDepartment($department)
    {
        if (is_null($department)) {
            array_push($this->openAPINullablesSetToNull, 'department');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('department', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($department) && (mb_strlen($department) > 50)) {
            throw new \InvalidArgumentException('invalid length for $department when calling UserDTO., must be smaller than or equal to 50.');
        }

        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets job_title
     *
     * @return string|null
     */
    public function getJobTitle()
    {
        return $this->container['job_title'];
    }

    /**
     * Sets job_title
     *
     * @param string|null $job_title Job title that is assigned to the user.
     *
     * @return self
     */
    public function setJobTitle($job_title)
    {
        if (is_null($job_title)) {
            array_push($this->openAPINullablesSetToNull, 'job_title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('job_title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($job_title) && (mb_strlen($job_title) > 100)) {
            throw new \InvalidArgumentException('invalid length for $job_title when calling UserDTO., must be smaller than or equal to 100.');
        }

        $this->container['job_title'] = $job_title;

        return $this;
    }

    /**
     * Gets participant_type
     *
     * @return string|null
     */
    public function getParticipantType()
    {
        return $this->container['participant_type'];
    }

    /**
     * Sets participant_type
     *
     * @param string|null $participant_type Description of how the user participates in the company's operations.
     *
     * @return self
     */
    public function setParticipantType($participant_type)
    {
        if (is_null($participant_type)) {
            array_push($this->openAPINullablesSetToNull, 'participant_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('participant_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getParticipantTypeAllowableValues();
        if (!is_null($participant_type) && !in_array($participant_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'participant_type', must be one of '%s'",
                    $participant_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['participant_type'] = $participant_type;

        return $this;
    }

    /**
     * Gets employee_number
     *
     * @return string|null
     */
    public function getEmployeeNumber()
    {
        return $this->container['employee_number'];
    }

    /**
     * Sets employee_number
     *
     * @param string|null $employee_number Corporate employee number for the user.
     *
     * @return self
     */
    public function setEmployeeNumber($employee_number)
    {
        if (is_null($employee_number)) {
            array_push($this->openAPINullablesSetToNull, 'employee_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employee_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($employee_number) && (mb_strlen($employee_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $employee_number when calling UserDTO., must be smaller than or equal to 50.');
        }

        $this->container['employee_number'] = $employee_number;

        return $this;
    }

    /**
     * Gets profile
     *
     * @return string|null
     */
    public function getProfile()
    {
        return $this->container['profile'];
    }

    /**
     * Sets profile
     *
     * @param string|null $profile Profile that is assigned to the user.
     *
     * @return self
     */
    public function setProfile($profile)
    {
        if (is_null($profile)) {
            array_push($this->openAPINullablesSetToNull, 'profile');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('profile', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($profile) && (mb_strlen($profile) > 500)) {
            throw new \InvalidArgumentException('invalid length for $profile when calling UserDTO., must be smaller than or equal to 500.');
        }

        $this->container['profile'] = $profile;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone Phone number for contacting the user.
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            array_push($this->openAPINullablesSetToNull, 'phone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($phone) && (mb_strlen($phone) > 30)) {
            throw new \InvalidArgumentException('invalid length for $phone when calling UserDTO., must be smaller than or equal to 30.');
        }

        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets mobile
     *
     * @return string|null
     */
    public function getMobile()
    {
        return $this->container['mobile'];
    }

    /**
     * Sets mobile
     *
     * @param string|null $mobile Mobile phone number for contacting the user.
     *
     * @return self
     */
    public function setMobile($mobile)
    {
        if (is_null($mobile)) {
            array_push($this->openAPINullablesSetToNull, 'mobile');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mobile', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($mobile) && (mb_strlen($mobile) > 20)) {
            throw new \InvalidArgumentException('invalid length for $mobile when calling UserDTO., must be smaller than or equal to 20.');
        }

        $this->container['mobile'] = $mobile;

        return $this;
    }

    /**
     * Gets fax
     *
     * @return string|null
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     *
     * @param string|null $fax Fax number for contacting the user.
     *
     * @return self
     */
    public function setFax($fax)
    {
        if (is_null($fax)) {
            array_push($this->openAPINullablesSetToNull, 'fax');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fax', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($fax) && (mb_strlen($fax) > 20)) {
            throw new \InvalidArgumentException('invalid length for $fax when calling UserDTO., must be smaller than or equal to 20.');
        }

        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city City for the user's address.
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            array_push($this->openAPINullablesSetToNull, 'city');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('city', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($city) && (mb_strlen($city) > 30)) {
            throw new \InvalidArgumentException('invalid length for $city when calling UserDTO., must be smaller than or equal to 30.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state_province
     *
     * @return string|null
     */
    public function getStateProvince()
    {
        return $this->container['state_province'];
    }

    /**
     * Sets state_province
     *
     * @param string|null $state_province State or province for the user's address.
     *
     * @return self
     */
    public function setStateProvince($state_province)
    {
        if (is_null($state_province)) {
            array_push($this->openAPINullablesSetToNull, 'state_province');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('state_province', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($state_province) && (mb_strlen($state_province) > 100)) {
            throw new \InvalidArgumentException('invalid length for $state_province when calling UserDTO., must be smaller than or equal to 100.');
        }

        $this->container['state_province'] = $state_province;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string|null $postal_code Postal code for the user's address.
     *
     * @return self
     */
    public function setPostalCode($postal_code)
    {
        if (is_null($postal_code)) {
            array_push($this->openAPINullablesSetToNull, 'postal_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('postal_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($postal_code) && (mb_strlen($postal_code) > 20)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling UserDTO., must be smaller than or equal to 20.');
        }

        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country Two-letter (ISO 3166-1 alpha-2) country code for the country for the user's address.
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            array_push($this->openAPINullablesSetToNull, 'country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($country) && (mb_strlen($country) > 100)) {
            throw new \InvalidArgumentException('invalid length for $country when calling UserDTO., must be smaller than or equal to 100.');
        }

        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets custom_attribute1
     *
     * @return string|null
     */
    public function getCustomAttribute1()
    {
        return $this->container['custom_attribute1'];
    }

    /**
     * Sets custom_attribute1
     *
     * @param string|null $custom_attribute1 Custom field value for the user account.
     *
     * @return self
     */
    public function setCustomAttribute1($custom_attribute1)
    {
        if (is_null($custom_attribute1)) {
            array_push($this->openAPINullablesSetToNull, 'custom_attribute1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_attribute1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($custom_attribute1) && (mb_strlen($custom_attribute1) > 50)) {
            throw new \InvalidArgumentException('invalid length for $custom_attribute1 when calling UserDTO., must be smaller than or equal to 50.');
        }

        $this->container['custom_attribute1'] = $custom_attribute1;

        return $this;
    }

    /**
     * Gets custom_attribute2
     *
     * @return string|null
     */
    public function getCustomAttribute2()
    {
        return $this->container['custom_attribute2'];
    }

    /**
     * Sets custom_attribute2
     *
     * @param string|null $custom_attribute2 Custom field value for the user account.
     *
     * @return self
     */
    public function setCustomAttribute2($custom_attribute2)
    {
        if (is_null($custom_attribute2)) {
            array_push($this->openAPINullablesSetToNull, 'custom_attribute2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_attribute2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($custom_attribute2) && (mb_strlen($custom_attribute2) > 50)) {
            throw new \InvalidArgumentException('invalid length for $custom_attribute2 when calling UserDTO., must be smaller than or equal to 50.');
        }

        $this->container['custom_attribute2'] = $custom_attribute2;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime|null $created_date Date and time that the user account was created.
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets updated_date
     *
     * @return \DateTime|null
     */
    public function getUpdatedDate()
    {
        return $this->container['updated_date'];
    }

    /**
     * Sets updated_date
     *
     * @param \DateTime|null $updated_date Date and time that the user account was last updated.
     *
     * @return self
     */
    public function setUpdatedDate($updated_date)
    {
        if (is_null($updated_date)) {
            throw new \InvalidArgumentException('non-nullable updated_date cannot be null');
        }
        $this->container['updated_date'] = $updated_date;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            throw new \InvalidArgumentException('non-nullable created_by cannot be null');
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $updated_by updated_by
     *
     * @return self
     */
    public function setUpdatedBy($updated_by)
    {
        if (is_null($updated_by)) {
            throw new \InvalidArgumentException('non-nullable updated_by cannot be null');
        }
        $this->container['updated_by'] = $updated_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


