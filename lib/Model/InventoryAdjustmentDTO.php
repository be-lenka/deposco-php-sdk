<?php
/**
 * InventoryAdjustmentDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deposco API
 *
 * Welcome to the Deposco API Reference! The Deposco API enables you to integrate your system with Deposco.  * Integrate a product information system (PIM) by creating and retrieving data for items, packs, UPCs, and kits. * Set up warehouse data by creating facilities, zones, locations, and storage details. * Create inbound orders that can be received and outbound orders that can be fulfilled with Deposco warehouse management processes.  This reference provides details on available operations, endpoints, parameters, schemas, and responses.  Example requests and responses are also available for you to use as a reference. You can copy the examples to use as a starting point for your own requests.  Review the guides to learn how the API is used in common business scenarios such as setting up the warehouse and integrating a Product Information Management (PIM) system.  When you're ready to get started, register for a developer account and then log in to create your application in the developer portal.
 *
 * The version of the OpenAPI document: 2.0.2519
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\Deposco\Model;

use \ArrayAccess;
use \BeLenka\Deposco\ObjectSerializer;

/**
 * InventoryAdjustmentDTO Class Doc Comment
 *
 * @category Class
 * @description Record that represents an inventory adjustment for an item at a specific facility and time.
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InventoryAdjustmentDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InventoryAdjustmentDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'self' => '\BeLenka\Deposco\Model\EntityRef',
        'business_unit' => '\BeLenka\Deposco\Model\EntityRef',
        'facility' => '\BeLenka\Deposco\Model\EntityRef',
        'item' => '\BeLenka\Deposco\Model\EntityRef',
        'pack' => '\BeLenka\Deposco\Model\EntityRef',
        'quantity' => 'int',
        'action_type' => 'string',
        'inventory_status' => 'string',
        'reason_code' => 'string',
        'serial_number' => 'string',
        'lot_number' => 'string',
        'born_on_date' => '\DateTime',
        'expiration_date' => '\DateTime',
        'inventory_condition' => 'string',
        'inventory_attribute1' => 'string',
        'inventory_attribute2' => 'string',
        'custom_attribute1' => 'string',
        'custom_attribute2' => 'string',
        'created_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'self' => null,
        'business_unit' => null,
        'facility' => null,
        'item' => null,
        'pack' => null,
        'quantity' => null,
        'action_type' => null,
        'inventory_status' => null,
        'reason_code' => null,
        'serial_number' => null,
        'lot_number' => null,
        'born_on_date' => 'date-time',
        'expiration_date' => 'date-time',
        'inventory_condition' => null,
        'inventory_attribute1' => null,
        'inventory_attribute2' => null,
        'custom_attribute1' => null,
        'custom_attribute2' => null,
        'created_date' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'self' => false,
        'business_unit' => false,
        'facility' => false,
        'item' => false,
        'pack' => false,
        'quantity' => false,
        'action_type' => false,
        'inventory_status' => true,
        'reason_code' => true,
        'serial_number' => true,
        'lot_number' => true,
        'born_on_date' => true,
        'expiration_date' => true,
        'inventory_condition' => true,
        'inventory_attribute1' => true,
        'inventory_attribute2' => true,
        'custom_attribute1' => true,
        'custom_attribute2' => true,
        'created_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'self' => 'self',
        'business_unit' => 'businessUnit',
        'facility' => 'facility',
        'item' => 'item',
        'pack' => 'pack',
        'quantity' => 'quantity',
        'action_type' => 'actionType',
        'inventory_status' => 'inventoryStatus',
        'reason_code' => 'reasonCode',
        'serial_number' => 'serialNumber',
        'lot_number' => 'lotNumber',
        'born_on_date' => 'bornOnDate',
        'expiration_date' => 'expirationDate',
        'inventory_condition' => 'inventoryCondition',
        'inventory_attribute1' => 'inventoryAttribute1',
        'inventory_attribute2' => 'inventoryAttribute2',
        'custom_attribute1' => 'customAttribute1',
        'custom_attribute2' => 'customAttribute2',
        'created_date' => 'createdDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'self' => 'setSelf',
        'business_unit' => 'setBusinessUnit',
        'facility' => 'setFacility',
        'item' => 'setItem',
        'pack' => 'setPack',
        'quantity' => 'setQuantity',
        'action_type' => 'setActionType',
        'inventory_status' => 'setInventoryStatus',
        'reason_code' => 'setReasonCode',
        'serial_number' => 'setSerialNumber',
        'lot_number' => 'setLotNumber',
        'born_on_date' => 'setBornOnDate',
        'expiration_date' => 'setExpirationDate',
        'inventory_condition' => 'setInventoryCondition',
        'inventory_attribute1' => 'setInventoryAttribute1',
        'inventory_attribute2' => 'setInventoryAttribute2',
        'custom_attribute1' => 'setCustomAttribute1',
        'custom_attribute2' => 'setCustomAttribute2',
        'created_date' => 'setCreatedDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'self' => 'getSelf',
        'business_unit' => 'getBusinessUnit',
        'facility' => 'getFacility',
        'item' => 'getItem',
        'pack' => 'getPack',
        'quantity' => 'getQuantity',
        'action_type' => 'getActionType',
        'inventory_status' => 'getInventoryStatus',
        'reason_code' => 'getReasonCode',
        'serial_number' => 'getSerialNumber',
        'lot_number' => 'getLotNumber',
        'born_on_date' => 'getBornOnDate',
        'expiration_date' => 'getExpirationDate',
        'inventory_condition' => 'getInventoryCondition',
        'inventory_attribute1' => 'getInventoryAttribute1',
        'inventory_attribute2' => 'getInventoryAttribute2',
        'custom_attribute1' => 'getCustomAttribute1',
        'custom_attribute2' => 'getCustomAttribute2',
        'created_date' => 'getCreatedDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ACTION_TYPE_ADJUSTMENT = 'Adjustment';
    public const ACTION_TYPE_STATUS_CHANGE = 'Status Change';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActionTypeAllowableValues()
    {
        return [
            self::ACTION_TYPE_ADJUSTMENT,
            self::ACTION_TYPE_STATUS_CHANGE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('self', $data ?? [], null);
        $this->setIfExists('business_unit', $data ?? [], null);
        $this->setIfExists('facility', $data ?? [], null);
        $this->setIfExists('item', $data ?? [], null);
        $this->setIfExists('pack', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('action_type', $data ?? [], null);
        $this->setIfExists('inventory_status', $data ?? [], null);
        $this->setIfExists('reason_code', $data ?? [], null);
        $this->setIfExists('serial_number', $data ?? [], null);
        $this->setIfExists('lot_number', $data ?? [], null);
        $this->setIfExists('born_on_date', $data ?? [], null);
        $this->setIfExists('expiration_date', $data ?? [], null);
        $this->setIfExists('inventory_condition', $data ?? [], null);
        $this->setIfExists('inventory_attribute1', $data ?? [], null);
        $this->setIfExists('inventory_attribute2', $data ?? [], null);
        $this->setIfExists('custom_attribute1', $data ?? [], null);
        $this->setIfExists('custom_attribute2', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['business_unit'] === null) {
            $invalidProperties[] = "'business_unit' can't be null";
        }
        if ($this->container['facility'] === null) {
            $invalidProperties[] = "'facility' can't be null";
        }
        if ($this->container['item'] === null) {
            $invalidProperties[] = "'item' can't be null";
        }
        if ($this->container['pack'] === null) {
            $invalidProperties[] = "'pack' can't be null";
        }
        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if ($this->container['action_type'] === null) {
            $invalidProperties[] = "'action_type' can't be null";
        }
        $allowedValues = $this->getActionTypeAllowableValues();
        if (!is_null($this->container['action_type']) && !in_array($this->container['action_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'action_type', must be one of '%s'",
                $this->container['action_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['inventory_status']) && (mb_strlen($this->container['inventory_status']) > 30)) {
            $invalidProperties[] = "invalid value for 'inventory_status', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['reason_code']) && (mb_strlen($this->container['reason_code']) > 20)) {
            $invalidProperties[] = "invalid value for 'reason_code', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['serial_number']) && (mb_strlen($this->container['serial_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'serial_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['lot_number']) && (mb_strlen($this->container['lot_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'lot_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['inventory_condition']) && (mb_strlen($this->container['inventory_condition']) > 255)) {
            $invalidProperties[] = "invalid value for 'inventory_condition', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['inventory_attribute1']) && (mb_strlen($this->container['inventory_attribute1']) > 255)) {
            $invalidProperties[] = "invalid value for 'inventory_attribute1', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['inventory_attribute2']) && (mb_strlen($this->container['inventory_attribute2']) > 255)) {
            $invalidProperties[] = "invalid value for 'inventory_attribute2', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['custom_attribute1']) && (mb_strlen($this->container['custom_attribute1']) > 50)) {
            $invalidProperties[] = "invalid value for 'custom_attribute1', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['custom_attribute2']) && (mb_strlen($this->container['custom_attribute2']) > 50)) {
            $invalidProperties[] = "invalid value for 'custom_attribute2', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets self
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $self self
     *
     * @return self
     */
    public function setSelf($self)
    {
        if (is_null($self)) {
            throw new \InvalidArgumentException('non-nullable self cannot be null');
        }
        $this->container['self'] = $self;

        return $this;
    }

    /**
     * Gets business_unit
     *
     * @return \BeLenka\Deposco\Model\EntityRef
     */
    public function getBusinessUnit()
    {
        return $this->container['business_unit'];
    }

    /**
     * Sets business_unit
     *
     * @param \BeLenka\Deposco\Model\EntityRef $business_unit business_unit
     *
     * @return self
     */
    public function setBusinessUnit($business_unit)
    {
        if (is_null($business_unit)) {
            throw new \InvalidArgumentException('non-nullable business_unit cannot be null');
        }
        $this->container['business_unit'] = $business_unit;

        return $this;
    }

    /**
     * Gets facility
     *
     * @return \BeLenka\Deposco\Model\EntityRef
     */
    public function getFacility()
    {
        return $this->container['facility'];
    }

    /**
     * Sets facility
     *
     * @param \BeLenka\Deposco\Model\EntityRef $facility facility
     *
     * @return self
     */
    public function setFacility($facility)
    {
        if (is_null($facility)) {
            throw new \InvalidArgumentException('non-nullable facility cannot be null');
        }
        $this->container['facility'] = $facility;

        return $this;
    }

    /**
     * Gets item
     *
     * @return \BeLenka\Deposco\Model\EntityRef
     */
    public function getItem()
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     *
     * @param \BeLenka\Deposco\Model\EntityRef $item item
     *
     * @return self
     */
    public function setItem($item)
    {
        if (is_null($item)) {
            throw new \InvalidArgumentException('non-nullable item cannot be null');
        }
        $this->container['item'] = $item;

        return $this;
    }

    /**
     * Gets pack
     *
     * @return \BeLenka\Deposco\Model\EntityRef
     */
    public function getPack()
    {
        return $this->container['pack'];
    }

    /**
     * Sets pack
     *
     * @param \BeLenka\Deposco\Model\EntityRef $pack pack
     *
     * @return self
     */
    public function setPack($pack)
    {
        if (is_null($pack)) {
            throw new \InvalidArgumentException('non-nullable pack cannot be null');
        }
        $this->container['pack'] = $pack;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity Quantity of inventory that changed.
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets action_type
     *
     * @return string
     */
    public function getActionType()
    {
        return $this->container['action_type'];
    }

    /**
     * Sets action_type
     *
     * @param string $action_type Type of action that resulted in the inventory adjustment.
     *
     * @return self
     */
    public function setActionType($action_type)
    {
        if (is_null($action_type)) {
            throw new \InvalidArgumentException('non-nullable action_type cannot be null');
        }
        $allowedValues = $this->getActionTypeAllowableValues();
        if (!in_array($action_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'action_type', must be one of '%s'",
                    $action_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['action_type'] = $action_type;

        return $this;
    }

    /**
     * Gets inventory_status
     *
     * @return string|null
     */
    public function getInventoryStatus()
    {
        return $this->container['inventory_status'];
    }

    /**
     * Sets inventory_status
     *
     * @param string|null $inventory_status Current status of the inventory.
     *
     * @return self
     */
    public function setInventoryStatus($inventory_status)
    {
        if (is_null($inventory_status)) {
            array_push($this->openAPINullablesSetToNull, 'inventory_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inventory_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($inventory_status) && (mb_strlen($inventory_status) > 30)) {
            throw new \InvalidArgumentException('invalid length for $inventory_status when calling InventoryAdjustmentDTO., must be smaller than or equal to 30.');
        }

        $this->container['inventory_status'] = $inventory_status;

        return $this;
    }

    /**
     * Gets reason_code
     *
     * @return string|null
     */
    public function getReasonCode()
    {
        return $this->container['reason_code'];
    }

    /**
     * Sets reason_code
     *
     * @param string|null $reason_code Code that identifies the reason why the inventory changed.
     *
     * @return self
     */
    public function setReasonCode($reason_code)
    {
        if (is_null($reason_code)) {
            array_push($this->openAPINullablesSetToNull, 'reason_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reason_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($reason_code) && (mb_strlen($reason_code) > 20)) {
            throw new \InvalidArgumentException('invalid length for $reason_code when calling InventoryAdjustmentDTO., must be smaller than or equal to 20.');
        }

        $this->container['reason_code'] = $reason_code;

        return $this;
    }

    /**
     * Gets serial_number
     *
     * @return string|null
     */
    public function getSerialNumber()
    {
        return $this->container['serial_number'];
    }

    /**
     * Sets serial_number
     *
     * @param string|null $serial_number Serial number that is assigned to the inventory.
     *
     * @return self
     */
    public function setSerialNumber($serial_number)
    {
        if (is_null($serial_number)) {
            array_push($this->openAPINullablesSetToNull, 'serial_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serial_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($serial_number) && (mb_strlen($serial_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $serial_number when calling InventoryAdjustmentDTO., must be smaller than or equal to 50.');
        }

        $this->container['serial_number'] = $serial_number;

        return $this;
    }

    /**
     * Gets lot_number
     *
     * @return string|null
     */
    public function getLotNumber()
    {
        return $this->container['lot_number'];
    }

    /**
     * Sets lot_number
     *
     * @param string|null $lot_number Lot number that is assigned to the inventory.
     *
     * @return self
     */
    public function setLotNumber($lot_number)
    {
        if (is_null($lot_number)) {
            array_push($this->openAPINullablesSetToNull, 'lot_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lot_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($lot_number) && (mb_strlen($lot_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $lot_number when calling InventoryAdjustmentDTO., must be smaller than or equal to 50.');
        }

        $this->container['lot_number'] = $lot_number;

        return $this;
    }

    /**
     * Gets born_on_date
     *
     * @return \DateTime|null
     */
    public function getBornOnDate()
    {
        return $this->container['born_on_date'];
    }

    /**
     * Sets born_on_date
     *
     * @param \DateTime|null $born_on_date Born on date for the inventory.
     *
     * @return self
     */
    public function setBornOnDate($born_on_date)
    {
        if (is_null($born_on_date)) {
            array_push($this->openAPINullablesSetToNull, 'born_on_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('born_on_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['born_on_date'] = $born_on_date;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return \DateTime|null
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param \DateTime|null $expiration_date Expiration date for the inventory.
     *
     * @return self
     */
    public function setExpirationDate($expiration_date)
    {
        if (is_null($expiration_date)) {
            array_push($this->openAPINullablesSetToNull, 'expiration_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('expiration_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets inventory_condition
     *
     * @return string|null
     */
    public function getInventoryCondition()
    {
        return $this->container['inventory_condition'];
    }

    /**
     * Sets inventory_condition
     *
     * @param string|null $inventory_condition Condition of the inventory.
     *
     * @return self
     */
    public function setInventoryCondition($inventory_condition)
    {
        if (is_null($inventory_condition)) {
            array_push($this->openAPINullablesSetToNull, 'inventory_condition');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inventory_condition', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($inventory_condition) && (mb_strlen($inventory_condition) > 255)) {
            throw new \InvalidArgumentException('invalid length for $inventory_condition when calling InventoryAdjustmentDTO., must be smaller than or equal to 255.');
        }

        $this->container['inventory_condition'] = $inventory_condition;

        return $this;
    }

    /**
     * Gets inventory_attribute1
     *
     * @return string|null
     */
    public function getInventoryAttribute1()
    {
        return $this->container['inventory_attribute1'];
    }

    /**
     * Sets inventory_attribute1
     *
     * @param string|null $inventory_attribute1 Additional field with descriptive information about the inventory.
     *
     * @return self
     */
    public function setInventoryAttribute1($inventory_attribute1)
    {
        if (is_null($inventory_attribute1)) {
            array_push($this->openAPINullablesSetToNull, 'inventory_attribute1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inventory_attribute1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($inventory_attribute1) && (mb_strlen($inventory_attribute1) > 255)) {
            throw new \InvalidArgumentException('invalid length for $inventory_attribute1 when calling InventoryAdjustmentDTO., must be smaller than or equal to 255.');
        }

        $this->container['inventory_attribute1'] = $inventory_attribute1;

        return $this;
    }

    /**
     * Gets inventory_attribute2
     *
     * @return string|null
     */
    public function getInventoryAttribute2()
    {
        return $this->container['inventory_attribute2'];
    }

    /**
     * Sets inventory_attribute2
     *
     * @param string|null $inventory_attribute2 Additional field with descriptive information about the inventory.
     *
     * @return self
     */
    public function setInventoryAttribute2($inventory_attribute2)
    {
        if (is_null($inventory_attribute2)) {
            array_push($this->openAPINullablesSetToNull, 'inventory_attribute2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inventory_attribute2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($inventory_attribute2) && (mb_strlen($inventory_attribute2) > 255)) {
            throw new \InvalidArgumentException('invalid length for $inventory_attribute2 when calling InventoryAdjustmentDTO., must be smaller than or equal to 255.');
        }

        $this->container['inventory_attribute2'] = $inventory_attribute2;

        return $this;
    }

    /**
     * Gets custom_attribute1
     *
     * @return string|null
     */
    public function getCustomAttribute1()
    {
        return $this->container['custom_attribute1'];
    }

    /**
     * Sets custom_attribute1
     *
     * @param string|null $custom_attribute1 Custom attribute that is assigned to the inventory.
     *
     * @return self
     */
    public function setCustomAttribute1($custom_attribute1)
    {
        if (is_null($custom_attribute1)) {
            array_push($this->openAPINullablesSetToNull, 'custom_attribute1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_attribute1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($custom_attribute1) && (mb_strlen($custom_attribute1) > 50)) {
            throw new \InvalidArgumentException('invalid length for $custom_attribute1 when calling InventoryAdjustmentDTO., must be smaller than or equal to 50.');
        }

        $this->container['custom_attribute1'] = $custom_attribute1;

        return $this;
    }

    /**
     * Gets custom_attribute2
     *
     * @return string|null
     */
    public function getCustomAttribute2()
    {
        return $this->container['custom_attribute2'];
    }

    /**
     * Sets custom_attribute2
     *
     * @param string|null $custom_attribute2 Custom attribute that is assigned to the inventory.
     *
     * @return self
     */
    public function setCustomAttribute2($custom_attribute2)
    {
        if (is_null($custom_attribute2)) {
            array_push($this->openAPINullablesSetToNull, 'custom_attribute2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_attribute2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($custom_attribute2) && (mb_strlen($custom_attribute2) > 50)) {
            throw new \InvalidArgumentException('invalid length for $custom_attribute2 when calling InventoryAdjustmentDTO., must be smaller than or equal to 50.');
        }

        $this->container['custom_attribute2'] = $custom_attribute2;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime|null $created_date Date and time that the inventory adjustment was created.
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


