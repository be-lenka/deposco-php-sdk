<?php
/**
 * CustomerOrderRetailActivityDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deposco API
 *
 * Welcome to the Deposco API Reference! The Deposco API enables you to integrate your system with Deposco.  * Integrate a product information system (PIM) by creating and retrieving data for items, packs, UPCs, and kits. * Set up warehouse data by creating facilities, zones, locations, and storage details. * Create inbound orders that can be received and outbound orders that can be fulfilled with Deposco warehouse management processes.  This reference provides details on available operations, endpoints, parameters, schemas, and responses.  Example requests and responses are also available for you to use as a reference. You can copy the examples to use as a starting point for your own requests.  Review the guides to learn how the API is used in common business scenarios such as setting up the warehouse and integrating a Product Information Management (PIM) system.  When you're ready to get started, register for a developer account and then log in to create your application in the developer portal.
 *
 * The version of the OpenAPI document: 2.0.2519
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\Deposco\Model;

use \ArrayAccess;
use \BeLenka\Deposco\ObjectSerializer;

/**
 * CustomerOrderRetailActivityDTO Class Doc Comment
 *
 * @category Class
 * @description Retail activity for a customer order, which provides information about customer sales and returns from a point-of-sale (POS) system at a retail store.
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CustomerOrderRetailActivityDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CustomerOrderRetailActivityDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'self' => '\BeLenka\Deposco\Model\EntityRef',
        'type' => 'string',
        'retail_transaction_id' => 'string',
        'sequence_number' => 'string',
        'batch' => 'string',
        'batch_sequence_number' => 'int',
        'reference_number' => 'string',
        'facility' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'register' => 'string',
        'till' => 'string',
        'associate' => 'string',
        'user' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'business_day_date' => '\DateTime',
        'transaction_start_date' => '\DateTime',
        'transaction_end_date' => '\DateTime',
        'transaction_source' => 'string',
        'test_transaction' => 'bool',
        'voided' => 'bool',
        'reason_code' => 'string',
        'created_date' => '\DateTime',
        'updated_date' => '\DateTime',
        'created_by' => '\BeLenka\Deposco\Model\EntityRef',
        'updated_by' => '\BeLenka\Deposco\Model\EntityRef'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'self' => null,
        'type' => null,
        'retail_transaction_id' => null,
        'sequence_number' => null,
        'batch' => null,
        'batch_sequence_number' => 'double',
        'reference_number' => null,
        'facility' => null,
        'register' => null,
        'till' => null,
        'associate' => null,
        'user' => null,
        'business_day_date' => 'date-time',
        'transaction_start_date' => 'date-time',
        'transaction_end_date' => 'date-time',
        'transaction_source' => null,
        'test_transaction' => null,
        'voided' => null,
        'reason_code' => null,
        'created_date' => 'date-time',
        'updated_date' => 'date-time',
        'created_by' => null,
        'updated_by' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'self' => false,
        'type' => true,
        'retail_transaction_id' => false,
        'sequence_number' => true,
        'batch' => true,
        'batch_sequence_number' => false,
        'reference_number' => true,
        'facility' => true,
        'register' => true,
        'till' => true,
        'associate' => true,
        'user' => true,
        'business_day_date' => true,
        'transaction_start_date' => true,
        'transaction_end_date' => true,
        'transaction_source' => false,
        'test_transaction' => false,
        'voided' => false,
        'reason_code' => true,
        'created_date' => false,
        'updated_date' => false,
        'created_by' => false,
        'updated_by' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'self' => 'self',
        'type' => 'type',
        'retail_transaction_id' => 'retailTransactionId',
        'sequence_number' => 'sequenceNumber',
        'batch' => 'batch',
        'batch_sequence_number' => 'batchSequenceNumber',
        'reference_number' => 'referenceNumber',
        'facility' => 'facility',
        'register' => 'register',
        'till' => 'till',
        'associate' => 'associate',
        'user' => 'user',
        'business_day_date' => 'businessDayDate',
        'transaction_start_date' => 'transactionStartDate',
        'transaction_end_date' => 'transactionEndDate',
        'transaction_source' => 'transactionSource',
        'test_transaction' => 'testTransaction',
        'voided' => 'voided',
        'reason_code' => 'reasonCode',
        'created_date' => 'createdDate',
        'updated_date' => 'updatedDate',
        'created_by' => 'createdBy',
        'updated_by' => 'updatedBy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'self' => 'setSelf',
        'type' => 'setType',
        'retail_transaction_id' => 'setRetailTransactionId',
        'sequence_number' => 'setSequenceNumber',
        'batch' => 'setBatch',
        'batch_sequence_number' => 'setBatchSequenceNumber',
        'reference_number' => 'setReferenceNumber',
        'facility' => 'setFacility',
        'register' => 'setRegister',
        'till' => 'setTill',
        'associate' => 'setAssociate',
        'user' => 'setUser',
        'business_day_date' => 'setBusinessDayDate',
        'transaction_start_date' => 'setTransactionStartDate',
        'transaction_end_date' => 'setTransactionEndDate',
        'transaction_source' => 'setTransactionSource',
        'test_transaction' => 'setTestTransaction',
        'voided' => 'setVoided',
        'reason_code' => 'setReasonCode',
        'created_date' => 'setCreatedDate',
        'updated_date' => 'setUpdatedDate',
        'created_by' => 'setCreatedBy',
        'updated_by' => 'setUpdatedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'self' => 'getSelf',
        'type' => 'getType',
        'retail_transaction_id' => 'getRetailTransactionId',
        'sequence_number' => 'getSequenceNumber',
        'batch' => 'getBatch',
        'batch_sequence_number' => 'getBatchSequenceNumber',
        'reference_number' => 'getReferenceNumber',
        'facility' => 'getFacility',
        'register' => 'getRegister',
        'till' => 'getTill',
        'associate' => 'getAssociate',
        'user' => 'getUser',
        'business_day_date' => 'getBusinessDayDate',
        'transaction_start_date' => 'getTransactionStartDate',
        'transaction_end_date' => 'getTransactionEndDate',
        'transaction_source' => 'getTransactionSource',
        'test_transaction' => 'getTestTransaction',
        'voided' => 'getVoided',
        'reason_code' => 'getReasonCode',
        'created_date' => 'getCreatedDate',
        'updated_date' => 'getUpdatedDate',
        'created_by' => 'getCreatedBy',
        'updated_by' => 'getUpdatedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_SALE = 'Sale';
    public const TYPE__RETURN = 'Return';
    public const TYPE_POST_VOID = 'PostVoid';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_SALE,
            self::TYPE__RETURN,
            self::TYPE_POST_VOID,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('self', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('retail_transaction_id', $data ?? [], null);
        $this->setIfExists('sequence_number', $data ?? [], null);
        $this->setIfExists('batch', $data ?? [], null);
        $this->setIfExists('batch_sequence_number', $data ?? [], null);
        $this->setIfExists('reference_number', $data ?? [], null);
        $this->setIfExists('facility', $data ?? [], null);
        $this->setIfExists('register', $data ?? [], null);
        $this->setIfExists('till', $data ?? [], null);
        $this->setIfExists('associate', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('business_day_date', $data ?? [], null);
        $this->setIfExists('transaction_start_date', $data ?? [], null);
        $this->setIfExists('transaction_end_date', $data ?? [], null);
        $this->setIfExists('transaction_source', $data ?? [], null);
        $this->setIfExists('test_transaction', $data ?? [], null);
        $this->setIfExists('voided', $data ?? [], null);
        $this->setIfExists('reason_code', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('updated_date', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('updated_by', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['retail_transaction_id'] === null) {
            $invalidProperties[] = "'retail_transaction_id' can't be null";
        }
        if ((mb_strlen($this->container['retail_transaction_id']) > 50)) {
            $invalidProperties[] = "invalid value for 'retail_transaction_id', the character length must be smaller than or equal to 50.";
        }

        if (!preg_match("/.*\\S.*/", $this->container['retail_transaction_id'])) {
            $invalidProperties[] = "invalid value for 'retail_transaction_id', must be conform to the pattern /.*\\S.*/.";
        }

        if (!is_null($this->container['sequence_number']) && (mb_strlen($this->container['sequence_number']) > 10)) {
            $invalidProperties[] = "invalid value for 'sequence_number', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['batch']) && (mb_strlen($this->container['batch']) > 50)) {
            $invalidProperties[] = "invalid value for 'batch', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['batch_sequence_number']) && ($this->container['batch_sequence_number'] > 0)) {
            $invalidProperties[] = "invalid value for 'batch_sequence_number', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['batch_sequence_number']) && ($this->container['batch_sequence_number'] < 0)) {
            $invalidProperties[] = "invalid value for 'batch_sequence_number', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['reference_number']) && (mb_strlen($this->container['reference_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'reference_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['register']) && (mb_strlen($this->container['register']) > 20)) {
            $invalidProperties[] = "invalid value for 'register', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['till']) && (mb_strlen($this->container['till']) > 15)) {
            $invalidProperties[] = "invalid value for 'till', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['associate']) && (mb_strlen($this->container['associate']) > 50)) {
            $invalidProperties[] = "invalid value for 'associate', the character length must be smaller than or equal to 50.";
        }

        if ($this->container['transaction_source'] === null) {
            $invalidProperties[] = "'transaction_source' can't be null";
        }
        if ((mb_strlen($this->container['transaction_source']) > 50)) {
            $invalidProperties[] = "invalid value for 'transaction_source', the character length must be smaller than or equal to 50.";
        }

        if (!preg_match("/.*\\S.*/", $this->container['transaction_source'])) {
            $invalidProperties[] = "invalid value for 'transaction_source', must be conform to the pattern /.*\\S.*/.";
        }

        if (!is_null($this->container['reason_code']) && (mb_strlen($this->container['reason_code']) > 20)) {
            $invalidProperties[] = "invalid value for 'reason_code', the character length must be smaller than or equal to 20.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets self
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $self self
     *
     * @return self
     */
    public function setSelf($self)
    {
        if (is_null($self)) {
            throw new \InvalidArgumentException('non-nullable self cannot be null');
        }
        $this->container['self'] = $self;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Type of retail transaction.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets retail_transaction_id
     *
     * @return string
     */
    public function getRetailTransactionId()
    {
        return $this->container['retail_transaction_id'];
    }

    /**
     * Sets retail_transaction_id
     *
     * @param string $retail_transaction_id Universally unique transaction number from the source POS system for when a unique id is needed across multiple stores.
     *
     * @return self
     */
    public function setRetailTransactionId($retail_transaction_id)
    {
        if (is_null($retail_transaction_id)) {
            throw new \InvalidArgumentException('non-nullable retail_transaction_id cannot be null');
        }
        if ((mb_strlen($retail_transaction_id) > 50)) {
            throw new \InvalidArgumentException('invalid length for $retail_transaction_id when calling CustomerOrderRetailActivityDTO., must be smaller than or equal to 50.');
        }
        if ((!preg_match("/.*\\S.*/", ObjectSerializer::toString($retail_transaction_id)))) {
            throw new \InvalidArgumentException("invalid value for \$retail_transaction_id when calling CustomerOrderRetailActivityDTO., must conform to the pattern /.*\\S.*/.");
        }

        $this->container['retail_transaction_id'] = $retail_transaction_id;

        return $this;
    }

    /**
     * Gets sequence_number
     *
     * @return string|null
     */
    public function getSequenceNumber()
    {
        return $this->container['sequence_number'];
    }

    /**
     * Sets sequence_number
     *
     * @param string|null $sequence_number Sequence number of the transaction. In many cases, a retail store restarts the sequence number for transactions to zero (0) each day.
     *
     * @return self
     */
    public function setSequenceNumber($sequence_number)
    {
        if (is_null($sequence_number)) {
            array_push($this->openAPINullablesSetToNull, 'sequence_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sequence_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sequence_number) && (mb_strlen($sequence_number) > 10)) {
            throw new \InvalidArgumentException('invalid length for $sequence_number when calling CustomerOrderRetailActivityDTO., must be smaller than or equal to 10.');
        }

        $this->container['sequence_number'] = $sequence_number;

        return $this;
    }

    /**
     * Gets batch
     *
     * @return string|null
     */
    public function getBatch()
    {
        return $this->container['batch'];
    }

    /**
     * Sets batch
     *
     * @param string|null $batch Batch ID when the retail activity is part of a group of transactions.
     *
     * @return self
     */
    public function setBatch($batch)
    {
        if (is_null($batch)) {
            array_push($this->openAPINullablesSetToNull, 'batch');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('batch', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($batch) && (mb_strlen($batch) > 50)) {
            throw new \InvalidArgumentException('invalid length for $batch when calling CustomerOrderRetailActivityDTO., must be smaller than or equal to 50.');
        }

        $this->container['batch'] = $batch;

        return $this;
    }

    /**
     * Gets batch_sequence_number
     *
     * @return int|null
     */
    public function getBatchSequenceNumber()
    {
        return $this->container['batch_sequence_number'];
    }

    /**
     * Sets batch_sequence_number
     *
     * @param int|null $batch_sequence_number Sequence number for the retail transaction when the transaction is part of a batch of transactions.
     *
     * @return self
     */
    public function setBatchSequenceNumber($batch_sequence_number)
    {
        if (is_null($batch_sequence_number)) {
            throw new \InvalidArgumentException('non-nullable batch_sequence_number cannot be null');
        }

        if (($batch_sequence_number > 0)) {
            throw new \InvalidArgumentException('invalid value for $batch_sequence_number when calling CustomerOrderRetailActivityDTO., must be smaller than or equal to 0.');
        }
        if (($batch_sequence_number < 0)) {
            throw new \InvalidArgumentException('invalid value for $batch_sequence_number when calling CustomerOrderRetailActivityDTO., must be bigger than or equal to 0.');
        }

        $this->container['batch_sequence_number'] = $batch_sequence_number;

        return $this;
    }

    /**
     * Gets reference_number
     *
     * @return string|null
     */
    public function getReferenceNumber()
    {
        return $this->container['reference_number'];
    }

    /**
     * Sets reference_number
     *
     * @param string|null $reference_number Customer-facing receipt number for the transaction. In POS systems, this is sometimes called the invoice number or ticket number. The value can include hyphens (-) but must not include a period (.).
     *
     * @return self
     */
    public function setReferenceNumber($reference_number)
    {
        if (is_null($reference_number)) {
            array_push($this->openAPINullablesSetToNull, 'reference_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reference_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($reference_number) && (mb_strlen($reference_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $reference_number when calling CustomerOrderRetailActivityDTO., must be smaller than or equal to 50.');
        }

        $this->container['reference_number'] = $reference_number;

        return $this;
    }

    /**
     * Gets facility
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getFacility()
    {
        return $this->container['facility'];
    }

    /**
     * Sets facility
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $facility facility
     *
     * @return self
     */
    public function setFacility($facility)
    {
        if (is_null($facility)) {
            array_push($this->openAPINullablesSetToNull, 'facility');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('facility', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['facility'] = $facility;

        return $this;
    }

    /**
     * Gets register
     *
     * @return string|null
     */
    public function getRegister()
    {
        return $this->container['register'];
    }

    /**
     * Sets register
     *
     * @param string|null $register Store register at which the transaction occurred.
     *
     * @return self
     */
    public function setRegister($register)
    {
        if (is_null($register)) {
            array_push($this->openAPINullablesSetToNull, 'register');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('register', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($register) && (mb_strlen($register) > 20)) {
            throw new \InvalidArgumentException('invalid length for $register when calling CustomerOrderRetailActivityDTO., must be smaller than or equal to 20.');
        }

        $this->container['register'] = $register;

        return $this;
    }

    /**
     * Gets till
     *
     * @return string|null
     */
    public function getTill()
    {
        return $this->container['till'];
    }

    /**
     * Sets till
     *
     * @param string|null $till Cash till in the store register at which the transaction occurred.
     *
     * @return self
     */
    public function setTill($till)
    {
        if (is_null($till)) {
            array_push($this->openAPINullablesSetToNull, 'till');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('till', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($till) && (mb_strlen($till) > 15)) {
            throw new \InvalidArgumentException('invalid length for $till when calling CustomerOrderRetailActivityDTO., must be smaller than or equal to 15.');
        }

        $this->container['till'] = $till;

        return $this;
    }

    /**
     * Gets associate
     *
     * @return string|null
     */
    public function getAssociate()
    {
        return $this->container['associate'];
    }

    /**
     * Sets associate
     *
     * @param string|null $associate Store associate or operator who performed the transaction at the workstation in the retail store.
     *
     * @return self
     */
    public function setAssociate($associate)
    {
        if (is_null($associate)) {
            array_push($this->openAPINullablesSetToNull, 'associate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('associate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($associate) && (mb_strlen($associate) > 50)) {
            throw new \InvalidArgumentException('invalid length for $associate when calling CustomerOrderRetailActivityDTO., must be smaller than or equal to 50.');
        }

        $this->container['associate'] = $associate;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            array_push($this->openAPINullablesSetToNull, 'user');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets business_day_date
     *
     * @return \DateTime|null
     */
    public function getBusinessDayDate()
    {
        return $this->container['business_day_date'];
    }

    /**
     * Sets business_day_date
     *
     * @param \DateTime|null $business_day_date Business day on which the transaction occurred.
     *
     * @return self
     */
    public function setBusinessDayDate($business_day_date)
    {
        if (is_null($business_day_date)) {
            array_push($this->openAPINullablesSetToNull, 'business_day_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_day_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['business_day_date'] = $business_day_date;

        return $this;
    }

    /**
     * Gets transaction_start_date
     *
     * @return \DateTime|null
     */
    public function getTransactionStartDate()
    {
        return $this->container['transaction_start_date'];
    }

    /**
     * Sets transaction_start_date
     *
     * @param \DateTime|null $transaction_start_date Start date and time for the transaction.
     *
     * @return self
     */
    public function setTransactionStartDate($transaction_start_date)
    {
        if (is_null($transaction_start_date)) {
            array_push($this->openAPINullablesSetToNull, 'transaction_start_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transaction_start_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['transaction_start_date'] = $transaction_start_date;

        return $this;
    }

    /**
     * Gets transaction_end_date
     *
     * @return \DateTime|null
     */
    public function getTransactionEndDate()
    {
        return $this->container['transaction_end_date'];
    }

    /**
     * Sets transaction_end_date
     *
     * @param \DateTime|null $transaction_end_date End date and time for the transaction.
     *
     * @return self
     */
    public function setTransactionEndDate($transaction_end_date)
    {
        if (is_null($transaction_end_date)) {
            array_push($this->openAPINullablesSetToNull, 'transaction_end_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transaction_end_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['transaction_end_date'] = $transaction_end_date;

        return $this;
    }

    /**
     * Gets transaction_source
     *
     * @return string
     */
    public function getTransactionSource()
    {
        return $this->container['transaction_source'];
    }

    /**
     * Sets transaction_source
     *
     * @param string $transaction_source Name of the point-of-sale (POS) system from which the retail transaction was sent.
     *
     * @return self
     */
    public function setTransactionSource($transaction_source)
    {
        if (is_null($transaction_source)) {
            throw new \InvalidArgumentException('non-nullable transaction_source cannot be null');
        }
        if ((mb_strlen($transaction_source) > 50)) {
            throw new \InvalidArgumentException('invalid length for $transaction_source when calling CustomerOrderRetailActivityDTO., must be smaller than or equal to 50.');
        }
        if ((!preg_match("/.*\\S.*/", ObjectSerializer::toString($transaction_source)))) {
            throw new \InvalidArgumentException("invalid value for \$transaction_source when calling CustomerOrderRetailActivityDTO., must conform to the pattern /.*\\S.*/.");
        }

        $this->container['transaction_source'] = $transaction_source;

        return $this;
    }

    /**
     * Gets test_transaction
     *
     * @return bool|null
     */
    public function getTestTransaction()
    {
        return $this->container['test_transaction'];
    }

    /**
     * Sets test_transaction
     *
     * @param bool|null $test_transaction Whether the transaction is a test transaction used for training or testing.
     *
     * @return self
     */
    public function setTestTransaction($test_transaction)
    {
        if (is_null($test_transaction)) {
            throw new \InvalidArgumentException('non-nullable test_transaction cannot be null');
        }
        $this->container['test_transaction'] = $test_transaction;

        return $this;
    }

    /**
     * Gets voided
     *
     * @return bool|null
     */
    public function getVoided()
    {
        return $this->container['voided'];
    }

    /**
     * Sets voided
     *
     * @param bool|null $voided Whether the transaction was voided.
     *
     * @return self
     */
    public function setVoided($voided)
    {
        if (is_null($voided)) {
            throw new \InvalidArgumentException('non-nullable voided cannot be null');
        }
        $this->container['voided'] = $voided;

        return $this;
    }

    /**
     * Gets reason_code
     *
     * @return string|null
     */
    public function getReasonCode()
    {
        return $this->container['reason_code'];
    }

    /**
     * Sets reason_code
     *
     * @param string|null $reason_code Used for return and void transactions to explain why the transaction occurred.
     *
     * @return self
     */
    public function setReasonCode($reason_code)
    {
        if (is_null($reason_code)) {
            array_push($this->openAPINullablesSetToNull, 'reason_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reason_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($reason_code) && (mb_strlen($reason_code) > 20)) {
            throw new \InvalidArgumentException('invalid length for $reason_code when calling CustomerOrderRetailActivityDTO., must be smaller than or equal to 20.');
        }

        $this->container['reason_code'] = $reason_code;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime|null $created_date Date and time that the retail activity was created.
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets updated_date
     *
     * @return \DateTime|null
     */
    public function getUpdatedDate()
    {
        return $this->container['updated_date'];
    }

    /**
     * Sets updated_date
     *
     * @param \DateTime|null $updated_date Date and time that the retail activity was last updated.
     *
     * @return self
     */
    public function setUpdatedDate($updated_date)
    {
        if (is_null($updated_date)) {
            throw new \InvalidArgumentException('non-nullable updated_date cannot be null');
        }
        $this->container['updated_date'] = $updated_date;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            throw new \InvalidArgumentException('non-nullable created_by cannot be null');
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $updated_by updated_by
     *
     * @return self
     */
    public function setUpdatedBy($updated_by)
    {
        if (is_null($updated_by)) {
            throw new \InvalidArgumentException('non-nullable updated_by cannot be null');
        }
        $this->container['updated_by'] = $updated_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


