<?php
/**
 * OutboundTransferOrderLineDTOAllOf
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deposco API
 *
 * Welcome to the Deposco API Reference! The Deposco API enables you to integrate your system with Deposco.  * Integrate a product information system (PIM) by creating and retrieving data for items, packs, UPCs, and kits. * Set up warehouse data by creating facilities, zones, locations, and storage details. * Create inbound orders that can be received and outbound orders that can be fulfilled with Deposco warehouse management processes.  This reference provides details on available operations, endpoints, parameters, schemas, and responses.  Example requests and responses are also available for you to use as a reference. You can copy the examples to use as a starting point for your own requests.  Review the guides to learn how the API is used in common business scenarios such as setting up the warehouse and integrating a Product Information Management (PIM) system.  When you're ready to get started, register for a developer account and then log in to create your application in the developer portal.
 *
 * The version of the OpenAPI document: 2.0.2519
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\Deposco\Model;

use \ArrayAccess;
use \BeLenka\Deposco\ObjectSerializer;

/**
 * OutboundTransferOrderLineDTOAllOf Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OutboundTransferOrderLineDTOAllOf implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OutboundTransferOrderLineDTO_allOf';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'order_line_status' => 'string',
        'ship_from_facility' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'co_line' => '\BeLenka\Deposco\Model\EntityRef',
        'allocated_quantity' => 'int',
        'unallocated_quantity' => 'int',
        'picked_pack_quantity' => 'int',
        'shortage_pack_quantity' => 'int',
        'shipped_pack_quantity' => 'int',
        'preallocated' => 'bool',
        'is_back_ordered' => 'string',
        'directed_to_zone' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'allocate_from_zone' => 'bool',
        'carrier_special_services' => '\BeLenka\Deposco\Model\CarrierSpecialServiceDTO[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'order_line_status' => null,
        'ship_from_facility' => null,
        'co_line' => null,
        'allocated_quantity' => 'double',
        'unallocated_quantity' => 'double',
        'picked_pack_quantity' => 'double',
        'shortage_pack_quantity' => 'double',
        'shipped_pack_quantity' => 'double',
        'preallocated' => null,
        'is_back_ordered' => null,
        'directed_to_zone' => null,
        'allocate_from_zone' => null,
        'carrier_special_services' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'order_line_status' => true,
		'ship_from_facility' => true,
		'co_line' => false,
		'allocated_quantity' => false,
		'unallocated_quantity' => false,
		'picked_pack_quantity' => false,
		'shortage_pack_quantity' => false,
		'shipped_pack_quantity' => false,
		'preallocated' => false,
		'is_back_ordered' => true,
		'directed_to_zone' => true,
		'allocate_from_zone' => false,
		'carrier_special_services' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_line_status' => 'orderLineStatus',
        'ship_from_facility' => 'shipFromFacility',
        'co_line' => 'coLine',
        'allocated_quantity' => 'allocatedQuantity',
        'unallocated_quantity' => 'unallocatedQuantity',
        'picked_pack_quantity' => 'pickedPackQuantity',
        'shortage_pack_quantity' => 'shortagePackQuantity',
        'shipped_pack_quantity' => 'shippedPackQuantity',
        'preallocated' => 'preallocated',
        'is_back_ordered' => 'isBackOrdered',
        'directed_to_zone' => 'directedToZone',
        'allocate_from_zone' => 'allocateFromZone',
        'carrier_special_services' => 'carrierSpecialServices'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_line_status' => 'setOrderLineStatus',
        'ship_from_facility' => 'setShipFromFacility',
        'co_line' => 'setCoLine',
        'allocated_quantity' => 'setAllocatedQuantity',
        'unallocated_quantity' => 'setUnallocatedQuantity',
        'picked_pack_quantity' => 'setPickedPackQuantity',
        'shortage_pack_quantity' => 'setShortagePackQuantity',
        'shipped_pack_quantity' => 'setShippedPackQuantity',
        'preallocated' => 'setPreallocated',
        'is_back_ordered' => 'setIsBackOrdered',
        'directed_to_zone' => 'setDirectedToZone',
        'allocate_from_zone' => 'setAllocateFromZone',
        'carrier_special_services' => 'setCarrierSpecialServices'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_line_status' => 'getOrderLineStatus',
        'ship_from_facility' => 'getShipFromFacility',
        'co_line' => 'getCoLine',
        'allocated_quantity' => 'getAllocatedQuantity',
        'unallocated_quantity' => 'getUnallocatedQuantity',
        'picked_pack_quantity' => 'getPickedPackQuantity',
        'shortage_pack_quantity' => 'getShortagePackQuantity',
        'shipped_pack_quantity' => 'getShippedPackQuantity',
        'preallocated' => 'getPreallocated',
        'is_back_ordered' => 'getIsBackOrdered',
        'directed_to_zone' => 'getDirectedToZone',
        'allocate_from_zone' => 'getAllocateFromZone',
        'carrier_special_services' => 'getCarrierSpecialServices'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ORDER_LINE_STATUS__NEW = 'New';
    public const ORDER_LINE_STATUS_CANCELED = 'Canceled';
    public const ORDER_LINE_STATUS_COMPLETE = 'Complete';
    public const ORDER_LINE_STATUS_DRAFT = 'Draft';
    public const ORDER_LINE_STATUS_HOLD = 'Hold';
    public const ORDER_LINE_STATUS_PICKING = 'Picking';
    public const ORDER_LINE_STATUS_WAVE_BUILT = 'Wave Built';
    public const ORDER_LINE_STATUS_RELEASED = 'Released';
    public const IS_BACK_ORDERED_BACK_ORDERED = 'Back Ordered';
    public const IS_BACK_ORDERED_NOT_BACK_ORDERED = 'Not Back Ordered';
    public const IS_BACK_ORDERED_EXCEPTION_PICK = 'Exception Pick';
    public const IS_BACK_ORDERED_AWAITING_STOCK_MOVEMENT = 'Awaiting Stock Movement';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrderLineStatusAllowableValues()
    {
        return [
            self::ORDER_LINE_STATUS__NEW,
            self::ORDER_LINE_STATUS_CANCELED,
            self::ORDER_LINE_STATUS_COMPLETE,
            self::ORDER_LINE_STATUS_DRAFT,
            self::ORDER_LINE_STATUS_HOLD,
            self::ORDER_LINE_STATUS_PICKING,
            self::ORDER_LINE_STATUS_WAVE_BUILT,
            self::ORDER_LINE_STATUS_RELEASED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIsBackOrderedAllowableValues()
    {
        return [
            self::IS_BACK_ORDERED_BACK_ORDERED,
            self::IS_BACK_ORDERED_NOT_BACK_ORDERED,
            self::IS_BACK_ORDERED_EXCEPTION_PICK,
            self::IS_BACK_ORDERED_AWAITING_STOCK_MOVEMENT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('order_line_status', $data ?? [], null);
        $this->setIfExists('ship_from_facility', $data ?? [], null);
        $this->setIfExists('co_line', $data ?? [], null);
        $this->setIfExists('allocated_quantity', $data ?? [], null);
        $this->setIfExists('unallocated_quantity', $data ?? [], null);
        $this->setIfExists('picked_pack_quantity', $data ?? [], null);
        $this->setIfExists('shortage_pack_quantity', $data ?? [], null);
        $this->setIfExists('shipped_pack_quantity', $data ?? [], null);
        $this->setIfExists('preallocated', $data ?? [], null);
        $this->setIfExists('is_back_ordered', $data ?? [], null);
        $this->setIfExists('directed_to_zone', $data ?? [], null);
        $this->setIfExists('allocate_from_zone', $data ?? [], null);
        $this->setIfExists('carrier_special_services', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOrderLineStatusAllowableValues();
        if (!is_null($this->container['order_line_status']) && !in_array($this->container['order_line_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'order_line_status', must be one of '%s'",
                $this->container['order_line_status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['allocated_quantity']) && ($this->container['allocated_quantity'] > 0)) {
            $invalidProperties[] = "invalid value for 'allocated_quantity', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['allocated_quantity']) && ($this->container['allocated_quantity'] < 0)) {
            $invalidProperties[] = "invalid value for 'allocated_quantity', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['unallocated_quantity']) && ($this->container['unallocated_quantity'] > 0)) {
            $invalidProperties[] = "invalid value for 'unallocated_quantity', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['unallocated_quantity']) && ($this->container['unallocated_quantity'] < 0)) {
            $invalidProperties[] = "invalid value for 'unallocated_quantity', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['picked_pack_quantity']) && ($this->container['picked_pack_quantity'] > 0)) {
            $invalidProperties[] = "invalid value for 'picked_pack_quantity', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['picked_pack_quantity']) && ($this->container['picked_pack_quantity'] < 0)) {
            $invalidProperties[] = "invalid value for 'picked_pack_quantity', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['shortage_pack_quantity']) && ($this->container['shortage_pack_quantity'] > 0)) {
            $invalidProperties[] = "invalid value for 'shortage_pack_quantity', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['shortage_pack_quantity']) && ($this->container['shortage_pack_quantity'] < 0)) {
            $invalidProperties[] = "invalid value for 'shortage_pack_quantity', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['shipped_pack_quantity']) && ($this->container['shipped_pack_quantity'] > 0)) {
            $invalidProperties[] = "invalid value for 'shipped_pack_quantity', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['shipped_pack_quantity']) && ($this->container['shipped_pack_quantity'] < 0)) {
            $invalidProperties[] = "invalid value for 'shipped_pack_quantity', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getIsBackOrderedAllowableValues();
        if (!is_null($this->container['is_back_ordered']) && !in_array($this->container['is_back_ordered'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'is_back_ordered', must be one of '%s'",
                $this->container['is_back_ordered'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_line_status
     *
     * @return string|null
     */
    public function getOrderLineStatus()
    {
        return $this->container['order_line_status'];
    }

    /**
     * Sets order_line_status
     *
     * @param string|null $order_line_status Status of the order line. New order lines should be created with a status of New.
     *
     * @return self
     */
    public function setOrderLineStatus($order_line_status)
    {
        if (is_null($order_line_status)) {
            array_push($this->openAPINullablesSetToNull, 'order_line_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_line_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getOrderLineStatusAllowableValues();
        if (!is_null($order_line_status) && !in_array($order_line_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'order_line_status', must be one of '%s'",
                    $order_line_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['order_line_status'] = $order_line_status;

        return $this;
    }

    /**
     * Gets ship_from_facility
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getShipFromFacility()
    {
        return $this->container['ship_from_facility'];
    }

    /**
     * Sets ship_from_facility
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $ship_from_facility ship_from_facility
     *
     * @return self
     */
    public function setShipFromFacility($ship_from_facility)
    {
        if (is_null($ship_from_facility)) {
            array_push($this->openAPINullablesSetToNull, 'ship_from_facility');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ship_from_facility', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ship_from_facility'] = $ship_from_facility;

        return $this;
    }

    /**
     * Gets co_line
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getCoLine()
    {
        return $this->container['co_line'];
    }

    /**
     * Sets co_line
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $co_line co_line
     *
     * @return self
     */
    public function setCoLine($co_line)
    {
        if (is_null($co_line)) {
            throw new \InvalidArgumentException('non-nullable co_line cannot be null');
        }
        $this->container['co_line'] = $co_line;

        return $this;
    }

    /**
     * Gets allocated_quantity
     *
     * @return int|null
     */
    public function getAllocatedQuantity()
    {
        return $this->container['allocated_quantity'];
    }

    /**
     * Sets allocated_quantity
     *
     * @param int|null $allocated_quantity Inventory quantity of the item/pack that is being held for the order line. Commonly populated with the same value as the order pack quantity when sending orders to Deposco.
     *
     * @return self
     */
    public function setAllocatedQuantity($allocated_quantity)
    {
        if (is_null($allocated_quantity)) {
            throw new \InvalidArgumentException('non-nullable allocated_quantity cannot be null');
        }

        if (($allocated_quantity > 0)) {
            throw new \InvalidArgumentException('invalid value for $allocated_quantity when calling OutboundTransferOrderLineDTOAllOf., must be smaller than or equal to 0.');
        }
        if (($allocated_quantity < 0)) {
            throw new \InvalidArgumentException('invalid value for $allocated_quantity when calling OutboundTransferOrderLineDTOAllOf., must be bigger than or equal to 0.');
        }

        $this->container['allocated_quantity'] = $allocated_quantity;

        return $this;
    }

    /**
     * Gets unallocated_quantity
     *
     * @return int|null
     */
    public function getUnallocatedQuantity()
    {
        return $this->container['unallocated_quantity'];
    }

    /**
     * Sets unallocated_quantity
     *
     * @param int|null $unallocated_quantity Quantity of the item/pack for the order line that does not have any allocated inventory.
     *
     * @return self
     */
    public function setUnallocatedQuantity($unallocated_quantity)
    {
        if (is_null($unallocated_quantity)) {
            throw new \InvalidArgumentException('non-nullable unallocated_quantity cannot be null');
        }

        if (($unallocated_quantity > 0)) {
            throw new \InvalidArgumentException('invalid value for $unallocated_quantity when calling OutboundTransferOrderLineDTOAllOf., must be smaller than or equal to 0.');
        }
        if (($unallocated_quantity < 0)) {
            throw new \InvalidArgumentException('invalid value for $unallocated_quantity when calling OutboundTransferOrderLineDTOAllOf., must be bigger than or equal to 0.');
        }

        $this->container['unallocated_quantity'] = $unallocated_quantity;

        return $this;
    }

    /**
     * Gets picked_pack_quantity
     *
     * @return int|null
     */
    public function getPickedPackQuantity()
    {
        return $this->container['picked_pack_quantity'];
    }

    /**
     * Sets picked_pack_quantity
     *
     * @param int|null $picked_pack_quantity Quantity of the item/pack that has been picked to fulfill the order line.
     *
     * @return self
     */
    public function setPickedPackQuantity($picked_pack_quantity)
    {
        if (is_null($picked_pack_quantity)) {
            throw new \InvalidArgumentException('non-nullable picked_pack_quantity cannot be null');
        }

        if (($picked_pack_quantity > 0)) {
            throw new \InvalidArgumentException('invalid value for $picked_pack_quantity when calling OutboundTransferOrderLineDTOAllOf., must be smaller than or equal to 0.');
        }
        if (($picked_pack_quantity < 0)) {
            throw new \InvalidArgumentException('invalid value for $picked_pack_quantity when calling OutboundTransferOrderLineDTOAllOf., must be bigger than or equal to 0.');
        }

        $this->container['picked_pack_quantity'] = $picked_pack_quantity;

        return $this;
    }

    /**
     * Gets shortage_pack_quantity
     *
     * @return int|null
     */
    public function getShortagePackQuantity()
    {
        return $this->container['shortage_pack_quantity'];
    }

    /**
     * Sets shortage_pack_quantity
     *
     * @param int|null $shortage_pack_quantity Quantity of the item/pack that is not being shipped for the order line.
     *
     * @return self
     */
    public function setShortagePackQuantity($shortage_pack_quantity)
    {
        if (is_null($shortage_pack_quantity)) {
            throw new \InvalidArgumentException('non-nullable shortage_pack_quantity cannot be null');
        }

        if (($shortage_pack_quantity > 0)) {
            throw new \InvalidArgumentException('invalid value for $shortage_pack_quantity when calling OutboundTransferOrderLineDTOAllOf., must be smaller than or equal to 0.');
        }
        if (($shortage_pack_quantity < 0)) {
            throw new \InvalidArgumentException('invalid value for $shortage_pack_quantity when calling OutboundTransferOrderLineDTOAllOf., must be bigger than or equal to 0.');
        }

        $this->container['shortage_pack_quantity'] = $shortage_pack_quantity;

        return $this;
    }

    /**
     * Gets shipped_pack_quantity
     *
     * @return int|null
     */
    public function getShippedPackQuantity()
    {
        return $this->container['shipped_pack_quantity'];
    }

    /**
     * Sets shipped_pack_quantity
     *
     * @param int|null $shipped_pack_quantity Quantity of the item/pack that has shipped for the order line. Must be a positive value.
     *
     * @return self
     */
    public function setShippedPackQuantity($shipped_pack_quantity)
    {
        if (is_null($shipped_pack_quantity)) {
            throw new \InvalidArgumentException('non-nullable shipped_pack_quantity cannot be null');
        }

        if (($shipped_pack_quantity > 0)) {
            throw new \InvalidArgumentException('invalid value for $shipped_pack_quantity when calling OutboundTransferOrderLineDTOAllOf., must be smaller than or equal to 0.');
        }
        if (($shipped_pack_quantity < 0)) {
            throw new \InvalidArgumentException('invalid value for $shipped_pack_quantity when calling OutboundTransferOrderLineDTOAllOf., must be bigger than or equal to 0.');
        }

        $this->container['shipped_pack_quantity'] = $shipped_pack_quantity;

        return $this;
    }

    /**
     * Gets preallocated
     *
     * @return bool|null
     */
    public function getPreallocated()
    {
        return $this->container['preallocated'];
    }

    /**
     * Sets preallocated
     *
     * @param bool|null $preallocated Whether stock for the order line line was allocated during a separate process before the order was included on a pick wave.
     *
     * @return self
     */
    public function setPreallocated($preallocated)
    {
        if (is_null($preallocated)) {
            throw new \InvalidArgumentException('non-nullable preallocated cannot be null');
        }
        $this->container['preallocated'] = $preallocated;

        return $this;
    }

    /**
     * Gets is_back_ordered
     *
     * @return string|null
     */
    public function getIsBackOrdered()
    {
        return $this->container['is_back_ordered'];
    }

    /**
     * Sets is_back_ordered
     *
     * @param string|null $is_back_ordered Reason code that provides additional details when an order line is backordered.
     *
     * @return self
     */
    public function setIsBackOrdered($is_back_ordered)
    {
        if (is_null($is_back_ordered)) {
            array_push($this->openAPINullablesSetToNull, 'is_back_ordered');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_back_ordered', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getIsBackOrderedAllowableValues();
        if (!is_null($is_back_ordered) && !in_array($is_back_ordered, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'is_back_ordered', must be one of '%s'",
                    $is_back_ordered,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['is_back_ordered'] = $is_back_ordered;

        return $this;
    }

    /**
     * Gets directed_to_zone
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getDirectedToZone()
    {
        return $this->container['directed_to_zone'];
    }

    /**
     * Sets directed_to_zone
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $directed_to_zone directed_to_zone
     *
     * @return self
     */
    public function setDirectedToZone($directed_to_zone)
    {
        if (is_null($directed_to_zone)) {
            array_push($this->openAPINullablesSetToNull, 'directed_to_zone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('directed_to_zone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['directed_to_zone'] = $directed_to_zone;

        return $this;
    }

    /**
     * Gets allocate_from_zone
     *
     * @return bool|null
     */
    public function getAllocateFromZone()
    {
        return $this->container['allocate_from_zone'];
    }

    /**
     * Sets allocate_from_zone
     *
     * @param bool|null $allocate_from_zone Whether to allocate stock to fulfill the order from the zone in the `directedToZone` field.
     *
     * @return self
     */
    public function setAllocateFromZone($allocate_from_zone)
    {
        if (is_null($allocate_from_zone)) {
            throw new \InvalidArgumentException('non-nullable allocate_from_zone cannot be null');
        }
        $this->container['allocate_from_zone'] = $allocate_from_zone;

        return $this;
    }

    /**
     * Gets carrier_special_services
     *
     * @return \BeLenka\Deposco\Model\CarrierSpecialServiceDTO[]|null
     */
    public function getCarrierSpecialServices()
    {
        return $this->container['carrier_special_services'];
    }

    /**
     * Sets carrier_special_services
     *
     * @param \BeLenka\Deposco\Model\CarrierSpecialServiceDTO[]|null $carrier_special_services Array of carrier special service records for the order line. Carrier special service records contain information related to special services for shipping carriers such as dry ice and dangerous goods.
     *
     * @return self
     */
    public function setCarrierSpecialServices($carrier_special_services)
    {
        if (is_null($carrier_special_services)) {
            throw new \InvalidArgumentException('non-nullable carrier_special_services cannot be null');
        }
        $this->container['carrier_special_services'] = $carrier_special_services;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


