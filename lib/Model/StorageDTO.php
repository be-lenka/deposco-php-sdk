<?php
/**
 * StorageDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deposco API
 *
 * Welcome to the Deposco API Reference! The Deposco API enables you to integrate your system with Deposco.  * Integrate a product information system (PIM) by creating and retrieving data for items, packs, UPCs, and kits. * Set up warehouse data by creating facilities, zones, locations, and storage details. * Create inbound orders that can be received and outbound orders that can be fulfilled with Deposco warehouse management processes.  This reference provides details on available operations, endpoints, parameters, schemas, and responses.  Example requests and responses are also available for you to use as a reference. You can copy the examples to use as a starting point for your own requests.  Review the guides to learn how the API is used in common business scenarios such as setting up the warehouse and integrating a Product Information Management (PIM) system.  When you're ready to get started, register for a developer account and then log in to create your application in the developer portal.
 *
 * The version of the OpenAPI document: 2.0.2519
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\Deposco\Model;

use \ArrayAccess;
use \BeLenka\Deposco\ObjectSerializer;

/**
 * StorageDTO Class Doc Comment
 *
 * @category Class
 * @description A storage detail record assigns an item to the location and defines the minimum and maximum inventory levels for the item in the location.
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class StorageDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'StorageDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'self' => '\BeLenka\Deposco\Model\EntityRef',
        'business_unit' => '\BeLenka\Deposco\Model\EntityRef',
        'location' => '\BeLenka\Deposco\Model\EntityRef',
        'pack' => '\BeLenka\Deposco\Model\EntityRef',
        'type' => 'string',
        'minimum' => 'int',
        'maximum' => 'int',
        'minimum_pick' => 'int',
        'maximum_pick' => 'int',
        'opportunistic_count_threshold' => 'int',
        'created_by' => '\BeLenka\Deposco\Model\EntityRef',
        'updated_by' => '\BeLenka\Deposco\Model\EntityRef',
        'created_date' => '\DateTime',
        'updated_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'self' => null,
        'business_unit' => null,
        'location' => null,
        'pack' => null,
        'type' => null,
        'minimum' => null,
        'maximum' => null,
        'minimum_pick' => 'double',
        'maximum_pick' => 'double',
        'opportunistic_count_threshold' => null,
        'created_by' => null,
        'updated_by' => null,
        'created_date' => 'date-time',
        'updated_date' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'self' => false,
        'business_unit' => false,
        'location' => false,
        'pack' => false,
        'type' => false,
        'minimum' => false,
        'maximum' => false,
        'minimum_pick' => false,
        'maximum_pick' => false,
        'opportunistic_count_threshold' => false,
        'created_by' => false,
        'updated_by' => false,
        'created_date' => false,
        'updated_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'self' => 'self',
        'business_unit' => 'businessUnit',
        'location' => 'location',
        'pack' => 'pack',
        'type' => 'type',
        'minimum' => 'minimum',
        'maximum' => 'maximum',
        'minimum_pick' => 'minimumPick',
        'maximum_pick' => 'maximumPick',
        'opportunistic_count_threshold' => 'opportunisticCountThreshold',
        'created_by' => 'createdBy',
        'updated_by' => 'updatedBy',
        'created_date' => 'createdDate',
        'updated_date' => 'updatedDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'self' => 'setSelf',
        'business_unit' => 'setBusinessUnit',
        'location' => 'setLocation',
        'pack' => 'setPack',
        'type' => 'setType',
        'minimum' => 'setMinimum',
        'maximum' => 'setMaximum',
        'minimum_pick' => 'setMinimumPick',
        'maximum_pick' => 'setMaximumPick',
        'opportunistic_count_threshold' => 'setOpportunisticCountThreshold',
        'created_by' => 'setCreatedBy',
        'updated_by' => 'setUpdatedBy',
        'created_date' => 'setCreatedDate',
        'updated_date' => 'setUpdatedDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'self' => 'getSelf',
        'business_unit' => 'getBusinessUnit',
        'location' => 'getLocation',
        'pack' => 'getPack',
        'type' => 'getType',
        'minimum' => 'getMinimum',
        'maximum' => 'getMaximum',
        'minimum_pick' => 'getMinimumPick',
        'maximum_pick' => 'getMaximumPick',
        'opportunistic_count_threshold' => 'getOpportunisticCountThreshold',
        'created_by' => 'getCreatedBy',
        'updated_by' => 'getUpdatedBy',
        'created_date' => 'getCreatedDate',
        'updated_date' => 'getUpdatedDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_DAMAGED = 'Damaged';
    public const TYPE_FULL_CASE_PICKING = 'Full Case Picking';
    public const TYPE_RECEIVING = 'Receiving';
    public const TYPE_RESERVE_STORAGE = 'Reserve Storage';
    public const TYPE_SHIPPING = 'Shipping';
    public const TYPE_SPLIT_CASE_PICKING = 'Split Case Picking';
    public const TYPE_STAGING = 'Staging';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_DAMAGED,
            self::TYPE_FULL_CASE_PICKING,
            self::TYPE_RECEIVING,
            self::TYPE_RESERVE_STORAGE,
            self::TYPE_SHIPPING,
            self::TYPE_SPLIT_CASE_PICKING,
            self::TYPE_STAGING,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('self', $data ?? [], null);
        $this->setIfExists('business_unit', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('pack', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('minimum', $data ?? [], null);
        $this->setIfExists('maximum', $data ?? [], null);
        $this->setIfExists('minimum_pick', $data ?? [], null);
        $this->setIfExists('maximum_pick', $data ?? [], null);
        $this->setIfExists('opportunistic_count_threshold', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('updated_by', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('updated_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['business_unit'] === null) {
            $invalidProperties[] = "'business_unit' can't be null";
        }
        if ($this->container['location'] === null) {
            $invalidProperties[] = "'location' can't be null";
        }
        if ($this->container['pack'] === null) {
            $invalidProperties[] = "'pack' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['minimum_pick']) && ($this->container['minimum_pick'] > 10000000)) {
            $invalidProperties[] = "invalid value for 'minimum_pick', must be smaller than or equal to 10000000.";
        }

        if (!is_null($this->container['minimum_pick']) && ($this->container['minimum_pick'] < 0)) {
            $invalidProperties[] = "invalid value for 'minimum_pick', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['maximum_pick']) && ($this->container['maximum_pick'] > 10000000)) {
            $invalidProperties[] = "invalid value for 'maximum_pick', must be smaller than or equal to 10000000.";
        }

        if (!is_null($this->container['maximum_pick']) && ($this->container['maximum_pick'] < 0)) {
            $invalidProperties[] = "invalid value for 'maximum_pick', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets self
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $self self
     *
     * @return self
     */
    public function setSelf($self)
    {
        if (is_null($self)) {
            throw new \InvalidArgumentException('non-nullable self cannot be null');
        }
        $this->container['self'] = $self;

        return $this;
    }

    /**
     * Gets business_unit
     *
     * @return \BeLenka\Deposco\Model\EntityRef
     */
    public function getBusinessUnit()
    {
        return $this->container['business_unit'];
    }

    /**
     * Sets business_unit
     *
     * @param \BeLenka\Deposco\Model\EntityRef $business_unit business_unit
     *
     * @return self
     */
    public function setBusinessUnit($business_unit)
    {
        if (is_null($business_unit)) {
            throw new \InvalidArgumentException('non-nullable business_unit cannot be null');
        }
        $this->container['business_unit'] = $business_unit;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \BeLenka\Deposco\Model\EntityRef
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \BeLenka\Deposco\Model\EntityRef $location location
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            throw new \InvalidArgumentException('non-nullable location cannot be null');
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets pack
     *
     * @return \BeLenka\Deposco\Model\EntityRef
     */
    public function getPack()
    {
        return $this->container['pack'];
    }

    /**
     * Sets pack
     *
     * @param \BeLenka\Deposco\Model\EntityRef $pack pack
     *
     * @return self
     */
    public function setPack($pack)
    {
        if (is_null($pack)) {
            throw new \InvalidArgumentException('non-nullable pack cannot be null');
        }
        $this->container['pack'] = $pack;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Type of storage. May optionally be associated with replenishment logic. Available values include:
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets minimum
     *
     * @return int|null
     */
    public function getMinimum()
    {
        return $this->container['minimum'];
    }

    /**
     * Sets minimum
     *
     * @param int|null $minimum Minimum number of stock units that should be stored at the specified location. When the stock in the location falls below the minimum, a warehouse replenishment task can be generated to move inventory from a reserve location so that the quantity of inventory at the picking location equals but does not exceed the specified maximum.
     *
     * @return self
     */
    public function setMinimum($minimum)
    {
        if (is_null($minimum)) {
            throw new \InvalidArgumentException('non-nullable minimum cannot be null');
        }
        $this->container['minimum'] = $minimum;

        return $this;
    }

    /**
     * Gets maximum
     *
     * @return int|null
     */
    public function getMaximum()
    {
        return $this->container['maximum'];
    }

    /**
     * Sets maximum
     *
     * @param int|null $maximum Maximum number of stock units that can be stored at the specified location.
     *
     * @return self
     */
    public function setMaximum($maximum)
    {
        if (is_null($maximum)) {
            throw new \InvalidArgumentException('non-nullable maximum cannot be null');
        }
        $this->container['maximum'] = $maximum;

        return $this;
    }

    /**
     * Gets minimum_pick
     *
     * @return int|null
     */
    public function getMinimumPick()
    {
        return $this->container['minimum_pick'];
    }

    /**
     * Sets minimum_pick
     *
     * @param int|null $minimum_pick Minimum number of stock units that can be picked from the specified location.
     *
     * @return self
     */
    public function setMinimumPick($minimum_pick)
    {
        if (is_null($minimum_pick)) {
            throw new \InvalidArgumentException('non-nullable minimum_pick cannot be null');
        }

        if (($minimum_pick > 0)) {
            throw new \InvalidArgumentException('invalid value for $minimum_pick when calling StorageDTO., must be smaller than or equal to 10000000.');
        }
        if (($minimum_pick < 0)) {
            throw new \InvalidArgumentException('invalid value for $minimum_pick when calling StorageDTO., must be bigger than or equal to 0.');
        }

        $this->container['minimum_pick'] = $minimum_pick;

        return $this;
    }

    /**
     * Gets maximum_pick
     *
     * @return int|null
     */
    public function getMaximumPick()
    {
        return $this->container['maximum_pick'];
    }

    /**
     * Sets maximum_pick
     *
     * @param int|null $maximum_pick Maximum number of stock units that can be picked from the specified location.
     *
     * @return self
     */
    public function setMaximumPick($maximum_pick)
    {
        if (is_null($maximum_pick)) {
            throw new \InvalidArgumentException('non-nullable maximum_pick cannot be null');
        }

        if (($maximum_pick > 0)) {
            throw new \InvalidArgumentException('invalid value for $maximum_pick when calling StorageDTO., must be smaller than or equal to 10000000.');
        }
        if (($maximum_pick < 0)) {
            throw new \InvalidArgumentException('invalid value for $maximum_pick when calling StorageDTO., must be bigger than or equal to 0.');
        }

        $this->container['maximum_pick'] = $maximum_pick;

        return $this;
    }

    /**
     * Gets opportunistic_count_threshold
     *
     * @return int|null
     */
    public function getOpportunisticCountThreshold()
    {
        return $this->container['opportunistic_count_threshold'];
    }

    /**
     * Sets opportunistic_count_threshold
     *
     * @param int|null $opportunistic_count_threshold When the number of stock units at the location reaches this value, then a cycle count can be automatically generated. Typically, this value is a number below the minimum for the storage detail record.
     *
     * @return self
     */
    public function setOpportunisticCountThreshold($opportunistic_count_threshold)
    {
        if (is_null($opportunistic_count_threshold)) {
            throw new \InvalidArgumentException('non-nullable opportunistic_count_threshold cannot be null');
        }
        $this->container['opportunistic_count_threshold'] = $opportunistic_count_threshold;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            throw new \InvalidArgumentException('non-nullable created_by cannot be null');
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $updated_by updated_by
     *
     * @return self
     */
    public function setUpdatedBy($updated_by)
    {
        if (is_null($updated_by)) {
            throw new \InvalidArgumentException('non-nullable updated_by cannot be null');
        }
        $this->container['updated_by'] = $updated_by;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime|null $created_date Date and time that the storage detail record was created.
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets updated_date
     *
     * @return \DateTime|null
     */
    public function getUpdatedDate()
    {
        return $this->container['updated_date'];
    }

    /**
     * Sets updated_date
     *
     * @param \DateTime|null $updated_date Date and time that the storage detail record was last updated.
     *
     * @return self
     */
    public function setUpdatedDate($updated_date)
    {
        if (is_null($updated_date)) {
            throw new \InvalidArgumentException('non-nullable updated_date cannot be null');
        }
        $this->container['updated_date'] = $updated_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


