<?php
/**
 * CustomerReturnLineDTOAllOf
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deposco API
 *
 * Welcome to the Deposco API Reference! The Deposco API enables you to integrate your system with Deposco.  * Integrate a product information system (PIM) by creating and retrieving data for items, packs, UPCs, and kits. * Set up warehouse data by creating facilities, zones, locations, and storage details. * Create inbound orders that can be received and outbound orders that can be fulfilled with Deposco warehouse management processes.  This reference provides details on available operations, endpoints, parameters, schemas, and responses.  Example requests and responses are also available for you to use as a reference. You can copy the examples to use as a starting point for your own requests.  Review the guides to learn how the API is used in common business scenarios such as setting up the warehouse and integrating a Product Information Management (PIM) system.  When you're ready to get started, register for a developer account and then log in to create your application in the developer portal.
 *
 * The version of the OpenAPI document: 2.0.2519
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\Deposco\Model;

use \ArrayAccess;
use \BeLenka\Deposco\ObjectSerializer;

/**
 * CustomerReturnLineDTOAllOf Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CustomerReturnLineDTOAllOf implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CustomerReturnLineDTO_allOf';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'order_line_status' => 'string',
        'ship_to_facility' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'co_line' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'received_pack_quantity' => 'int',
        'received_damaged_pack_quantity' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'order_line_status' => null,
        'ship_to_facility' => null,
        'co_line' => null,
        'received_pack_quantity' => 'double',
        'received_damaged_pack_quantity' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'order_line_status' => true,
		'ship_to_facility' => true,
		'co_line' => true,
		'received_pack_quantity' => false,
		'received_damaged_pack_quantity' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_line_status' => 'orderLineStatus',
        'ship_to_facility' => 'shipToFacility',
        'co_line' => 'coLine',
        'received_pack_quantity' => 'receivedPackQuantity',
        'received_damaged_pack_quantity' => 'receivedDamagedPackQuantity'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_line_status' => 'setOrderLineStatus',
        'ship_to_facility' => 'setShipToFacility',
        'co_line' => 'setCoLine',
        'received_pack_quantity' => 'setReceivedPackQuantity',
        'received_damaged_pack_quantity' => 'setReceivedDamagedPackQuantity'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_line_status' => 'getOrderLineStatus',
        'ship_to_facility' => 'getShipToFacility',
        'co_line' => 'getCoLine',
        'received_pack_quantity' => 'getReceivedPackQuantity',
        'received_damaged_pack_quantity' => 'getReceivedDamagedPackQuantity'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ORDER_LINE_STATUS__NEW = 'New';
    public const ORDER_LINE_STATUS_RECEIVING = 'Receiving';
    public const ORDER_LINE_STATUS_PARTIAL_RECEIPT = 'Partial Receipt';
    public const ORDER_LINE_STATUS_RECEIVED = 'Received';
    public const ORDER_LINE_STATUS_CANCELED = 'Canceled';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrderLineStatusAllowableValues()
    {
        return [
            self::ORDER_LINE_STATUS__NEW,
            self::ORDER_LINE_STATUS_RECEIVING,
            self::ORDER_LINE_STATUS_PARTIAL_RECEIPT,
            self::ORDER_LINE_STATUS_RECEIVED,
            self::ORDER_LINE_STATUS_CANCELED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('order_line_status', $data ?? [], null);
        $this->setIfExists('ship_to_facility', $data ?? [], null);
        $this->setIfExists('co_line', $data ?? [], null);
        $this->setIfExists('received_pack_quantity', $data ?? [], null);
        $this->setIfExists('received_damaged_pack_quantity', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOrderLineStatusAllowableValues();
        if (!is_null($this->container['order_line_status']) && !in_array($this->container['order_line_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'order_line_status', must be one of '%s'",
                $this->container['order_line_status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['received_pack_quantity']) && ($this->container['received_pack_quantity'] > 10000000)) {
            $invalidProperties[] = "invalid value for 'received_pack_quantity', must be smaller than or equal to 10000000.";
        }

        if (!is_null($this->container['received_pack_quantity']) && ($this->container['received_pack_quantity'] < 0)) {
            $invalidProperties[] = "invalid value for 'received_pack_quantity', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['received_damaged_pack_quantity']) && ($this->container['received_damaged_pack_quantity'] > 10000000)) {
            $invalidProperties[] = "invalid value for 'received_damaged_pack_quantity', must be smaller than or equal to 10000000.";
        }

        if (!is_null($this->container['received_damaged_pack_quantity']) && ($this->container['received_damaged_pack_quantity'] < 0)) {
            $invalidProperties[] = "invalid value for 'received_damaged_pack_quantity', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_line_status
     *
     * @return string|null
     */
    public function getOrderLineStatus()
    {
        return $this->container['order_line_status'];
    }

    /**
     * Sets order_line_status
     *
     * @param string|null $order_line_status Status of the order line. New order lines should be created with a status of New.
     *
     * @return self
     */
    public function setOrderLineStatus($order_line_status)
    {
        if (is_null($order_line_status)) {
            array_push($this->openAPINullablesSetToNull, 'order_line_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_line_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getOrderLineStatusAllowableValues();
        if (!is_null($order_line_status) && !in_array($order_line_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'order_line_status', must be one of '%s'",
                    $order_line_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['order_line_status'] = $order_line_status;

        return $this;
    }

    /**
     * Gets ship_to_facility
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getShipToFacility()
    {
        return $this->container['ship_to_facility'];
    }

    /**
     * Sets ship_to_facility
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $ship_to_facility ship_to_facility
     *
     * @return self
     */
    public function setShipToFacility($ship_to_facility)
    {
        if (is_null($ship_to_facility)) {
            array_push($this->openAPINullablesSetToNull, 'ship_to_facility');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ship_to_facility', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ship_to_facility'] = $ship_to_facility;

        return $this;
    }

    /**
     * Gets co_line
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getCoLine()
    {
        return $this->container['co_line'];
    }

    /**
     * Sets co_line
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $co_line co_line
     *
     * @return self
     */
    public function setCoLine($co_line)
    {
        if (is_null($co_line)) {
            array_push($this->openAPINullablesSetToNull, 'co_line');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('co_line', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['co_line'] = $co_line;

        return $this;
    }

    /**
     * Gets received_pack_quantity
     *
     * @return int|null
     */
    public function getReceivedPackQuantity()
    {
        return $this->container['received_pack_quantity'];
    }

    /**
     * Sets received_pack_quantity
     *
     * @param int|null $received_pack_quantity Quantity of the item/pack that was received.
     *
     * @return self
     */
    public function setReceivedPackQuantity($received_pack_quantity)
    {
        if (is_null($received_pack_quantity)) {
            throw new \InvalidArgumentException('non-nullable received_pack_quantity cannot be null');
        }

        if (($received_pack_quantity > 0)) {
            throw new \InvalidArgumentException('invalid value for $received_pack_quantity when calling CustomerReturnLineDTOAllOf., must be smaller than or equal to 10000000.');
        }
        if (($received_pack_quantity < 0)) {
            throw new \InvalidArgumentException('invalid value for $received_pack_quantity when calling CustomerReturnLineDTOAllOf., must be bigger than or equal to 0.');
        }

        $this->container['received_pack_quantity'] = $received_pack_quantity;

        return $this;
    }

    /**
     * Gets received_damaged_pack_quantity
     *
     * @return int|null
     */
    public function getReceivedDamagedPackQuantity()
    {
        return $this->container['received_damaged_pack_quantity'];
    }

    /**
     * Sets received_damaged_pack_quantity
     *
     * @param int|null $received_damaged_pack_quantity Quantity of the item/pack that was received in a damaged condition.
     *
     * @return self
     */
    public function setReceivedDamagedPackQuantity($received_damaged_pack_quantity)
    {
        if (is_null($received_damaged_pack_quantity)) {
            throw new \InvalidArgumentException('non-nullable received_damaged_pack_quantity cannot be null');
        }

        if (($received_damaged_pack_quantity > 0)) {
            throw new \InvalidArgumentException('invalid value for $received_damaged_pack_quantity when calling CustomerReturnLineDTOAllOf., must be smaller than or equal to 10000000.');
        }
        if (($received_damaged_pack_quantity < 0)) {
            throw new \InvalidArgumentException('invalid value for $received_damaged_pack_quantity when calling CustomerReturnLineDTOAllOf., must be bigger than or equal to 0.');
        }

        $this->container['received_damaged_pack_quantity'] = $received_damaged_pack_quantity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


