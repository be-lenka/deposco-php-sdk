<?php
/**
 * TripDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deposco API
 *
 * Welcome to the Deposco API Reference! The Deposco API enables you to integrate your system with Deposco.  * Integrate a product information system (PIM) by creating and retrieving data for items, packs, UPCs, and kits. * Set up warehouse data by creating facilities, zones, locations, and storage details. * Create inbound orders that can be received and outbound orders that can be fulfilled with Deposco warehouse management processes.  This reference provides details on available operations, endpoints, parameters, schemas, and responses.  Example requests and responses are also available for you to use as a reference. You can copy the examples to use as a starting point for your own requests.  Review the guides to learn how the API is used in common business scenarios such as setting up the warehouse and integrating a Product Information Management (PIM) system.  When you're ready to get started, register for a developer account and then log in to create your application in the developer portal.
 *
 * The version of the OpenAPI document: 2.0.2519
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\Deposco\Model;

use \ArrayAccess;
use \BeLenka\Deposco\ObjectSerializer;

/**
 * TripDTO Class Doc Comment
 *
 * @category Class
 * @description Collection of shipments and their assigned containers that will be loaded onto a single vehicle such as a van or truck either for pickup by a specific shipping carrier or for transport to another facility.
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TripDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TripDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'self' => '\BeLenka\Deposco\Model\EntityRef',
        'business_unit' => '\BeLenka\Deposco\Model\EntityRef',
        'number' => 'string',
        'status' => 'string',
        'delivery_type' => 'string',
        'ship_from_facility' => '\BeLenka\Deposco\Model\EntityRef',
        'shipping_carrier' => 'string',
        'account_number' => 'string',
        'license_number' => 'string',
        'freight_type' => 'string',
        'dock_door' => '\BeLenka\Deposco\Model\EntityRef',
        'driver_name' => 'string',
        'departure_time' => '\DateTime',
        'current_scheduled_delivery_date' => '\DateTime',
        'estimated_delivery_date' => '\DateTime',
        'actual_arrival_time' => '\DateTime',
        'carrier_alpha_code' => 'string',
        'freight_class' => 'string',
        'transportation_method_code' => 'string',
        'bol_number' => 'string',
        'equipment_description_code' => 'string',
        'carrier_equipment_number' => 'string',
        'seal_number' => 'string',
        'route' => '\BeLenka\Deposco\Model\EntityRef',
        'ref_number' => 'string',
        'shipments' => '\BeLenka\Deposco\Model\OutboundShipmentCollectionDTO',
        'created_date' => '\DateTime',
        'updated_date' => '\DateTime',
        'created_by' => '\BeLenka\Deposco\Model\EntityRef',
        'updated_by' => '\BeLenka\Deposco\Model\EntityRef'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'self' => null,
        'business_unit' => null,
        'number' => null,
        'status' => null,
        'delivery_type' => null,
        'ship_from_facility' => null,
        'shipping_carrier' => null,
        'account_number' => null,
        'license_number' => null,
        'freight_type' => null,
        'dock_door' => null,
        'driver_name' => null,
        'departure_time' => 'date-time',
        'current_scheduled_delivery_date' => 'date-time',
        'estimated_delivery_date' => 'date-time',
        'actual_arrival_time' => 'date-time',
        'carrier_alpha_code' => null,
        'freight_class' => null,
        'transportation_method_code' => null,
        'bol_number' => null,
        'equipment_description_code' => null,
        'carrier_equipment_number' => null,
        'seal_number' => null,
        'route' => null,
        'ref_number' => null,
        'shipments' => null,
        'created_date' => 'date-time',
        'updated_date' => 'date-time',
        'created_by' => null,
        'updated_by' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'self' => false,
        'business_unit' => false,
        'number' => false,
        'status' => true,
        'delivery_type' => true,
        'ship_from_facility' => false,
        'shipping_carrier' => false,
        'account_number' => true,
        'license_number' => true,
        'freight_type' => true,
        'dock_door' => false,
        'driver_name' => true,
        'departure_time' => true,
        'current_scheduled_delivery_date' => true,
        'estimated_delivery_date' => true,
        'actual_arrival_time' => true,
        'carrier_alpha_code' => true,
        'freight_class' => true,
        'transportation_method_code' => true,
        'bol_number' => true,
        'equipment_description_code' => true,
        'carrier_equipment_number' => true,
        'seal_number' => true,
        'route' => false,
        'ref_number' => true,
        'shipments' => false,
        'created_date' => false,
        'updated_date' => false,
        'created_by' => false,
        'updated_by' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'self' => 'self',
        'business_unit' => 'businessUnit',
        'number' => 'number',
        'status' => 'status',
        'delivery_type' => 'deliveryType',
        'ship_from_facility' => 'shipFromFacility',
        'shipping_carrier' => 'shippingCarrier',
        'account_number' => 'accountNumber',
        'license_number' => 'licenseNumber',
        'freight_type' => 'freightType',
        'dock_door' => 'dockDoor',
        'driver_name' => 'driverName',
        'departure_time' => 'departureTime',
        'current_scheduled_delivery_date' => 'currentScheduledDeliveryDate',
        'estimated_delivery_date' => 'estimatedDeliveryDate',
        'actual_arrival_time' => 'actualArrivalTime',
        'carrier_alpha_code' => 'carrierAlphaCode',
        'freight_class' => 'freightClass',
        'transportation_method_code' => 'transportationMethodCode',
        'bol_number' => 'bolNumber',
        'equipment_description_code' => 'equipmentDescriptionCode',
        'carrier_equipment_number' => 'carrierEquipmentNumber',
        'seal_number' => 'sealNumber',
        'route' => 'route',
        'ref_number' => 'refNumber',
        'shipments' => 'shipments',
        'created_date' => 'createdDate',
        'updated_date' => 'updatedDate',
        'created_by' => 'createdBy',
        'updated_by' => 'updatedBy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'self' => 'setSelf',
        'business_unit' => 'setBusinessUnit',
        'number' => 'setNumber',
        'status' => 'setStatus',
        'delivery_type' => 'setDeliveryType',
        'ship_from_facility' => 'setShipFromFacility',
        'shipping_carrier' => 'setShippingCarrier',
        'account_number' => 'setAccountNumber',
        'license_number' => 'setLicenseNumber',
        'freight_type' => 'setFreightType',
        'dock_door' => 'setDockDoor',
        'driver_name' => 'setDriverName',
        'departure_time' => 'setDepartureTime',
        'current_scheduled_delivery_date' => 'setCurrentScheduledDeliveryDate',
        'estimated_delivery_date' => 'setEstimatedDeliveryDate',
        'actual_arrival_time' => 'setActualArrivalTime',
        'carrier_alpha_code' => 'setCarrierAlphaCode',
        'freight_class' => 'setFreightClass',
        'transportation_method_code' => 'setTransportationMethodCode',
        'bol_number' => 'setBolNumber',
        'equipment_description_code' => 'setEquipmentDescriptionCode',
        'carrier_equipment_number' => 'setCarrierEquipmentNumber',
        'seal_number' => 'setSealNumber',
        'route' => 'setRoute',
        'ref_number' => 'setRefNumber',
        'shipments' => 'setShipments',
        'created_date' => 'setCreatedDate',
        'updated_date' => 'setUpdatedDate',
        'created_by' => 'setCreatedBy',
        'updated_by' => 'setUpdatedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'self' => 'getSelf',
        'business_unit' => 'getBusinessUnit',
        'number' => 'getNumber',
        'status' => 'getStatus',
        'delivery_type' => 'getDeliveryType',
        'ship_from_facility' => 'getShipFromFacility',
        'shipping_carrier' => 'getShippingCarrier',
        'account_number' => 'getAccountNumber',
        'license_number' => 'getLicenseNumber',
        'freight_type' => 'getFreightType',
        'dock_door' => 'getDockDoor',
        'driver_name' => 'getDriverName',
        'departure_time' => 'getDepartureTime',
        'current_scheduled_delivery_date' => 'getCurrentScheduledDeliveryDate',
        'estimated_delivery_date' => 'getEstimatedDeliveryDate',
        'actual_arrival_time' => 'getActualArrivalTime',
        'carrier_alpha_code' => 'getCarrierAlphaCode',
        'freight_class' => 'getFreightClass',
        'transportation_method_code' => 'getTransportationMethodCode',
        'bol_number' => 'getBolNumber',
        'equipment_description_code' => 'getEquipmentDescriptionCode',
        'carrier_equipment_number' => 'getCarrierEquipmentNumber',
        'seal_number' => 'getSealNumber',
        'route' => 'getRoute',
        'ref_number' => 'getRefNumber',
        'shipments' => 'getShipments',
        'created_date' => 'getCreatedDate',
        'updated_date' => 'getUpdatedDate',
        'created_by' => 'getCreatedBy',
        'updated_by' => 'getUpdatedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_OPEN = 'Open';
    public const STATUS_CLOSED = 'Closed';
    public const DELIVERY_TYPE_INTERNAL = 'Internal';
    public const DELIVERY_TYPE_OUTBOUND = 'Outbound';
    public const FREIGHT_TYPE_PARCEL = 'Parcel';
    public const FREIGHT_TYPE_FREIGHT = 'Freight';
    public const TRANSPORTATION_METHOD_CODE_ZZ = 'ZZ';
    public const TRANSPORTATION_METHOD_CODE_LT = 'LT';
    public const EQUIPMENT_DESCRIPTION_CODE_TV = 'TV';
    public const EQUIPMENT_DESCRIPTION_CODE_TN = 'TN';
    public const EQUIPMENT_DESCRIPTION_CODE_TL = 'TL';
    public const EQUIPMENT_DESCRIPTION_CODE_TA = 'TA';
    public const EQUIPMENT_DESCRIPTION_CODE_RT = 'RT';
    public const EQUIPMENT_DESCRIPTION_CODE_RR = 'RR';
    public const EQUIPMENT_DESCRIPTION_CODE_HV = 'HV';
    public const EQUIPMENT_DESCRIPTION_CODE_HC = 'HC';
    public const EQUIPMENT_DESCRIPTION_CODE_FT = 'FT';
    public const EQUIPMENT_DESCRIPTION_CODE_CV = 'CV';
    public const EQUIPMENT_DESCRIPTION_CODE_CQ = 'CQ';
    public const EQUIPMENT_DESCRIPTION_CODE_CN = 'CN';
    public const EQUIPMENT_DESCRIPTION_CODE_BX = 'BX';
    public const EQUIPMENT_DESCRIPTION_CODE_AF = 'AF';
    public const EQUIPMENT_DESCRIPTION_CODE_AC = 'AC';
    public const EQUIPMENT_DESCRIPTION_CODE__4_B = '4B';
    public const EQUIPMENT_DESCRIPTION_CODE__2_B = '2B';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_OPEN,
            self::STATUS_CLOSED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeliveryTypeAllowableValues()
    {
        return [
            self::DELIVERY_TYPE_INTERNAL,
            self::DELIVERY_TYPE_OUTBOUND,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFreightTypeAllowableValues()
    {
        return [
            self::FREIGHT_TYPE_PARCEL,
            self::FREIGHT_TYPE_FREIGHT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransportationMethodCodeAllowableValues()
    {
        return [
            self::TRANSPORTATION_METHOD_CODE_ZZ,
            self::TRANSPORTATION_METHOD_CODE_LT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEquipmentDescriptionCodeAllowableValues()
    {
        return [
            self::EQUIPMENT_DESCRIPTION_CODE_TV,
            self::EQUIPMENT_DESCRIPTION_CODE_TN,
            self::EQUIPMENT_DESCRIPTION_CODE_TL,
            self::EQUIPMENT_DESCRIPTION_CODE_TA,
            self::EQUIPMENT_DESCRIPTION_CODE_RT,
            self::EQUIPMENT_DESCRIPTION_CODE_RR,
            self::EQUIPMENT_DESCRIPTION_CODE_HV,
            self::EQUIPMENT_DESCRIPTION_CODE_HC,
            self::EQUIPMENT_DESCRIPTION_CODE_FT,
            self::EQUIPMENT_DESCRIPTION_CODE_CV,
            self::EQUIPMENT_DESCRIPTION_CODE_CQ,
            self::EQUIPMENT_DESCRIPTION_CODE_CN,
            self::EQUIPMENT_DESCRIPTION_CODE_BX,
            self::EQUIPMENT_DESCRIPTION_CODE_AF,
            self::EQUIPMENT_DESCRIPTION_CODE_AC,
            self::EQUIPMENT_DESCRIPTION_CODE__4_B,
            self::EQUIPMENT_DESCRIPTION_CODE__2_B,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('self', $data ?? [], null);
        $this->setIfExists('business_unit', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('delivery_type', $data ?? [], null);
        $this->setIfExists('ship_from_facility', $data ?? [], null);
        $this->setIfExists('shipping_carrier', $data ?? [], null);
        $this->setIfExists('account_number', $data ?? [], null);
        $this->setIfExists('license_number', $data ?? [], null);
        $this->setIfExists('freight_type', $data ?? [], 'Parcel');
        $this->setIfExists('dock_door', $data ?? [], null);
        $this->setIfExists('driver_name', $data ?? [], null);
        $this->setIfExists('departure_time', $data ?? [], null);
        $this->setIfExists('current_scheduled_delivery_date', $data ?? [], null);
        $this->setIfExists('estimated_delivery_date', $data ?? [], null);
        $this->setIfExists('actual_arrival_time', $data ?? [], null);
        $this->setIfExists('carrier_alpha_code', $data ?? [], null);
        $this->setIfExists('freight_class', $data ?? [], null);
        $this->setIfExists('transportation_method_code', $data ?? [], null);
        $this->setIfExists('bol_number', $data ?? [], null);
        $this->setIfExists('equipment_description_code', $data ?? [], null);
        $this->setIfExists('carrier_equipment_number', $data ?? [], null);
        $this->setIfExists('seal_number', $data ?? [], null);
        $this->setIfExists('route', $data ?? [], null);
        $this->setIfExists('ref_number', $data ?? [], null);
        $this->setIfExists('shipments', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('updated_date', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('updated_by', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['number'] === null) {
            $invalidProperties[] = "'number' can't be null";
        }
        if ((mb_strlen($this->container['number']) > 200)) {
            $invalidProperties[] = "invalid value for 'number', the character length must be smaller than or equal to 200.";
        }

        if (!preg_match("/.*\\S.*/", $this->container['number'])) {
            $invalidProperties[] = "invalid value for 'number', must be conform to the pattern /.*\\S.*/.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDeliveryTypeAllowableValues();
        if (!is_null($this->container['delivery_type']) && !in_array($this->container['delivery_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'delivery_type', must be one of '%s'",
                $this->container['delivery_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['shipping_carrier'] === null) {
            $invalidProperties[] = "'shipping_carrier' can't be null";
        }
        if ((mb_strlen($this->container['shipping_carrier']) > 200)) {
            $invalidProperties[] = "invalid value for 'shipping_carrier', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['account_number']) && (mb_strlen($this->container['account_number']) > 30)) {
            $invalidProperties[] = "invalid value for 'account_number', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['license_number']) && (mb_strlen($this->container['license_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'license_number', the character length must be smaller than or equal to 50.";
        }

        $allowedValues = $this->getFreightTypeAllowableValues();
        if (!is_null($this->container['freight_type']) && !in_array($this->container['freight_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'freight_type', must be one of '%s'",
                $this->container['freight_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['driver_name']) && (mb_strlen($this->container['driver_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'driver_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['carrier_alpha_code']) && (mb_strlen($this->container['carrier_alpha_code']) > 50)) {
            $invalidProperties[] = "invalid value for 'carrier_alpha_code', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['freight_class']) && (mb_strlen($this->container['freight_class']) > 50)) {
            $invalidProperties[] = "invalid value for 'freight_class', the character length must be smaller than or equal to 50.";
        }

        $allowedValues = $this->getTransportationMethodCodeAllowableValues();
        if (!is_null($this->container['transportation_method_code']) && !in_array($this->container['transportation_method_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'transportation_method_code', must be one of '%s'",
                $this->container['transportation_method_code'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['bol_number']) && (mb_strlen($this->container['bol_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'bol_number', the character length must be smaller than or equal to 50.";
        }

        $allowedValues = $this->getEquipmentDescriptionCodeAllowableValues();
        if (!is_null($this->container['equipment_description_code']) && !in_array($this->container['equipment_description_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'equipment_description_code', must be one of '%s'",
                $this->container['equipment_description_code'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['carrier_equipment_number']) && (mb_strlen($this->container['carrier_equipment_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'carrier_equipment_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['seal_number']) && (mb_strlen($this->container['seal_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'seal_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['ref_number']) && (mb_strlen($this->container['ref_number']) > 20)) {
            $invalidProperties[] = "invalid value for 'ref_number', the character length must be smaller than or equal to 20.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets self
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $self self
     *
     * @return self
     */
    public function setSelf($self)
    {
        if (is_null($self)) {
            throw new \InvalidArgumentException('non-nullable self cannot be null');
        }
        $this->container['self'] = $self;

        return $this;
    }

    /**
     * Gets business_unit
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getBusinessUnit()
    {
        return $this->container['business_unit'];
    }

    /**
     * Sets business_unit
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $business_unit business_unit
     *
     * @return self
     */
    public function setBusinessUnit($business_unit)
    {
        if (is_null($business_unit)) {
            throw new \InvalidArgumentException('non-nullable business_unit cannot be null');
        }
        $this->container['business_unit'] = $business_unit;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number Unique identification number for the trip.
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }
        if ((mb_strlen($number) > 200)) {
            throw new \InvalidArgumentException('invalid length for $number when calling TripDTO., must be smaller than or equal to 200.');
        }
        if ((!preg_match("/.*\\S.*/", ObjectSerializer::toString($number)))) {
            throw new \InvalidArgumentException("invalid value for \$number when calling TripDTO., must conform to the pattern /.*\\S.*/.");
        }

        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Status of the trip. A trip is open if it has been created but containers and shipments can still be added to the trip. An open trip can also be moved from one shipping door to another. A trip is set to a status of `Closed` when the trip can no longer be changed and the truck for the ship has left the facility. Trips are typically closed by warehouse management process.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets delivery_type
     *
     * @return string|null
     */
    public function getDeliveryType()
    {
        return $this->container['delivery_type'];
    }

    /**
     * Sets delivery_type
     *
     * @param string|null $delivery_type Whether the trip is for an `Internal` delivery to another facility (in other words, a transfer) or an `Outbound` delivery (typically through a shipping carrier).
     *
     * @return self
     */
    public function setDeliveryType($delivery_type)
    {
        if (is_null($delivery_type)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getDeliveryTypeAllowableValues();
        if (!is_null($delivery_type) && !in_array($delivery_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'delivery_type', must be one of '%s'",
                    $delivery_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['delivery_type'] = $delivery_type;

        return $this;
    }

    /**
     * Gets ship_from_facility
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getShipFromFacility()
    {
        return $this->container['ship_from_facility'];
    }

    /**
     * Sets ship_from_facility
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $ship_from_facility ship_from_facility
     *
     * @return self
     */
    public function setShipFromFacility($ship_from_facility)
    {
        if (is_null($ship_from_facility)) {
            throw new \InvalidArgumentException('non-nullable ship_from_facility cannot be null');
        }
        $this->container['ship_from_facility'] = $ship_from_facility;

        return $this;
    }

    /**
     * Gets shipping_carrier
     *
     * @return string
     */
    public function getShippingCarrier()
    {
        return $this->container['shipping_carrier'];
    }

    /**
     * Sets shipping_carrier
     *
     * @param string $shipping_carrier Shipping carrier through which the trip is being shipped.
     *
     * @return self
     */
    public function setShippingCarrier($shipping_carrier)
    {
        if (is_null($shipping_carrier)) {
            throw new \InvalidArgumentException('non-nullable shipping_carrier cannot be null');
        }
        if ((mb_strlen($shipping_carrier) > 200)) {
            throw new \InvalidArgumentException('invalid length for $shipping_carrier when calling TripDTO., must be smaller than or equal to 200.');
        }

        $this->container['shipping_carrier'] = $shipping_carrier;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string|null
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string|null $account_number Pickup account number for the shipping carrier that is assigned to the trip.
     *
     * @return self
     */
    public function setAccountNumber($account_number)
    {
        if (is_null($account_number)) {
            array_push($this->openAPINullablesSetToNull, 'account_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('account_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($account_number) && (mb_strlen($account_number) > 30)) {
            throw new \InvalidArgumentException('invalid length for $account_number when calling TripDTO., must be smaller than or equal to 30.');
        }

        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets license_number
     *
     * @return string|null
     */
    public function getLicenseNumber()
    {
        return $this->container['license_number'];
    }

    /**
     * Sets license_number
     *
     * @param string|null $license_number License number for the shipping carrier that is assigned to the trip.
     *
     * @return self
     */
    public function setLicenseNumber($license_number)
    {
        if (is_null($license_number)) {
            array_push($this->openAPINullablesSetToNull, 'license_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('license_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($license_number) && (mb_strlen($license_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $license_number when calling TripDTO., must be smaller than or equal to 50.');
        }

        $this->container['license_number'] = $license_number;

        return $this;
    }

    /**
     * Gets freight_type
     *
     * @return string|null
     */
    public function getFreightType()
    {
        return $this->container['freight_type'];
    }

    /**
     * Sets freight_type
     *
     * @param string|null $freight_type Whether the trip is for `Parcel` or `Freight` shipments.
     *
     * @return self
     */
    public function setFreightType($freight_type)
    {
        if (is_null($freight_type)) {
            array_push($this->openAPINullablesSetToNull, 'freight_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('freight_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getFreightTypeAllowableValues();
        if (!is_null($freight_type) && !in_array($freight_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'freight_type', must be one of '%s'",
                    $freight_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['freight_type'] = $freight_type;

        return $this;
    }

    /**
     * Gets dock_door
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getDockDoor()
    {
        return $this->container['dock_door'];
    }

    /**
     * Sets dock_door
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $dock_door dock_door
     *
     * @return self
     */
    public function setDockDoor($dock_door)
    {
        if (is_null($dock_door)) {
            throw new \InvalidArgumentException('non-nullable dock_door cannot be null');
        }
        $this->container['dock_door'] = $dock_door;

        return $this;
    }

    /**
     * Gets driver_name
     *
     * @return string|null
     */
    public function getDriverName()
    {
        return $this->container['driver_name'];
    }

    /**
     * Sets driver_name
     *
     * @param string|null $driver_name Name of the driver of the truck on which the trip is loaded.
     *
     * @return self
     */
    public function setDriverName($driver_name)
    {
        if (is_null($driver_name)) {
            array_push($this->openAPINullablesSetToNull, 'driver_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('driver_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($driver_name) && (mb_strlen($driver_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $driver_name when calling TripDTO., must be smaller than or equal to 50.');
        }

        $this->container['driver_name'] = $driver_name;

        return $this;
    }

    /**
     * Gets departure_time
     *
     * @return \DateTime|null
     */
    public function getDepartureTime()
    {
        return $this->container['departure_time'];
    }

    /**
     * Sets departure_time
     *
     * @param \DateTime|null $departure_time Date and time at which the truck for the trip departs the shipping door for the facility.
     *
     * @return self
     */
    public function setDepartureTime($departure_time)
    {
        if (is_null($departure_time)) {
            array_push($this->openAPINullablesSetToNull, 'departure_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('departure_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['departure_time'] = $departure_time;

        return $this;
    }

    /**
     * Gets current_scheduled_delivery_date
     *
     * @return \DateTime|null
     */
    public function getCurrentScheduledDeliveryDate()
    {
        return $this->container['current_scheduled_delivery_date'];
    }

    /**
     * Sets current_scheduled_delivery_date
     *
     * @param \DateTime|null $current_scheduled_delivery_date Date on which the trip is scheduled to be delivered.
     *
     * @return self
     */
    public function setCurrentScheduledDeliveryDate($current_scheduled_delivery_date)
    {
        if (is_null($current_scheduled_delivery_date)) {
            array_push($this->openAPINullablesSetToNull, 'current_scheduled_delivery_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('current_scheduled_delivery_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['current_scheduled_delivery_date'] = $current_scheduled_delivery_date;

        return $this;
    }

    /**
     * Gets estimated_delivery_date
     *
     * @return \DateTime|null
     */
    public function getEstimatedDeliveryDate()
    {
        return $this->container['estimated_delivery_date'];
    }

    /**
     * Sets estimated_delivery_date
     *
     * @param \DateTime|null $estimated_delivery_date Date on which the trip is estimated to be delivered.
     *
     * @return self
     */
    public function setEstimatedDeliveryDate($estimated_delivery_date)
    {
        if (is_null($estimated_delivery_date)) {
            array_push($this->openAPINullablesSetToNull, 'estimated_delivery_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('estimated_delivery_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['estimated_delivery_date'] = $estimated_delivery_date;

        return $this;
    }

    /**
     * Gets actual_arrival_time
     *
     * @return \DateTime|null
     */
    public function getActualArrivalTime()
    {
        return $this->container['actual_arrival_time'];
    }

    /**
     * Sets actual_arrival_time
     *
     * @param \DateTime|null $actual_arrival_time Date on which the trip is delivered.
     *
     * @return self
     */
    public function setActualArrivalTime($actual_arrival_time)
    {
        if (is_null($actual_arrival_time)) {
            array_push($this->openAPINullablesSetToNull, 'actual_arrival_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('actual_arrival_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['actual_arrival_time'] = $actual_arrival_time;

        return $this;
    }

    /**
     * Gets carrier_alpha_code
     *
     * @return string|null
     */
    public function getCarrierAlphaCode()
    {
        return $this->container['carrier_alpha_code'];
    }

    /**
     * Sets carrier_alpha_code
     *
     * @param string|null $carrier_alpha_code Standard Carrier Alpha Code (SCAC) for the trip. A SCAC is a unique 2 to 4-letter code used to identify carriers and transportation companies.
     *
     * @return self
     */
    public function setCarrierAlphaCode($carrier_alpha_code)
    {
        if (is_null($carrier_alpha_code)) {
            array_push($this->openAPINullablesSetToNull, 'carrier_alpha_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('carrier_alpha_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($carrier_alpha_code) && (mb_strlen($carrier_alpha_code) > 50)) {
            throw new \InvalidArgumentException('invalid length for $carrier_alpha_code when calling TripDTO., must be smaller than or equal to 50.');
        }

        $this->container['carrier_alpha_code'] = $carrier_alpha_code;

        return $this;
    }

    /**
     * Gets freight_class
     *
     * @return string|null
     */
    public function getFreightClass()
    {
        return $this->container['freight_class'];
    }

    /**
     * Sets freight_class
     *
     * @param string|null $freight_class National Motor Freight Classification (NMFC) number for the trip.
     *
     * @return self
     */
    public function setFreightClass($freight_class)
    {
        if (is_null($freight_class)) {
            array_push($this->openAPINullablesSetToNull, 'freight_class');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('freight_class', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($freight_class) && (mb_strlen($freight_class) > 50)) {
            throw new \InvalidArgumentException('invalid length for $freight_class when calling TripDTO., must be smaller than or equal to 50.');
        }

        $this->container['freight_class'] = $freight_class;

        return $this;
    }

    /**
     * Gets transportation_method_code
     *
     * @return string|null
     */
    public function getTransportationMethodCode()
    {
        return $this->container['transportation_method_code'];
    }

    /**
     * Sets transportation_method_code
     *
     * @param string|null $transportation_method_code Transportation mode that is assigned to the BOL for the trip. Use a value of `ZZ` for `Mutually defined` or `LT` for `Less Than Trailer Load (LTL)`.
     *
     * @return self
     */
    public function setTransportationMethodCode($transportation_method_code)
    {
        if (is_null($transportation_method_code)) {
            array_push($this->openAPINullablesSetToNull, 'transportation_method_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transportation_method_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getTransportationMethodCodeAllowableValues();
        if (!is_null($transportation_method_code) && !in_array($transportation_method_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'transportation_method_code', must be one of '%s'",
                    $transportation_method_code,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transportation_method_code'] = $transportation_method_code;

        return $this;
    }

    /**
     * Gets bol_number
     *
     * @return string|null
     */
    public function getBolNumber()
    {
        return $this->container['bol_number'];
    }

    /**
     * Sets bol_number
     *
     * @param string|null $bol_number Bill of lading (BOL) number for the trip. A BOL is a legal document that details the type, quantity, and ownership of the goods, as well as their destination.
     *
     * @return self
     */
    public function setBolNumber($bol_number)
    {
        if (is_null($bol_number)) {
            array_push($this->openAPINullablesSetToNull, 'bol_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bol_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bol_number) && (mb_strlen($bol_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $bol_number when calling TripDTO., must be smaller than or equal to 50.');
        }

        $this->container['bol_number'] = $bol_number;

        return $this;
    }

    /**
     * Gets equipment_description_code
     *
     * @return string|null
     */
    public function getEquipmentDescriptionCode()
    {
        return $this->container['equipment_description_code'];
    }

    /**
     * Sets equipment_description_code
     *
     * @param string|null $equipment_description_code Code that identifies the type of equipment that is used to transport the trip.
     *
     * @return self
     */
    public function setEquipmentDescriptionCode($equipment_description_code)
    {
        if (is_null($equipment_description_code)) {
            array_push($this->openAPINullablesSetToNull, 'equipment_description_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('equipment_description_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getEquipmentDescriptionCodeAllowableValues();
        if (!is_null($equipment_description_code) && !in_array($equipment_description_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'equipment_description_code', must be one of '%s'",
                    $equipment_description_code,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['equipment_description_code'] = $equipment_description_code;

        return $this;
    }

    /**
     * Gets carrier_equipment_number
     *
     * @return string|null
     */
    public function getCarrierEquipmentNumber()
    {
        return $this->container['carrier_equipment_number'];
    }

    /**
     * Sets carrier_equipment_number
     *
     * @param string|null $carrier_equipment_number Identifying number for the equipment that the carrier uses for the trip. This is typically the trailer number.
     *
     * @return self
     */
    public function setCarrierEquipmentNumber($carrier_equipment_number)
    {
        if (is_null($carrier_equipment_number)) {
            array_push($this->openAPINullablesSetToNull, 'carrier_equipment_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('carrier_equipment_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($carrier_equipment_number) && (mb_strlen($carrier_equipment_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $carrier_equipment_number when calling TripDTO., must be smaller than or equal to 50.');
        }

        $this->container['carrier_equipment_number'] = $carrier_equipment_number;

        return $this;
    }

    /**
     * Gets seal_number
     *
     * @return string|null
     */
    public function getSealNumber()
    {
        return $this->container['seal_number'];
    }

    /**
     * Sets seal_number
     *
     * @param string|null $seal_number Unique identification number or authorization code for the trip to ensure the security and integrity of the cargo during transportation.
     *
     * @return self
     */
    public function setSealNumber($seal_number)
    {
        if (is_null($seal_number)) {
            array_push($this->openAPINullablesSetToNull, 'seal_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('seal_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($seal_number) && (mb_strlen($seal_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $seal_number when calling TripDTO., must be smaller than or equal to 50.');
        }

        $this->container['seal_number'] = $seal_number;

        return $this;
    }

    /**
     * Gets route
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getRoute()
    {
        return $this->container['route'];
    }

    /**
     * Sets route
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $route route
     *
     * @return self
     */
    public function setRoute($route)
    {
        if (is_null($route)) {
            throw new \InvalidArgumentException('non-nullable route cannot be null');
        }
        $this->container['route'] = $route;

        return $this;
    }

    /**
     * Gets ref_number
     *
     * @return string|null
     */
    public function getRefNumber()
    {
        return $this->container['ref_number'];
    }

    /**
     * Sets ref_number
     *
     * @param string|null $ref_number Additional reference identification number for the trip. For example, this may contain a PO number for the order that is associated with the trip.
     *
     * @return self
     */
    public function setRefNumber($ref_number)
    {
        if (is_null($ref_number)) {
            array_push($this->openAPINullablesSetToNull, 'ref_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ref_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($ref_number) && (mb_strlen($ref_number) > 20)) {
            throw new \InvalidArgumentException('invalid length for $ref_number when calling TripDTO., must be smaller than or equal to 20.');
        }

        $this->container['ref_number'] = $ref_number;

        return $this;
    }

    /**
     * Gets shipments
     *
     * @return \BeLenka\Deposco\Model\OutboundShipmentCollectionDTO|null
     */
    public function getShipments()
    {
        return $this->container['shipments'];
    }

    /**
     * Sets shipments
     *
     * @param \BeLenka\Deposco\Model\OutboundShipmentCollectionDTO|null $shipments shipments
     *
     * @return self
     */
    public function setShipments($shipments)
    {
        if (is_null($shipments)) {
            throw new \InvalidArgumentException('non-nullable shipments cannot be null');
        }
        $this->container['shipments'] = $shipments;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime|null $created_date Date and time that the trip was created.
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets updated_date
     *
     * @return \DateTime|null
     */
    public function getUpdatedDate()
    {
        return $this->container['updated_date'];
    }

    /**
     * Sets updated_date
     *
     * @param \DateTime|null $updated_date Date and time that the trip was last updated.
     *
     * @return self
     */
    public function setUpdatedDate($updated_date)
    {
        if (is_null($updated_date)) {
            throw new \InvalidArgumentException('non-nullable updated_date cannot be null');
        }
        $this->container['updated_date'] = $updated_date;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            throw new \InvalidArgumentException('non-nullable created_by cannot be null');
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $updated_by updated_by
     *
     * @return self
     */
    public function setUpdatedBy($updated_by)
    {
        if (is_null($updated_by)) {
            throw new \InvalidArgumentException('non-nullable updated_by cannot be null');
        }
        $this->container['updated_by'] = $updated_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


