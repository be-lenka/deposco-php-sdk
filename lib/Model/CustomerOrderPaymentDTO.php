<?php
/**
 * CustomerOrderPaymentDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deposco API
 *
 * Welcome to the Deposco API Reference! The Deposco API enables you to integrate your system with Deposco.  * Integrate a product information system (PIM) by creating and retrieving data for items, packs, UPCs, and kits. * Set up warehouse data by creating facilities, zones, locations, and storage details. * Create inbound orders that can be received and outbound orders that can be fulfilled with Deposco warehouse management processes.  This reference provides details on available operations, endpoints, parameters, schemas, and responses.  Example requests and responses are also available for you to use as a reference. You can copy the examples to use as a starting point for your own requests.  Review the guides to learn how the API is used in common business scenarios such as setting up the warehouse and integrating a Product Information Management (PIM) system.  When you're ready to get started, register for a developer account and then log in to create your application in the developer portal.
 *
 * The version of the OpenAPI document: 2.0.2519
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\Deposco\Model;

use \ArrayAccess;
use \BeLenka\Deposco\ObjectSerializer;

/**
 * CustomerOrderPaymentDTO Class Doc Comment
 *
 * @category Class
 * @description Payment record for a customer order or retail activity, which provides information for a payment that was made by the customer for the order or retail transaction.
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CustomerOrderPaymentDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CustomerOrderPaymentDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'self' => '\BeLenka\Deposco\Model\EntityRef',
        'co_retail_activity' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'payment_number' => 'string',
        'type' => 'string',
        'amount' => 'int',
        'currency_code' => 'string',
        'gateway_name' => 'string',
        'payment_method' => 'string',
        'card_type' => 'string',
        'debit_card' => 'bool',
        'authorized' => 'bool',
        'authorization_number' => 'string',
        'authorization_date' => '\DateTime',
        'authorization_code' => 'string',
        'authorization_message' => 'string',
        'authorization_only' => 'bool',
        'voided' => 'bool',
        'test_transaction' => 'bool',
        'cx_customer' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'customer_present' => 'bool',
        'parent_payment_number' => 'string',
        'additional_data' => 'string',
        'created_date' => '\DateTime',
        'updated_date' => '\DateTime',
        'created_by' => '\BeLenka\Deposco\Model\EntityRef',
        'updated_by' => '\BeLenka\Deposco\Model\EntityRef'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'self' => null,
        'co_retail_activity' => null,
        'payment_number' => null,
        'type' => null,
        'amount' => 'double',
        'currency_code' => null,
        'gateway_name' => null,
        'payment_method' => null,
        'card_type' => null,
        'debit_card' => null,
        'authorized' => null,
        'authorization_number' => null,
        'authorization_date' => 'date-time',
        'authorization_code' => null,
        'authorization_message' => null,
        'authorization_only' => null,
        'voided' => null,
        'test_transaction' => null,
        'cx_customer' => null,
        'customer_present' => null,
        'parent_payment_number' => null,
        'additional_data' => null,
        'created_date' => 'date-time',
        'updated_date' => 'date-time',
        'created_by' => null,
        'updated_by' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'self' => false,
        'co_retail_activity' => true,
        'payment_number' => true,
        'type' => false,
        'amount' => false,
        'currency_code' => false,
        'gateway_name' => true,
        'payment_method' => true,
        'card_type' => true,
        'debit_card' => false,
        'authorized' => false,
        'authorization_number' => true,
        'authorization_date' => true,
        'authorization_code' => true,
        'authorization_message' => true,
        'authorization_only' => false,
        'voided' => false,
        'test_transaction' => false,
        'cx_customer' => true,
        'customer_present' => false,
        'parent_payment_number' => true,
        'additional_data' => true,
        'created_date' => false,
        'updated_date' => false,
        'created_by' => false,
        'updated_by' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'self' => 'self',
        'co_retail_activity' => 'coRetailActivity',
        'payment_number' => 'paymentNumber',
        'type' => 'type',
        'amount' => 'amount',
        'currency_code' => 'currencyCode',
        'gateway_name' => 'gatewayName',
        'payment_method' => 'paymentMethod',
        'card_type' => 'cardType',
        'debit_card' => 'debitCard',
        'authorized' => 'authorized',
        'authorization_number' => 'authorizationNumber',
        'authorization_date' => 'authorizationDate',
        'authorization_code' => 'authorizationCode',
        'authorization_message' => 'authorizationMessage',
        'authorization_only' => 'authorizationOnly',
        'voided' => 'voided',
        'test_transaction' => 'testTransaction',
        'cx_customer' => 'cxCustomer',
        'customer_present' => 'customerPresent',
        'parent_payment_number' => 'parentPaymentNumber',
        'additional_data' => 'additionalData',
        'created_date' => 'createdDate',
        'updated_date' => 'updatedDate',
        'created_by' => 'createdBy',
        'updated_by' => 'updatedBy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'self' => 'setSelf',
        'co_retail_activity' => 'setCoRetailActivity',
        'payment_number' => 'setPaymentNumber',
        'type' => 'setType',
        'amount' => 'setAmount',
        'currency_code' => 'setCurrencyCode',
        'gateway_name' => 'setGatewayName',
        'payment_method' => 'setPaymentMethod',
        'card_type' => 'setCardType',
        'debit_card' => 'setDebitCard',
        'authorized' => 'setAuthorized',
        'authorization_number' => 'setAuthorizationNumber',
        'authorization_date' => 'setAuthorizationDate',
        'authorization_code' => 'setAuthorizationCode',
        'authorization_message' => 'setAuthorizationMessage',
        'authorization_only' => 'setAuthorizationOnly',
        'voided' => 'setVoided',
        'test_transaction' => 'setTestTransaction',
        'cx_customer' => 'setCxCustomer',
        'customer_present' => 'setCustomerPresent',
        'parent_payment_number' => 'setParentPaymentNumber',
        'additional_data' => 'setAdditionalData',
        'created_date' => 'setCreatedDate',
        'updated_date' => 'setUpdatedDate',
        'created_by' => 'setCreatedBy',
        'updated_by' => 'setUpdatedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'self' => 'getSelf',
        'co_retail_activity' => 'getCoRetailActivity',
        'payment_number' => 'getPaymentNumber',
        'type' => 'getType',
        'amount' => 'getAmount',
        'currency_code' => 'getCurrencyCode',
        'gateway_name' => 'getGatewayName',
        'payment_method' => 'getPaymentMethod',
        'card_type' => 'getCardType',
        'debit_card' => 'getDebitCard',
        'authorized' => 'getAuthorized',
        'authorization_number' => 'getAuthorizationNumber',
        'authorization_date' => 'getAuthorizationDate',
        'authorization_code' => 'getAuthorizationCode',
        'authorization_message' => 'getAuthorizationMessage',
        'authorization_only' => 'getAuthorizationOnly',
        'voided' => 'getVoided',
        'test_transaction' => 'getTestTransaction',
        'cx_customer' => 'getCxCustomer',
        'customer_present' => 'getCustomerPresent',
        'parent_payment_number' => 'getParentPaymentNumber',
        'additional_data' => 'getAdditionalData',
        'created_date' => 'getCreatedDate',
        'updated_date' => 'getUpdatedDate',
        'created_by' => 'getCreatedBy',
        'updated_by' => 'getUpdatedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_AUTHORIZATION = 'Authorization';
    public const TYPE_CAPTURE = 'Capture';
    public const TYPE_PAYMENT = 'Payment';
    public const TYPE_REFUND = 'Refund';
    public const TYPE_VOID = 'Void';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_AUTHORIZATION,
            self::TYPE_CAPTURE,
            self::TYPE_PAYMENT,
            self::TYPE_REFUND,
            self::TYPE_VOID,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('self', $data ?? [], null);
        $this->setIfExists('co_retail_activity', $data ?? [], null);
        $this->setIfExists('payment_number', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('currency_code', $data ?? [], null);
        $this->setIfExists('gateway_name', $data ?? [], null);
        $this->setIfExists('payment_method', $data ?? [], null);
        $this->setIfExists('card_type', $data ?? [], null);
        $this->setIfExists('debit_card', $data ?? [], null);
        $this->setIfExists('authorized', $data ?? [], null);
        $this->setIfExists('authorization_number', $data ?? [], null);
        $this->setIfExists('authorization_date', $data ?? [], null);
        $this->setIfExists('authorization_code', $data ?? [], null);
        $this->setIfExists('authorization_message', $data ?? [], null);
        $this->setIfExists('authorization_only', $data ?? [], null);
        $this->setIfExists('voided', $data ?? [], null);
        $this->setIfExists('test_transaction', $data ?? [], null);
        $this->setIfExists('cx_customer', $data ?? [], null);
        $this->setIfExists('customer_present', $data ?? [], null);
        $this->setIfExists('parent_payment_number', $data ?? [], null);
        $this->setIfExists('additional_data', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('updated_date', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('updated_by', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['payment_number']) && (mb_strlen($this->container['payment_number']) > 100)) {
            $invalidProperties[] = "invalid value for 'payment_number', the character length must be smaller than or equal to 100.";
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if (($this->container['amount'] > 0)) {
            $invalidProperties[] = "invalid value for 'amount', must be smaller than or equal to 0.";
        }

        if (($this->container['amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'amount', must be bigger than or equal to 0.";
        }

        if ($this->container['currency_code'] === null) {
            $invalidProperties[] = "'currency_code' can't be null";
        }
        if ((mb_strlen($this->container['currency_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'currency_code', the character length must be smaller than or equal to 10.";
        }

        if (!preg_match("/.*\\S.*/", $this->container['currency_code'])) {
            $invalidProperties[] = "invalid value for 'currency_code', must be conform to the pattern /.*\\S.*/.";
        }

        if (!is_null($this->container['gateway_name']) && (mb_strlen($this->container['gateway_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'gateway_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['payment_method']) && (mb_strlen($this->container['payment_method']) > 20)) {
            $invalidProperties[] = "invalid value for 'payment_method', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['card_type']) && (mb_strlen($this->container['card_type']) > 20)) {
            $invalidProperties[] = "invalid value for 'card_type', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['authorization_number']) && (mb_strlen($this->container['authorization_number']) > 100)) {
            $invalidProperties[] = "invalid value for 'authorization_number', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['authorization_code']) && (mb_strlen($this->container['authorization_code']) > 50)) {
            $invalidProperties[] = "invalid value for 'authorization_code', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['parent_payment_number']) && (mb_strlen($this->container['parent_payment_number']) > 100)) {
            $invalidProperties[] = "invalid value for 'parent_payment_number', the character length must be smaller than or equal to 100.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets self
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $self self
     *
     * @return self
     */
    public function setSelf($self)
    {
        if (is_null($self)) {
            throw new \InvalidArgumentException('non-nullable self cannot be null');
        }
        $this->container['self'] = $self;

        return $this;
    }

    /**
     * Gets co_retail_activity
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getCoRetailActivity()
    {
        return $this->container['co_retail_activity'];
    }

    /**
     * Sets co_retail_activity
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $co_retail_activity co_retail_activity
     *
     * @return self
     */
    public function setCoRetailActivity($co_retail_activity)
    {
        if (is_null($co_retail_activity)) {
            array_push($this->openAPINullablesSetToNull, 'co_retail_activity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('co_retail_activity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['co_retail_activity'] = $co_retail_activity;

        return $this;
    }

    /**
     * Gets payment_number
     *
     * @return string|null
     */
    public function getPaymentNumber()
    {
        return $this->container['payment_number'];
    }

    /**
     * Sets payment_number
     *
     * @param string|null $payment_number ID number for the payment.
     *
     * @return self
     */
    public function setPaymentNumber($payment_number)
    {
        if (is_null($payment_number)) {
            array_push($this->openAPINullablesSetToNull, 'payment_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($payment_number) && (mb_strlen($payment_number) > 100)) {
            throw new \InvalidArgumentException('invalid length for $payment_number when calling CustomerOrderPaymentDTO., must be smaller than or equal to 100.');
        }

        $this->container['payment_number'] = $payment_number;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Type of payment.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount Amount of the payment.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }

        if (($amount > 0)) {
            throw new \InvalidArgumentException('invalid value for $amount when calling CustomerOrderPaymentDTO., must be smaller than or equal to 0.');
        }
        if (($amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $amount when calling CustomerOrderPaymentDTO., must be bigger than or equal to 0.');
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code Type of currency that was used for the payment, such as `USD`.
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        if (is_null($currency_code)) {
            throw new \InvalidArgumentException('non-nullable currency_code cannot be null');
        }
        if ((mb_strlen($currency_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $currency_code when calling CustomerOrderPaymentDTO., must be smaller than or equal to 10.');
        }
        if ((!preg_match("/.*\\S.*/", ObjectSerializer::toString($currency_code)))) {
            throw new \InvalidArgumentException("invalid value for \$currency_code when calling CustomerOrderPaymentDTO., must conform to the pattern /.*\\S.*/.");
        }

        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets gateway_name
     *
     * @return string|null
     */
    public function getGatewayName()
    {
        return $this->container['gateway_name'];
    }

    /**
     * Sets gateway_name
     *
     * @param string|null $gateway_name Name of the gateway that was used to make the payment.
     *
     * @return self
     */
    public function setGatewayName($gateway_name)
    {
        if (is_null($gateway_name)) {
            array_push($this->openAPINullablesSetToNull, 'gateway_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gateway_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($gateway_name) && (mb_strlen($gateway_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $gateway_name when calling CustomerOrderPaymentDTO., must be smaller than or equal to 50.');
        }

        $this->container['gateway_name'] = $gateway_name;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return string|null
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param string|null $payment_method Method of payment, such as `CreditCard`.
     *
     * @return self
     */
    public function setPaymentMethod($payment_method)
    {
        if (is_null($payment_method)) {
            array_push($this->openAPINullablesSetToNull, 'payment_method');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_method', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($payment_method) && (mb_strlen($payment_method) > 20)) {
            throw new \InvalidArgumentException('invalid length for $payment_method when calling CustomerOrderPaymentDTO., must be smaller than or equal to 20.');
        }

        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets card_type
     *
     * @return string|null
     */
    public function getCardType()
    {
        return $this->container['card_type'];
    }

    /**
     * Sets card_type
     *
     * @param string|null $card_type Type of credit or debit card that was used to make the payment.
     *
     * @return self
     */
    public function setCardType($card_type)
    {
        if (is_null($card_type)) {
            array_push($this->openAPINullablesSetToNull, 'card_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('card_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($card_type) && (mb_strlen($card_type) > 20)) {
            throw new \InvalidArgumentException('invalid length for $card_type when calling CustomerOrderPaymentDTO., must be smaller than or equal to 20.');
        }

        $this->container['card_type'] = $card_type;

        return $this;
    }

    /**
     * Gets debit_card
     *
     * @return bool|null
     */
    public function getDebitCard()
    {
        return $this->container['debit_card'];
    }

    /**
     * Sets debit_card
     *
     * @param bool|null $debit_card Whether the card that was used for the payment was a debit card.
     *
     * @return self
     */
    public function setDebitCard($debit_card)
    {
        if (is_null($debit_card)) {
            throw new \InvalidArgumentException('non-nullable debit_card cannot be null');
        }
        $this->container['debit_card'] = $debit_card;

        return $this;
    }

    /**
     * Gets authorized
     *
     * @return bool|null
     */
    public function getAuthorized()
    {
        return $this->container['authorized'];
    }

    /**
     * Sets authorized
     *
     * @param bool|null $authorized Whether the payment was authorized.
     *
     * @return self
     */
    public function setAuthorized($authorized)
    {
        if (is_null($authorized)) {
            throw new \InvalidArgumentException('non-nullable authorized cannot be null');
        }
        $this->container['authorized'] = $authorized;

        return $this;
    }

    /**
     * Gets authorization_number
     *
     * @return string|null
     */
    public function getAuthorizationNumber()
    {
        return $this->container['authorization_number'];
    }

    /**
     * Sets authorization_number
     *
     * @param string|null $authorization_number Authorization number for the payment.
     *
     * @return self
     */
    public function setAuthorizationNumber($authorization_number)
    {
        if (is_null($authorization_number)) {
            array_push($this->openAPINullablesSetToNull, 'authorization_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('authorization_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($authorization_number) && (mb_strlen($authorization_number) > 100)) {
            throw new \InvalidArgumentException('invalid length for $authorization_number when calling CustomerOrderPaymentDTO., must be smaller than or equal to 100.');
        }

        $this->container['authorization_number'] = $authorization_number;

        return $this;
    }

    /**
     * Gets authorization_date
     *
     * @return \DateTime|null
     */
    public function getAuthorizationDate()
    {
        return $this->container['authorization_date'];
    }

    /**
     * Sets authorization_date
     *
     * @param \DateTime|null $authorization_date Date and time when the payment was authorized.
     *
     * @return self
     */
    public function setAuthorizationDate($authorization_date)
    {
        if (is_null($authorization_date)) {
            array_push($this->openAPINullablesSetToNull, 'authorization_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('authorization_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['authorization_date'] = $authorization_date;

        return $this;
    }

    /**
     * Gets authorization_code
     *
     * @return string|null
     */
    public function getAuthorizationCode()
    {
        return $this->container['authorization_code'];
    }

    /**
     * Sets authorization_code
     *
     * @param string|null $authorization_code Authorization code for the payment.
     *
     * @return self
     */
    public function setAuthorizationCode($authorization_code)
    {
        if (is_null($authorization_code)) {
            array_push($this->openAPINullablesSetToNull, 'authorization_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('authorization_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($authorization_code) && (mb_strlen($authorization_code) > 50)) {
            throw new \InvalidArgumentException('invalid length for $authorization_code when calling CustomerOrderPaymentDTO., must be smaller than or equal to 50.');
        }

        $this->container['authorization_code'] = $authorization_code;

        return $this;
    }

    /**
     * Gets authorization_message
     *
     * @return string|null
     */
    public function getAuthorizationMessage()
    {
        return $this->container['authorization_message'];
    }

    /**
     * Sets authorization_message
     *
     * @param string|null $authorization_message Authorization message for the payment.
     *
     * @return self
     */
    public function setAuthorizationMessage($authorization_message)
    {
        if (is_null($authorization_message)) {
            array_push($this->openAPINullablesSetToNull, 'authorization_message');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('authorization_message', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['authorization_message'] = $authorization_message;

        return $this;
    }

    /**
     * Gets authorization_only
     *
     * @return bool|null
     */
    public function getAuthorizationOnly()
    {
        return $this->container['authorization_only'];
    }

    /**
     * Sets authorization_only
     *
     * @param bool|null $authorization_only Whether the payment was only an authorization.
     *
     * @return self
     */
    public function setAuthorizationOnly($authorization_only)
    {
        if (is_null($authorization_only)) {
            throw new \InvalidArgumentException('non-nullable authorization_only cannot be null');
        }
        $this->container['authorization_only'] = $authorization_only;

        return $this;
    }

    /**
     * Gets voided
     *
     * @return bool|null
     */
    public function getVoided()
    {
        return $this->container['voided'];
    }

    /**
     * Sets voided
     *
     * @param bool|null $voided Whether the payment was voided.
     *
     * @return self
     */
    public function setVoided($voided)
    {
        if (is_null($voided)) {
            throw new \InvalidArgumentException('non-nullable voided cannot be null');
        }
        $this->container['voided'] = $voided;

        return $this;
    }

    /**
     * Gets test_transaction
     *
     * @return bool|null
     */
    public function getTestTransaction()
    {
        return $this->container['test_transaction'];
    }

    /**
     * Sets test_transaction
     *
     * @param bool|null $test_transaction Whether the transaction for the payment was a test transaction.
     *
     * @return self
     */
    public function setTestTransaction($test_transaction)
    {
        if (is_null($test_transaction)) {
            throw new \InvalidArgumentException('non-nullable test_transaction cannot be null');
        }
        $this->container['test_transaction'] = $test_transaction;

        return $this;
    }

    /**
     * Gets cx_customer
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getCxCustomer()
    {
        return $this->container['cx_customer'];
    }

    /**
     * Sets cx_customer
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $cx_customer cx_customer
     *
     * @return self
     */
    public function setCxCustomer($cx_customer)
    {
        if (is_null($cx_customer)) {
            array_push($this->openAPINullablesSetToNull, 'cx_customer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cx_customer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cx_customer'] = $cx_customer;

        return $this;
    }

    /**
     * Gets customer_present
     *
     * @return bool|null
     */
    public function getCustomerPresent()
    {
        return $this->container['customer_present'];
    }

    /**
     * Sets customer_present
     *
     * @param bool|null $customer_present Whether the customer was present for the payment.
     *
     * @return self
     */
    public function setCustomerPresent($customer_present)
    {
        if (is_null($customer_present)) {
            throw new \InvalidArgumentException('non-nullable customer_present cannot be null');
        }
        $this->container['customer_present'] = $customer_present;

        return $this;
    }

    /**
     * Gets parent_payment_number
     *
     * @return string|null
     */
    public function getParentPaymentNumber()
    {
        return $this->container['parent_payment_number'];
    }

    /**
     * Sets parent_payment_number
     *
     * @param string|null $parent_payment_number ID number for the parent payment that is associated with this payment.
     *
     * @return self
     */
    public function setParentPaymentNumber($parent_payment_number)
    {
        if (is_null($parent_payment_number)) {
            array_push($this->openAPINullablesSetToNull, 'parent_payment_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent_payment_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($parent_payment_number) && (mb_strlen($parent_payment_number) > 100)) {
            throw new \InvalidArgumentException('invalid length for $parent_payment_number when calling CustomerOrderPaymentDTO., must be smaller than or equal to 100.');
        }

        $this->container['parent_payment_number'] = $parent_payment_number;

        return $this;
    }

    /**
     * Gets additional_data
     *
     * @return string|null
     */
    public function getAdditionalData()
    {
        return $this->container['additional_data'];
    }

    /**
     * Sets additional_data
     *
     * @param string|null $additional_data Additional data associated with the payment.
     *
     * @return self
     */
    public function setAdditionalData($additional_data)
    {
        if (is_null($additional_data)) {
            array_push($this->openAPINullablesSetToNull, 'additional_data');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_data', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['additional_data'] = $additional_data;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime|null $created_date Date and time that the payment was created.
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets updated_date
     *
     * @return \DateTime|null
     */
    public function getUpdatedDate()
    {
        return $this->container['updated_date'];
    }

    /**
     * Sets updated_date
     *
     * @param \DateTime|null $updated_date Date and time that the payment was last updated.
     *
     * @return self
     */
    public function setUpdatedDate($updated_date)
    {
        if (is_null($updated_date)) {
            throw new \InvalidArgumentException('non-nullable updated_date cannot be null');
        }
        $this->container['updated_date'] = $updated_date;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            throw new \InvalidArgumentException('non-nullable created_by cannot be null');
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $updated_by updated_by
     *
     * @return self
     */
    public function setUpdatedBy($updated_by)
    {
        if (is_null($updated_by)) {
            throw new \InvalidArgumentException('non-nullable updated_by cannot be null');
        }
        $this->container['updated_by'] = $updated_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


