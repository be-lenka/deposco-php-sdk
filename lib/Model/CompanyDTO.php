<?php
/**
 * CompanyDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deposco API
 *
 * Welcome to the Deposco API Reference! The Deposco API enables you to integrate your system with Deposco.  * Integrate a product information system (PIM) by creating and retrieving data for items, packs, UPCs, and kits. * Set up warehouse data by creating facilities, zones, locations, and storage details. * Create inbound orders that can be received and outbound orders that can be fulfilled with Deposco warehouse management processes.  This reference provides details on available operations, endpoints, parameters, schemas, and responses.  Example requests and responses are also available for you to use as a reference. You can copy the examples to use as a starting point for your own requests.  Review the guides to learn how the API is used in common business scenarios such as setting up the warehouse and integrating a Product Information Management (PIM) system.  When you're ready to get started, register for a developer account and then log in to create your application in the developer portal.
 *
 * The version of the OpenAPI document: 2.0.2519
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\Deposco\Model;

use \ArrayAccess;
use \BeLenka\Deposco\ObjectSerializer;

/**
 * CompanyDTO Class Doc Comment
 *
 * @category Class
 * @description Company record with contact and address information for a business or a business unit within a company. Also used for tenant companies in 3PL environments.
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CompanyDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CompanyDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'self' => '\BeLenka\Deposco\Model\EntityRef',
        'code' => 'string',
        'name' => 'string',
        'description' => 'string',
        'active' => 'bool',
        'contact' => '\BeLenka\Deposco\Model\CompanyDTOContact',
        'address' => '\BeLenka\Deposco\Model\CompanyDTOAddress',
        'website' => 'string',
        'industry' => 'string',
        'number_of_employees' => 'int',
        'annual_revenue' => 'int',
        'doing_business_as' => 'string',
        'naics' => 'string',
        'sic' => 'string',
        'locale' => '\BeLenka\Deposco\Model\Locale',
        'date_format' => '\BeLenka\Deposco\Model\DateFormat',
        'start_day_of_week' => 'string',
        'time_zone' => '\BeLenka\Deposco\Model\TimeZone',
        'packing_slip_level' => 'string',
        'packing_slip_report' => 'string',
        'use_sas70_compliance' => 'bool',
        'uccean_company_number' => 'string',
        'sscc_expansion_digit' => 'int',
        'created_date' => '\DateTime',
        'updated_date' => '\DateTime',
        'created_by' => '\BeLenka\Deposco\Model\EntityRef',
        'updated_by' => '\BeLenka\Deposco\Model\EntityRef'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'self' => null,
        'code' => null,
        'name' => null,
        'description' => null,
        'active' => null,
        'contact' => null,
        'address' => null,
        'website' => null,
        'industry' => null,
        'number_of_employees' => 'int64',
        'annual_revenue' => 'double',
        'doing_business_as' => null,
        'naics' => null,
        'sic' => null,
        'locale' => null,
        'date_format' => null,
        'start_day_of_week' => null,
        'time_zone' => null,
        'packing_slip_level' => null,
        'packing_slip_report' => null,
        'use_sas70_compliance' => null,
        'uccean_company_number' => null,
        'sscc_expansion_digit' => null,
        'created_date' => 'date-time',
        'updated_date' => 'date-time',
        'created_by' => null,
        'updated_by' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'self' => false,
        'code' => false,
        'name' => true,
        'description' => true,
        'active' => false,
        'contact' => false,
        'address' => false,
        'website' => true,
        'industry' => true,
        'number_of_employees' => false,
        'annual_revenue' => false,
        'doing_business_as' => true,
        'naics' => true,
        'sic' => true,
        'locale' => true,
        'date_format' => true,
        'start_day_of_week' => true,
        'time_zone' => true,
        'packing_slip_level' => true,
        'packing_slip_report' => false,
        'use_sas70_compliance' => false,
        'uccean_company_number' => true,
        'sscc_expansion_digit' => false,
        'created_date' => false,
        'updated_date' => false,
        'created_by' => false,
        'updated_by' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'self' => 'self',
        'code' => 'code',
        'name' => 'name',
        'description' => 'description',
        'active' => 'active',
        'contact' => 'contact',
        'address' => 'address',
        'website' => 'website',
        'industry' => 'industry',
        'number_of_employees' => 'numberOfEmployees',
        'annual_revenue' => 'annualRevenue',
        'doing_business_as' => 'doingBusinessAs',
        'naics' => 'naics',
        'sic' => 'sic',
        'locale' => 'locale',
        'date_format' => 'dateFormat',
        'start_day_of_week' => 'startDayOfWeek',
        'time_zone' => 'timeZone',
        'packing_slip_level' => 'packingSlipLevel',
        'packing_slip_report' => 'packingSlipReport',
        'use_sas70_compliance' => 'useSAS70Compliance',
        'uccean_company_number' => 'ucceanCompanyNumber',
        'sscc_expansion_digit' => 'ssccExpansionDigit',
        'created_date' => 'createdDate',
        'updated_date' => 'updatedDate',
        'created_by' => 'createdBy',
        'updated_by' => 'updatedBy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'self' => 'setSelf',
        'code' => 'setCode',
        'name' => 'setName',
        'description' => 'setDescription',
        'active' => 'setActive',
        'contact' => 'setContact',
        'address' => 'setAddress',
        'website' => 'setWebsite',
        'industry' => 'setIndustry',
        'number_of_employees' => 'setNumberOfEmployees',
        'annual_revenue' => 'setAnnualRevenue',
        'doing_business_as' => 'setDoingBusinessAs',
        'naics' => 'setNaics',
        'sic' => 'setSic',
        'locale' => 'setLocale',
        'date_format' => 'setDateFormat',
        'start_day_of_week' => 'setStartDayOfWeek',
        'time_zone' => 'setTimeZone',
        'packing_slip_level' => 'setPackingSlipLevel',
        'packing_slip_report' => 'setPackingSlipReport',
        'use_sas70_compliance' => 'setUseSas70Compliance',
        'uccean_company_number' => 'setUcceanCompanyNumber',
        'sscc_expansion_digit' => 'setSsccExpansionDigit',
        'created_date' => 'setCreatedDate',
        'updated_date' => 'setUpdatedDate',
        'created_by' => 'setCreatedBy',
        'updated_by' => 'setUpdatedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'self' => 'getSelf',
        'code' => 'getCode',
        'name' => 'getName',
        'description' => 'getDescription',
        'active' => 'getActive',
        'contact' => 'getContact',
        'address' => 'getAddress',
        'website' => 'getWebsite',
        'industry' => 'getIndustry',
        'number_of_employees' => 'getNumberOfEmployees',
        'annual_revenue' => 'getAnnualRevenue',
        'doing_business_as' => 'getDoingBusinessAs',
        'naics' => 'getNaics',
        'sic' => 'getSic',
        'locale' => 'getLocale',
        'date_format' => 'getDateFormat',
        'start_day_of_week' => 'getStartDayOfWeek',
        'time_zone' => 'getTimeZone',
        'packing_slip_level' => 'getPackingSlipLevel',
        'packing_slip_report' => 'getPackingSlipReport',
        'use_sas70_compliance' => 'getUseSas70Compliance',
        'uccean_company_number' => 'getUcceanCompanyNumber',
        'sscc_expansion_digit' => 'getSsccExpansionDigit',
        'created_date' => 'getCreatedDate',
        'updated_date' => 'getUpdatedDate',
        'created_by' => 'getCreatedBy',
        'updated_by' => 'getUpdatedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const START_DAY_OF_WEEK_MONDAY = 'Monday';
    public const START_DAY_OF_WEEK_SUNDAY = 'Sunday';
    public const PACKING_SLIP_LEVEL_CONTAINER = 'Container';
    public const PACKING_SLIP_LEVEL_SHIPMENT = 'Shipment';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStartDayOfWeekAllowableValues()
    {
        return [
            self::START_DAY_OF_WEEK_MONDAY,
            self::START_DAY_OF_WEEK_SUNDAY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPackingSlipLevelAllowableValues()
    {
        return [
            self::PACKING_SLIP_LEVEL_CONTAINER,
            self::PACKING_SLIP_LEVEL_SHIPMENT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('self', $data ?? [], null);
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], true);
        $this->setIfExists('contact', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('website', $data ?? [], null);
        $this->setIfExists('industry', $data ?? [], null);
        $this->setIfExists('number_of_employees', $data ?? [], null);
        $this->setIfExists('annual_revenue', $data ?? [], null);
        $this->setIfExists('doing_business_as', $data ?? [], null);
        $this->setIfExists('naics', $data ?? [], null);
        $this->setIfExists('sic', $data ?? [], null);
        $this->setIfExists('locale', $data ?? [], null);
        $this->setIfExists('date_format', $data ?? [], null);
        $this->setIfExists('start_day_of_week', $data ?? [], null);
        $this->setIfExists('time_zone', $data ?? [], null);
        $this->setIfExists('packing_slip_level', $data ?? [], 'Container');
        $this->setIfExists('packing_slip_report', $data ?? [], null);
        $this->setIfExists('use_sas70_compliance', $data ?? [], null);
        $this->setIfExists('uccean_company_number', $data ?? [], null);
        $this->setIfExists('sscc_expansion_digit', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('updated_date', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('updated_by', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        if ((mb_strlen($this->container['code']) > 30)) {
            $invalidProperties[] = "invalid value for 'code', the character length must be smaller than or equal to 30.";
        }

        if (!preg_match("/.*\\S.*/", $this->container['code'])) {
            $invalidProperties[] = "invalid value for 'code', must be conform to the pattern /.*\\S.*/.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 50)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['website']) && (mb_strlen($this->container['website']) > 50)) {
            $invalidProperties[] = "invalid value for 'website', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['industry']) && (mb_strlen($this->container['industry']) > 50)) {
            $invalidProperties[] = "invalid value for 'industry', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['number_of_employees']) && ($this->container['number_of_employees'] > 1000000)) {
            $invalidProperties[] = "invalid value for 'number_of_employees', must be smaller than or equal to 1000000.";
        }

        if (!is_null($this->container['number_of_employees']) && ($this->container['number_of_employees'] < 1)) {
            $invalidProperties[] = "invalid value for 'number_of_employees', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['annual_revenue']) && ($this->container['annual_revenue'] > 10000000000000)) {
            $invalidProperties[] = "invalid value for 'annual_revenue', must be smaller than or equal to 10000000000000.";
        }

        if (!is_null($this->container['annual_revenue']) && ($this->container['annual_revenue'] < -10000000000000)) {
            $invalidProperties[] = "invalid value for 'annual_revenue', must be bigger than or equal to -10000000000000.";
        }

        if (!is_null($this->container['doing_business_as']) && (mb_strlen($this->container['doing_business_as']) > 50)) {
            $invalidProperties[] = "invalid value for 'doing_business_as', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['naics']) && (mb_strlen($this->container['naics']) > 20)) {
            $invalidProperties[] = "invalid value for 'naics', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['sic']) && (mb_strlen($this->container['sic']) > 20)) {
            $invalidProperties[] = "invalid value for 'sic', the character length must be smaller than or equal to 20.";
        }

        $allowedValues = $this->getStartDayOfWeekAllowableValues();
        if (!is_null($this->container['start_day_of_week']) && !in_array($this->container['start_day_of_week'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'start_day_of_week', must be one of '%s'",
                $this->container['start_day_of_week'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPackingSlipLevelAllowableValues();
        if (!is_null($this->container['packing_slip_level']) && !in_array($this->container['packing_slip_level'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'packing_slip_level', must be one of '%s'",
                $this->container['packing_slip_level'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['packing_slip_report']) && (mb_strlen($this->container['packing_slip_report']) > 50)) {
            $invalidProperties[] = "invalid value for 'packing_slip_report', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['uccean_company_number']) && (mb_strlen($this->container['uccean_company_number']) > 10)) {
            $invalidProperties[] = "invalid value for 'uccean_company_number', the character length must be smaller than or equal to 10.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets self
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $self self
     *
     * @return self
     */
    public function setSelf($self)
    {
        if (is_null($self)) {
            throw new \InvalidArgumentException('non-nullable self cannot be null');
        }
        $this->container['self'] = $self;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code Unique, short, alphanumeric code for the company. This code cannot be changed after the company is created.
     *
     * @return self
     */
    public function setCode($code)
    {
        if (is_null($code)) {
            throw new \InvalidArgumentException('non-nullable code cannot be null');
        }
        if ((mb_strlen($code) > 30)) {
            throw new \InvalidArgumentException('invalid length for $code when calling CompanyDTO., must be smaller than or equal to 30.');
        }
        if ((!preg_match("/.*\\S.*/", ObjectSerializer::toString($code)))) {
            throw new \InvalidArgumentException("invalid value for \$code when calling CompanyDTO., must conform to the pattern /.*\\S.*/.");
        }

        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of the company or business unit.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($name) && (mb_strlen($name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CompanyDTO., must be smaller than or equal to 50.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Text that describes or provides additional information for the company or business unit.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active Whether the company is active and available for use.
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return \BeLenka\Deposco\Model\CompanyDTOContact|null
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param \BeLenka\Deposco\Model\CompanyDTOContact|null $contact contact
     *
     * @return self
     */
    public function setContact($contact)
    {
        if (is_null($contact)) {
            throw new \InvalidArgumentException('non-nullable contact cannot be null');
        }
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \BeLenka\Deposco\Model\CompanyDTOAddress|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \BeLenka\Deposco\Model\CompanyDTOAddress|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string|null
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string|null $website URL for the website of the company or business unit.
     *
     * @return self
     */
    public function setWebsite($website)
    {
        if (is_null($website)) {
            array_push($this->openAPINullablesSetToNull, 'website');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('website', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($website) && (mb_strlen($website) > 50)) {
            throw new \InvalidArgumentException('invalid length for $website when calling CompanyDTO., must be smaller than or equal to 50.');
        }

        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets industry
     *
     * @return string|null
     */
    public function getIndustry()
    {
        return $this->container['industry'];
    }

    /**
     * Sets industry
     *
     * @param string|null $industry Industry that the company serves.
     *
     * @return self
     */
    public function setIndustry($industry)
    {
        if (is_null($industry)) {
            array_push($this->openAPINullablesSetToNull, 'industry');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('industry', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($industry) && (mb_strlen($industry) > 50)) {
            throw new \InvalidArgumentException('invalid length for $industry when calling CompanyDTO., must be smaller than or equal to 50.');
        }

        $this->container['industry'] = $industry;

        return $this;
    }

    /**
     * Gets number_of_employees
     *
     * @return int|null
     */
    public function getNumberOfEmployees()
    {
        return $this->container['number_of_employees'];
    }

    /**
     * Sets number_of_employees
     *
     * @param int|null $number_of_employees Number of employees at the company or business unit.
     *
     * @return self
     */
    public function setNumberOfEmployees($number_of_employees)
    {
        if (is_null($number_of_employees)) {
            throw new \InvalidArgumentException('non-nullable number_of_employees cannot be null');
        }

        if (($number_of_employees > 1000000)) {
            throw new \InvalidArgumentException('invalid value for $number_of_employees when calling CompanyDTO., must be smaller than or equal to 1000000.');
        }
        if (($number_of_employees < 1)) {
            throw new \InvalidArgumentException('invalid value for $number_of_employees when calling CompanyDTO., must be bigger than or equal to 1.');
        }

        $this->container['number_of_employees'] = $number_of_employees;

        return $this;
    }

    /**
     * Gets annual_revenue
     *
     * @return int|null
     */
    public function getAnnualRevenue()
    {
        return $this->container['annual_revenue'];
    }

    /**
     * Sets annual_revenue
     *
     * @param int|null $annual_revenue Annual revenue for the company or business unit.
     *
     * @return self
     */
    public function setAnnualRevenue($annual_revenue)
    {
        if (is_null($annual_revenue)) {
            throw new \InvalidArgumentException('non-nullable annual_revenue cannot be null');
        }

        if (($annual_revenue > 10000000000000)) {
            throw new \InvalidArgumentException('invalid value for $annual_revenue when calling CompanyDTO., must be smaller than or equal to 10000000000000.');
        }
        if (($annual_revenue < -10000000000000)) {
            throw new \InvalidArgumentException('invalid value for $annual_revenue when calling CompanyDTO., must be bigger than or equal to -10000000000000.');
        }

        $this->container['annual_revenue'] = $annual_revenue;

        return $this;
    }

    /**
     * Gets doing_business_as
     *
     * @return string|null
     */
    public function getDoingBusinessAs()
    {
        return $this->container['doing_business_as'];
    }

    /**
     * Sets doing_business_as
     *
     * @param string|null $doing_business_as Trade name or \"doing business as\" (DBA) name for the company or business unit.
     *
     * @return self
     */
    public function setDoingBusinessAs($doing_business_as)
    {
        if (is_null($doing_business_as)) {
            array_push($this->openAPINullablesSetToNull, 'doing_business_as');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('doing_business_as', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($doing_business_as) && (mb_strlen($doing_business_as) > 50)) {
            throw new \InvalidArgumentException('invalid length for $doing_business_as when calling CompanyDTO., must be smaller than or equal to 50.');
        }

        $this->container['doing_business_as'] = $doing_business_as;

        return $this;
    }

    /**
     * Gets naics
     *
     * @return string|null
     */
    public function getNaics()
    {
        return $this->container['naics'];
    }

    /**
     * Sets naics
     *
     * @param string|null $naics North American Industry Classification System (NAICS) code for the company.
     *
     * @return self
     */
    public function setNaics($naics)
    {
        if (is_null($naics)) {
            array_push($this->openAPINullablesSetToNull, 'naics');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('naics', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($naics) && (mb_strlen($naics) > 20)) {
            throw new \InvalidArgumentException('invalid length for $naics when calling CompanyDTO., must be smaller than or equal to 20.');
        }

        $this->container['naics'] = $naics;

        return $this;
    }

    /**
     * Gets sic
     *
     * @return string|null
     */
    public function getSic()
    {
        return $this->container['sic'];
    }

    /**
     * Sets sic
     *
     * @param string|null $sic Standard Industrial Classification (SIC) code for the company.
     *
     * @return self
     */
    public function setSic($sic)
    {
        if (is_null($sic)) {
            array_push($this->openAPINullablesSetToNull, 'sic');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sic', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sic) && (mb_strlen($sic) > 20)) {
            throw new \InvalidArgumentException('invalid length for $sic when calling CompanyDTO., must be smaller than or equal to 20.');
        }

        $this->container['sic'] = $sic;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return \BeLenka\Deposco\Model\Locale|null
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param \BeLenka\Deposco\Model\Locale|null $locale locale
     *
     * @return self
     */
    public function setLocale($locale)
    {
        if (is_null($locale)) {
            array_push($this->openAPINullablesSetToNull, 'locale');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('locale', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets date_format
     *
     * @return \BeLenka\Deposco\Model\DateFormat|null
     */
    public function getDateFormat()
    {
        return $this->container['date_format'];
    }

    /**
     * Sets date_format
     *
     * @param \BeLenka\Deposco\Model\DateFormat|null $date_format date_format
     *
     * @return self
     */
    public function setDateFormat($date_format)
    {
        if (is_null($date_format)) {
            array_push($this->openAPINullablesSetToNull, 'date_format');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date_format', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['date_format'] = $date_format;

        return $this;
    }

    /**
     * Gets start_day_of_week
     *
     * @return string|null
     */
    public function getStartDayOfWeek()
    {
        return $this->container['start_day_of_week'];
    }

    /**
     * Sets start_day_of_week
     *
     * @param string|null $start_day_of_week Whether Sunday or Monday is the first day of the week when users who are assigned to the company select a date from a calendar control.
     *
     * @return self
     */
    public function setStartDayOfWeek($start_day_of_week)
    {
        if (is_null($start_day_of_week)) {
            array_push($this->openAPINullablesSetToNull, 'start_day_of_week');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('start_day_of_week', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getStartDayOfWeekAllowableValues();
        if (!is_null($start_day_of_week) && !in_array($start_day_of_week, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'start_day_of_week', must be one of '%s'",
                    $start_day_of_week,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['start_day_of_week'] = $start_day_of_week;

        return $this;
    }

    /**
     * Gets time_zone
     *
     * @return \BeLenka\Deposco\Model\TimeZone|null
     */
    public function getTimeZone()
    {
        return $this->container['time_zone'];
    }

    /**
     * Sets time_zone
     *
     * @param \BeLenka\Deposco\Model\TimeZone|null $time_zone time_zone
     *
     * @return self
     */
    public function setTimeZone($time_zone)
    {
        if (is_null($time_zone)) {
            array_push($this->openAPINullablesSetToNull, 'time_zone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('time_zone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['time_zone'] = $time_zone;

        return $this;
    }

    /**
     * Gets packing_slip_level
     *
     * @return string|null
     */
    public function getPackingSlipLevel()
    {
        return $this->container['packing_slip_level'];
    }

    /**
     * Sets packing_slip_level
     *
     * @param string|null $packing_slip_level Whether packing slips for orders that are associated with the company are printed at either the `Shipment` level or at the shipping `Container` level.
     *
     * @return self
     */
    public function setPackingSlipLevel($packing_slip_level)
    {
        if (is_null($packing_slip_level)) {
            array_push($this->openAPINullablesSetToNull, 'packing_slip_level');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('packing_slip_level', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getPackingSlipLevelAllowableValues();
        if (!is_null($packing_slip_level) && !in_array($packing_slip_level, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'packing_slip_level', must be one of '%s'",
                    $packing_slip_level,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['packing_slip_level'] = $packing_slip_level;

        return $this;
    }

    /**
     * Gets packing_slip_report
     *
     * @return string|null
     */
    public function getPackingSlipReport()
    {
        return $this->container['packing_slip_report'];
    }

    /**
     * Sets packing_slip_report
     *
     * @param string|null $packing_slip_report Name of the global (Pentaho) report that is used for printing packing slips for orders that are associated with the company.
     *
     * @return self
     */
    public function setPackingSlipReport($packing_slip_report)
    {
        if (is_null($packing_slip_report)) {
            throw new \InvalidArgumentException('non-nullable packing_slip_report cannot be null');
        }
        if ((mb_strlen($packing_slip_report) > 50)) {
            throw new \InvalidArgumentException('invalid length for $packing_slip_report when calling CompanyDTO., must be smaller than or equal to 50.');
        }

        $this->container['packing_slip_report'] = $packing_slip_report;

        return $this;
    }

    /**
     * Gets use_sas70_compliance
     *
     * @return bool|null
     */
    public function getUseSas70Compliance()
    {
        return $this->container['use_sas70_compliance'];
    }

    /**
     * Sets use_sas70_compliance
     *
     * @param bool|null $use_sas70_compliance Whether to override the configured password policies and enforce more stringent requirements such as requiring all characters in passwords to be unique and requiring passwords to be different than the previous four passwords.
     *
     * @return self
     */
    public function setUseSas70Compliance($use_sas70_compliance)
    {
        if (is_null($use_sas70_compliance)) {
            throw new \InvalidArgumentException('non-nullable use_sas70_compliance cannot be null');
        }
        $this->container['use_sas70_compliance'] = $use_sas70_compliance;

        return $this;
    }

    /**
     * Gets uccean_company_number
     *
     * @return string|null
     */
    public function getUcceanCompanyNumber()
    {
        return $this->container['uccean_company_number'];
    }

    /**
     * Sets uccean_company_number
     *
     * @param string|null $uccean_company_number Prefix that identifies the company and is used to generate serial shipping container codes (SSCCs) for shipping labels to retailers that require SSCC-18 codes. The prefix should be between 7 and 10 digits.
     *
     * @return self
     */
    public function setUcceanCompanyNumber($uccean_company_number)
    {
        if (is_null($uccean_company_number)) {
            array_push($this->openAPINullablesSetToNull, 'uccean_company_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('uccean_company_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($uccean_company_number) && (mb_strlen($uccean_company_number) > 10)) {
            throw new \InvalidArgumentException('invalid length for $uccean_company_number when calling CompanyDTO., must be smaller than or equal to 10.');
        }

        $this->container['uccean_company_number'] = $uccean_company_number;

        return $this;
    }

    /**
     * Gets sscc_expansion_digit
     *
     * @return int|null
     */
    public function getSsccExpansionDigit()
    {
        return $this->container['sscc_expansion_digit'];
    }

    /**
     * Sets sscc_expansion_digit
     *
     * @param int|null $sscc_expansion_digit Extension digit for a Serial Shipping Container Code (SSCC).
     *
     * @return self
     */
    public function setSsccExpansionDigit($sscc_expansion_digit)
    {
        if (is_null($sscc_expansion_digit)) {
            throw new \InvalidArgumentException('non-nullable sscc_expansion_digit cannot be null');
        }
        $this->container['sscc_expansion_digit'] = $sscc_expansion_digit;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime|null $created_date Date and time that the company was created.
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets updated_date
     *
     * @return \DateTime|null
     */
    public function getUpdatedDate()
    {
        return $this->container['updated_date'];
    }

    /**
     * Sets updated_date
     *
     * @param \DateTime|null $updated_date Date and time that the company was last updated.
     *
     * @return self
     */
    public function setUpdatedDate($updated_date)
    {
        if (is_null($updated_date)) {
            throw new \InvalidArgumentException('non-nullable updated_date cannot be null');
        }
        $this->container['updated_date'] = $updated_date;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            throw new \InvalidArgumentException('non-nullable created_by cannot be null');
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $updated_by updated_by
     *
     * @return self
     */
    public function setUpdatedBy($updated_by)
    {
        if (is_null($updated_by)) {
            throw new \InvalidArgumentException('non-nullable updated_by cannot be null');
        }
        $this->container['updated_by'] = $updated_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


