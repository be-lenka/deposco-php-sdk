<?php
/**
 * OutboundTransferOrderLineDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deposco API
 *
 * Welcome to the Deposco API Reference! The Deposco API enables you to integrate your system with Deposco.  * Integrate a product information system (PIM) by creating and retrieving data for items, packs, UPCs, and kits. * Set up warehouse data by creating facilities, zones, locations, and storage details. * Create inbound orders that can be received and outbound orders that can be fulfilled with Deposco warehouse management processes.  This reference provides details on available operations, endpoints, parameters, schemas, and responses.  Example requests and responses are also available for you to use as a reference. You can copy the examples to use as a starting point for your own requests.  Review the guides to learn how the API is used in common business scenarios such as setting up the warehouse and integrating a Product Information Management (PIM) system.  When you're ready to get started, register for a developer account and then log in to create your application in the developer portal.
 *
 * The version of the OpenAPI document: 2.0.2519
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\Deposco\Model;

use \ArrayAccess;
use \BeLenka\Deposco\ObjectSerializer;

/**
 * OutboundTransferOrderLineDTO Class Doc Comment
 *
 * @category Class
 * @description Order line for an outbound transfer order, which identifies the quantity and pack for an item that is transferred from one facility to another.
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OutboundTransferOrderLineDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OutboundTransferOrderLineDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'self' => '\BeLenka\Deposco\Model\EntityRef',
        'business_unit' => '\BeLenka\Deposco\Model\EntityRef',
        'line_number' => 'string',
        'customer_line_number' => 'string',
        'related_order_line' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'sort_order' => 'int',
        'order_header' => '\BeLenka\Deposco\Model\EntityRef',
        'item' => '\BeLenka\Deposco\Model\EntityRef',
        'pack' => '\BeLenka\Deposco\Model\EntityRef',
        'description' => 'string',
        'order_pack_quantity' => 'int',
        'canceled_pack_quantity' => 'int',
        'lot_number' => 'string',
        'born_on_date' => '\DateTime',
        'expiration_date' => '\DateTime',
        'product_code' => 'string',
        'inventory_condition' => 'string',
        'inventory_attribute1' => 'string',
        'inventory_attribute2' => 'string',
        'planned_ship_date' => '\DateTime',
        'planned_arrival_date' => '\DateTime',
        'unit_price' => 'int',
        'unit_cost' => 'int',
        'price_code' => 'string',
        'line_total' => 'int',
        'taxable' => 'bool',
        'tax_cost' => 'int',
        'taxable_total' => 'int',
        'untaxable_total' => 'int',
        'extended_total' => 'int',
        'discount_amount' => 'int',
        'shipping_amount' => 'int',
        'weight' => '\BeLenka\Deposco\Model\BaseOrderLineDTOWeight',
        'import_reference' => 'string',
        'export_reference' => 'string',
        'custom_attribute1' => 'string',
        'custom_attribute2' => 'string',
        'custom_attribute3' => 'string',
        'custom_fields' => '\BeLenka\Deposco\Model\CustomFieldDTO[]',
        'notes' => '\BeLenka\Deposco\Model\NoteDTO[]',
        'channels' => '\BeLenka\Deposco\Model\ChannelDTO[]',
        'created_date' => '\DateTime',
        'updated_date' => '\DateTime',
        'created_by' => '\BeLenka\Deposco\Model\EntityRef',
        'updated_by' => '\BeLenka\Deposco\Model\EntityRef',
        'order_line_status' => 'string',
        'ship_from_facility' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'co_line' => '\BeLenka\Deposco\Model\EntityRef',
        'allocated_quantity' => 'int',
        'unallocated_quantity' => 'int',
        'picked_pack_quantity' => 'int',
        'shortage_pack_quantity' => 'int',
        'shipped_pack_quantity' => 'int',
        'preallocated' => 'bool',
        'is_back_ordered' => 'string',
        'directed_to_zone' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'allocate_from_zone' => 'bool',
        'carrier_special_services' => '\BeLenka\Deposco\Model\CarrierSpecialServiceDTO[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'self' => null,
        'business_unit' => null,
        'line_number' => null,
        'customer_line_number' => null,
        'related_order_line' => null,
        'sort_order' => null,
        'order_header' => null,
        'item' => null,
        'pack' => null,
        'description' => null,
        'order_pack_quantity' => 'float',
        'canceled_pack_quantity' => 'float',
        'lot_number' => null,
        'born_on_date' => 'date-time',
        'expiration_date' => 'date-time',
        'product_code' => null,
        'inventory_condition' => null,
        'inventory_attribute1' => null,
        'inventory_attribute2' => null,
        'planned_ship_date' => 'date-time',
        'planned_arrival_date' => 'date-time',
        'unit_price' => 'double',
        'unit_cost' => 'double',
        'price_code' => null,
        'line_total' => 'double',
        'taxable' => null,
        'tax_cost' => 'double',
        'taxable_total' => 'double',
        'untaxable_total' => 'double',
        'extended_total' => 'double',
        'discount_amount' => 'double',
        'shipping_amount' => 'double',
        'weight' => null,
        'import_reference' => null,
        'export_reference' => null,
        'custom_attribute1' => null,
        'custom_attribute2' => null,
        'custom_attribute3' => null,
        'custom_fields' => null,
        'notes' => null,
        'channels' => null,
        'created_date' => 'date-time',
        'updated_date' => 'date-time',
        'created_by' => null,
        'updated_by' => null,
        'order_line_status' => null,
        'ship_from_facility' => null,
        'co_line' => null,
        'allocated_quantity' => 'double',
        'unallocated_quantity' => 'double',
        'picked_pack_quantity' => 'double',
        'shortage_pack_quantity' => 'double',
        'shipped_pack_quantity' => 'double',
        'preallocated' => null,
        'is_back_ordered' => null,
        'directed_to_zone' => null,
        'allocate_from_zone' => null,
        'carrier_special_services' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'self' => false,
        'business_unit' => false,
        'line_number' => false,
        'customer_line_number' => false,
        'related_order_line' => true,
        'sort_order' => false,
        'order_header' => false,
        'item' => false,
        'pack' => false,
        'description' => false,
        'order_pack_quantity' => false,
        'canceled_pack_quantity' => false,
        'lot_number' => false,
        'born_on_date' => false,
        'expiration_date' => false,
        'product_code' => false,
        'inventory_condition' => false,
        'inventory_attribute1' => false,
        'inventory_attribute2' => false,
        'planned_ship_date' => false,
        'planned_arrival_date' => false,
        'unit_price' => false,
        'unit_cost' => false,
        'price_code' => false,
        'line_total' => false,
        'taxable' => false,
        'tax_cost' => false,
        'taxable_total' => false,
        'untaxable_total' => false,
        'extended_total' => false,
        'discount_amount' => false,
        'shipping_amount' => false,
        'weight' => false,
        'import_reference' => false,
        'export_reference' => false,
        'custom_attribute1' => false,
        'custom_attribute2' => false,
        'custom_attribute3' => false,
        'custom_fields' => false,
        'notes' => false,
        'channels' => false,
        'created_date' => false,
        'updated_date' => false,
        'created_by' => false,
        'updated_by' => false,
        'order_line_status' => true,
        'ship_from_facility' => true,
        'co_line' => false,
        'allocated_quantity' => false,
        'unallocated_quantity' => false,
        'picked_pack_quantity' => false,
        'shortage_pack_quantity' => false,
        'shipped_pack_quantity' => false,
        'preallocated' => false,
        'is_back_ordered' => true,
        'directed_to_zone' => true,
        'allocate_from_zone' => false,
        'carrier_special_services' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'self' => 'self',
        'business_unit' => 'businessUnit',
        'line_number' => 'lineNumber',
        'customer_line_number' => 'customerLineNumber',
        'related_order_line' => 'relatedOrderLine',
        'sort_order' => 'sortOrder',
        'order_header' => 'orderHeader',
        'item' => 'item',
        'pack' => 'pack',
        'description' => 'description',
        'order_pack_quantity' => 'orderPackQuantity',
        'canceled_pack_quantity' => 'canceledPackQuantity',
        'lot_number' => 'lotNumber',
        'born_on_date' => 'bornOnDate',
        'expiration_date' => 'expirationDate',
        'product_code' => 'productCode',
        'inventory_condition' => 'inventoryCondition',
        'inventory_attribute1' => 'inventoryAttribute1',
        'inventory_attribute2' => 'inventoryAttribute2',
        'planned_ship_date' => 'plannedShipDate',
        'planned_arrival_date' => 'plannedArrivalDate',
        'unit_price' => 'unitPrice',
        'unit_cost' => 'unitCost',
        'price_code' => 'priceCode',
        'line_total' => 'lineTotal',
        'taxable' => 'taxable',
        'tax_cost' => 'taxCost',
        'taxable_total' => 'taxableTotal',
        'untaxable_total' => 'untaxableTotal',
        'extended_total' => 'extendedTotal',
        'discount_amount' => 'discountAmount',
        'shipping_amount' => 'shippingAmount',
        'weight' => 'weight',
        'import_reference' => 'importReference',
        'export_reference' => 'exportReference',
        'custom_attribute1' => 'customAttribute1',
        'custom_attribute2' => 'customAttribute2',
        'custom_attribute3' => 'customAttribute3',
        'custom_fields' => 'customFields',
        'notes' => 'notes',
        'channels' => 'channels',
        'created_date' => 'createdDate',
        'updated_date' => 'updatedDate',
        'created_by' => 'createdBy',
        'updated_by' => 'updatedBy',
        'order_line_status' => 'orderLineStatus',
        'ship_from_facility' => 'shipFromFacility',
        'co_line' => 'coLine',
        'allocated_quantity' => 'allocatedQuantity',
        'unallocated_quantity' => 'unallocatedQuantity',
        'picked_pack_quantity' => 'pickedPackQuantity',
        'shortage_pack_quantity' => 'shortagePackQuantity',
        'shipped_pack_quantity' => 'shippedPackQuantity',
        'preallocated' => 'preallocated',
        'is_back_ordered' => 'isBackOrdered',
        'directed_to_zone' => 'directedToZone',
        'allocate_from_zone' => 'allocateFromZone',
        'carrier_special_services' => 'carrierSpecialServices'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'self' => 'setSelf',
        'business_unit' => 'setBusinessUnit',
        'line_number' => 'setLineNumber',
        'customer_line_number' => 'setCustomerLineNumber',
        'related_order_line' => 'setRelatedOrderLine',
        'sort_order' => 'setSortOrder',
        'order_header' => 'setOrderHeader',
        'item' => 'setItem',
        'pack' => 'setPack',
        'description' => 'setDescription',
        'order_pack_quantity' => 'setOrderPackQuantity',
        'canceled_pack_quantity' => 'setCanceledPackQuantity',
        'lot_number' => 'setLotNumber',
        'born_on_date' => 'setBornOnDate',
        'expiration_date' => 'setExpirationDate',
        'product_code' => 'setProductCode',
        'inventory_condition' => 'setInventoryCondition',
        'inventory_attribute1' => 'setInventoryAttribute1',
        'inventory_attribute2' => 'setInventoryAttribute2',
        'planned_ship_date' => 'setPlannedShipDate',
        'planned_arrival_date' => 'setPlannedArrivalDate',
        'unit_price' => 'setUnitPrice',
        'unit_cost' => 'setUnitCost',
        'price_code' => 'setPriceCode',
        'line_total' => 'setLineTotal',
        'taxable' => 'setTaxable',
        'tax_cost' => 'setTaxCost',
        'taxable_total' => 'setTaxableTotal',
        'untaxable_total' => 'setUntaxableTotal',
        'extended_total' => 'setExtendedTotal',
        'discount_amount' => 'setDiscountAmount',
        'shipping_amount' => 'setShippingAmount',
        'weight' => 'setWeight',
        'import_reference' => 'setImportReference',
        'export_reference' => 'setExportReference',
        'custom_attribute1' => 'setCustomAttribute1',
        'custom_attribute2' => 'setCustomAttribute2',
        'custom_attribute3' => 'setCustomAttribute3',
        'custom_fields' => 'setCustomFields',
        'notes' => 'setNotes',
        'channels' => 'setChannels',
        'created_date' => 'setCreatedDate',
        'updated_date' => 'setUpdatedDate',
        'created_by' => 'setCreatedBy',
        'updated_by' => 'setUpdatedBy',
        'order_line_status' => 'setOrderLineStatus',
        'ship_from_facility' => 'setShipFromFacility',
        'co_line' => 'setCoLine',
        'allocated_quantity' => 'setAllocatedQuantity',
        'unallocated_quantity' => 'setUnallocatedQuantity',
        'picked_pack_quantity' => 'setPickedPackQuantity',
        'shortage_pack_quantity' => 'setShortagePackQuantity',
        'shipped_pack_quantity' => 'setShippedPackQuantity',
        'preallocated' => 'setPreallocated',
        'is_back_ordered' => 'setIsBackOrdered',
        'directed_to_zone' => 'setDirectedToZone',
        'allocate_from_zone' => 'setAllocateFromZone',
        'carrier_special_services' => 'setCarrierSpecialServices'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'self' => 'getSelf',
        'business_unit' => 'getBusinessUnit',
        'line_number' => 'getLineNumber',
        'customer_line_number' => 'getCustomerLineNumber',
        'related_order_line' => 'getRelatedOrderLine',
        'sort_order' => 'getSortOrder',
        'order_header' => 'getOrderHeader',
        'item' => 'getItem',
        'pack' => 'getPack',
        'description' => 'getDescription',
        'order_pack_quantity' => 'getOrderPackQuantity',
        'canceled_pack_quantity' => 'getCanceledPackQuantity',
        'lot_number' => 'getLotNumber',
        'born_on_date' => 'getBornOnDate',
        'expiration_date' => 'getExpirationDate',
        'product_code' => 'getProductCode',
        'inventory_condition' => 'getInventoryCondition',
        'inventory_attribute1' => 'getInventoryAttribute1',
        'inventory_attribute2' => 'getInventoryAttribute2',
        'planned_ship_date' => 'getPlannedShipDate',
        'planned_arrival_date' => 'getPlannedArrivalDate',
        'unit_price' => 'getUnitPrice',
        'unit_cost' => 'getUnitCost',
        'price_code' => 'getPriceCode',
        'line_total' => 'getLineTotal',
        'taxable' => 'getTaxable',
        'tax_cost' => 'getTaxCost',
        'taxable_total' => 'getTaxableTotal',
        'untaxable_total' => 'getUntaxableTotal',
        'extended_total' => 'getExtendedTotal',
        'discount_amount' => 'getDiscountAmount',
        'shipping_amount' => 'getShippingAmount',
        'weight' => 'getWeight',
        'import_reference' => 'getImportReference',
        'export_reference' => 'getExportReference',
        'custom_attribute1' => 'getCustomAttribute1',
        'custom_attribute2' => 'getCustomAttribute2',
        'custom_attribute3' => 'getCustomAttribute3',
        'custom_fields' => 'getCustomFields',
        'notes' => 'getNotes',
        'channels' => 'getChannels',
        'created_date' => 'getCreatedDate',
        'updated_date' => 'getUpdatedDate',
        'created_by' => 'getCreatedBy',
        'updated_by' => 'getUpdatedBy',
        'order_line_status' => 'getOrderLineStatus',
        'ship_from_facility' => 'getShipFromFacility',
        'co_line' => 'getCoLine',
        'allocated_quantity' => 'getAllocatedQuantity',
        'unallocated_quantity' => 'getUnallocatedQuantity',
        'picked_pack_quantity' => 'getPickedPackQuantity',
        'shortage_pack_quantity' => 'getShortagePackQuantity',
        'shipped_pack_quantity' => 'getShippedPackQuantity',
        'preallocated' => 'getPreallocated',
        'is_back_ordered' => 'getIsBackOrdered',
        'directed_to_zone' => 'getDirectedToZone',
        'allocate_from_zone' => 'getAllocateFromZone',
        'carrier_special_services' => 'getCarrierSpecialServices'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ORDER_LINE_STATUS__NEW = 'New';
    public const ORDER_LINE_STATUS_CANCELED = 'Canceled';
    public const ORDER_LINE_STATUS_COMPLETE = 'Complete';
    public const ORDER_LINE_STATUS_DRAFT = 'Draft';
    public const ORDER_LINE_STATUS_HOLD = 'Hold';
    public const ORDER_LINE_STATUS_PICKING = 'Picking';
    public const ORDER_LINE_STATUS_WAVE_BUILT = 'Wave Built';
    public const ORDER_LINE_STATUS_RELEASED = 'Released';
    public const IS_BACK_ORDERED_BACK_ORDERED = 'Back Ordered';
    public const IS_BACK_ORDERED_NOT_BACK_ORDERED = 'Not Back Ordered';
    public const IS_BACK_ORDERED_EXCEPTION_PICK = 'Exception Pick';
    public const IS_BACK_ORDERED_AWAITING_STOCK_MOVEMENT = 'Awaiting Stock Movement';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrderLineStatusAllowableValues()
    {
        return [
            self::ORDER_LINE_STATUS__NEW,
            self::ORDER_LINE_STATUS_CANCELED,
            self::ORDER_LINE_STATUS_COMPLETE,
            self::ORDER_LINE_STATUS_DRAFT,
            self::ORDER_LINE_STATUS_HOLD,
            self::ORDER_LINE_STATUS_PICKING,
            self::ORDER_LINE_STATUS_WAVE_BUILT,
            self::ORDER_LINE_STATUS_RELEASED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIsBackOrderedAllowableValues()
    {
        return [
            self::IS_BACK_ORDERED_BACK_ORDERED,
            self::IS_BACK_ORDERED_NOT_BACK_ORDERED,
            self::IS_BACK_ORDERED_EXCEPTION_PICK,
            self::IS_BACK_ORDERED_AWAITING_STOCK_MOVEMENT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('self', $data ?? [], null);
        $this->setIfExists('business_unit', $data ?? [], null);
        $this->setIfExists('line_number', $data ?? [], null);
        $this->setIfExists('customer_line_number', $data ?? [], null);
        $this->setIfExists('related_order_line', $data ?? [], null);
        $this->setIfExists('sort_order', $data ?? [], null);
        $this->setIfExists('order_header', $data ?? [], null);
        $this->setIfExists('item', $data ?? [], null);
        $this->setIfExists('pack', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('order_pack_quantity', $data ?? [], null);
        $this->setIfExists('canceled_pack_quantity', $data ?? [], null);
        $this->setIfExists('lot_number', $data ?? [], null);
        $this->setIfExists('born_on_date', $data ?? [], null);
        $this->setIfExists('expiration_date', $data ?? [], null);
        $this->setIfExists('product_code', $data ?? [], null);
        $this->setIfExists('inventory_condition', $data ?? [], null);
        $this->setIfExists('inventory_attribute1', $data ?? [], null);
        $this->setIfExists('inventory_attribute2', $data ?? [], null);
        $this->setIfExists('planned_ship_date', $data ?? [], null);
        $this->setIfExists('planned_arrival_date', $data ?? [], null);
        $this->setIfExists('unit_price', $data ?? [], null);
        $this->setIfExists('unit_cost', $data ?? [], null);
        $this->setIfExists('price_code', $data ?? [], null);
        $this->setIfExists('line_total', $data ?? [], null);
        $this->setIfExists('taxable', $data ?? [], null);
        $this->setIfExists('tax_cost', $data ?? [], null);
        $this->setIfExists('taxable_total', $data ?? [], null);
        $this->setIfExists('untaxable_total', $data ?? [], null);
        $this->setIfExists('extended_total', $data ?? [], null);
        $this->setIfExists('discount_amount', $data ?? [], null);
        $this->setIfExists('shipping_amount', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
        $this->setIfExists('import_reference', $data ?? [], null);
        $this->setIfExists('export_reference', $data ?? [], null);
        $this->setIfExists('custom_attribute1', $data ?? [], null);
        $this->setIfExists('custom_attribute2', $data ?? [], null);
        $this->setIfExists('custom_attribute3', $data ?? [], null);
        $this->setIfExists('custom_fields', $data ?? [], null);
        $this->setIfExists('notes', $data ?? [], null);
        $this->setIfExists('channels', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('updated_date', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('updated_by', $data ?? [], null);
        $this->setIfExists('order_line_status', $data ?? [], null);
        $this->setIfExists('ship_from_facility', $data ?? [], null);
        $this->setIfExists('co_line', $data ?? [], null);
        $this->setIfExists('allocated_quantity', $data ?? [], null);
        $this->setIfExists('unallocated_quantity', $data ?? [], null);
        $this->setIfExists('picked_pack_quantity', $data ?? [], null);
        $this->setIfExists('shortage_pack_quantity', $data ?? [], null);
        $this->setIfExists('shipped_pack_quantity', $data ?? [], null);
        $this->setIfExists('preallocated', $data ?? [], null);
        $this->setIfExists('is_back_ordered', $data ?? [], null);
        $this->setIfExists('directed_to_zone', $data ?? [], null);
        $this->setIfExists('allocate_from_zone', $data ?? [], null);
        $this->setIfExists('carrier_special_services', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['line_number'] === null) {
            $invalidProperties[] = "'line_number' can't be null";
        }
        if ((mb_strlen($this->container['line_number']) > 55)) {
            $invalidProperties[] = "invalid value for 'line_number', the character length must be smaller than or equal to 55.";
        }

        if (!preg_match("/.*\\S.*/", $this->container['line_number'])) {
            $invalidProperties[] = "invalid value for 'line_number', must be conform to the pattern /.*\\S.*/.";
        }

        if ($this->container['customer_line_number'] === null) {
            $invalidProperties[] = "'customer_line_number' can't be null";
        }
        if ((mb_strlen($this->container['customer_line_number']) > 100)) {
            $invalidProperties[] = "invalid value for 'customer_line_number', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 250)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 250.";
        }

        if (!is_null($this->container['order_pack_quantity']) && ($this->container['order_pack_quantity'] > -483344729602260992)) {
            $invalidProperties[] = "invalid value for 'order_pack_quantity', must be smaller than or equal to -483344729602260992.";
        }

        if (!is_null($this->container['order_pack_quantity']) && ($this->container['order_pack_quantity'] < 483344729602260992)) {
            $invalidProperties[] = "invalid value for 'order_pack_quantity', must be bigger than or equal to 483344729602260992.";
        }

        if (!is_null($this->container['canceled_pack_quantity']) && ($this->container['canceled_pack_quantity'] > -483344729602260992)) {
            $invalidProperties[] = "invalid value for 'canceled_pack_quantity', must be smaller than or equal to -483344729602260992.";
        }

        if (!is_null($this->container['canceled_pack_quantity']) && ($this->container['canceled_pack_quantity'] < 483344729602260992)) {
            $invalidProperties[] = "invalid value for 'canceled_pack_quantity', must be bigger than or equal to 483344729602260992.";
        }

        if (!is_null($this->container['lot_number']) && (mb_strlen($this->container['lot_number']) > 200)) {
            $invalidProperties[] = "invalid value for 'lot_number', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['product_code']) && (mb_strlen($this->container['product_code']) > 40)) {
            $invalidProperties[] = "invalid value for 'product_code', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['inventory_condition']) && (mb_strlen($this->container['inventory_condition']) > 255)) {
            $invalidProperties[] = "invalid value for 'inventory_condition', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['inventory_attribute1']) && (mb_strlen($this->container['inventory_attribute1']) > 255)) {
            $invalidProperties[] = "invalid value for 'inventory_attribute1', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['inventory_attribute2']) && (mb_strlen($this->container['inventory_attribute2']) > 255)) {
            $invalidProperties[] = "invalid value for 'inventory_attribute2', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['unit_price']) && ($this->container['unit_price'] > 0)) {
            $invalidProperties[] = "invalid value for 'unit_price', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['unit_price']) && ($this->container['unit_price'] < 0)) {
            $invalidProperties[] = "invalid value for 'unit_price', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['unit_cost']) && ($this->container['unit_cost'] > 0)) {
            $invalidProperties[] = "invalid value for 'unit_cost', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['unit_cost']) && ($this->container['unit_cost'] < 0)) {
            $invalidProperties[] = "invalid value for 'unit_cost', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['price_code']) && (mb_strlen($this->container['price_code']) > 50)) {
            $invalidProperties[] = "invalid value for 'price_code', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['line_total']) && ($this->container['line_total'] > 0)) {
            $invalidProperties[] = "invalid value for 'line_total', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['line_total']) && ($this->container['line_total'] < 0)) {
            $invalidProperties[] = "invalid value for 'line_total', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['tax_cost']) && ($this->container['tax_cost'] > 0)) {
            $invalidProperties[] = "invalid value for 'tax_cost', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['tax_cost']) && ($this->container['tax_cost'] < 0)) {
            $invalidProperties[] = "invalid value for 'tax_cost', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['taxable_total']) && ($this->container['taxable_total'] > 0)) {
            $invalidProperties[] = "invalid value for 'taxable_total', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['taxable_total']) && ($this->container['taxable_total'] < 0)) {
            $invalidProperties[] = "invalid value for 'taxable_total', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['untaxable_total']) && ($this->container['untaxable_total'] > 0)) {
            $invalidProperties[] = "invalid value for 'untaxable_total', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['untaxable_total']) && ($this->container['untaxable_total'] < 0)) {
            $invalidProperties[] = "invalid value for 'untaxable_total', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['extended_total']) && ($this->container['extended_total'] > 0)) {
            $invalidProperties[] = "invalid value for 'extended_total', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['extended_total']) && ($this->container['extended_total'] < 0)) {
            $invalidProperties[] = "invalid value for 'extended_total', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['discount_amount']) && ($this->container['discount_amount'] > 0)) {
            $invalidProperties[] = "invalid value for 'discount_amount', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['discount_amount']) && ($this->container['discount_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'discount_amount', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['shipping_amount']) && ($this->container['shipping_amount'] > 0)) {
            $invalidProperties[] = "invalid value for 'shipping_amount', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['shipping_amount']) && ($this->container['shipping_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'shipping_amount', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['import_reference']) && (mb_strlen($this->container['import_reference']) > 100)) {
            $invalidProperties[] = "invalid value for 'import_reference', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['export_reference']) && (mb_strlen($this->container['export_reference']) > 50)) {
            $invalidProperties[] = "invalid value for 'export_reference', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['custom_attribute1']) && (mb_strlen($this->container['custom_attribute1']) > 400)) {
            $invalidProperties[] = "invalid value for 'custom_attribute1', the character length must be smaller than or equal to 400.";
        }

        if (!is_null($this->container['custom_attribute2']) && (mb_strlen($this->container['custom_attribute2']) > 400)) {
            $invalidProperties[] = "invalid value for 'custom_attribute2', the character length must be smaller than or equal to 400.";
        }

        if (!is_null($this->container['custom_attribute3']) && (mb_strlen($this->container['custom_attribute3']) > 400)) {
            $invalidProperties[] = "invalid value for 'custom_attribute3', the character length must be smaller than or equal to 400.";
        }

        $allowedValues = $this->getOrderLineStatusAllowableValues();
        if (!is_null($this->container['order_line_status']) && !in_array($this->container['order_line_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'order_line_status', must be one of '%s'",
                $this->container['order_line_status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['allocated_quantity']) && ($this->container['allocated_quantity'] > 0)) {
            $invalidProperties[] = "invalid value for 'allocated_quantity', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['allocated_quantity']) && ($this->container['allocated_quantity'] < 0)) {
            $invalidProperties[] = "invalid value for 'allocated_quantity', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['unallocated_quantity']) && ($this->container['unallocated_quantity'] > 0)) {
            $invalidProperties[] = "invalid value for 'unallocated_quantity', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['unallocated_quantity']) && ($this->container['unallocated_quantity'] < 0)) {
            $invalidProperties[] = "invalid value for 'unallocated_quantity', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['picked_pack_quantity']) && ($this->container['picked_pack_quantity'] > 0)) {
            $invalidProperties[] = "invalid value for 'picked_pack_quantity', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['picked_pack_quantity']) && ($this->container['picked_pack_quantity'] < 0)) {
            $invalidProperties[] = "invalid value for 'picked_pack_quantity', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['shortage_pack_quantity']) && ($this->container['shortage_pack_quantity'] > 0)) {
            $invalidProperties[] = "invalid value for 'shortage_pack_quantity', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['shortage_pack_quantity']) && ($this->container['shortage_pack_quantity'] < 0)) {
            $invalidProperties[] = "invalid value for 'shortage_pack_quantity', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['shipped_pack_quantity']) && ($this->container['shipped_pack_quantity'] > 0)) {
            $invalidProperties[] = "invalid value for 'shipped_pack_quantity', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['shipped_pack_quantity']) && ($this->container['shipped_pack_quantity'] < 0)) {
            $invalidProperties[] = "invalid value for 'shipped_pack_quantity', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getIsBackOrderedAllowableValues();
        if (!is_null($this->container['is_back_ordered']) && !in_array($this->container['is_back_ordered'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'is_back_ordered', must be one of '%s'",
                $this->container['is_back_ordered'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets self
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $self self
     *
     * @return self
     */
    public function setSelf($self)
    {
        if (is_null($self)) {
            throw new \InvalidArgumentException('non-nullable self cannot be null');
        }
        $this->container['self'] = $self;

        return $this;
    }

    /**
     * Gets business_unit
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getBusinessUnit()
    {
        return $this->container['business_unit'];
    }

    /**
     * Sets business_unit
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $business_unit business_unit
     *
     * @return self
     */
    public function setBusinessUnit($business_unit)
    {
        if (is_null($business_unit)) {
            throw new \InvalidArgumentException('non-nullable business_unit cannot be null');
        }
        $this->container['business_unit'] = $business_unit;

        return $this;
    }

    /**
     * Gets line_number
     *
     * @return string
     */
    public function getLineNumber()
    {
        return $this->container['line_number'];
    }

    /**
     * Sets line_number
     *
     * @param string $line_number Identification number for the order line, including a next-up line number starting at 1.
     *
     * @return self
     */
    public function setLineNumber($line_number)
    {
        if (is_null($line_number)) {
            throw new \InvalidArgumentException('non-nullable line_number cannot be null');
        }
        if ((mb_strlen($line_number) > 55)) {
            throw new \InvalidArgumentException('invalid length for $line_number when calling OutboundTransferOrderLineDTO., must be smaller than or equal to 55.');
        }
        if ((!preg_match("/.*\\S.*/", ObjectSerializer::toString($line_number)))) {
            throw new \InvalidArgumentException("invalid value for \$line_number when calling OutboundTransferOrderLineDTO., must conform to the pattern /.*\\S.*/.");
        }

        $this->container['line_number'] = $line_number;

        return $this;
    }

    /**
     * Gets customer_line_number
     *
     * @return string
     */
    public function getCustomerLineNumber()
    {
        return $this->container['customer_line_number'];
    }

    /**
     * Sets customer_line_number
     *
     * @param string $customer_line_number Identifier of the order line in the external system in which the order was created.
     *
     * @return self
     */
    public function setCustomerLineNumber($customer_line_number)
    {
        if (is_null($customer_line_number)) {
            throw new \InvalidArgumentException('non-nullable customer_line_number cannot be null');
        }
        if ((mb_strlen($customer_line_number) > 100)) {
            throw new \InvalidArgumentException('invalid length for $customer_line_number when calling OutboundTransferOrderLineDTO., must be smaller than or equal to 100.');
        }

        $this->container['customer_line_number'] = $customer_line_number;

        return $this;
    }

    /**
     * Gets related_order_line
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getRelatedOrderLine()
    {
        return $this->container['related_order_line'];
    }

    /**
     * Sets related_order_line
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $related_order_line related_order_line
     *
     * @return self
     */
    public function setRelatedOrderLine($related_order_line)
    {
        if (is_null($related_order_line)) {
            array_push($this->openAPINullablesSetToNull, 'related_order_line');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('related_order_line', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['related_order_line'] = $related_order_line;

        return $this;
    }

    /**
     * Gets sort_order
     *
     * @return int|null
     */
    public function getSortOrder()
    {
        return $this->container['sort_order'];
    }

    /**
     * Sets sort_order
     *
     * @param int|null $sort_order Position of the order line in relation to other order lines for the order.
     *
     * @return self
     */
    public function setSortOrder($sort_order)
    {
        if (is_null($sort_order)) {
            throw new \InvalidArgumentException('non-nullable sort_order cannot be null');
        }
        $this->container['sort_order'] = $sort_order;

        return $this;
    }

    /**
     * Gets order_header
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getOrderHeader()
    {
        return $this->container['order_header'];
    }

    /**
     * Sets order_header
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $order_header order_header
     *
     * @return self
     */
    public function setOrderHeader($order_header)
    {
        if (is_null($order_header)) {
            throw new \InvalidArgumentException('non-nullable order_header cannot be null');
        }
        $this->container['order_header'] = $order_header;

        return $this;
    }

    /**
     * Gets item
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getItem()
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $item item
     *
     * @return self
     */
    public function setItem($item)
    {
        if (is_null($item)) {
            throw new \InvalidArgumentException('non-nullable item cannot be null');
        }
        $this->container['item'] = $item;

        return $this;
    }

    /**
     * Gets pack
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getPack()
    {
        return $this->container['pack'];
    }

    /**
     * Sets pack
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $pack pack
     *
     * @return self
     */
    public function setPack($pack)
    {
        if (is_null($pack)) {
            throw new \InvalidArgumentException('non-nullable pack cannot be null');
        }
        $this->container['pack'] = $pack;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Text that describes the order line.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 250)) {
            throw new \InvalidArgumentException('invalid length for $description when calling OutboundTransferOrderLineDTO., must be smaller than or equal to 250.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets order_pack_quantity
     *
     * @return int|null
     */
    public function getOrderPackQuantity()
    {
        return $this->container['order_pack_quantity'];
    }

    /**
     * Sets order_pack_quantity
     *
     * @param int|null $order_pack_quantity Quantity of the item/pack that was ordered. Must be a positive value.
     *
     * @return self
     */
    public function setOrderPackQuantity($order_pack_quantity)
    {
        if (is_null($order_pack_quantity)) {
            throw new \InvalidArgumentException('non-nullable order_pack_quantity cannot be null');
        }

        if (($order_pack_quantity > -483344729602260992)) {
            throw new \InvalidArgumentException('invalid value for $order_pack_quantity when calling OutboundTransferOrderLineDTO., must be smaller than or equal to -483344729602260992.');
        }
        if (($order_pack_quantity < 483344729602260992)) {
            throw new \InvalidArgumentException('invalid value for $order_pack_quantity when calling OutboundTransferOrderLineDTO., must be bigger than or equal to 483344729602260992.');
        }

        $this->container['order_pack_quantity'] = $order_pack_quantity;

        return $this;
    }

    /**
     * Gets canceled_pack_quantity
     *
     * @return int|null
     */
    public function getCanceledPackQuantity()
    {
        return $this->container['canceled_pack_quantity'];
    }

    /**
     * Sets canceled_pack_quantity
     *
     * @param int|null $canceled_pack_quantity Quantity of the item/pack that was canceled. Must be a positive value.
     *
     * @return self
     */
    public function setCanceledPackQuantity($canceled_pack_quantity)
    {
        if (is_null($canceled_pack_quantity)) {
            throw new \InvalidArgumentException('non-nullable canceled_pack_quantity cannot be null');
        }

        if (($canceled_pack_quantity > -483344729602260992)) {
            throw new \InvalidArgumentException('invalid value for $canceled_pack_quantity when calling OutboundTransferOrderLineDTO., must be smaller than or equal to -483344729602260992.');
        }
        if (($canceled_pack_quantity < 483344729602260992)) {
            throw new \InvalidArgumentException('invalid value for $canceled_pack_quantity when calling OutboundTransferOrderLineDTO., must be bigger than or equal to 483344729602260992.');
        }

        $this->container['canceled_pack_quantity'] = $canceled_pack_quantity;

        return $this;
    }

    /**
     * Gets lot_number
     *
     * @return string|null
     */
    public function getLotNumber()
    {
        return $this->container['lot_number'];
    }

    /**
     * Sets lot_number
     *
     * @param string|null $lot_number Lot number for stock on the order line.
     *
     * @return self
     */
    public function setLotNumber($lot_number)
    {
        if (is_null($lot_number)) {
            throw new \InvalidArgumentException('non-nullable lot_number cannot be null');
        }
        if ((mb_strlen($lot_number) > 200)) {
            throw new \InvalidArgumentException('invalid length for $lot_number when calling OutboundTransferOrderLineDTO., must be smaller than or equal to 200.');
        }

        $this->container['lot_number'] = $lot_number;

        return $this;
    }

    /**
     * Gets born_on_date
     *
     * @return \DateTime|null
     */
    public function getBornOnDate()
    {
        return $this->container['born_on_date'];
    }

    /**
     * Sets born_on_date
     *
     * @param \DateTime|null $born_on_date Born on date for stock on the order line.
     *
     * @return self
     */
    public function setBornOnDate($born_on_date)
    {
        if (is_null($born_on_date)) {
            throw new \InvalidArgumentException('non-nullable born_on_date cannot be null');
        }
        $this->container['born_on_date'] = $born_on_date;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return \DateTime|null
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param \DateTime|null $expiration_date Expiration date for stock on the order line.
     *
     * @return self
     */
    public function setExpirationDate($expiration_date)
    {
        if (is_null($expiration_date)) {
            throw new \InvalidArgumentException('non-nullable expiration_date cannot be null');
        }
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets product_code
     *
     * @return string|null
     */
    public function getProductCode()
    {
        return $this->container['product_code'];
    }

    /**
     * Sets product_code
     *
     * @param string|null $product_code Product code associated with the item on the order line.
     *
     * @return self
     */
    public function setProductCode($product_code)
    {
        if (is_null($product_code)) {
            throw new \InvalidArgumentException('non-nullable product_code cannot be null');
        }
        if ((mb_strlen($product_code) > 40)) {
            throw new \InvalidArgumentException('invalid length for $product_code when calling OutboundTransferOrderLineDTO., must be smaller than or equal to 40.');
        }

        $this->container['product_code'] = $product_code;

        return $this;
    }

    /**
     * Gets inventory_condition
     *
     * @return string|null
     */
    public function getInventoryCondition()
    {
        return $this->container['inventory_condition'];
    }

    /**
     * Sets inventory_condition
     *
     * @param string|null $inventory_condition Additional field for describing the condition of the stock on the order line.
     *
     * @return self
     */
    public function setInventoryCondition($inventory_condition)
    {
        if (is_null($inventory_condition)) {
            throw new \InvalidArgumentException('non-nullable inventory_condition cannot be null');
        }
        if ((mb_strlen($inventory_condition) > 255)) {
            throw new \InvalidArgumentException('invalid length for $inventory_condition when calling OutboundTransferOrderLineDTO., must be smaller than or equal to 255.');
        }

        $this->container['inventory_condition'] = $inventory_condition;

        return $this;
    }

    /**
     * Gets inventory_attribute1
     *
     * @return string|null
     */
    public function getInventoryAttribute1()
    {
        return $this->container['inventory_attribute1'];
    }

    /**
     * Sets inventory_attribute1
     *
     * @param string|null $inventory_attribute1 Additional field for providing descriptive information for the stock on the order line.
     *
     * @return self
     */
    public function setInventoryAttribute1($inventory_attribute1)
    {
        if (is_null($inventory_attribute1)) {
            throw new \InvalidArgumentException('non-nullable inventory_attribute1 cannot be null');
        }
        if ((mb_strlen($inventory_attribute1) > 255)) {
            throw new \InvalidArgumentException('invalid length for $inventory_attribute1 when calling OutboundTransferOrderLineDTO., must be smaller than or equal to 255.');
        }

        $this->container['inventory_attribute1'] = $inventory_attribute1;

        return $this;
    }

    /**
     * Gets inventory_attribute2
     *
     * @return string|null
     */
    public function getInventoryAttribute2()
    {
        return $this->container['inventory_attribute2'];
    }

    /**
     * Sets inventory_attribute2
     *
     * @param string|null $inventory_attribute2 Additional field for providing descriptive information for the stock on the order line.
     *
     * @return self
     */
    public function setInventoryAttribute2($inventory_attribute2)
    {
        if (is_null($inventory_attribute2)) {
            throw new \InvalidArgumentException('non-nullable inventory_attribute2 cannot be null');
        }
        if ((mb_strlen($inventory_attribute2) > 255)) {
            throw new \InvalidArgumentException('invalid length for $inventory_attribute2 when calling OutboundTransferOrderLineDTO., must be smaller than or equal to 255.');
        }

        $this->container['inventory_attribute2'] = $inventory_attribute2;

        return $this;
    }

    /**
     * Gets planned_ship_date
     *
     * @return \DateTime|null
     */
    public function getPlannedShipDate()
    {
        return $this->container['planned_ship_date'];
    }

    /**
     * Sets planned_ship_date
     *
     * @param \DateTime|null $planned_ship_date Date when the stock for the order line should be shipped. Custom configuration is required in Deposco to leverage this value.
     *
     * @return self
     */
    public function setPlannedShipDate($planned_ship_date)
    {
        if (is_null($planned_ship_date)) {
            throw new \InvalidArgumentException('non-nullable planned_ship_date cannot be null');
        }
        $this->container['planned_ship_date'] = $planned_ship_date;

        return $this;
    }

    /**
     * Gets planned_arrival_date
     *
     * @return \DateTime|null
     */
    public function getPlannedArrivalDate()
    {
        return $this->container['planned_arrival_date'];
    }

    /**
     * Sets planned_arrival_date
     *
     * @param \DateTime|null $planned_arrival_date Date when the stock for the order line should be shipped. Custom configuration is required to leverage this value.
     *
     * @return self
     */
    public function setPlannedArrivalDate($planned_arrival_date)
    {
        if (is_null($planned_arrival_date)) {
            throw new \InvalidArgumentException('non-nullable planned_arrival_date cannot be null');
        }
        $this->container['planned_arrival_date'] = $planned_arrival_date;

        return $this;
    }

    /**
     * Gets unit_price
     *
     * @return int|null
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param int|null $unit_price Either the unit price of the item on the order line from the item record, or the price of the item from a price list. Required for international shipments if customs data must be declared based on the unit price on the order.
     *
     * @return self
     */
    public function setUnitPrice($unit_price)
    {
        if (is_null($unit_price)) {
            throw new \InvalidArgumentException('non-nullable unit_price cannot be null');
        }

        if (($unit_price > 0)) {
            throw new \InvalidArgumentException('invalid value for $unit_price when calling OutboundTransferOrderLineDTO., must be smaller than or equal to 0.');
        }
        if (($unit_price < 0)) {
            throw new \InvalidArgumentException('invalid value for $unit_price when calling OutboundTransferOrderLineDTO., must be bigger than or equal to 0.');
        }

        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets unit_cost
     *
     * @return int|null
     */
    public function getUnitCost()
    {
        return $this->container['unit_cost'];
    }

    /**
     * Sets unit_cost
     *
     * @param int|null $unit_cost Unit cost (for an Each pack) of the item on the order line.
     *
     * @return self
     */
    public function setUnitCost($unit_cost)
    {
        if (is_null($unit_cost)) {
            throw new \InvalidArgumentException('non-nullable unit_cost cannot be null');
        }

        if (($unit_cost > 0)) {
            throw new \InvalidArgumentException('invalid value for $unit_cost when calling OutboundTransferOrderLineDTO., must be smaller than or equal to 0.');
        }
        if (($unit_cost < 0)) {
            throw new \InvalidArgumentException('invalid value for $unit_cost when calling OutboundTransferOrderLineDTO., must be bigger than or equal to 0.');
        }

        $this->container['unit_cost'] = $unit_cost;

        return $this;
    }

    /**
     * Gets price_code
     *
     * @return string|null
     */
    public function getPriceCode()
    {
        return $this->container['price_code'];
    }

    /**
     * Sets price_code
     *
     * @param string|null $price_code Used for NetSuite socket integrations.
     *
     * @return self
     */
    public function setPriceCode($price_code)
    {
        if (is_null($price_code)) {
            throw new \InvalidArgumentException('non-nullable price_code cannot be null');
        }
        if ((mb_strlen($price_code) > 50)) {
            throw new \InvalidArgumentException('invalid length for $price_code when calling OutboundTransferOrderLineDTO., must be smaller than or equal to 50.');
        }

        $this->container['price_code'] = $price_code;

        return $this;
    }

    /**
     * Gets line_total
     *
     * @return int|null
     */
    public function getLineTotal()
    {
        return $this->container['line_total'];
    }

    /**
     * Sets line_total
     *
     * @param int|null $line_total Calculated by multiplying the net price by the order quantity and the pack quantity.
     *
     * @return self
     */
    public function setLineTotal($line_total)
    {
        if (is_null($line_total)) {
            throw new \InvalidArgumentException('non-nullable line_total cannot be null');
        }

        if (($line_total > 0)) {
            throw new \InvalidArgumentException('invalid value for $line_total when calling OutboundTransferOrderLineDTO., must be smaller than or equal to 0.');
        }
        if (($line_total < 0)) {
            throw new \InvalidArgumentException('invalid value for $line_total when calling OutboundTransferOrderLineDTO., must be bigger than or equal to 0.');
        }

        $this->container['line_total'] = $line_total;

        return $this;
    }

    /**
     * Gets taxable
     *
     * @return bool|null
     */
    public function getTaxable()
    {
        return $this->container['taxable'];
    }

    /**
     * Sets taxable
     *
     * @param bool|null $taxable Whether tax should be applied when calculating the total for the order line.
     *
     * @return self
     */
    public function setTaxable($taxable)
    {
        if (is_null($taxable)) {
            throw new \InvalidArgumentException('non-nullable taxable cannot be null');
        }
        $this->container['taxable'] = $taxable;

        return $this;
    }

    /**
     * Gets tax_cost
     *
     * @return int|null
     */
    public function getTaxCost()
    {
        return $this->container['tax_cost'];
    }

    /**
     * Sets tax_cost
     *
     * @param int|null $tax_cost Tax percentage to apply to the order line.
     *
     * @return self
     */
    public function setTaxCost($tax_cost)
    {
        if (is_null($tax_cost)) {
            throw new \InvalidArgumentException('non-nullable tax_cost cannot be null');
        }

        if (($tax_cost > 0)) {
            throw new \InvalidArgumentException('invalid value for $tax_cost when calling OutboundTransferOrderLineDTO., must be smaller than or equal to 0.');
        }
        if (($tax_cost < 0)) {
            throw new \InvalidArgumentException('invalid value for $tax_cost when calling OutboundTransferOrderLineDTO., must be bigger than or equal to 0.');
        }

        $this->container['tax_cost'] = $tax_cost;

        return $this;
    }

    /**
     * Gets taxable_total
     *
     * @return int|null
     */
    public function getTaxableTotal()
    {
        return $this->container['taxable_total'];
    }

    /**
     * Sets taxable_total
     *
     * @param int|null $taxable_total Calculated by multiplying the unit cost, the order pack quantity, and the tax cost for the order line.
     *
     * @return self
     */
    public function setTaxableTotal($taxable_total)
    {
        if (is_null($taxable_total)) {
            throw new \InvalidArgumentException('non-nullable taxable_total cannot be null');
        }

        if (($taxable_total > 0)) {
            throw new \InvalidArgumentException('invalid value for $taxable_total when calling OutboundTransferOrderLineDTO., must be smaller than or equal to 0.');
        }
        if (($taxable_total < 0)) {
            throw new \InvalidArgumentException('invalid value for $taxable_total when calling OutboundTransferOrderLineDTO., must be bigger than or equal to 0.');
        }

        $this->container['taxable_total'] = $taxable_total;

        return $this;
    }

    /**
     * Gets untaxable_total
     *
     * @return int|null
     */
    public function getUntaxableTotal()
    {
        return $this->container['untaxable_total'];
    }

    /**
     * Sets untaxable_total
     *
     * @param int|null $untaxable_total Used for eBay socket integrations.
     *
     * @return self
     */
    public function setUntaxableTotal($untaxable_total)
    {
        if (is_null($untaxable_total)) {
            throw new \InvalidArgumentException('non-nullable untaxable_total cannot be null');
        }

        if (($untaxable_total > 0)) {
            throw new \InvalidArgumentException('invalid value for $untaxable_total when calling OutboundTransferOrderLineDTO., must be smaller than or equal to 0.');
        }
        if (($untaxable_total < 0)) {
            throw new \InvalidArgumentException('invalid value for $untaxable_total when calling OutboundTransferOrderLineDTO., must be bigger than or equal to 0.');
        }

        $this->container['untaxable_total'] = $untaxable_total;

        return $this;
    }

    /**
     * Gets extended_total
     *
     * @return int|null
     */
    public function getExtendedTotal()
    {
        return $this->container['extended_total'];
    }

    /**
     * Sets extended_total
     *
     * @param int|null $extended_total Calculated by adding the line total and the taxable total for the order line.
     *
     * @return self
     */
    public function setExtendedTotal($extended_total)
    {
        if (is_null($extended_total)) {
            throw new \InvalidArgumentException('non-nullable extended_total cannot be null');
        }

        if (($extended_total > 0)) {
            throw new \InvalidArgumentException('invalid value for $extended_total when calling OutboundTransferOrderLineDTO., must be smaller than or equal to 0.');
        }
        if (($extended_total < 0)) {
            throw new \InvalidArgumentException('invalid value for $extended_total when calling OutboundTransferOrderLineDTO., must be bigger than or equal to 0.');
        }

        $this->container['extended_total'] = $extended_total;

        return $this;
    }

    /**
     * Gets discount_amount
     *
     * @return int|null
     */
    public function getDiscountAmount()
    {
        return $this->container['discount_amount'];
    }

    /**
     * Sets discount_amount
     *
     * @param int|null $discount_amount Unit discount amount. For example, if the unit price is $1 and the discount is 10%, then the discount amount is $0.10.
     *
     * @return self
     */
    public function setDiscountAmount($discount_amount)
    {
        if (is_null($discount_amount)) {
            throw new \InvalidArgumentException('non-nullable discount_amount cannot be null');
        }

        if (($discount_amount > 0)) {
            throw new \InvalidArgumentException('invalid value for $discount_amount when calling OutboundTransferOrderLineDTO., must be smaller than or equal to 0.');
        }
        if (($discount_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $discount_amount when calling OutboundTransferOrderLineDTO., must be bigger than or equal to 0.');
        }

        $this->container['discount_amount'] = $discount_amount;

        return $this;
    }

    /**
     * Gets shipping_amount
     *
     * @return int|null
     */
    public function getShippingAmount()
    {
        return $this->container['shipping_amount'];
    }

    /**
     * Sets shipping_amount
     *
     * @param int|null $shipping_amount Used for socket integrations such as Amazon Seller Central, ChannelAdvisor, BigCommerce, and eBay.
     *
     * @return self
     */
    public function setShippingAmount($shipping_amount)
    {
        if (is_null($shipping_amount)) {
            throw new \InvalidArgumentException('non-nullable shipping_amount cannot be null');
        }

        if (($shipping_amount > 0)) {
            throw new \InvalidArgumentException('invalid value for $shipping_amount when calling OutboundTransferOrderLineDTO., must be smaller than or equal to 0.');
        }
        if (($shipping_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $shipping_amount when calling OutboundTransferOrderLineDTO., must be bigger than or equal to 0.');
        }

        $this->container['shipping_amount'] = $shipping_amount;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return \BeLenka\Deposco\Model\BaseOrderLineDTOWeight|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param \BeLenka\Deposco\Model\BaseOrderLineDTOWeight|null $weight weight
     *
     * @return self
     */
    public function setWeight($weight)
    {
        if (is_null($weight)) {
            throw new \InvalidArgumentException('non-nullable weight cannot be null');
        }
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets import_reference
     *
     * @return string|null
     */
    public function getImportReference()
    {
        return $this->container['import_reference'];
    }

    /**
     * Sets import_reference
     *
     * @param string|null $import_reference Additional reference number for the order line when orders are imported into Deposco.
     *
     * @return self
     */
    public function setImportReference($import_reference)
    {
        if (is_null($import_reference)) {
            throw new \InvalidArgumentException('non-nullable import_reference cannot be null');
        }
        if ((mb_strlen($import_reference) > 100)) {
            throw new \InvalidArgumentException('invalid length for $import_reference when calling OutboundTransferOrderLineDTO., must be smaller than or equal to 100.');
        }

        $this->container['import_reference'] = $import_reference;

        return $this;
    }

    /**
     * Gets export_reference
     *
     * @return string|null
     */
    public function getExportReference()
    {
        return $this->container['export_reference'];
    }

    /**
     * Sets export_reference
     *
     * @param string|null $export_reference Additional reference number for the order line when orders are exported from Deposco.
     *
     * @return self
     */
    public function setExportReference($export_reference)
    {
        if (is_null($export_reference)) {
            throw new \InvalidArgumentException('non-nullable export_reference cannot be null');
        }
        if ((mb_strlen($export_reference) > 50)) {
            throw new \InvalidArgumentException('invalid length for $export_reference when calling OutboundTransferOrderLineDTO., must be smaller than or equal to 50.');
        }

        $this->container['export_reference'] = $export_reference;

        return $this;
    }

    /**
     * Gets custom_attribute1
     *
     * @return string|null
     */
    public function getCustomAttribute1()
    {
        return $this->container['custom_attribute1'];
    }

    /**
     * Sets custom_attribute1
     *
     * @param string|null $custom_attribute1 Custom attribute for the order line.
     *
     * @return self
     */
    public function setCustomAttribute1($custom_attribute1)
    {
        if (is_null($custom_attribute1)) {
            throw new \InvalidArgumentException('non-nullable custom_attribute1 cannot be null');
        }
        if ((mb_strlen($custom_attribute1) > 400)) {
            throw new \InvalidArgumentException('invalid length for $custom_attribute1 when calling OutboundTransferOrderLineDTO., must be smaller than or equal to 400.');
        }

        $this->container['custom_attribute1'] = $custom_attribute1;

        return $this;
    }

    /**
     * Gets custom_attribute2
     *
     * @return string|null
     */
    public function getCustomAttribute2()
    {
        return $this->container['custom_attribute2'];
    }

    /**
     * Sets custom_attribute2
     *
     * @param string|null $custom_attribute2 Custom attribute for the order line.
     *
     * @return self
     */
    public function setCustomAttribute2($custom_attribute2)
    {
        if (is_null($custom_attribute2)) {
            throw new \InvalidArgumentException('non-nullable custom_attribute2 cannot be null');
        }
        if ((mb_strlen($custom_attribute2) > 400)) {
            throw new \InvalidArgumentException('invalid length for $custom_attribute2 when calling OutboundTransferOrderLineDTO., must be smaller than or equal to 400.');
        }

        $this->container['custom_attribute2'] = $custom_attribute2;

        return $this;
    }

    /**
     * Gets custom_attribute3
     *
     * @return string|null
     */
    public function getCustomAttribute3()
    {
        return $this->container['custom_attribute3'];
    }

    /**
     * Sets custom_attribute3
     *
     * @param string|null $custom_attribute3 Custom attribute for the order line.
     *
     * @return self
     */
    public function setCustomAttribute3($custom_attribute3)
    {
        if (is_null($custom_attribute3)) {
            throw new \InvalidArgumentException('non-nullable custom_attribute3 cannot be null');
        }
        if ((mb_strlen($custom_attribute3) > 400)) {
            throw new \InvalidArgumentException('invalid length for $custom_attribute3 when calling OutboundTransferOrderLineDTO., must be smaller than or equal to 400.');
        }

        $this->container['custom_attribute3'] = $custom_attribute3;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return \BeLenka\Deposco\Model\CustomFieldDTO[]|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param \BeLenka\Deposco\Model\CustomFieldDTO[]|null $custom_fields Array of custom fields for the order line.
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {
        if (is_null($custom_fields)) {
            throw new \InvalidArgumentException('non-nullable custom_fields cannot be null');
        }
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return \BeLenka\Deposco\Model\NoteDTO[]|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param \BeLenka\Deposco\Model\NoteDTO[]|null $notes Array of notes for the order line.
     *
     * @return self
     */
    public function setNotes($notes)
    {
        if (is_null($notes)) {
            throw new \InvalidArgumentException('non-nullable notes cannot be null');
        }
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets channels
     *
     * @return \BeLenka\Deposco\Model\ChannelDTO[]|null
     */
    public function getChannels()
    {
        return $this->container['channels'];
    }

    /**
     * Sets channels
     *
     * @param \BeLenka\Deposco\Model\ChannelDTO[]|null $channels Array of channel cross-references for the order line.
     *
     * @return self
     */
    public function setChannels($channels)
    {
        if (is_null($channels)) {
            throw new \InvalidArgumentException('non-nullable channels cannot be null');
        }
        $this->container['channels'] = $channels;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime|null $created_date Date and time that the order line was created.
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets updated_date
     *
     * @return \DateTime|null
     */
    public function getUpdatedDate()
    {
        return $this->container['updated_date'];
    }

    /**
     * Sets updated_date
     *
     * @param \DateTime|null $updated_date Date and time that the order line was last updated.
     *
     * @return self
     */
    public function setUpdatedDate($updated_date)
    {
        if (is_null($updated_date)) {
            throw new \InvalidArgumentException('non-nullable updated_date cannot be null');
        }
        $this->container['updated_date'] = $updated_date;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            throw new \InvalidArgumentException('non-nullable created_by cannot be null');
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $updated_by updated_by
     *
     * @return self
     */
    public function setUpdatedBy($updated_by)
    {
        if (is_null($updated_by)) {
            throw new \InvalidArgumentException('non-nullable updated_by cannot be null');
        }
        $this->container['updated_by'] = $updated_by;

        return $this;
    }

    /**
     * Gets order_line_status
     *
     * @return string|null
     */
    public function getOrderLineStatus()
    {
        return $this->container['order_line_status'];
    }

    /**
     * Sets order_line_status
     *
     * @param string|null $order_line_status Status of the order line. New order lines should be created with a status of New.
     *
     * @return self
     */
    public function setOrderLineStatus($order_line_status)
    {
        if (is_null($order_line_status)) {
            array_push($this->openAPINullablesSetToNull, 'order_line_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_line_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getOrderLineStatusAllowableValues();
        if (!is_null($order_line_status) && !in_array($order_line_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'order_line_status', must be one of '%s'",
                    $order_line_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['order_line_status'] = $order_line_status;

        return $this;
    }

    /**
     * Gets ship_from_facility
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getShipFromFacility()
    {
        return $this->container['ship_from_facility'];
    }

    /**
     * Sets ship_from_facility
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $ship_from_facility ship_from_facility
     *
     * @return self
     */
    public function setShipFromFacility($ship_from_facility)
    {
        if (is_null($ship_from_facility)) {
            array_push($this->openAPINullablesSetToNull, 'ship_from_facility');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ship_from_facility', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ship_from_facility'] = $ship_from_facility;

        return $this;
    }

    /**
     * Gets co_line
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getCoLine()
    {
        return $this->container['co_line'];
    }

    /**
     * Sets co_line
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $co_line co_line
     *
     * @return self
     */
    public function setCoLine($co_line)
    {
        if (is_null($co_line)) {
            throw new \InvalidArgumentException('non-nullable co_line cannot be null');
        }
        $this->container['co_line'] = $co_line;

        return $this;
    }

    /**
     * Gets allocated_quantity
     *
     * @return int|null
     */
    public function getAllocatedQuantity()
    {
        return $this->container['allocated_quantity'];
    }

    /**
     * Sets allocated_quantity
     *
     * @param int|null $allocated_quantity Inventory quantity of the item/pack that is being held for the order line. Commonly populated with the same value as the order pack quantity when sending orders to Deposco.
     *
     * @return self
     */
    public function setAllocatedQuantity($allocated_quantity)
    {
        if (is_null($allocated_quantity)) {
            throw new \InvalidArgumentException('non-nullable allocated_quantity cannot be null');
        }

        if (($allocated_quantity > 0)) {
            throw new \InvalidArgumentException('invalid value for $allocated_quantity when calling OutboundTransferOrderLineDTO., must be smaller than or equal to 0.');
        }
        if (($allocated_quantity < 0)) {
            throw new \InvalidArgumentException('invalid value for $allocated_quantity when calling OutboundTransferOrderLineDTO., must be bigger than or equal to 0.');
        }

        $this->container['allocated_quantity'] = $allocated_quantity;

        return $this;
    }

    /**
     * Gets unallocated_quantity
     *
     * @return int|null
     */
    public function getUnallocatedQuantity()
    {
        return $this->container['unallocated_quantity'];
    }

    /**
     * Sets unallocated_quantity
     *
     * @param int|null $unallocated_quantity Quantity of the item/pack for the order line that does not have any allocated inventory.
     *
     * @return self
     */
    public function setUnallocatedQuantity($unallocated_quantity)
    {
        if (is_null($unallocated_quantity)) {
            throw new \InvalidArgumentException('non-nullable unallocated_quantity cannot be null');
        }

        if (($unallocated_quantity > 0)) {
            throw new \InvalidArgumentException('invalid value for $unallocated_quantity when calling OutboundTransferOrderLineDTO., must be smaller than or equal to 0.');
        }
        if (($unallocated_quantity < 0)) {
            throw new \InvalidArgumentException('invalid value for $unallocated_quantity when calling OutboundTransferOrderLineDTO., must be bigger than or equal to 0.');
        }

        $this->container['unallocated_quantity'] = $unallocated_quantity;

        return $this;
    }

    /**
     * Gets picked_pack_quantity
     *
     * @return int|null
     */
    public function getPickedPackQuantity()
    {
        return $this->container['picked_pack_quantity'];
    }

    /**
     * Sets picked_pack_quantity
     *
     * @param int|null $picked_pack_quantity Quantity of the item/pack that has been picked to fulfill the order line.
     *
     * @return self
     */
    public function setPickedPackQuantity($picked_pack_quantity)
    {
        if (is_null($picked_pack_quantity)) {
            throw new \InvalidArgumentException('non-nullable picked_pack_quantity cannot be null');
        }

        if (($picked_pack_quantity > 0)) {
            throw new \InvalidArgumentException('invalid value for $picked_pack_quantity when calling OutboundTransferOrderLineDTO., must be smaller than or equal to 0.');
        }
        if (($picked_pack_quantity < 0)) {
            throw new \InvalidArgumentException('invalid value for $picked_pack_quantity when calling OutboundTransferOrderLineDTO., must be bigger than or equal to 0.');
        }

        $this->container['picked_pack_quantity'] = $picked_pack_quantity;

        return $this;
    }

    /**
     * Gets shortage_pack_quantity
     *
     * @return int|null
     */
    public function getShortagePackQuantity()
    {
        return $this->container['shortage_pack_quantity'];
    }

    /**
     * Sets shortage_pack_quantity
     *
     * @param int|null $shortage_pack_quantity Quantity of the item/pack that is not being shipped for the order line.
     *
     * @return self
     */
    public function setShortagePackQuantity($shortage_pack_quantity)
    {
        if (is_null($shortage_pack_quantity)) {
            throw new \InvalidArgumentException('non-nullable shortage_pack_quantity cannot be null');
        }

        if (($shortage_pack_quantity > 0)) {
            throw new \InvalidArgumentException('invalid value for $shortage_pack_quantity when calling OutboundTransferOrderLineDTO., must be smaller than or equal to 0.');
        }
        if (($shortage_pack_quantity < 0)) {
            throw new \InvalidArgumentException('invalid value for $shortage_pack_quantity when calling OutboundTransferOrderLineDTO., must be bigger than or equal to 0.');
        }

        $this->container['shortage_pack_quantity'] = $shortage_pack_quantity;

        return $this;
    }

    /**
     * Gets shipped_pack_quantity
     *
     * @return int|null
     */
    public function getShippedPackQuantity()
    {
        return $this->container['shipped_pack_quantity'];
    }

    /**
     * Sets shipped_pack_quantity
     *
     * @param int|null $shipped_pack_quantity Quantity of the item/pack that has shipped for the order line. Must be a positive value.
     *
     * @return self
     */
    public function setShippedPackQuantity($shipped_pack_quantity)
    {
        if (is_null($shipped_pack_quantity)) {
            throw new \InvalidArgumentException('non-nullable shipped_pack_quantity cannot be null');
        }

        if (($shipped_pack_quantity > 0)) {
            throw new \InvalidArgumentException('invalid value for $shipped_pack_quantity when calling OutboundTransferOrderLineDTO., must be smaller than or equal to 0.');
        }
        if (($shipped_pack_quantity < 0)) {
            throw new \InvalidArgumentException('invalid value for $shipped_pack_quantity when calling OutboundTransferOrderLineDTO., must be bigger than or equal to 0.');
        }

        $this->container['shipped_pack_quantity'] = $shipped_pack_quantity;

        return $this;
    }

    /**
     * Gets preallocated
     *
     * @return bool|null
     */
    public function getPreallocated()
    {
        return $this->container['preallocated'];
    }

    /**
     * Sets preallocated
     *
     * @param bool|null $preallocated Whether stock for the order line line was allocated during a separate process before the order was included on a pick wave.
     *
     * @return self
     */
    public function setPreallocated($preallocated)
    {
        if (is_null($preallocated)) {
            throw new \InvalidArgumentException('non-nullable preallocated cannot be null');
        }
        $this->container['preallocated'] = $preallocated;

        return $this;
    }

    /**
     * Gets is_back_ordered
     *
     * @return string|null
     */
    public function getIsBackOrdered()
    {
        return $this->container['is_back_ordered'];
    }

    /**
     * Sets is_back_ordered
     *
     * @param string|null $is_back_ordered Reason code that provides additional details when an order line is backordered.
     *
     * @return self
     */
    public function setIsBackOrdered($is_back_ordered)
    {
        if (is_null($is_back_ordered)) {
            array_push($this->openAPINullablesSetToNull, 'is_back_ordered');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_back_ordered', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getIsBackOrderedAllowableValues();
        if (!is_null($is_back_ordered) && !in_array($is_back_ordered, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'is_back_ordered', must be one of '%s'",
                    $is_back_ordered,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['is_back_ordered'] = $is_back_ordered;

        return $this;
    }

    /**
     * Gets directed_to_zone
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getDirectedToZone()
    {
        return $this->container['directed_to_zone'];
    }

    /**
     * Sets directed_to_zone
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $directed_to_zone directed_to_zone
     *
     * @return self
     */
    public function setDirectedToZone($directed_to_zone)
    {
        if (is_null($directed_to_zone)) {
            array_push($this->openAPINullablesSetToNull, 'directed_to_zone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('directed_to_zone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['directed_to_zone'] = $directed_to_zone;

        return $this;
    }

    /**
     * Gets allocate_from_zone
     *
     * @return bool|null
     */
    public function getAllocateFromZone()
    {
        return $this->container['allocate_from_zone'];
    }

    /**
     * Sets allocate_from_zone
     *
     * @param bool|null $allocate_from_zone Whether to allocate stock to fulfill the order from the zone in the `directedToZone` field.
     *
     * @return self
     */
    public function setAllocateFromZone($allocate_from_zone)
    {
        if (is_null($allocate_from_zone)) {
            throw new \InvalidArgumentException('non-nullable allocate_from_zone cannot be null');
        }
        $this->container['allocate_from_zone'] = $allocate_from_zone;

        return $this;
    }

    /**
     * Gets carrier_special_services
     *
     * @return \BeLenka\Deposco\Model\CarrierSpecialServiceDTO[]|null
     */
    public function getCarrierSpecialServices()
    {
        return $this->container['carrier_special_services'];
    }

    /**
     * Sets carrier_special_services
     *
     * @param \BeLenka\Deposco\Model\CarrierSpecialServiceDTO[]|null $carrier_special_services Array of carrier special service records for the order line. Carrier special service records contain information related to special services for shipping carriers such as dry ice and dangerous goods.
     *
     * @return self
     */
    public function setCarrierSpecialServices($carrier_special_services)
    {
        if (is_null($carrier_special_services)) {
            throw new \InvalidArgumentException('non-nullable carrier_special_services cannot be null');
        }
        $this->container['carrier_special_services'] = $carrier_special_services;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


