<?php
/**
 * ReceiptDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deposco API
 *
 * Welcome to the Deposco API Reference! The Deposco API enables you to integrate your system with Deposco.  * Integrate a product information system (PIM) by creating and retrieving data for items, packs, UPCs, and kits. * Set up warehouse data by creating facilities, zones, locations, and storage details. * Create inbound orders that can be received and outbound orders that can be fulfilled with Deposco warehouse management processes.  This reference provides details on available operations, endpoints, parameters, schemas, and responses.  Example requests and responses are also available for you to use as a reference. You can copy the examples to use as a starting point for your own requests.  Review the guides to learn how the API is used in common business scenarios such as setting up the warehouse and integrating a Product Information Management (PIM) system.  When you're ready to get started, register for a developer account and then log in to create your application in the developer portal.
 *
 * The version of the OpenAPI document: 2.0.2519
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\Deposco\Model;

use \ArrayAccess;
use \BeLenka\Deposco\ObjectSerializer;

/**
 * ReceiptDTO Class Doc Comment
 *
 * @category Class
 * @description Collection of receipts for stock that has been received for items on a purchase order or inbound shipment.
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ReceiptDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ReceiptDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'self' => '\BeLenka\Deposco\Model\EntityRef',
        'number' => 'string',
        'status' => 'string',
        'received_item' => '\BeLenka\Deposco\Model\EntityRef',
        'received_pack' => '\BeLenka\Deposco\Model\EntityRef',
        'received_pack_quantity' => 'int',
        'destination_location' => '\BeLenka\Deposco\Model\EntityRef',
        'container' => '\BeLenka\Deposco\Model\EntityRef',
        'master_lpn_number' => 'string',
        'unit_price' => 'int',
        'lot_number' => 'string',
        'serial_number' => 'string',
        'born_on_date' => '\DateTime',
        'expiration_date' => '\DateTime',
        'inventory_condition' => 'string',
        'damaged' => 'bool',
        'received_damaged_pack_quantity' => 'int',
        'disposition' => 'string',
        'catch_weight' => 'int',
        'inventory_attribute1' => 'string',
        'inventory_attribute2' => 'string',
        'custom_attribute1' => 'string',
        'custom_attribute2' => 'string',
        'custom_attribute3' => 'string',
        'import_reference1' => 'string',
        'import_reference2' => 'string',
        'export_reference1' => 'string',
        'export_reference2' => 'string',
        'other_reference_number' => 'string',
        'order_line' => '\BeLenka\Deposco\Model\EntityRef',
        'channels' => '\BeLenka\Deposco\Model\ChannelDTO[]',
        'created_date' => '\DateTime',
        'updated_date' => '\DateTime',
        'created_by' => '\BeLenka\Deposco\Model\EntityRef',
        'updated_by' => '\BeLenka\Deposco\Model\EntityRef'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'self' => null,
        'number' => null,
        'status' => null,
        'received_item' => null,
        'received_pack' => null,
        'received_pack_quantity' => null,
        'destination_location' => null,
        'container' => null,
        'master_lpn_number' => null,
        'unit_price' => 'double',
        'lot_number' => null,
        'serial_number' => null,
        'born_on_date' => 'date-time',
        'expiration_date' => 'date-time',
        'inventory_condition' => null,
        'damaged' => null,
        'received_damaged_pack_quantity' => null,
        'disposition' => null,
        'catch_weight' => 'double',
        'inventory_attribute1' => null,
        'inventory_attribute2' => null,
        'custom_attribute1' => null,
        'custom_attribute2' => null,
        'custom_attribute3' => null,
        'import_reference1' => null,
        'import_reference2' => null,
        'export_reference1' => null,
        'export_reference2' => null,
        'other_reference_number' => null,
        'order_line' => null,
        'channels' => null,
        'created_date' => 'date-time',
        'updated_date' => 'date-time',
        'created_by' => null,
        'updated_by' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'self' => false,
        'number' => false,
        'status' => true,
        'received_item' => false,
        'received_pack' => false,
        'received_pack_quantity' => false,
        'destination_location' => false,
        'container' => false,
        'master_lpn_number' => true,
        'unit_price' => false,
        'lot_number' => true,
        'serial_number' => true,
        'born_on_date' => true,
        'expiration_date' => true,
        'inventory_condition' => true,
        'damaged' => false,
        'received_damaged_pack_quantity' => false,
        'disposition' => true,
        'catch_weight' => false,
        'inventory_attribute1' => true,
        'inventory_attribute2' => true,
        'custom_attribute1' => true,
        'custom_attribute2' => true,
        'custom_attribute3' => true,
        'import_reference1' => true,
        'import_reference2' => true,
        'export_reference1' => true,
        'export_reference2' => true,
        'other_reference_number' => true,
        'order_line' => false,
        'channels' => false,
        'created_date' => false,
        'updated_date' => false,
        'created_by' => false,
        'updated_by' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'self' => 'self',
        'number' => 'number',
        'status' => 'status',
        'received_item' => 'receivedItem',
        'received_pack' => 'receivedPack',
        'received_pack_quantity' => 'receivedPackQuantity',
        'destination_location' => 'destinationLocation',
        'container' => 'container',
        'master_lpn_number' => 'masterLpnNumber',
        'unit_price' => 'unitPrice',
        'lot_number' => 'lotNumber',
        'serial_number' => 'serialNumber',
        'born_on_date' => 'bornOnDate',
        'expiration_date' => 'expirationDate',
        'inventory_condition' => 'inventoryCondition',
        'damaged' => 'damaged',
        'received_damaged_pack_quantity' => 'receivedDamagedPackQuantity',
        'disposition' => 'disposition',
        'catch_weight' => 'catchWeight',
        'inventory_attribute1' => 'inventoryAttribute1',
        'inventory_attribute2' => 'inventoryAttribute2',
        'custom_attribute1' => 'customAttribute1',
        'custom_attribute2' => 'customAttribute2',
        'custom_attribute3' => 'customAttribute3',
        'import_reference1' => 'importReference1',
        'import_reference2' => 'importReference2',
        'export_reference1' => 'exportReference1',
        'export_reference2' => 'exportReference2',
        'other_reference_number' => 'otherReferenceNumber',
        'order_line' => 'orderLine',
        'channels' => 'channels',
        'created_date' => 'createdDate',
        'updated_date' => 'updatedDate',
        'created_by' => 'createdBy',
        'updated_by' => 'updatedBy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'self' => 'setSelf',
        'number' => 'setNumber',
        'status' => 'setStatus',
        'received_item' => 'setReceivedItem',
        'received_pack' => 'setReceivedPack',
        'received_pack_quantity' => 'setReceivedPackQuantity',
        'destination_location' => 'setDestinationLocation',
        'container' => 'setContainer',
        'master_lpn_number' => 'setMasterLpnNumber',
        'unit_price' => 'setUnitPrice',
        'lot_number' => 'setLotNumber',
        'serial_number' => 'setSerialNumber',
        'born_on_date' => 'setBornOnDate',
        'expiration_date' => 'setExpirationDate',
        'inventory_condition' => 'setInventoryCondition',
        'damaged' => 'setDamaged',
        'received_damaged_pack_quantity' => 'setReceivedDamagedPackQuantity',
        'disposition' => 'setDisposition',
        'catch_weight' => 'setCatchWeight',
        'inventory_attribute1' => 'setInventoryAttribute1',
        'inventory_attribute2' => 'setInventoryAttribute2',
        'custom_attribute1' => 'setCustomAttribute1',
        'custom_attribute2' => 'setCustomAttribute2',
        'custom_attribute3' => 'setCustomAttribute3',
        'import_reference1' => 'setImportReference1',
        'import_reference2' => 'setImportReference2',
        'export_reference1' => 'setExportReference1',
        'export_reference2' => 'setExportReference2',
        'other_reference_number' => 'setOtherReferenceNumber',
        'order_line' => 'setOrderLine',
        'channels' => 'setChannels',
        'created_date' => 'setCreatedDate',
        'updated_date' => 'setUpdatedDate',
        'created_by' => 'setCreatedBy',
        'updated_by' => 'setUpdatedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'self' => 'getSelf',
        'number' => 'getNumber',
        'status' => 'getStatus',
        'received_item' => 'getReceivedItem',
        'received_pack' => 'getReceivedPack',
        'received_pack_quantity' => 'getReceivedPackQuantity',
        'destination_location' => 'getDestinationLocation',
        'container' => 'getContainer',
        'master_lpn_number' => 'getMasterLpnNumber',
        'unit_price' => 'getUnitPrice',
        'lot_number' => 'getLotNumber',
        'serial_number' => 'getSerialNumber',
        'born_on_date' => 'getBornOnDate',
        'expiration_date' => 'getExpirationDate',
        'inventory_condition' => 'getInventoryCondition',
        'damaged' => 'getDamaged',
        'received_damaged_pack_quantity' => 'getReceivedDamagedPackQuantity',
        'disposition' => 'getDisposition',
        'catch_weight' => 'getCatchWeight',
        'inventory_attribute1' => 'getInventoryAttribute1',
        'inventory_attribute2' => 'getInventoryAttribute2',
        'custom_attribute1' => 'getCustomAttribute1',
        'custom_attribute2' => 'getCustomAttribute2',
        'custom_attribute3' => 'getCustomAttribute3',
        'import_reference1' => 'getImportReference1',
        'import_reference2' => 'getImportReference2',
        'export_reference1' => 'getExportReference1',
        'export_reference2' => 'getExportReference2',
        'other_reference_number' => 'getOtherReferenceNumber',
        'order_line' => 'getOrderLine',
        'channels' => 'getChannels',
        'created_date' => 'getCreatedDate',
        'updated_date' => 'getUpdatedDate',
        'created_by' => 'getCreatedBy',
        'updated_by' => 'getUpdatedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_RECEIVED = 'Received';
    public const STATUS_CANCELED = 'Canceled';
    public const DISPOSITION_CROSSDOCK = 'Crossdock';
    public const DISPOSITION_DESTROY = 'Destroy';
    public const DISPOSITION_HOLD = 'Hold';
    public const DISPOSITION_QUARANTINE = 'Quarantine';
    public const DISPOSITION_RETURN_TO_SHIPPER = 'Return to Shipper';
    public const DISPOSITION_RETURNS_PROCESSING = 'Returns Processing';
    public const DISPOSITION_STOCK = 'Stock';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_RECEIVED,
            self::STATUS_CANCELED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDispositionAllowableValues()
    {
        return [
            self::DISPOSITION_CROSSDOCK,
            self::DISPOSITION_DESTROY,
            self::DISPOSITION_HOLD,
            self::DISPOSITION_QUARANTINE,
            self::DISPOSITION_RETURN_TO_SHIPPER,
            self::DISPOSITION_RETURNS_PROCESSING,
            self::DISPOSITION_STOCK,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('self', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('received_item', $data ?? [], null);
        $this->setIfExists('received_pack', $data ?? [], null);
        $this->setIfExists('received_pack_quantity', $data ?? [], null);
        $this->setIfExists('destination_location', $data ?? [], null);
        $this->setIfExists('container', $data ?? [], null);
        $this->setIfExists('master_lpn_number', $data ?? [], null);
        $this->setIfExists('unit_price', $data ?? [], null);
        $this->setIfExists('lot_number', $data ?? [], null);
        $this->setIfExists('serial_number', $data ?? [], null);
        $this->setIfExists('born_on_date', $data ?? [], null);
        $this->setIfExists('expiration_date', $data ?? [], null);
        $this->setIfExists('inventory_condition', $data ?? [], null);
        $this->setIfExists('damaged', $data ?? [], null);
        $this->setIfExists('received_damaged_pack_quantity', $data ?? [], null);
        $this->setIfExists('disposition', $data ?? [], null);
        $this->setIfExists('catch_weight', $data ?? [], null);
        $this->setIfExists('inventory_attribute1', $data ?? [], null);
        $this->setIfExists('inventory_attribute2', $data ?? [], null);
        $this->setIfExists('custom_attribute1', $data ?? [], null);
        $this->setIfExists('custom_attribute2', $data ?? [], null);
        $this->setIfExists('custom_attribute3', $data ?? [], null);
        $this->setIfExists('import_reference1', $data ?? [], null);
        $this->setIfExists('import_reference2', $data ?? [], null);
        $this->setIfExists('export_reference1', $data ?? [], null);
        $this->setIfExists('export_reference2', $data ?? [], null);
        $this->setIfExists('other_reference_number', $data ?? [], null);
        $this->setIfExists('order_line', $data ?? [], null);
        $this->setIfExists('channels', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('updated_date', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('updated_by', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['number'] === null) {
            $invalidProperties[] = "'number' can't be null";
        }
        if ((mb_strlen($this->container['number']) > 50)) {
            $invalidProperties[] = "invalid value for 'number', the character length must be smaller than or equal to 50.";
        }

        if (!preg_match("/.*\\S.*/", $this->container['number'])) {
            $invalidProperties[] = "invalid value for 'number', must be conform to the pattern /.*\\S.*/.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['master_lpn_number']) && (mb_strlen($this->container['master_lpn_number']) > 30)) {
            $invalidProperties[] = "invalid value for 'master_lpn_number', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['unit_price']) && ($this->container['unit_price'] > 10000000)) {
            $invalidProperties[] = "invalid value for 'unit_price', must be smaller than or equal to 10000000.";
        }

        if (!is_null($this->container['unit_price']) && ($this->container['unit_price'] < 0)) {
            $invalidProperties[] = "invalid value for 'unit_price', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['lot_number']) && (mb_strlen($this->container['lot_number']) > 20)) {
            $invalidProperties[] = "invalid value for 'lot_number', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['serial_number']) && (mb_strlen($this->container['serial_number']) > 30)) {
            $invalidProperties[] = "invalid value for 'serial_number', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['inventory_condition']) && (mb_strlen($this->container['inventory_condition']) > 255)) {
            $invalidProperties[] = "invalid value for 'inventory_condition', the character length must be smaller than or equal to 255.";
        }

        $allowedValues = $this->getDispositionAllowableValues();
        if (!is_null($this->container['disposition']) && !in_array($this->container['disposition'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'disposition', must be one of '%s'",
                $this->container['disposition'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['catch_weight']) && ($this->container['catch_weight'] > 10000000)) {
            $invalidProperties[] = "invalid value for 'catch_weight', must be smaller than or equal to 10000000.";
        }

        if (!is_null($this->container['catch_weight']) && ($this->container['catch_weight'] < 0)) {
            $invalidProperties[] = "invalid value for 'catch_weight', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['inventory_attribute1']) && (mb_strlen($this->container['inventory_attribute1']) > 255)) {
            $invalidProperties[] = "invalid value for 'inventory_attribute1', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['inventory_attribute2']) && (mb_strlen($this->container['inventory_attribute2']) > 255)) {
            $invalidProperties[] = "invalid value for 'inventory_attribute2', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['custom_attribute1']) && (mb_strlen($this->container['custom_attribute1']) > 50)) {
            $invalidProperties[] = "invalid value for 'custom_attribute1', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['custom_attribute2']) && (mb_strlen($this->container['custom_attribute2']) > 50)) {
            $invalidProperties[] = "invalid value for 'custom_attribute2', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['custom_attribute3']) && (mb_strlen($this->container['custom_attribute3']) > 50)) {
            $invalidProperties[] = "invalid value for 'custom_attribute3', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['import_reference1']) && (mb_strlen($this->container['import_reference1']) > 50)) {
            $invalidProperties[] = "invalid value for 'import_reference1', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['import_reference2']) && (mb_strlen($this->container['import_reference2']) > 50)) {
            $invalidProperties[] = "invalid value for 'import_reference2', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['export_reference1']) && (mb_strlen($this->container['export_reference1']) > 50)) {
            $invalidProperties[] = "invalid value for 'export_reference1', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['export_reference2']) && (mb_strlen($this->container['export_reference2']) > 50)) {
            $invalidProperties[] = "invalid value for 'export_reference2', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['other_reference_number']) && (mb_strlen($this->container['other_reference_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'other_reference_number', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets self
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $self self
     *
     * @return self
     */
    public function setSelf($self)
    {
        if (is_null($self)) {
            throw new \InvalidArgumentException('non-nullable self cannot be null');
        }
        $this->container['self'] = $self;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number Unique identification number for the receipt.
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }
        if ((mb_strlen($number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $number when calling ReceiptDTO., must be smaller than or equal to 50.');
        }
        if ((!preg_match("/.*\\S.*/", ObjectSerializer::toString($number)))) {
            throw new \InvalidArgumentException("invalid value for \$number when calling ReceiptDTO., must conform to the pattern /.*\\S.*/.");
        }

        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Status of the receipt.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets received_item
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getReceivedItem()
    {
        return $this->container['received_item'];
    }

    /**
     * Sets received_item
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $received_item received_item
     *
     * @return self
     */
    public function setReceivedItem($received_item)
    {
        if (is_null($received_item)) {
            throw new \InvalidArgumentException('non-nullable received_item cannot be null');
        }
        $this->container['received_item'] = $received_item;

        return $this;
    }

    /**
     * Gets received_pack
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getReceivedPack()
    {
        return $this->container['received_pack'];
    }

    /**
     * Sets received_pack
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $received_pack received_pack
     *
     * @return self
     */
    public function setReceivedPack($received_pack)
    {
        if (is_null($received_pack)) {
            throw new \InvalidArgumentException('non-nullable received_pack cannot be null');
        }
        $this->container['received_pack'] = $received_pack;

        return $this;
    }

    /**
     * Gets received_pack_quantity
     *
     * @return int|null
     */
    public function getReceivedPackQuantity()
    {
        return $this->container['received_pack_quantity'];
    }

    /**
     * Sets received_pack_quantity
     *
     * @param int|null $received_pack_quantity Quantity of the item/pack that was received.
     *
     * @return self
     */
    public function setReceivedPackQuantity($received_pack_quantity)
    {
        if (is_null($received_pack_quantity)) {
            throw new \InvalidArgumentException('non-nullable received_pack_quantity cannot be null');
        }
        $this->container['received_pack_quantity'] = $received_pack_quantity;

        return $this;
    }

    /**
     * Gets destination_location
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getDestinationLocation()
    {
        return $this->container['destination_location'];
    }

    /**
     * Sets destination_location
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $destination_location destination_location
     *
     * @return self
     */
    public function setDestinationLocation($destination_location)
    {
        if (is_null($destination_location)) {
            throw new \InvalidArgumentException('non-nullable destination_location cannot be null');
        }
        $this->container['destination_location'] = $destination_location;

        return $this;
    }

    /**
     * Gets container
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getContainer()
    {
        return $this->container['container'];
    }

    /**
     * Sets container
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $container container
     *
     * @return self
     */
    public function setContainer($container)
    {
        if (is_null($container)) {
            throw new \InvalidArgumentException('non-nullable container cannot be null');
        }
        $this->container['container'] = $container;

        return $this;
    }

    /**
     * Gets master_lpn_number
     *
     * @return string|null
     */
    public function getMasterLpnNumber()
    {
        return $this->container['master_lpn_number'];
    }

    /**
     * Sets master_lpn_number
     *
     * @param string|null $master_lpn_number Container number of the parent container for the container in which the received stock is located. For example, if the received stock is in a container on a pallet, then this is the container number of the pallet.
     *
     * @return self
     */
    public function setMasterLpnNumber($master_lpn_number)
    {
        if (is_null($master_lpn_number)) {
            array_push($this->openAPINullablesSetToNull, 'master_lpn_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('master_lpn_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($master_lpn_number) && (mb_strlen($master_lpn_number) > 30)) {
            throw new \InvalidArgumentException('invalid length for $master_lpn_number when calling ReceiptDTO., must be smaller than or equal to 30.');
        }

        $this->container['master_lpn_number'] = $master_lpn_number;

        return $this;
    }

    /**
     * Gets unit_price
     *
     * @return int|null
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param int|null $unit_price Unit price of the received item.
     *
     * @return self
     */
    public function setUnitPrice($unit_price)
    {
        if (is_null($unit_price)) {
            throw new \InvalidArgumentException('non-nullable unit_price cannot be null');
        }

        if (($unit_price > 0)) {
            throw new \InvalidArgumentException('invalid value for $unit_price when calling ReceiptDTO., must be smaller than or equal to 10000000.');
        }
        if (($unit_price < 0)) {
            throw new \InvalidArgumentException('invalid value for $unit_price when calling ReceiptDTO., must be bigger than or equal to 0.');
        }

        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets lot_number
     *
     * @return string|null
     */
    public function getLotNumber()
    {
        return $this->container['lot_number'];
    }

    /**
     * Sets lot_number
     *
     * @param string|null $lot_number Lot number for the stock that was received.
     *
     * @return self
     */
    public function setLotNumber($lot_number)
    {
        if (is_null($lot_number)) {
            array_push($this->openAPINullablesSetToNull, 'lot_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lot_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($lot_number) && (mb_strlen($lot_number) > 20)) {
            throw new \InvalidArgumentException('invalid length for $lot_number when calling ReceiptDTO., must be smaller than or equal to 20.');
        }

        $this->container['lot_number'] = $lot_number;

        return $this;
    }

    /**
     * Gets serial_number
     *
     * @return string|null
     */
    public function getSerialNumber()
    {
        return $this->container['serial_number'];
    }

    /**
     * Sets serial_number
     *
     * @param string|null $serial_number Serial number for the stock that was received.
     *
     * @return self
     */
    public function setSerialNumber($serial_number)
    {
        if (is_null($serial_number)) {
            array_push($this->openAPINullablesSetToNull, 'serial_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serial_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($serial_number) && (mb_strlen($serial_number) > 30)) {
            throw new \InvalidArgumentException('invalid length for $serial_number when calling ReceiptDTO., must be smaller than or equal to 30.');
        }

        $this->container['serial_number'] = $serial_number;

        return $this;
    }

    /**
     * Gets born_on_date
     *
     * @return \DateTime|null
     */
    public function getBornOnDate()
    {
        return $this->container['born_on_date'];
    }

    /**
     * Sets born_on_date
     *
     * @param \DateTime|null $born_on_date Manufacturing date for the stock that was received.
     *
     * @return self
     */
    public function setBornOnDate($born_on_date)
    {
        if (is_null($born_on_date)) {
            array_push($this->openAPINullablesSetToNull, 'born_on_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('born_on_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['born_on_date'] = $born_on_date;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return \DateTime|null
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param \DateTime|null $expiration_date Expiration date for the stock that was received.
     *
     * @return self
     */
    public function setExpirationDate($expiration_date)
    {
        if (is_null($expiration_date)) {
            array_push($this->openAPINullablesSetToNull, 'expiration_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('expiration_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets inventory_condition
     *
     * @return string|null
     */
    public function getInventoryCondition()
    {
        return $this->container['inventory_condition'];
    }

    /**
     * Sets inventory_condition
     *
     * @param string|null $inventory_condition Additional field for describing the condition of the stock that was received.
     *
     * @return self
     */
    public function setInventoryCondition($inventory_condition)
    {
        if (is_null($inventory_condition)) {
            array_push($this->openAPINullablesSetToNull, 'inventory_condition');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inventory_condition', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($inventory_condition) && (mb_strlen($inventory_condition) > 255)) {
            throw new \InvalidArgumentException('invalid length for $inventory_condition when calling ReceiptDTO., must be smaller than or equal to 255.');
        }

        $this->container['inventory_condition'] = $inventory_condition;

        return $this;
    }

    /**
     * Gets damaged
     *
     * @return bool|null
     */
    public function getDamaged()
    {
        return $this->container['damaged'];
    }

    /**
     * Sets damaged
     *
     * @param bool|null $damaged Whether the stock that was received is damaged.
     *
     * @return self
     */
    public function setDamaged($damaged)
    {
        if (is_null($damaged)) {
            throw new \InvalidArgumentException('non-nullable damaged cannot be null');
        }
        $this->container['damaged'] = $damaged;

        return $this;
    }

    /**
     * Gets received_damaged_pack_quantity
     *
     * @return int|null
     */
    public function getReceivedDamagedPackQuantity()
    {
        return $this->container['received_damaged_pack_quantity'];
    }

    /**
     * Sets received_damaged_pack_quantity
     *
     * @param int|null $received_damaged_pack_quantity Quantity of the item/pack that was received that was damaged.
     *
     * @return self
     */
    public function setReceivedDamagedPackQuantity($received_damaged_pack_quantity)
    {
        if (is_null($received_damaged_pack_quantity)) {
            throw new \InvalidArgumentException('non-nullable received_damaged_pack_quantity cannot be null');
        }
        $this->container['received_damaged_pack_quantity'] = $received_damaged_pack_quantity;

        return $this;
    }

    /**
     * Gets disposition
     *
     * @return string|null
     */
    public function getDisposition()
    {
        return $this->container['disposition'];
    }

    /**
     * Sets disposition
     *
     * @param string|null $disposition Reserved for future use.
     *
     * @return self
     */
    public function setDisposition($disposition)
    {
        if (is_null($disposition)) {
            array_push($this->openAPINullablesSetToNull, 'disposition');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('disposition', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getDispositionAllowableValues();
        if (!is_null($disposition) && !in_array($disposition, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'disposition', must be one of '%s'",
                    $disposition,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['disposition'] = $disposition;

        return $this;
    }

    /**
     * Gets catch_weight
     *
     * @return int|null
     */
    public function getCatchWeight()
    {
        return $this->container['catch_weight'];
    }

    /**
     * Sets catch_weight
     *
     * @param int|null $catch_weight Reserved for future use.
     *
     * @return self
     */
    public function setCatchWeight($catch_weight)
    {
        if (is_null($catch_weight)) {
            throw new \InvalidArgumentException('non-nullable catch_weight cannot be null');
        }

        if (($catch_weight > 0)) {
            throw new \InvalidArgumentException('invalid value for $catch_weight when calling ReceiptDTO., must be smaller than or equal to 10000000.');
        }
        if (($catch_weight < 0)) {
            throw new \InvalidArgumentException('invalid value for $catch_weight when calling ReceiptDTO., must be bigger than or equal to 0.');
        }

        $this->container['catch_weight'] = $catch_weight;

        return $this;
    }

    /**
     * Gets inventory_attribute1
     *
     * @return string|null
     */
    public function getInventoryAttribute1()
    {
        return $this->container['inventory_attribute1'];
    }

    /**
     * Sets inventory_attribute1
     *
     * @param string|null $inventory_attribute1 Additional field for providing descriptive information for the stock that was received.
     *
     * @return self
     */
    public function setInventoryAttribute1($inventory_attribute1)
    {
        if (is_null($inventory_attribute1)) {
            array_push($this->openAPINullablesSetToNull, 'inventory_attribute1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inventory_attribute1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($inventory_attribute1) && (mb_strlen($inventory_attribute1) > 255)) {
            throw new \InvalidArgumentException('invalid length for $inventory_attribute1 when calling ReceiptDTO., must be smaller than or equal to 255.');
        }

        $this->container['inventory_attribute1'] = $inventory_attribute1;

        return $this;
    }

    /**
     * Gets inventory_attribute2
     *
     * @return string|null
     */
    public function getInventoryAttribute2()
    {
        return $this->container['inventory_attribute2'];
    }

    /**
     * Sets inventory_attribute2
     *
     * @param string|null $inventory_attribute2 Additional field for providing descriptive information for the stock that was received.
     *
     * @return self
     */
    public function setInventoryAttribute2($inventory_attribute2)
    {
        if (is_null($inventory_attribute2)) {
            array_push($this->openAPINullablesSetToNull, 'inventory_attribute2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inventory_attribute2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($inventory_attribute2) && (mb_strlen($inventory_attribute2) > 255)) {
            throw new \InvalidArgumentException('invalid length for $inventory_attribute2 when calling ReceiptDTO., must be smaller than or equal to 255.');
        }

        $this->container['inventory_attribute2'] = $inventory_attribute2;

        return $this;
    }

    /**
     * Gets custom_attribute1
     *
     * @return string|null
     */
    public function getCustomAttribute1()
    {
        return $this->container['custom_attribute1'];
    }

    /**
     * Sets custom_attribute1
     *
     * @param string|null $custom_attribute1 Custom attribute for the stock that was received.
     *
     * @return self
     */
    public function setCustomAttribute1($custom_attribute1)
    {
        if (is_null($custom_attribute1)) {
            array_push($this->openAPINullablesSetToNull, 'custom_attribute1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_attribute1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($custom_attribute1) && (mb_strlen($custom_attribute1) > 50)) {
            throw new \InvalidArgumentException('invalid length for $custom_attribute1 when calling ReceiptDTO., must be smaller than or equal to 50.');
        }

        $this->container['custom_attribute1'] = $custom_attribute1;

        return $this;
    }

    /**
     * Gets custom_attribute2
     *
     * @return string|null
     */
    public function getCustomAttribute2()
    {
        return $this->container['custom_attribute2'];
    }

    /**
     * Sets custom_attribute2
     *
     * @param string|null $custom_attribute2 Custom attribute for the stock that was received.
     *
     * @return self
     */
    public function setCustomAttribute2($custom_attribute2)
    {
        if (is_null($custom_attribute2)) {
            array_push($this->openAPINullablesSetToNull, 'custom_attribute2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_attribute2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($custom_attribute2) && (mb_strlen($custom_attribute2) > 50)) {
            throw new \InvalidArgumentException('invalid length for $custom_attribute2 when calling ReceiptDTO., must be smaller than or equal to 50.');
        }

        $this->container['custom_attribute2'] = $custom_attribute2;

        return $this;
    }

    /**
     * Gets custom_attribute3
     *
     * @return string|null
     */
    public function getCustomAttribute3()
    {
        return $this->container['custom_attribute3'];
    }

    /**
     * Sets custom_attribute3
     *
     * @param string|null $custom_attribute3 Custom attribute for the stock that was received.
     *
     * @return self
     */
    public function setCustomAttribute3($custom_attribute3)
    {
        if (is_null($custom_attribute3)) {
            array_push($this->openAPINullablesSetToNull, 'custom_attribute3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_attribute3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($custom_attribute3) && (mb_strlen($custom_attribute3) > 50)) {
            throw new \InvalidArgumentException('invalid length for $custom_attribute3 when calling ReceiptDTO., must be smaller than or equal to 50.');
        }

        $this->container['custom_attribute3'] = $custom_attribute3;

        return $this;
    }

    /**
     * Gets import_reference1
     *
     * @return string|null
     */
    public function getImportReference1()
    {
        return $this->container['import_reference1'];
    }

    /**
     * Sets import_reference1
     *
     * @param string|null $import_reference1 Additional reference number for the order line that is associated with the receipt line if the purchase order was imported into Deposco.
     *
     * @return self
     */
    public function setImportReference1($import_reference1)
    {
        if (is_null($import_reference1)) {
            array_push($this->openAPINullablesSetToNull, 'import_reference1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('import_reference1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($import_reference1) && (mb_strlen($import_reference1) > 50)) {
            throw new \InvalidArgumentException('invalid length for $import_reference1 when calling ReceiptDTO., must be smaller than or equal to 50.');
        }

        $this->container['import_reference1'] = $import_reference1;

        return $this;
    }

    /**
     * Gets import_reference2
     *
     * @return string|null
     */
    public function getImportReference2()
    {
        return $this->container['import_reference2'];
    }

    /**
     * Sets import_reference2
     *
     * @param string|null $import_reference2 Additional reference number for the order line that is associated with the receipt line if the purchase order was imported into Deposco.
     *
     * @return self
     */
    public function setImportReference2($import_reference2)
    {
        if (is_null($import_reference2)) {
            array_push($this->openAPINullablesSetToNull, 'import_reference2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('import_reference2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($import_reference2) && (mb_strlen($import_reference2) > 50)) {
            throw new \InvalidArgumentException('invalid length for $import_reference2 when calling ReceiptDTO., must be smaller than or equal to 50.');
        }

        $this->container['import_reference2'] = $import_reference2;

        return $this;
    }

    /**
     * Gets export_reference1
     *
     * @return string|null
     */
    public function getExportReference1()
    {
        return $this->container['export_reference1'];
    }

    /**
     * Sets export_reference1
     *
     * @param string|null $export_reference1 Additional reference number for the order line that is associated with the receipt line if the purchase order was exported from Deposco to another system.
     *
     * @return self
     */
    public function setExportReference1($export_reference1)
    {
        if (is_null($export_reference1)) {
            array_push($this->openAPINullablesSetToNull, 'export_reference1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('export_reference1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($export_reference1) && (mb_strlen($export_reference1) > 50)) {
            throw new \InvalidArgumentException('invalid length for $export_reference1 when calling ReceiptDTO., must be smaller than or equal to 50.');
        }

        $this->container['export_reference1'] = $export_reference1;

        return $this;
    }

    /**
     * Gets export_reference2
     *
     * @return string|null
     */
    public function getExportReference2()
    {
        return $this->container['export_reference2'];
    }

    /**
     * Sets export_reference2
     *
     * @param string|null $export_reference2 Additional reference number for the order line that is associated with the receipt line if the purchase order was exported from Deposco to another system.
     *
     * @return self
     */
    public function setExportReference2($export_reference2)
    {
        if (is_null($export_reference2)) {
            array_push($this->openAPINullablesSetToNull, 'export_reference2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('export_reference2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($export_reference2) && (mb_strlen($export_reference2) > 50)) {
            throw new \InvalidArgumentException('invalid length for $export_reference2 when calling ReceiptDTO., must be smaller than or equal to 50.');
        }

        $this->container['export_reference2'] = $export_reference2;

        return $this;
    }

    /**
     * Gets other_reference_number
     *
     * @return string|null
     */
    public function getOtherReferenceNumber()
    {
        return $this->container['other_reference_number'];
    }

    /**
     * Sets other_reference_number
     *
     * @param string|null $other_reference_number Additional reference number for the associated purchase order for the receipt.
     *
     * @return self
     */
    public function setOtherReferenceNumber($other_reference_number)
    {
        if (is_null($other_reference_number)) {
            array_push($this->openAPINullablesSetToNull, 'other_reference_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('other_reference_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($other_reference_number) && (mb_strlen($other_reference_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $other_reference_number when calling ReceiptDTO., must be smaller than or equal to 50.');
        }

        $this->container['other_reference_number'] = $other_reference_number;

        return $this;
    }

    /**
     * Gets order_line
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getOrderLine()
    {
        return $this->container['order_line'];
    }

    /**
     * Sets order_line
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $order_line order_line
     *
     * @return self
     */
    public function setOrderLine($order_line)
    {
        if (is_null($order_line)) {
            throw new \InvalidArgumentException('non-nullable order_line cannot be null');
        }
        $this->container['order_line'] = $order_line;

        return $this;
    }

    /**
     * Gets channels
     *
     * @return \BeLenka\Deposco\Model\ChannelDTO[]|null
     */
    public function getChannels()
    {
        return $this->container['channels'];
    }

    /**
     * Sets channels
     *
     * @param \BeLenka\Deposco\Model\ChannelDTO[]|null $channels Array of channel cross-references for the receipt.
     *
     * @return self
     */
    public function setChannels($channels)
    {
        if (is_null($channels)) {
            throw new \InvalidArgumentException('non-nullable channels cannot be null');
        }
        $this->container['channels'] = $channels;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime|null $created_date Date and time that the receipt was created.
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets updated_date
     *
     * @return \DateTime|null
     */
    public function getUpdatedDate()
    {
        return $this->container['updated_date'];
    }

    /**
     * Sets updated_date
     *
     * @param \DateTime|null $updated_date Date and time that the receipt was last updated.
     *
     * @return self
     */
    public function setUpdatedDate($updated_date)
    {
        if (is_null($updated_date)) {
            throw new \InvalidArgumentException('non-nullable updated_date cannot be null');
        }
        $this->container['updated_date'] = $updated_date;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            throw new \InvalidArgumentException('non-nullable created_by cannot be null');
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $updated_by updated_by
     *
     * @return self
     */
    public function setUpdatedBy($updated_by)
    {
        if (is_null($updated_by)) {
            throw new \InvalidArgumentException('non-nullable updated_by cannot be null');
        }
        $this->container['updated_by'] = $updated_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


