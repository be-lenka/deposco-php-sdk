<?php
/**
 * BaseShipmentDTOShippingCosts
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deposco API
 *
 * Welcome to the Deposco API Reference! The Deposco API enables you to integrate your system with Deposco.  * Integrate a product information system (PIM) by creating and retrieving data for items, packs, UPCs, and kits. * Set up warehouse data by creating facilities, zones, locations, and storage details. * Create inbound orders that can be received and outbound orders that can be fulfilled with Deposco warehouse management processes.  This reference provides details on available operations, endpoints, parameters, schemas, and responses.  Example requests and responses are also available for you to use as a reference. You can copy the examples to use as a starting point for your own requests.  Review the guides to learn how the API is used in common business scenarios such as setting up the warehouse and integrating a Product Information Management (PIM) system.  When you're ready to get started, register for a developer account and then log in to create your application in the developer portal.
 *
 * The version of the OpenAPI document: 2.0.2519
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\Deposco\Model;

use \ArrayAccess;
use \BeLenka\Deposco\ObjectSerializer;

/**
 * BaseShipmentDTOShippingCosts Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BaseShipmentDTOShippingCosts implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BaseShipmentDTO_shippingCosts';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'shipping_cost' => 'int',
        'extended_shipping_cost' => 'int',
        'tax_cost' => 'int',
        'insurance_required' => 'bool',
        'insurance_cost' => 'int',
        'insurance_amount' => 'int',
        'handling_cost' => 'int',
        'labor_cost' => 'int',
        'materials_cost' => 'int',
        'rate_zone' => 'string',
        'published_rate' => 'int',
        'currency_code' => 'string',
        'freight_terms_type' => 'string',
        'fee_terms_type' => 'string',
        'customs_declared_value' => 'int',
        'incoterms_type' => 'string',
        'duty_paid_by_type' => 'string',
        'duty_paid_by_contact_name' => 'string',
        'duty_paid_by_account' => 'string',
        'duty_paid_by_postal_code' => 'string',
        'duty_paid_by_country' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'shipping_cost' => 'double',
        'extended_shipping_cost' => 'double',
        'tax_cost' => 'double',
        'insurance_required' => null,
        'insurance_cost' => 'double',
        'insurance_amount' => 'double',
        'handling_cost' => 'double',
        'labor_cost' => 'double',
        'materials_cost' => 'double',
        'rate_zone' => null,
        'published_rate' => 'double',
        'currency_code' => null,
        'freight_terms_type' => null,
        'fee_terms_type' => null,
        'customs_declared_value' => 'double',
        'incoterms_type' => null,
        'duty_paid_by_type' => null,
        'duty_paid_by_contact_name' => null,
        'duty_paid_by_account' => null,
        'duty_paid_by_postal_code' => null,
        'duty_paid_by_country' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'shipping_cost' => false,
        'extended_shipping_cost' => false,
        'tax_cost' => false,
        'insurance_required' => false,
        'insurance_cost' => false,
        'insurance_amount' => false,
        'handling_cost' => false,
        'labor_cost' => false,
        'materials_cost' => false,
        'rate_zone' => false,
        'published_rate' => false,
        'currency_code' => false,
        'freight_terms_type' => true,
        'fee_terms_type' => true,
        'customs_declared_value' => false,
        'incoterms_type' => false,
        'duty_paid_by_type' => true,
        'duty_paid_by_contact_name' => true,
        'duty_paid_by_account' => true,
        'duty_paid_by_postal_code' => true,
        'duty_paid_by_country' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shipping_cost' => 'shippingCost',
        'extended_shipping_cost' => 'extendedShippingCost',
        'tax_cost' => 'taxCost',
        'insurance_required' => 'insuranceRequired',
        'insurance_cost' => 'insuranceCost',
        'insurance_amount' => 'insuranceAmount',
        'handling_cost' => 'handlingCost',
        'labor_cost' => 'laborCost',
        'materials_cost' => 'materialsCost',
        'rate_zone' => 'rateZone',
        'published_rate' => 'publishedRate',
        'currency_code' => 'currencyCode',
        'freight_terms_type' => 'freightTermsType',
        'fee_terms_type' => 'feeTermsType',
        'customs_declared_value' => 'customsDeclaredValue',
        'incoterms_type' => 'incotermsType',
        'duty_paid_by_type' => 'dutyPaidByType',
        'duty_paid_by_contact_name' => 'dutyPaidByContactName',
        'duty_paid_by_account' => 'dutyPaidByAccount',
        'duty_paid_by_postal_code' => 'dutyPaidByPostalCode',
        'duty_paid_by_country' => 'dutyPaidByCountry'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shipping_cost' => 'setShippingCost',
        'extended_shipping_cost' => 'setExtendedShippingCost',
        'tax_cost' => 'setTaxCost',
        'insurance_required' => 'setInsuranceRequired',
        'insurance_cost' => 'setInsuranceCost',
        'insurance_amount' => 'setInsuranceAmount',
        'handling_cost' => 'setHandlingCost',
        'labor_cost' => 'setLaborCost',
        'materials_cost' => 'setMaterialsCost',
        'rate_zone' => 'setRateZone',
        'published_rate' => 'setPublishedRate',
        'currency_code' => 'setCurrencyCode',
        'freight_terms_type' => 'setFreightTermsType',
        'fee_terms_type' => 'setFeeTermsType',
        'customs_declared_value' => 'setCustomsDeclaredValue',
        'incoterms_type' => 'setIncotermsType',
        'duty_paid_by_type' => 'setDutyPaidByType',
        'duty_paid_by_contact_name' => 'setDutyPaidByContactName',
        'duty_paid_by_account' => 'setDutyPaidByAccount',
        'duty_paid_by_postal_code' => 'setDutyPaidByPostalCode',
        'duty_paid_by_country' => 'setDutyPaidByCountry'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shipping_cost' => 'getShippingCost',
        'extended_shipping_cost' => 'getExtendedShippingCost',
        'tax_cost' => 'getTaxCost',
        'insurance_required' => 'getInsuranceRequired',
        'insurance_cost' => 'getInsuranceCost',
        'insurance_amount' => 'getInsuranceAmount',
        'handling_cost' => 'getHandlingCost',
        'labor_cost' => 'getLaborCost',
        'materials_cost' => 'getMaterialsCost',
        'rate_zone' => 'getRateZone',
        'published_rate' => 'getPublishedRate',
        'currency_code' => 'getCurrencyCode',
        'freight_terms_type' => 'getFreightTermsType',
        'fee_terms_type' => 'getFeeTermsType',
        'customs_declared_value' => 'getCustomsDeclaredValue',
        'incoterms_type' => 'getIncotermsType',
        'duty_paid_by_type' => 'getDutyPaidByType',
        'duty_paid_by_contact_name' => 'getDutyPaidByContactName',
        'duty_paid_by_account' => 'getDutyPaidByAccount',
        'duty_paid_by_postal_code' => 'getDutyPaidByPostalCode',
        'duty_paid_by_country' => 'getDutyPaidByCountry'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CURRENCY_CODE_GPB = 'GPB';
    public const CURRENCY_CODE_CAN = 'CAN';
    public const CURRENCY_CODE_MXN = 'MXN';
    public const CURRENCY_CODE_EUR = 'EUR';
    public const CURRENCY_CODE_USD = 'USD';
    public const FREIGHT_TERMS_TYPE_PREPAID = 'Prepaid';
    public const FREIGHT_TERMS_TYPE_COLLECT = 'Collect';
    public const FREIGHT_TERMS_TYPE_THIRD_PARTY = 'Third Party';
    public const FREIGHT_TERMS_TYPE_CONSIGNEE = 'Consignee';
    public const FREIGHT_TERMS_TYPE_NULL = 'null';
    public const FEE_TERMS_TYPE_POC = 'POC';
    public const FEE_TERMS_TYPE_COLLECT = 'Collect';
    public const FEE_TERMS_TYPE_PREPAID = 'Prepaid';
    public const FEE_TERMS_TYPE_INCOTERMS = 'Incoterms';
    public const FEE_TERMS_TYPE_NULL = 'null';
    public const DUTY_PAID_BY_TYPE_SELLER = 'Seller';
    public const DUTY_PAID_BY_TYPE_RECEIVER = 'Receiver';
    public const DUTY_PAID_BY_TYPE_THIRD_PARTY = 'Third party';
    public const DUTY_PAID_BY_TYPE_NULL = 'null';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrencyCodeAllowableValues()
    {
        return [
            self::CURRENCY_CODE_GPB,
            self::CURRENCY_CODE_CAN,
            self::CURRENCY_CODE_MXN,
            self::CURRENCY_CODE_EUR,
            self::CURRENCY_CODE_USD,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFreightTermsTypeAllowableValues()
    {
        return [
            self::FREIGHT_TERMS_TYPE_PREPAID,
            self::FREIGHT_TERMS_TYPE_COLLECT,
            self::FREIGHT_TERMS_TYPE_THIRD_PARTY,
            self::FREIGHT_TERMS_TYPE_CONSIGNEE,
            self::FREIGHT_TERMS_TYPE_NULL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFeeTermsTypeAllowableValues()
    {
        return [
            self::FEE_TERMS_TYPE_POC,
            self::FEE_TERMS_TYPE_COLLECT,
            self::FEE_TERMS_TYPE_PREPAID,
            self::FEE_TERMS_TYPE_INCOTERMS,
            self::FEE_TERMS_TYPE_NULL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDutyPaidByTypeAllowableValues()
    {
        return [
            self::DUTY_PAID_BY_TYPE_SELLER,
            self::DUTY_PAID_BY_TYPE_RECEIVER,
            self::DUTY_PAID_BY_TYPE_THIRD_PARTY,
            self::DUTY_PAID_BY_TYPE_NULL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('shipping_cost', $data ?? [], null);
        $this->setIfExists('extended_shipping_cost', $data ?? [], null);
        $this->setIfExists('tax_cost', $data ?? [], null);
        $this->setIfExists('insurance_required', $data ?? [], null);
        $this->setIfExists('insurance_cost', $data ?? [], null);
        $this->setIfExists('insurance_amount', $data ?? [], null);
        $this->setIfExists('handling_cost', $data ?? [], null);
        $this->setIfExists('labor_cost', $data ?? [], null);
        $this->setIfExists('materials_cost', $data ?? [], null);
        $this->setIfExists('rate_zone', $data ?? [], null);
        $this->setIfExists('published_rate', $data ?? [], null);
        $this->setIfExists('currency_code', $data ?? [], null);
        $this->setIfExists('freight_terms_type', $data ?? [], null);
        $this->setIfExists('fee_terms_type', $data ?? [], null);
        $this->setIfExists('customs_declared_value', $data ?? [], null);
        $this->setIfExists('incoterms_type', $data ?? [], null);
        $this->setIfExists('duty_paid_by_type', $data ?? [], null);
        $this->setIfExists('duty_paid_by_contact_name', $data ?? [], null);
        $this->setIfExists('duty_paid_by_account', $data ?? [], null);
        $this->setIfExists('duty_paid_by_postal_code', $data ?? [], null);
        $this->setIfExists('duty_paid_by_country', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['shipping_cost']) && ($this->container['shipping_cost'] > 0)) {
            $invalidProperties[] = "invalid value for 'shipping_cost', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['shipping_cost']) && ($this->container['shipping_cost'] < 0)) {
            $invalidProperties[] = "invalid value for 'shipping_cost', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['extended_shipping_cost']) && ($this->container['extended_shipping_cost'] > 0)) {
            $invalidProperties[] = "invalid value for 'extended_shipping_cost', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['extended_shipping_cost']) && ($this->container['extended_shipping_cost'] < 0)) {
            $invalidProperties[] = "invalid value for 'extended_shipping_cost', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['tax_cost']) && ($this->container['tax_cost'] > 0)) {
            $invalidProperties[] = "invalid value for 'tax_cost', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['tax_cost']) && ($this->container['tax_cost'] < 0)) {
            $invalidProperties[] = "invalid value for 'tax_cost', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['insurance_cost']) && ($this->container['insurance_cost'] > 0)) {
            $invalidProperties[] = "invalid value for 'insurance_cost', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['insurance_cost']) && ($this->container['insurance_cost'] < 0)) {
            $invalidProperties[] = "invalid value for 'insurance_cost', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['insurance_amount']) && ($this->container['insurance_amount'] > 0)) {
            $invalidProperties[] = "invalid value for 'insurance_amount', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['insurance_amount']) && ($this->container['insurance_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'insurance_amount', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['handling_cost']) && ($this->container['handling_cost'] > 0)) {
            $invalidProperties[] = "invalid value for 'handling_cost', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['handling_cost']) && ($this->container['handling_cost'] < 0)) {
            $invalidProperties[] = "invalid value for 'handling_cost', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['labor_cost']) && ($this->container['labor_cost'] > 0)) {
            $invalidProperties[] = "invalid value for 'labor_cost', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['labor_cost']) && ($this->container['labor_cost'] < 0)) {
            $invalidProperties[] = "invalid value for 'labor_cost', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['materials_cost']) && ($this->container['materials_cost'] > 0)) {
            $invalidProperties[] = "invalid value for 'materials_cost', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['materials_cost']) && ($this->container['materials_cost'] < 0)) {
            $invalidProperties[] = "invalid value for 'materials_cost', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['rate_zone']) && (mb_strlen($this->container['rate_zone']) > 20)) {
            $invalidProperties[] = "invalid value for 'rate_zone', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['published_rate']) && ($this->container['published_rate'] > 0)) {
            $invalidProperties[] = "invalid value for 'published_rate', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['published_rate']) && ($this->container['published_rate'] < 0)) {
            $invalidProperties[] = "invalid value for 'published_rate', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getCurrencyCodeAllowableValues();
        if (!is_null($this->container['currency_code']) && !in_array($this->container['currency_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'currency_code', must be one of '%s'",
                $this->container['currency_code'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFreightTermsTypeAllowableValues();
        if (!is_null($this->container['freight_terms_type']) && !in_array($this->container['freight_terms_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'freight_terms_type', must be one of '%s'",
                $this->container['freight_terms_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFeeTermsTypeAllowableValues();
        if (!is_null($this->container['fee_terms_type']) && !in_array($this->container['fee_terms_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fee_terms_type', must be one of '%s'",
                $this->container['fee_terms_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['customs_declared_value']) && ($this->container['customs_declared_value'] > 0)) {
            $invalidProperties[] = "invalid value for 'customs_declared_value', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['customs_declared_value']) && ($this->container['customs_declared_value'] < 0)) {
            $invalidProperties[] = "invalid value for 'customs_declared_value', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getDutyPaidByTypeAllowableValues();
        if (!is_null($this->container['duty_paid_by_type']) && !in_array($this->container['duty_paid_by_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'duty_paid_by_type', must be one of '%s'",
                $this->container['duty_paid_by_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['duty_paid_by_contact_name']) && (mb_strlen($this->container['duty_paid_by_contact_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'duty_paid_by_contact_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['duty_paid_by_account']) && (mb_strlen($this->container['duty_paid_by_account']) > 50)) {
            $invalidProperties[] = "invalid value for 'duty_paid_by_account', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['duty_paid_by_postal_code']) && (mb_strlen($this->container['duty_paid_by_postal_code']) > 50)) {
            $invalidProperties[] = "invalid value for 'duty_paid_by_postal_code', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['duty_paid_by_country']) && (mb_strlen($this->container['duty_paid_by_country']) > 50)) {
            $invalidProperties[] = "invalid value for 'duty_paid_by_country', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shipping_cost
     *
     * @return int|null
     */
    public function getShippingCost()
    {
        return $this->container['shipping_cost'];
    }

    /**
     * Sets shipping_cost
     *
     * @param int|null $shipping_cost Cost of the shipment.
     *
     * @return self
     */
    public function setShippingCost($shipping_cost)
    {
        if (is_null($shipping_cost)) {
            throw new \InvalidArgumentException('non-nullable shipping_cost cannot be null');
        }

        if (($shipping_cost > 0)) {
            throw new \InvalidArgumentException('invalid value for $shipping_cost when calling BaseShipmentDTOShippingCosts., must be smaller than or equal to 0.');
        }
        if (($shipping_cost < 0)) {
            throw new \InvalidArgumentException('invalid value for $shipping_cost when calling BaseShipmentDTOShippingCosts., must be bigger than or equal to 0.');
        }

        $this->container['shipping_cost'] = $shipping_cost;

        return $this;
    }

    /**
     * Gets extended_shipping_cost
     *
     * @return int|null
     */
    public function getExtendedShippingCost()
    {
        return $this->container['extended_shipping_cost'];
    }

    /**
     * Sets extended_shipping_cost
     *
     * @param int|null $extended_shipping_cost Cost of the shipment.
     *
     * @return self
     */
    public function setExtendedShippingCost($extended_shipping_cost)
    {
        if (is_null($extended_shipping_cost)) {
            throw new \InvalidArgumentException('non-nullable extended_shipping_cost cannot be null');
        }

        if (($extended_shipping_cost > 0)) {
            throw new \InvalidArgumentException('invalid value for $extended_shipping_cost when calling BaseShipmentDTOShippingCosts., must be smaller than or equal to 0.');
        }
        if (($extended_shipping_cost < 0)) {
            throw new \InvalidArgumentException('invalid value for $extended_shipping_cost when calling BaseShipmentDTOShippingCosts., must be bigger than or equal to 0.');
        }

        $this->container['extended_shipping_cost'] = $extended_shipping_cost;

        return $this;
    }

    /**
     * Gets tax_cost
     *
     * @return int|null
     */
    public function getTaxCost()
    {
        return $this->container['tax_cost'];
    }

    /**
     * Sets tax_cost
     *
     * @param int|null $tax_cost Tax costs for the shipment.
     *
     * @return self
     */
    public function setTaxCost($tax_cost)
    {
        if (is_null($tax_cost)) {
            throw new \InvalidArgumentException('non-nullable tax_cost cannot be null');
        }

        if (($tax_cost > 0)) {
            throw new \InvalidArgumentException('invalid value for $tax_cost when calling BaseShipmentDTOShippingCosts., must be smaller than or equal to 0.');
        }
        if (($tax_cost < 0)) {
            throw new \InvalidArgumentException('invalid value for $tax_cost when calling BaseShipmentDTOShippingCosts., must be bigger than or equal to 0.');
        }

        $this->container['tax_cost'] = $tax_cost;

        return $this;
    }

    /**
     * Gets insurance_required
     *
     * @return bool|null
     */
    public function getInsuranceRequired()
    {
        return $this->container['insurance_required'];
    }

    /**
     * Sets insurance_required
     *
     * @param bool|null $insurance_required Whether insurance is required for the package(s) in which the order ships. Must be set to `true` if insurance is required above the minimum default value for the shipping carrier. Insurance cost is calculated based on the value of items in the shipping container.
     *
     * @return self
     */
    public function setInsuranceRequired($insurance_required)
    {
        if (is_null($insurance_required)) {
            throw new \InvalidArgumentException('non-nullable insurance_required cannot be null');
        }
        $this->container['insurance_required'] = $insurance_required;

        return $this;
    }

    /**
     * Gets insurance_cost
     *
     * @return int|null
     */
    public function getInsuranceCost()
    {
        return $this->container['insurance_cost'];
    }

    /**
     * Sets insurance_cost
     *
     * @param int|null $insurance_cost General shipment attribute.
     *
     * @return self
     */
    public function setInsuranceCost($insurance_cost)
    {
        if (is_null($insurance_cost)) {
            throw new \InvalidArgumentException('non-nullable insurance_cost cannot be null');
        }

        if (($insurance_cost > 0)) {
            throw new \InvalidArgumentException('invalid value for $insurance_cost when calling BaseShipmentDTOShippingCosts., must be smaller than or equal to 0.');
        }
        if (($insurance_cost < 0)) {
            throw new \InvalidArgumentException('invalid value for $insurance_cost when calling BaseShipmentDTOShippingCosts., must be bigger than or equal to 0.');
        }

        $this->container['insurance_cost'] = $insurance_cost;

        return $this;
    }

    /**
     * Gets insurance_amount
     *
     * @return int|null
     */
    public function getInsuranceAmount()
    {
        return $this->container['insurance_amount'];
    }

    /**
     * Sets insurance_amount
     *
     * @param int|null $insurance_amount General shipment attribute.
     *
     * @return self
     */
    public function setInsuranceAmount($insurance_amount)
    {
        if (is_null($insurance_amount)) {
            throw new \InvalidArgumentException('non-nullable insurance_amount cannot be null');
        }

        if (($insurance_amount > 0)) {
            throw new \InvalidArgumentException('invalid value for $insurance_amount when calling BaseShipmentDTOShippingCosts., must be smaller than or equal to 0.');
        }
        if (($insurance_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $insurance_amount when calling BaseShipmentDTOShippingCosts., must be bigger than or equal to 0.');
        }

        $this->container['insurance_amount'] = $insurance_amount;

        return $this;
    }

    /**
     * Gets handling_cost
     *
     * @return int|null
     */
    public function getHandlingCost()
    {
        return $this->container['handling_cost'];
    }

    /**
     * Sets handling_cost
     *
     * @param int|null $handling_cost Handling cost for the shipment, which includes the expense of preparing the packages for the shipment and the materials used for packaging.
     *
     * @return self
     */
    public function setHandlingCost($handling_cost)
    {
        if (is_null($handling_cost)) {
            throw new \InvalidArgumentException('non-nullable handling_cost cannot be null');
        }

        if (($handling_cost > 0)) {
            throw new \InvalidArgumentException('invalid value for $handling_cost when calling BaseShipmentDTOShippingCosts., must be smaller than or equal to 0.');
        }
        if (($handling_cost < 0)) {
            throw new \InvalidArgumentException('invalid value for $handling_cost when calling BaseShipmentDTOShippingCosts., must be bigger than or equal to 0.');
        }

        $this->container['handling_cost'] = $handling_cost;

        return $this;
    }

    /**
     * Gets labor_cost
     *
     * @return int|null
     */
    public function getLaborCost()
    {
        return $this->container['labor_cost'];
    }

    /**
     * Sets labor_cost
     *
     * @param int|null $labor_cost General shipment attribute.
     *
     * @return self
     */
    public function setLaborCost($labor_cost)
    {
        if (is_null($labor_cost)) {
            throw new \InvalidArgumentException('non-nullable labor_cost cannot be null');
        }

        if (($labor_cost > 0)) {
            throw new \InvalidArgumentException('invalid value for $labor_cost when calling BaseShipmentDTOShippingCosts., must be smaller than or equal to 0.');
        }
        if (($labor_cost < 0)) {
            throw new \InvalidArgumentException('invalid value for $labor_cost when calling BaseShipmentDTOShippingCosts., must be bigger than or equal to 0.');
        }

        $this->container['labor_cost'] = $labor_cost;

        return $this;
    }

    /**
     * Gets materials_cost
     *
     * @return int|null
     */
    public function getMaterialsCost()
    {
        return $this->container['materials_cost'];
    }

    /**
     * Sets materials_cost
     *
     * @param int|null $materials_cost General shipment attribute.
     *
     * @return self
     */
    public function setMaterialsCost($materials_cost)
    {
        if (is_null($materials_cost)) {
            throw new \InvalidArgumentException('non-nullable materials_cost cannot be null');
        }

        if (($materials_cost > 0)) {
            throw new \InvalidArgumentException('invalid value for $materials_cost when calling BaseShipmentDTOShippingCosts., must be smaller than or equal to 0.');
        }
        if (($materials_cost < 0)) {
            throw new \InvalidArgumentException('invalid value for $materials_cost when calling BaseShipmentDTOShippingCosts., must be bigger than or equal to 0.');
        }

        $this->container['materials_cost'] = $materials_cost;

        return $this;
    }

    /**
     * Gets rate_zone
     *
     * @return string|null
     */
    public function getRateZone()
    {
        return $this->container['rate_zone'];
    }

    /**
     * Sets rate_zone
     *
     * @param string|null $rate_zone Zone defined by the shipping carrier to which the shipment is sent. This zone is used for calculating the rate that is used for shipping costs for the shipment.
     *
     * @return self
     */
    public function setRateZone($rate_zone)
    {
        if (is_null($rate_zone)) {
            throw new \InvalidArgumentException('non-nullable rate_zone cannot be null');
        }
        if ((mb_strlen($rate_zone) > 20)) {
            throw new \InvalidArgumentException('invalid length for $rate_zone when calling BaseShipmentDTOShippingCosts., must be smaller than or equal to 20.');
        }

        $this->container['rate_zone'] = $rate_zone;

        return $this;
    }

    /**
     * Gets published_rate
     *
     * @return int|null
     */
    public function getPublishedRate()
    {
        return $this->container['published_rate'];
    }

    /**
     * Sets published_rate
     *
     * @param int|null $published_rate Standard rate that is published by the shipping carrier that applies for the shipment.
     *
     * @return self
     */
    public function setPublishedRate($published_rate)
    {
        if (is_null($published_rate)) {
            throw new \InvalidArgumentException('non-nullable published_rate cannot be null');
        }

        if (($published_rate > 0)) {
            throw new \InvalidArgumentException('invalid value for $published_rate when calling BaseShipmentDTOShippingCosts., must be smaller than or equal to 0.');
        }
        if (($published_rate < 0)) {
            throw new \InvalidArgumentException('invalid value for $published_rate when calling BaseShipmentDTOShippingCosts., must be bigger than or equal to 0.');
        }

        $this->container['published_rate'] = $published_rate;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code SO 4217 code for the currency used on the shipment, such as `USD`, `GBP`, or `EUR`.
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        if (is_null($currency_code)) {
            throw new \InvalidArgumentException('non-nullable currency_code cannot be null');
        }
        $allowedValues = $this->getCurrencyCodeAllowableValues();
        if (!in_array($currency_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'currency_code', must be one of '%s'",
                    $currency_code,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets freight_terms_type
     *
     * @return string|null
     */
    public function getFreightTermsType()
    {
        return $this->container['freight_terms_type'];
    }

    /**
     * Sets freight_terms_type
     *
     * @param string|null $freight_terms_type Identifies how to determine the account that is responsible for payment of shipping costs for the shipment. Set to one of the following values:  - `Prepaid` - The shipping carrier account that created the shipment will be responsible for payment of shipping costs.  - `Collect` - The recipient is billed for the shipment. Either enter the shipping carrier account number in the `freightBillToAccount` field, or enter the account number in the trading partner record for the trading partner associated with the order.  - `Third Party` - A trading partner is billed for the shipment. Enter the shipping carrier account number in the trading partner record for the trading partner associated with the order.  - `Consignee` - Contractual billing is used to bill the customer/recipient for UPS Ground shipping services.
     *
     * @return self
     */
    public function setFreightTermsType($freight_terms_type)
    {
        if (is_null($freight_terms_type)) {
            array_push($this->openAPINullablesSetToNull, 'freight_terms_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('freight_terms_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getFreightTermsTypeAllowableValues();
        if (!is_null($freight_terms_type) && !in_array($freight_terms_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'freight_terms_type', must be one of '%s'",
                    $freight_terms_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['freight_terms_type'] = $freight_terms_type;

        return $this;
    }

    /**
     * Gets fee_terms_type
     *
     * @return string|null
     */
    public function getFeeTermsType()
    {
        return $this->container['fee_terms_type'];
    }

    /**
     * Sets fee_terms_type
     *
     * @param string|null $fee_terms_type General shipment attribute.
     *
     * @return self
     */
    public function setFeeTermsType($fee_terms_type)
    {
        if (is_null($fee_terms_type)) {
            array_push($this->openAPINullablesSetToNull, 'fee_terms_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fee_terms_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getFeeTermsTypeAllowableValues();
        if (!is_null($fee_terms_type) && !in_array($fee_terms_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fee_terms_type', must be one of '%s'",
                    $fee_terms_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fee_terms_type'] = $fee_terms_type;

        return $this;
    }

    /**
     * Gets customs_declared_value
     *
     * @return int|null
     */
    public function getCustomsDeclaredValue()
    {
        return $this->container['customs_declared_value'];
    }

    /**
     * Sets customs_declared_value
     *
     * @param int|null $customs_declared_value Monetary worth placed on goods by the importer for customs purposes. Thus value is typically the price the buyer paid for the goods and is used to calculate duties and taxes.
     *
     * @return self
     */
    public function setCustomsDeclaredValue($customs_declared_value)
    {
        if (is_null($customs_declared_value)) {
            throw new \InvalidArgumentException('non-nullable customs_declared_value cannot be null');
        }

        if (($customs_declared_value > 0)) {
            throw new \InvalidArgumentException('invalid value for $customs_declared_value when calling BaseShipmentDTOShippingCosts., must be smaller than or equal to 0.');
        }
        if (($customs_declared_value < 0)) {
            throw new \InvalidArgumentException('invalid value for $customs_declared_value when calling BaseShipmentDTOShippingCosts., must be bigger than or equal to 0.');
        }

        $this->container['customs_declared_value'] = $customs_declared_value;

        return $this;
    }

    /**
     * Gets incoterms_type
     *
     * @return string|null
     */
    public function getIncotermsType()
    {
        return $this->container['incoterms_type'];
    }

    /**
     * Sets incoterms_type
     *
     * @param string|null $incoterms_type International Commercial Terms type from the International Chamber of Commerce (ICC). Used for international orders.
     *
     * @return self
     */
    public function setIncotermsType($incoterms_type)
    {
        if (is_null($incoterms_type)) {
            throw new \InvalidArgumentException('non-nullable incoterms_type cannot be null');
        }
        $this->container['incoterms_type'] = $incoterms_type;

        return $this;
    }

    /**
     * Gets duty_paid_by_type
     *
     * @return string|null
     */
    public function getDutyPaidByType()
    {
        return $this->container['duty_paid_by_type'];
    }

    /**
     * Sets duty_paid_by_type
     *
     * @param string|null $duty_paid_by_type Person or company who is responsible for paying international shipping duties.
     *
     * @return self
     */
    public function setDutyPaidByType($duty_paid_by_type)
    {
        if (is_null($duty_paid_by_type)) {
            array_push($this->openAPINullablesSetToNull, 'duty_paid_by_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('duty_paid_by_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getDutyPaidByTypeAllowableValues();
        if (!is_null($duty_paid_by_type) && !in_array($duty_paid_by_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'duty_paid_by_type', must be one of '%s'",
                    $duty_paid_by_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['duty_paid_by_type'] = $duty_paid_by_type;

        return $this;
    }

    /**
     * Gets duty_paid_by_contact_name
     *
     * @return string|null
     */
    public function getDutyPaidByContactName()
    {
        return $this->container['duty_paid_by_contact_name'];
    }

    /**
     * Sets duty_paid_by_contact_name
     *
     * @param string|null $duty_paid_by_contact_name Name of the contact person who is responsible for paying international shipping duties.
     *
     * @return self
     */
    public function setDutyPaidByContactName($duty_paid_by_contact_name)
    {
        if (is_null($duty_paid_by_contact_name)) {
            array_push($this->openAPINullablesSetToNull, 'duty_paid_by_contact_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('duty_paid_by_contact_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($duty_paid_by_contact_name) && (mb_strlen($duty_paid_by_contact_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $duty_paid_by_contact_name when calling BaseShipmentDTOShippingCosts., must be smaller than or equal to 50.');
        }

        $this->container['duty_paid_by_contact_name'] = $duty_paid_by_contact_name;

        return $this;
    }

    /**
     * Gets duty_paid_by_account
     *
     * @return string|null
     */
    public function getDutyPaidByAccount()
    {
        return $this->container['duty_paid_by_account'];
    }

    /**
     * Sets duty_paid_by_account
     *
     * @param string|null $duty_paid_by_account Account number of the person or company who is responsible for paying international shipping duties.
     *
     * @return self
     */
    public function setDutyPaidByAccount($duty_paid_by_account)
    {
        if (is_null($duty_paid_by_account)) {
            array_push($this->openAPINullablesSetToNull, 'duty_paid_by_account');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('duty_paid_by_account', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($duty_paid_by_account) && (mb_strlen($duty_paid_by_account) > 50)) {
            throw new \InvalidArgumentException('invalid length for $duty_paid_by_account when calling BaseShipmentDTOShippingCosts., must be smaller than or equal to 50.');
        }

        $this->container['duty_paid_by_account'] = $duty_paid_by_account;

        return $this;
    }

    /**
     * Gets duty_paid_by_postal_code
     *
     * @return string|null
     */
    public function getDutyPaidByPostalCode()
    {
        return $this->container['duty_paid_by_postal_code'];
    }

    /**
     * Sets duty_paid_by_postal_code
     *
     * @param string|null $duty_paid_by_postal_code Postal code of the address for the person or company who is responsible for paying international shipping duties.
     *
     * @return self
     */
    public function setDutyPaidByPostalCode($duty_paid_by_postal_code)
    {
        if (is_null($duty_paid_by_postal_code)) {
            array_push($this->openAPINullablesSetToNull, 'duty_paid_by_postal_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('duty_paid_by_postal_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($duty_paid_by_postal_code) && (mb_strlen($duty_paid_by_postal_code) > 50)) {
            throw new \InvalidArgumentException('invalid length for $duty_paid_by_postal_code when calling BaseShipmentDTOShippingCosts., must be smaller than or equal to 50.');
        }

        $this->container['duty_paid_by_postal_code'] = $duty_paid_by_postal_code;

        return $this;
    }

    /**
     * Gets duty_paid_by_country
     *
     * @return string|null
     */
    public function getDutyPaidByCountry()
    {
        return $this->container['duty_paid_by_country'];
    }

    /**
     * Sets duty_paid_by_country
     *
     * @param string|null $duty_paid_by_country Country of the address for the person or company who is responsible for paying international shipping duties.
     *
     * @return self
     */
    public function setDutyPaidByCountry($duty_paid_by_country)
    {
        if (is_null($duty_paid_by_country)) {
            array_push($this->openAPINullablesSetToNull, 'duty_paid_by_country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('duty_paid_by_country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($duty_paid_by_country) && (mb_strlen($duty_paid_by_country) > 50)) {
            throw new \InvalidArgumentException('invalid length for $duty_paid_by_country when calling BaseShipmentDTOShippingCosts., must be smaller than or equal to 50.');
        }

        $this->container['duty_paid_by_country'] = $duty_paid_by_country;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


