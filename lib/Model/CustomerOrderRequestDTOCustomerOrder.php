<?php
/**
 * CustomerOrderRequestDTOCustomerOrder
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deposco API
 *
 * Welcome to the Deposco API Reference! The Deposco API enables you to integrate your system with Deposco.  * Integrate a product information system (PIM) by creating and retrieving data for items, packs, UPCs, and kits. * Set up warehouse data by creating facilities, zones, locations, and storage details. * Create inbound orders that can be received and outbound orders that can be fulfilled with Deposco warehouse management processes.  This reference provides details on available operations, endpoints, parameters, schemas, and responses.  Example requests and responses are also available for you to use as a reference. You can copy the examples to use as a starting point for your own requests.  Review the guides to learn how the API is used in common business scenarios such as setting up the warehouse and integrating a Product Information Management (PIM) system.  When you're ready to get started, register for a developer account and then log in to create your application in the developer portal.
 *
 * The version of the OpenAPI document: 2.0.2519
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\Deposco\Model;

use \ArrayAccess;
use \BeLenka\Deposco\ObjectSerializer;

/**
 * CustomerOrderRequestDTOCustomerOrder Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CustomerOrderRequestDTOCustomerOrder implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CustomerOrderRequestDTO_customerOrder';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'self' => '\BeLenka\Deposco\Model\EntityRef',
        'business_unit' => '\BeLenka\Deposco\Model\EntityRef',
        'number' => 'string',
        'status' => 'string',
        'order_type' => 'string',
        'delivery_type' => 'string',
        'order_priority' => 'string',
        'order_summary' => 'string',
        'order_source' => 'string',
        'secondary_order_source' => 'string',
        'external_order_number' => 'string',
        'related_order_number' => 'string',
        'parent_order' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'contract_number' => 'string',
        'placed_date' => '\DateTime',
        'trading_partner' => '\BeLenka\Deposco\Model\EntityRef',
        'trading_partner_site' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'mark_for_site' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'cx_customer' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'account_number' => 'string',
        'ship_to_contact' => '\BeLenka\Deposco\Model\CustomerOrderDTOShipToContact',
        'bill_to_contact' => '\BeLenka\Deposco\Model\CustomerOrderDTOBillToContact',
        'freight_bill_to_account' => 'string',
        'freight_bill_to_contact' => '\BeLenka\Deposco\Model\CustomerOrderDTOFreightBillToContact',
        'ship_from_contact' => '\BeLenka\Deposco\Model\CustomerOrderDTOShipFromContact',
        'return_to_contact' => '\BeLenka\Deposco\Model\CustomerOrderDTOReturnToContact',
        'remit_to_contact' => '\BeLenka\Deposco\Model\CustomerOrderDTORemitToContact',
        'seller_contact' => '\BeLenka\Deposco\Model\CustomerOrderDTOSellerContact',
        'sales_rep_contact' => '\BeLenka\Deposco\Model\CustomerOrderDTOSalesRepContact',
        'price_list' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'total' => 'int',
        'sub_total' => 'int',
        'discount_subtotal' => 'int',
        'shipping_total' => 'int',
        'shipping_amount' => 'int',
        'taxable' => 'bool',
        'tax_total' => 'int',
        'taxable_total' => 'int',
        'untaxable_total' => 'int',
        'ship_tax_total' => 'int',
        'insurance_total' => 'int',
        'currency_code' => 'string',
        'payment_status' => 'string',
        'ship_via' => 'string',
        'shipping_service' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'ship_vendor' => 'string',
        'freight_terms_type' => 'string',
        'weight' => '\BeLenka\Deposco\Model\CustomerOrderDTOWeight',
        'return_required' => 'bool',
        'return_ship_via' => 'string',
        'return_shipping_service' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'return_ship_option' => 'string',
        'delivery_confirmation' => 'string',
        'insurance_required' => 'bool',
        'home_delivery' => 'bool',
        'residential' => 'bool',
        'saturday_delivery' => 'bool',
        'scac_code' => 'string',
        'trans_method_code' => 'string',
        'routing_number' => 'string',
        'duty_paid_by' => 'string',
        'incoterms_type' => 'string',
        'import_type' => 'string',
        'other_reference_number' => 'string',
        'other_reference_number2' => 'string',
        'integration_point' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'primary_sales_channel' => '\BeLenka\Deposco\Model\EntityRef',
        'fulfillment_sales_channel' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'co_management_profile' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'routing_profile' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'consolidation_group_key' => 'string',
        'sale_condition_code' => 'string',
        'department' => 'string',
        'division' => 'string',
        'verbal_confirmation_name' => 'string',
        'verbal_confirmation_phone_number' => 'string',
        'custom_attribute1' => 'string',
        'custom_attribute2' => 'string',
        'custom_attribute3' => 'string',
        'custom_attribute4' => 'string',
        'custom_attribute5' => 'string',
        'custom_attribute6' => 'string',
        'custom_attribute7' => 'string',
        'custom_attribute8' => 'string',
        'custom_attribute9' => 'string',
        'custom_attribute10' => 'string',
        'co_lines' => '\BeLenka\Deposco\Model\CustomerOrderLineCollectionDTO',
        'co_dates' => '\BeLenka\Deposco\Model\CustomerOrderDateDTO[]',
        'co_notes' => '\BeLenka\Deposco\Model\CustomerOrderNoteDTO[]',
        'fulfillment_orders' => '\BeLenka\Deposco\Model\EntityRef[]',
        'carrier_special_services' => '\BeLenka\Deposco\Model\CarrierSpecialServiceDTO[]',
        'checkout_promise_ref' => 'string',
        'channels' => '\BeLenka\Deposco\Model\ChannelDTO[]',
        'created_date' => '\DateTime',
        'updated_date' => '\DateTime',
        'created_by' => '\BeLenka\Deposco\Model\EntityRef',
        'updated_by' => '\BeLenka\Deposco\Model\EntityRef',
        'co_payment_terms' => '\BeLenka\Deposco\Model\CustomerOrderPaymentTermDTO[]',
        'co_payments' => '\BeLenka\Deposco\Model\CustomerOrderPaymentDTO[]',
        'co_charge_allowances' => '\BeLenka\Deposco\Model\CustomerOrderChargeAllowanceDTO[]',
        'co_taxes' => '\BeLenka\Deposco\Model\CustomerOrderTaxDTO[]',
        'co_retail_activities' => '\BeLenka\Deposco\Model\CustomerOrderRetailActivityDTO[]',
        'co_refunds' => '\BeLenka\Deposco\Model\CustomerOrderRefundDTO[]',
        'co_references' => '\BeLenka\Deposco\Model\CustomerOrderReferenceDTO[]',
        'tags' => '\BeLenka\Deposco\Model\CustomerOrderTagDTO[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'self' => null,
        'business_unit' => null,
        'number' => null,
        'status' => null,
        'order_type' => null,
        'delivery_type' => null,
        'order_priority' => null,
        'order_summary' => null,
        'order_source' => null,
        'secondary_order_source' => null,
        'external_order_number' => null,
        'related_order_number' => null,
        'parent_order' => null,
        'contract_number' => null,
        'placed_date' => 'date-time',
        'trading_partner' => null,
        'trading_partner_site' => null,
        'mark_for_site' => null,
        'cx_customer' => null,
        'account_number' => null,
        'ship_to_contact' => null,
        'bill_to_contact' => null,
        'freight_bill_to_account' => null,
        'freight_bill_to_contact' => null,
        'ship_from_contact' => null,
        'return_to_contact' => null,
        'remit_to_contact' => null,
        'seller_contact' => null,
        'sales_rep_contact' => null,
        'price_list' => null,
        'total' => 'double',
        'sub_total' => 'double',
        'discount_subtotal' => 'double',
        'shipping_total' => 'double',
        'shipping_amount' => 'double',
        'taxable' => null,
        'tax_total' => 'double',
        'taxable_total' => 'double',
        'untaxable_total' => 'double',
        'ship_tax_total' => 'double',
        'insurance_total' => 'double',
        'currency_code' => null,
        'payment_status' => null,
        'ship_via' => null,
        'shipping_service' => null,
        'ship_vendor' => null,
        'freight_terms_type' => null,
        'weight' => null,
        'return_required' => null,
        'return_ship_via' => null,
        'return_shipping_service' => null,
        'return_ship_option' => null,
        'delivery_confirmation' => null,
        'insurance_required' => null,
        'home_delivery' => null,
        'residential' => null,
        'saturday_delivery' => null,
        'scac_code' => null,
        'trans_method_code' => null,
        'routing_number' => null,
        'duty_paid_by' => null,
        'incoterms_type' => null,
        'import_type' => null,
        'other_reference_number' => null,
        'other_reference_number2' => null,
        'integration_point' => null,
        'primary_sales_channel' => null,
        'fulfillment_sales_channel' => null,
        'co_management_profile' => null,
        'routing_profile' => null,
        'consolidation_group_key' => null,
        'sale_condition_code' => null,
        'department' => null,
        'division' => null,
        'verbal_confirmation_name' => null,
        'verbal_confirmation_phone_number' => null,
        'custom_attribute1' => null,
        'custom_attribute2' => null,
        'custom_attribute3' => null,
        'custom_attribute4' => null,
        'custom_attribute5' => null,
        'custom_attribute6' => null,
        'custom_attribute7' => null,
        'custom_attribute8' => null,
        'custom_attribute9' => null,
        'custom_attribute10' => null,
        'co_lines' => null,
        'co_dates' => null,
        'co_notes' => null,
        'fulfillment_orders' => null,
        'carrier_special_services' => null,
        'checkout_promise_ref' => null,
        'channels' => null,
        'created_date' => 'date-time',
        'updated_date' => 'date-time',
        'created_by' => null,
        'updated_by' => null,
        'co_payment_terms' => null,
        'co_payments' => null,
        'co_charge_allowances' => null,
        'co_taxes' => null,
        'co_retail_activities' => null,
        'co_refunds' => null,
        'co_references' => null,
        'tags' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'self' => false,
        'business_unit' => false,
        'number' => false,
        'status' => true,
        'order_type' => true,
        'delivery_type' => true,
        'order_priority' => false,
        'order_summary' => true,
        'order_source' => true,
        'secondary_order_source' => true,
        'external_order_number' => false,
        'related_order_number' => true,
        'parent_order' => true,
        'contract_number' => true,
        'placed_date' => true,
        'trading_partner' => false,
        'trading_partner_site' => true,
        'mark_for_site' => true,
        'cx_customer' => true,
        'account_number' => true,
        'ship_to_contact' => false,
        'bill_to_contact' => false,
        'freight_bill_to_account' => true,
        'freight_bill_to_contact' => false,
        'ship_from_contact' => false,
        'return_to_contact' => false,
        'remit_to_contact' => false,
        'seller_contact' => false,
        'sales_rep_contact' => false,
        'price_list' => true,
        'total' => false,
        'sub_total' => false,
        'discount_subtotal' => false,
        'shipping_total' => false,
        'shipping_amount' => false,
        'taxable' => false,
        'tax_total' => false,
        'taxable_total' => false,
        'untaxable_total' => false,
        'ship_tax_total' => false,
        'insurance_total' => false,
        'currency_code' => true,
        'payment_status' => true,
        'ship_via' => true,
        'shipping_service' => true,
        'ship_vendor' => true,
        'freight_terms_type' => true,
        'weight' => false,
        'return_required' => false,
        'return_ship_via' => true,
        'return_shipping_service' => true,
        'return_ship_option' => true,
        'delivery_confirmation' => true,
        'insurance_required' => false,
        'home_delivery' => false,
        'residential' => false,
        'saturday_delivery' => false,
        'scac_code' => true,
        'trans_method_code' => true,
        'routing_number' => true,
        'duty_paid_by' => true,
        'incoterms_type' => true,
        'import_type' => true,
        'other_reference_number' => true,
        'other_reference_number2' => true,
        'integration_point' => true,
        'primary_sales_channel' => false,
        'fulfillment_sales_channel' => true,
        'co_management_profile' => true,
        'routing_profile' => true,
        'consolidation_group_key' => true,
        'sale_condition_code' => true,
        'department' => true,
        'division' => true,
        'verbal_confirmation_name' => true,
        'verbal_confirmation_phone_number' => true,
        'custom_attribute1' => true,
        'custom_attribute2' => true,
        'custom_attribute3' => true,
        'custom_attribute4' => true,
        'custom_attribute5' => true,
        'custom_attribute6' => true,
        'custom_attribute7' => true,
        'custom_attribute8' => true,
        'custom_attribute9' => true,
        'custom_attribute10' => true,
        'co_lines' => false,
        'co_dates' => true,
        'co_notes' => true,
        'fulfillment_orders' => true,
        'carrier_special_services' => false,
        'checkout_promise_ref' => true,
        'channels' => true,
        'created_date' => false,
        'updated_date' => false,
        'created_by' => false,
        'updated_by' => false,
        'co_payment_terms' => false,
        'co_payments' => false,
        'co_charge_allowances' => false,
        'co_taxes' => false,
        'co_retail_activities' => false,
        'co_refunds' => false,
        'co_references' => false,
        'tags' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'self' => 'self',
        'business_unit' => 'businessUnit',
        'number' => 'number',
        'status' => 'status',
        'order_type' => 'orderType',
        'delivery_type' => 'deliveryType',
        'order_priority' => 'orderPriority',
        'order_summary' => 'orderSummary',
        'order_source' => 'orderSource',
        'secondary_order_source' => 'secondaryOrderSource',
        'external_order_number' => 'externalOrderNumber',
        'related_order_number' => 'relatedOrderNumber',
        'parent_order' => 'parentOrder',
        'contract_number' => 'contractNumber',
        'placed_date' => 'placedDate',
        'trading_partner' => 'tradingPartner',
        'trading_partner_site' => 'tradingPartnerSite',
        'mark_for_site' => 'markForSite',
        'cx_customer' => 'cxCustomer',
        'account_number' => 'accountNumber',
        'ship_to_contact' => 'shipToContact',
        'bill_to_contact' => 'billToContact',
        'freight_bill_to_account' => 'freightBillToAccount',
        'freight_bill_to_contact' => 'freightBillToContact',
        'ship_from_contact' => 'shipFromContact',
        'return_to_contact' => 'returnToContact',
        'remit_to_contact' => 'remitToContact',
        'seller_contact' => 'sellerContact',
        'sales_rep_contact' => 'salesRepContact',
        'price_list' => 'priceList',
        'total' => 'total',
        'sub_total' => 'subTotal',
        'discount_subtotal' => 'discountSubtotal',
        'shipping_total' => 'shippingTotal',
        'shipping_amount' => 'shippingAmount',
        'taxable' => 'taxable',
        'tax_total' => 'taxTotal',
        'taxable_total' => 'taxableTotal',
        'untaxable_total' => 'untaxableTotal',
        'ship_tax_total' => 'shipTaxTotal',
        'insurance_total' => 'insuranceTotal',
        'currency_code' => 'currencyCode',
        'payment_status' => 'paymentStatus',
        'ship_via' => 'shipVia',
        'shipping_service' => 'shippingService',
        'ship_vendor' => 'shipVendor',
        'freight_terms_type' => 'freightTermsType',
        'weight' => 'weight',
        'return_required' => 'returnRequired',
        'return_ship_via' => 'returnShipVia',
        'return_shipping_service' => 'returnShippingService',
        'return_ship_option' => 'returnShipOption',
        'delivery_confirmation' => 'deliveryConfirmation',
        'insurance_required' => 'insuranceRequired',
        'home_delivery' => 'homeDelivery',
        'residential' => 'residential',
        'saturday_delivery' => 'saturdayDelivery',
        'scac_code' => 'scacCode',
        'trans_method_code' => 'transMethodCode',
        'routing_number' => 'routingNumber',
        'duty_paid_by' => 'dutyPaidBy',
        'incoterms_type' => 'incotermsType',
        'import_type' => 'importType',
        'other_reference_number' => 'otherReferenceNumber',
        'other_reference_number2' => 'otherReferenceNumber2',
        'integration_point' => 'integrationPoint',
        'primary_sales_channel' => 'primarySalesChannel',
        'fulfillment_sales_channel' => 'fulfillmentSalesChannel',
        'co_management_profile' => 'coManagementProfile',
        'routing_profile' => 'routingProfile',
        'consolidation_group_key' => 'consolidationGroupKey',
        'sale_condition_code' => 'saleConditionCode',
        'department' => 'department',
        'division' => 'division',
        'verbal_confirmation_name' => 'verbalConfirmationName',
        'verbal_confirmation_phone_number' => 'verbalConfirmationPhoneNumber',
        'custom_attribute1' => 'customAttribute1',
        'custom_attribute2' => 'customAttribute2',
        'custom_attribute3' => 'customAttribute3',
        'custom_attribute4' => 'customAttribute4',
        'custom_attribute5' => 'customAttribute5',
        'custom_attribute6' => 'customAttribute6',
        'custom_attribute7' => 'customAttribute7',
        'custom_attribute8' => 'customAttribute8',
        'custom_attribute9' => 'customAttribute9',
        'custom_attribute10' => 'customAttribute10',
        'co_lines' => 'coLines',
        'co_dates' => 'coDates',
        'co_notes' => 'coNotes',
        'fulfillment_orders' => 'fulfillmentOrders',
        'carrier_special_services' => 'carrierSpecialServices',
        'checkout_promise_ref' => 'checkoutPromiseRef',
        'channels' => 'channels',
        'created_date' => 'createdDate',
        'updated_date' => 'updatedDate',
        'created_by' => 'createdBy',
        'updated_by' => 'updatedBy',
        'co_payment_terms' => 'coPaymentTerms',
        'co_payments' => 'coPayments',
        'co_charge_allowances' => 'coChargeAllowances',
        'co_taxes' => 'coTaxes',
        'co_retail_activities' => 'coRetailActivities',
        'co_refunds' => 'coRefunds',
        'co_references' => 'coReferences',
        'tags' => 'tags'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'self' => 'setSelf',
        'business_unit' => 'setBusinessUnit',
        'number' => 'setNumber',
        'status' => 'setStatus',
        'order_type' => 'setOrderType',
        'delivery_type' => 'setDeliveryType',
        'order_priority' => 'setOrderPriority',
        'order_summary' => 'setOrderSummary',
        'order_source' => 'setOrderSource',
        'secondary_order_source' => 'setSecondaryOrderSource',
        'external_order_number' => 'setExternalOrderNumber',
        'related_order_number' => 'setRelatedOrderNumber',
        'parent_order' => 'setParentOrder',
        'contract_number' => 'setContractNumber',
        'placed_date' => 'setPlacedDate',
        'trading_partner' => 'setTradingPartner',
        'trading_partner_site' => 'setTradingPartnerSite',
        'mark_for_site' => 'setMarkForSite',
        'cx_customer' => 'setCxCustomer',
        'account_number' => 'setAccountNumber',
        'ship_to_contact' => 'setShipToContact',
        'bill_to_contact' => 'setBillToContact',
        'freight_bill_to_account' => 'setFreightBillToAccount',
        'freight_bill_to_contact' => 'setFreightBillToContact',
        'ship_from_contact' => 'setShipFromContact',
        'return_to_contact' => 'setReturnToContact',
        'remit_to_contact' => 'setRemitToContact',
        'seller_contact' => 'setSellerContact',
        'sales_rep_contact' => 'setSalesRepContact',
        'price_list' => 'setPriceList',
        'total' => 'setTotal',
        'sub_total' => 'setSubTotal',
        'discount_subtotal' => 'setDiscountSubtotal',
        'shipping_total' => 'setShippingTotal',
        'shipping_amount' => 'setShippingAmount',
        'taxable' => 'setTaxable',
        'tax_total' => 'setTaxTotal',
        'taxable_total' => 'setTaxableTotal',
        'untaxable_total' => 'setUntaxableTotal',
        'ship_tax_total' => 'setShipTaxTotal',
        'insurance_total' => 'setInsuranceTotal',
        'currency_code' => 'setCurrencyCode',
        'payment_status' => 'setPaymentStatus',
        'ship_via' => 'setShipVia',
        'shipping_service' => 'setShippingService',
        'ship_vendor' => 'setShipVendor',
        'freight_terms_type' => 'setFreightTermsType',
        'weight' => 'setWeight',
        'return_required' => 'setReturnRequired',
        'return_ship_via' => 'setReturnShipVia',
        'return_shipping_service' => 'setReturnShippingService',
        'return_ship_option' => 'setReturnShipOption',
        'delivery_confirmation' => 'setDeliveryConfirmation',
        'insurance_required' => 'setInsuranceRequired',
        'home_delivery' => 'setHomeDelivery',
        'residential' => 'setResidential',
        'saturday_delivery' => 'setSaturdayDelivery',
        'scac_code' => 'setScacCode',
        'trans_method_code' => 'setTransMethodCode',
        'routing_number' => 'setRoutingNumber',
        'duty_paid_by' => 'setDutyPaidBy',
        'incoterms_type' => 'setIncotermsType',
        'import_type' => 'setImportType',
        'other_reference_number' => 'setOtherReferenceNumber',
        'other_reference_number2' => 'setOtherReferenceNumber2',
        'integration_point' => 'setIntegrationPoint',
        'primary_sales_channel' => 'setPrimarySalesChannel',
        'fulfillment_sales_channel' => 'setFulfillmentSalesChannel',
        'co_management_profile' => 'setCoManagementProfile',
        'routing_profile' => 'setRoutingProfile',
        'consolidation_group_key' => 'setConsolidationGroupKey',
        'sale_condition_code' => 'setSaleConditionCode',
        'department' => 'setDepartment',
        'division' => 'setDivision',
        'verbal_confirmation_name' => 'setVerbalConfirmationName',
        'verbal_confirmation_phone_number' => 'setVerbalConfirmationPhoneNumber',
        'custom_attribute1' => 'setCustomAttribute1',
        'custom_attribute2' => 'setCustomAttribute2',
        'custom_attribute3' => 'setCustomAttribute3',
        'custom_attribute4' => 'setCustomAttribute4',
        'custom_attribute5' => 'setCustomAttribute5',
        'custom_attribute6' => 'setCustomAttribute6',
        'custom_attribute7' => 'setCustomAttribute7',
        'custom_attribute8' => 'setCustomAttribute8',
        'custom_attribute9' => 'setCustomAttribute9',
        'custom_attribute10' => 'setCustomAttribute10',
        'co_lines' => 'setCoLines',
        'co_dates' => 'setCoDates',
        'co_notes' => 'setCoNotes',
        'fulfillment_orders' => 'setFulfillmentOrders',
        'carrier_special_services' => 'setCarrierSpecialServices',
        'checkout_promise_ref' => 'setCheckoutPromiseRef',
        'channels' => 'setChannels',
        'created_date' => 'setCreatedDate',
        'updated_date' => 'setUpdatedDate',
        'created_by' => 'setCreatedBy',
        'updated_by' => 'setUpdatedBy',
        'co_payment_terms' => 'setCoPaymentTerms',
        'co_payments' => 'setCoPayments',
        'co_charge_allowances' => 'setCoChargeAllowances',
        'co_taxes' => 'setCoTaxes',
        'co_retail_activities' => 'setCoRetailActivities',
        'co_refunds' => 'setCoRefunds',
        'co_references' => 'setCoReferences',
        'tags' => 'setTags'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'self' => 'getSelf',
        'business_unit' => 'getBusinessUnit',
        'number' => 'getNumber',
        'status' => 'getStatus',
        'order_type' => 'getOrderType',
        'delivery_type' => 'getDeliveryType',
        'order_priority' => 'getOrderPriority',
        'order_summary' => 'getOrderSummary',
        'order_source' => 'getOrderSource',
        'secondary_order_source' => 'getSecondaryOrderSource',
        'external_order_number' => 'getExternalOrderNumber',
        'related_order_number' => 'getRelatedOrderNumber',
        'parent_order' => 'getParentOrder',
        'contract_number' => 'getContractNumber',
        'placed_date' => 'getPlacedDate',
        'trading_partner' => 'getTradingPartner',
        'trading_partner_site' => 'getTradingPartnerSite',
        'mark_for_site' => 'getMarkForSite',
        'cx_customer' => 'getCxCustomer',
        'account_number' => 'getAccountNumber',
        'ship_to_contact' => 'getShipToContact',
        'bill_to_contact' => 'getBillToContact',
        'freight_bill_to_account' => 'getFreightBillToAccount',
        'freight_bill_to_contact' => 'getFreightBillToContact',
        'ship_from_contact' => 'getShipFromContact',
        'return_to_contact' => 'getReturnToContact',
        'remit_to_contact' => 'getRemitToContact',
        'seller_contact' => 'getSellerContact',
        'sales_rep_contact' => 'getSalesRepContact',
        'price_list' => 'getPriceList',
        'total' => 'getTotal',
        'sub_total' => 'getSubTotal',
        'discount_subtotal' => 'getDiscountSubtotal',
        'shipping_total' => 'getShippingTotal',
        'shipping_amount' => 'getShippingAmount',
        'taxable' => 'getTaxable',
        'tax_total' => 'getTaxTotal',
        'taxable_total' => 'getTaxableTotal',
        'untaxable_total' => 'getUntaxableTotal',
        'ship_tax_total' => 'getShipTaxTotal',
        'insurance_total' => 'getInsuranceTotal',
        'currency_code' => 'getCurrencyCode',
        'payment_status' => 'getPaymentStatus',
        'ship_via' => 'getShipVia',
        'shipping_service' => 'getShippingService',
        'ship_vendor' => 'getShipVendor',
        'freight_terms_type' => 'getFreightTermsType',
        'weight' => 'getWeight',
        'return_required' => 'getReturnRequired',
        'return_ship_via' => 'getReturnShipVia',
        'return_shipping_service' => 'getReturnShippingService',
        'return_ship_option' => 'getReturnShipOption',
        'delivery_confirmation' => 'getDeliveryConfirmation',
        'insurance_required' => 'getInsuranceRequired',
        'home_delivery' => 'getHomeDelivery',
        'residential' => 'getResidential',
        'saturday_delivery' => 'getSaturdayDelivery',
        'scac_code' => 'getScacCode',
        'trans_method_code' => 'getTransMethodCode',
        'routing_number' => 'getRoutingNumber',
        'duty_paid_by' => 'getDutyPaidBy',
        'incoterms_type' => 'getIncotermsType',
        'import_type' => 'getImportType',
        'other_reference_number' => 'getOtherReferenceNumber',
        'other_reference_number2' => 'getOtherReferenceNumber2',
        'integration_point' => 'getIntegrationPoint',
        'primary_sales_channel' => 'getPrimarySalesChannel',
        'fulfillment_sales_channel' => 'getFulfillmentSalesChannel',
        'co_management_profile' => 'getCoManagementProfile',
        'routing_profile' => 'getRoutingProfile',
        'consolidation_group_key' => 'getConsolidationGroupKey',
        'sale_condition_code' => 'getSaleConditionCode',
        'department' => 'getDepartment',
        'division' => 'getDivision',
        'verbal_confirmation_name' => 'getVerbalConfirmationName',
        'verbal_confirmation_phone_number' => 'getVerbalConfirmationPhoneNumber',
        'custom_attribute1' => 'getCustomAttribute1',
        'custom_attribute2' => 'getCustomAttribute2',
        'custom_attribute3' => 'getCustomAttribute3',
        'custom_attribute4' => 'getCustomAttribute4',
        'custom_attribute5' => 'getCustomAttribute5',
        'custom_attribute6' => 'getCustomAttribute6',
        'custom_attribute7' => 'getCustomAttribute7',
        'custom_attribute8' => 'getCustomAttribute8',
        'custom_attribute9' => 'getCustomAttribute9',
        'custom_attribute10' => 'getCustomAttribute10',
        'co_lines' => 'getCoLines',
        'co_dates' => 'getCoDates',
        'co_notes' => 'getCoNotes',
        'fulfillment_orders' => 'getFulfillmentOrders',
        'carrier_special_services' => 'getCarrierSpecialServices',
        'checkout_promise_ref' => 'getCheckoutPromiseRef',
        'channels' => 'getChannels',
        'created_date' => 'getCreatedDate',
        'updated_date' => 'getUpdatedDate',
        'created_by' => 'getCreatedBy',
        'updated_by' => 'getUpdatedBy',
        'co_payment_terms' => 'getCoPaymentTerms',
        'co_payments' => 'getCoPayments',
        'co_charge_allowances' => 'getCoChargeAllowances',
        'co_taxes' => 'getCoTaxes',
        'co_retail_activities' => 'getCoRetailActivities',
        'co_refunds' => 'getCoRefunds',
        'co_references' => 'getCoReferences',
        'tags' => 'getTags'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_BACK_ORDERED = 'Back Ordered';
    public const STATUS_COMPLETE = 'Complete';
    public const STATUS__NEW = 'New';
    public const STATUS_CANCELED = 'Canceled';
    public const STATUS_VOIDED = 'Voided';
    public const STATUS_INCOMPLETE = 'Incomplete';
    public const STATUS_CLOSED = 'Closed';
    public const STATUS_OPEN = 'Open';
    public const STATUS_SOURCED = 'Sourced';
    public const STATUS_ALLOCATING = 'Allocating';
    public const STATUS_PARTIALLY_ALLOCATED = 'Partially Allocated';
    public const STATUS_ALLOCATED = 'Allocated';
    public const STATUS_PARTIALLY_IN_FULFILLMENT = 'Partially InFulfillment';
    public const STATUS_IN_FULFILLMENT = 'InFulfillment';
    public const STATUS_PARTIALLY_RELEASED = 'Partially Released';
    public const STATUS_RELEASED = 'Released';
    public const STATUS_REVIEW = 'Review';
    public const STATUS_ACCEPTED = 'Accepted';
    public const STATUS_DRAFT = 'Draft';
    public const STATUS_TEMPLATE = 'Template';
    public const STATUS_REJECTED = 'Rejected';
    public const STATUS_FUTURE = 'Future';
    public const ORDER_TYPE_STANDARD = 'Standard';
    public const ORDER_TYPE_REORDER = 'Reorder';
    public const ORDER_TYPE_BLANKET = 'Blanket';
    public const ORDER_TYPE_RELEASE = 'Release';
    public const ORDER_TYPE_FULFILLMENT_NETWORK = 'Fulfillment Network';
    public const ORDER_TYPE_RETAIL = 'Retail';
    public const DELIVERY_TYPE_SHIP_FOR_PICKUP = 'ShipForPickup';
    public const DELIVERY_TYPE_STORE_PICKUP = 'StorePickup';
    public const DELIVERY_TYPE_SHIP_TO_CUSTOMER = 'ShipToCustomer';
    public const ORDER_PRIORITY__0 = '0';
    public const ORDER_PRIORITY__1 = '1';
    public const ORDER_PRIORITY__2 = '2';
    public const ORDER_PRIORITY__3 = '3';
    public const ORDER_PRIORITY__4 = '4';
    public const ORDER_PRIORITY__5 = '5';
    public const FREIGHT_TERMS_TYPE_PREPAID = 'Prepaid';
    public const FREIGHT_TERMS_TYPE_COLLECT = 'Collect';
    public const FREIGHT_TERMS_TYPE_THIRD_PARTY = 'Third Party';
    public const FREIGHT_TERMS_TYPE_CONSIGNEE = 'Consignee';
    public const INCOTERMS_TYPE_COLLECT = 'Collect';
    public const INCOTERMS_TYPE_PREPAID = 'Prepaid';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_BACK_ORDERED,
            self::STATUS_COMPLETE,
            self::STATUS__NEW,
            self::STATUS_CANCELED,
            self::STATUS_VOIDED,
            self::STATUS_INCOMPLETE,
            self::STATUS_CLOSED,
            self::STATUS_OPEN,
            self::STATUS_SOURCED,
            self::STATUS_ALLOCATING,
            self::STATUS_PARTIALLY_ALLOCATED,
            self::STATUS_ALLOCATED,
            self::STATUS_PARTIALLY_IN_FULFILLMENT,
            self::STATUS_IN_FULFILLMENT,
            self::STATUS_PARTIALLY_RELEASED,
            self::STATUS_RELEASED,
            self::STATUS_REVIEW,
            self::STATUS_ACCEPTED,
            self::STATUS_DRAFT,
            self::STATUS_TEMPLATE,
            self::STATUS_REJECTED,
            self::STATUS_FUTURE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrderTypeAllowableValues()
    {
        return [
            self::ORDER_TYPE_STANDARD,
            self::ORDER_TYPE_REORDER,
            self::ORDER_TYPE_BLANKET,
            self::ORDER_TYPE_RELEASE,
            self::ORDER_TYPE_FULFILLMENT_NETWORK,
            self::ORDER_TYPE_RETAIL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeliveryTypeAllowableValues()
    {
        return [
            self::DELIVERY_TYPE_SHIP_FOR_PICKUP,
            self::DELIVERY_TYPE_STORE_PICKUP,
            self::DELIVERY_TYPE_SHIP_TO_CUSTOMER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrderPriorityAllowableValues()
    {
        return [
            self::ORDER_PRIORITY__0,
            self::ORDER_PRIORITY__1,
            self::ORDER_PRIORITY__2,
            self::ORDER_PRIORITY__3,
            self::ORDER_PRIORITY__4,
            self::ORDER_PRIORITY__5,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFreightTermsTypeAllowableValues()
    {
        return [
            self::FREIGHT_TERMS_TYPE_PREPAID,
            self::FREIGHT_TERMS_TYPE_COLLECT,
            self::FREIGHT_TERMS_TYPE_THIRD_PARTY,
            self::FREIGHT_TERMS_TYPE_CONSIGNEE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIncotermsTypeAllowableValues()
    {
        return [
            self::INCOTERMS_TYPE_COLLECT,
            self::INCOTERMS_TYPE_PREPAID,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('self', $data ?? [], null);
        $this->setIfExists('business_unit', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('order_type', $data ?? [], null);
        $this->setIfExists('delivery_type', $data ?? [], null);
        $this->setIfExists('order_priority', $data ?? [], null);
        $this->setIfExists('order_summary', $data ?? [], null);
        $this->setIfExists('order_source', $data ?? [], null);
        $this->setIfExists('secondary_order_source', $data ?? [], null);
        $this->setIfExists('external_order_number', $data ?? [], null);
        $this->setIfExists('related_order_number', $data ?? [], null);
        $this->setIfExists('parent_order', $data ?? [], null);
        $this->setIfExists('contract_number', $data ?? [], null);
        $this->setIfExists('placed_date', $data ?? [], null);
        $this->setIfExists('trading_partner', $data ?? [], null);
        $this->setIfExists('trading_partner_site', $data ?? [], null);
        $this->setIfExists('mark_for_site', $data ?? [], null);
        $this->setIfExists('cx_customer', $data ?? [], null);
        $this->setIfExists('account_number', $data ?? [], null);
        $this->setIfExists('ship_to_contact', $data ?? [], null);
        $this->setIfExists('bill_to_contact', $data ?? [], null);
        $this->setIfExists('freight_bill_to_account', $data ?? [], null);
        $this->setIfExists('freight_bill_to_contact', $data ?? [], null);
        $this->setIfExists('ship_from_contact', $data ?? [], null);
        $this->setIfExists('return_to_contact', $data ?? [], null);
        $this->setIfExists('remit_to_contact', $data ?? [], null);
        $this->setIfExists('seller_contact', $data ?? [], null);
        $this->setIfExists('sales_rep_contact', $data ?? [], null);
        $this->setIfExists('price_list', $data ?? [], null);
        $this->setIfExists('total', $data ?? [], null);
        $this->setIfExists('sub_total', $data ?? [], null);
        $this->setIfExists('discount_subtotal', $data ?? [], null);
        $this->setIfExists('shipping_total', $data ?? [], null);
        $this->setIfExists('shipping_amount', $data ?? [], null);
        $this->setIfExists('taxable', $data ?? [], null);
        $this->setIfExists('tax_total', $data ?? [], null);
        $this->setIfExists('taxable_total', $data ?? [], null);
        $this->setIfExists('untaxable_total', $data ?? [], null);
        $this->setIfExists('ship_tax_total', $data ?? [], null);
        $this->setIfExists('insurance_total', $data ?? [], null);
        $this->setIfExists('currency_code', $data ?? [], null);
        $this->setIfExists('payment_status', $data ?? [], null);
        $this->setIfExists('ship_via', $data ?? [], null);
        $this->setIfExists('shipping_service', $data ?? [], null);
        $this->setIfExists('ship_vendor', $data ?? [], null);
        $this->setIfExists('freight_terms_type', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
        $this->setIfExists('return_required', $data ?? [], null);
        $this->setIfExists('return_ship_via', $data ?? [], null);
        $this->setIfExists('return_shipping_service', $data ?? [], null);
        $this->setIfExists('return_ship_option', $data ?? [], null);
        $this->setIfExists('delivery_confirmation', $data ?? [], null);
        $this->setIfExists('insurance_required', $data ?? [], null);
        $this->setIfExists('home_delivery', $data ?? [], null);
        $this->setIfExists('residential', $data ?? [], null);
        $this->setIfExists('saturday_delivery', $data ?? [], null);
        $this->setIfExists('scac_code', $data ?? [], null);
        $this->setIfExists('trans_method_code', $data ?? [], null);
        $this->setIfExists('routing_number', $data ?? [], null);
        $this->setIfExists('duty_paid_by', $data ?? [], null);
        $this->setIfExists('incoterms_type', $data ?? [], null);
        $this->setIfExists('import_type', $data ?? [], null);
        $this->setIfExists('other_reference_number', $data ?? [], null);
        $this->setIfExists('other_reference_number2', $data ?? [], null);
        $this->setIfExists('integration_point', $data ?? [], null);
        $this->setIfExists('primary_sales_channel', $data ?? [], null);
        $this->setIfExists('fulfillment_sales_channel', $data ?? [], null);
        $this->setIfExists('co_management_profile', $data ?? [], null);
        $this->setIfExists('routing_profile', $data ?? [], null);
        $this->setIfExists('consolidation_group_key', $data ?? [], null);
        $this->setIfExists('sale_condition_code', $data ?? [], null);
        $this->setIfExists('department', $data ?? [], null);
        $this->setIfExists('division', $data ?? [], null);
        $this->setIfExists('verbal_confirmation_name', $data ?? [], null);
        $this->setIfExists('verbal_confirmation_phone_number', $data ?? [], null);
        $this->setIfExists('custom_attribute1', $data ?? [], null);
        $this->setIfExists('custom_attribute2', $data ?? [], null);
        $this->setIfExists('custom_attribute3', $data ?? [], null);
        $this->setIfExists('custom_attribute4', $data ?? [], null);
        $this->setIfExists('custom_attribute5', $data ?? [], null);
        $this->setIfExists('custom_attribute6', $data ?? [], null);
        $this->setIfExists('custom_attribute7', $data ?? [], null);
        $this->setIfExists('custom_attribute8', $data ?? [], null);
        $this->setIfExists('custom_attribute9', $data ?? [], null);
        $this->setIfExists('custom_attribute10', $data ?? [], null);
        $this->setIfExists('co_lines', $data ?? [], null);
        $this->setIfExists('co_dates', $data ?? [], null);
        $this->setIfExists('co_notes', $data ?? [], null);
        $this->setIfExists('fulfillment_orders', $data ?? [], null);
        $this->setIfExists('carrier_special_services', $data ?? [], null);
        $this->setIfExists('checkout_promise_ref', $data ?? [], null);
        $this->setIfExists('channels', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('updated_date', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('updated_by', $data ?? [], null);
        $this->setIfExists('co_payment_terms', $data ?? [], null);
        $this->setIfExists('co_payments', $data ?? [], null);
        $this->setIfExists('co_charge_allowances', $data ?? [], null);
        $this->setIfExists('co_taxes', $data ?? [], null);
        $this->setIfExists('co_retail_activities', $data ?? [], null);
        $this->setIfExists('co_refunds', $data ?? [], null);
        $this->setIfExists('co_references', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['business_unit'] === null) {
            $invalidProperties[] = "'business_unit' can't be null";
        }
        if (!is_null($this->container['number']) && (mb_strlen($this->container['number']) > 50)) {
            $invalidProperties[] = "invalid value for 'number', the character length must be smaller than or equal to 50.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOrderTypeAllowableValues();
        if (!is_null($this->container['order_type']) && !in_array($this->container['order_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'order_type', must be one of '%s'",
                $this->container['order_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDeliveryTypeAllowableValues();
        if (!is_null($this->container['delivery_type']) && !in_array($this->container['delivery_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'delivery_type', must be one of '%s'",
                $this->container['delivery_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOrderPriorityAllowableValues();
        if (!is_null($this->container['order_priority']) && !in_array($this->container['order_priority'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'order_priority', must be one of '%s'",
                $this->container['order_priority'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['order_summary']) && (mb_strlen($this->container['order_summary']) > 1000)) {
            $invalidProperties[] = "invalid value for 'order_summary', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['order_source']) && (mb_strlen($this->container['order_source']) > 100)) {
            $invalidProperties[] = "invalid value for 'order_source', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['secondary_order_source']) && (mb_strlen($this->container['secondary_order_source']) > 100)) {
            $invalidProperties[] = "invalid value for 'secondary_order_source', the character length must be smaller than or equal to 100.";
        }

        if ($this->container['external_order_number'] === null) {
            $invalidProperties[] = "'external_order_number' can't be null";
        }
        if ((mb_strlen($this->container['external_order_number']) > 150)) {
            $invalidProperties[] = "invalid value for 'external_order_number', the character length must be smaller than or equal to 150.";
        }

        if (!preg_match("/.*\\S.*/", $this->container['external_order_number'])) {
            $invalidProperties[] = "invalid value for 'external_order_number', must be conform to the pattern /.*\\S.*/.";
        }

        if (!is_null($this->container['related_order_number']) && (mb_strlen($this->container['related_order_number']) > 256)) {
            $invalidProperties[] = "invalid value for 'related_order_number', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['contract_number']) && (mb_strlen($this->container['contract_number']) > 150)) {
            $invalidProperties[] = "invalid value for 'contract_number', the character length must be smaller than or equal to 150.";
        }

        if ($this->container['placed_date'] === null) {
            $invalidProperties[] = "'placed_date' can't be null";
        }
        if ($this->container['trading_partner'] === null) {
            $invalidProperties[] = "'trading_partner' can't be null";
        }
        if (!is_null($this->container['account_number']) && (mb_strlen($this->container['account_number']) > 256)) {
            $invalidProperties[] = "invalid value for 'account_number', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['freight_bill_to_account']) && (mb_strlen($this->container['freight_bill_to_account']) > 50)) {
            $invalidProperties[] = "invalid value for 'freight_bill_to_account', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['total']) && ($this->container['total'] > 0)) {
            $invalidProperties[] = "invalid value for 'total', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['total']) && ($this->container['total'] < 0)) {
            $invalidProperties[] = "invalid value for 'total', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['sub_total']) && ($this->container['sub_total'] > 0)) {
            $invalidProperties[] = "invalid value for 'sub_total', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['sub_total']) && ($this->container['sub_total'] < 0)) {
            $invalidProperties[] = "invalid value for 'sub_total', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['discount_subtotal']) && ($this->container['discount_subtotal'] > 0)) {
            $invalidProperties[] = "invalid value for 'discount_subtotal', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['discount_subtotal']) && ($this->container['discount_subtotal'] < 0)) {
            $invalidProperties[] = "invalid value for 'discount_subtotal', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['shipping_total']) && ($this->container['shipping_total'] > 0)) {
            $invalidProperties[] = "invalid value for 'shipping_total', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['shipping_total']) && ($this->container['shipping_total'] < 0)) {
            $invalidProperties[] = "invalid value for 'shipping_total', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['shipping_amount']) && ($this->container['shipping_amount'] > 0)) {
            $invalidProperties[] = "invalid value for 'shipping_amount', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['shipping_amount']) && ($this->container['shipping_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'shipping_amount', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['tax_total']) && ($this->container['tax_total'] > 0)) {
            $invalidProperties[] = "invalid value for 'tax_total', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['tax_total']) && ($this->container['tax_total'] < 0)) {
            $invalidProperties[] = "invalid value for 'tax_total', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['taxable_total']) && ($this->container['taxable_total'] > 0)) {
            $invalidProperties[] = "invalid value for 'taxable_total', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['taxable_total']) && ($this->container['taxable_total'] < 0)) {
            $invalidProperties[] = "invalid value for 'taxable_total', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['untaxable_total']) && ($this->container['untaxable_total'] > 0)) {
            $invalidProperties[] = "invalid value for 'untaxable_total', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['untaxable_total']) && ($this->container['untaxable_total'] < 0)) {
            $invalidProperties[] = "invalid value for 'untaxable_total', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['ship_tax_total']) && ($this->container['ship_tax_total'] > 0)) {
            $invalidProperties[] = "invalid value for 'ship_tax_total', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['ship_tax_total']) && ($this->container['ship_tax_total'] < 0)) {
            $invalidProperties[] = "invalid value for 'ship_tax_total', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['insurance_total']) && ($this->container['insurance_total'] > 0)) {
            $invalidProperties[] = "invalid value for 'insurance_total', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['insurance_total']) && ($this->container['insurance_total'] < 0)) {
            $invalidProperties[] = "invalid value for 'insurance_total', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['currency_code']) && (mb_strlen($this->container['currency_code']) > 4)) {
            $invalidProperties[] = "invalid value for 'currency_code', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['payment_status']) && (mb_strlen($this->container['payment_status']) > 30)) {
            $invalidProperties[] = "invalid value for 'payment_status', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['ship_via']) && (mb_strlen($this->container['ship_via']) > 50)) {
            $invalidProperties[] = "invalid value for 'ship_via', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['ship_vendor']) && (mb_strlen($this->container['ship_vendor']) > 50)) {
            $invalidProperties[] = "invalid value for 'ship_vendor', the character length must be smaller than or equal to 50.";
        }

        $allowedValues = $this->getFreightTermsTypeAllowableValues();
        if (!is_null($this->container['freight_terms_type']) && !in_array($this->container['freight_terms_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'freight_terms_type', must be one of '%s'",
                $this->container['freight_terms_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['return_ship_via']) && (mb_strlen($this->container['return_ship_via']) > 50)) {
            $invalidProperties[] = "invalid value for 'return_ship_via', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['return_ship_option']) && (mb_strlen($this->container['return_ship_option']) > 100)) {
            $invalidProperties[] = "invalid value for 'return_ship_option', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['delivery_confirmation']) && (mb_strlen($this->container['delivery_confirmation']) > 45)) {
            $invalidProperties[] = "invalid value for 'delivery_confirmation', the character length must be smaller than or equal to 45.";
        }

        if (!is_null($this->container['scac_code']) && (mb_strlen($this->container['scac_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'scac_code', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['trans_method_code']) && (mb_strlen($this->container['trans_method_code']) > 50)) {
            $invalidProperties[] = "invalid value for 'trans_method_code', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['routing_number']) && (mb_strlen($this->container['routing_number']) > 30)) {
            $invalidProperties[] = "invalid value for 'routing_number', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['duty_paid_by']) && (mb_strlen($this->container['duty_paid_by']) > 20)) {
            $invalidProperties[] = "invalid value for 'duty_paid_by', the character length must be smaller than or equal to 20.";
        }

        $allowedValues = $this->getIncotermsTypeAllowableValues();
        if (!is_null($this->container['incoterms_type']) && !in_array($this->container['incoterms_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'incoterms_type', must be one of '%s'",
                $this->container['incoterms_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['import_type']) && (mb_strlen($this->container['import_type']) > 100)) {
            $invalidProperties[] = "invalid value for 'import_type', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['other_reference_number']) && (mb_strlen($this->container['other_reference_number']) > 256)) {
            $invalidProperties[] = "invalid value for 'other_reference_number', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['other_reference_number2']) && (mb_strlen($this->container['other_reference_number2']) > 256)) {
            $invalidProperties[] = "invalid value for 'other_reference_number2', the character length must be smaller than or equal to 256.";
        }

        if ($this->container['primary_sales_channel'] === null) {
            $invalidProperties[] = "'primary_sales_channel' can't be null";
        }
        if (!is_null($this->container['consolidation_group_key']) && (mb_strlen($this->container['consolidation_group_key']) > 40)) {
            $invalidProperties[] = "invalid value for 'consolidation_group_key', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['sale_condition_code']) && (mb_strlen($this->container['sale_condition_code']) > 50)) {
            $invalidProperties[] = "invalid value for 'sale_condition_code', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['department']) && (mb_strlen($this->container['department']) > 50)) {
            $invalidProperties[] = "invalid value for 'department', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['division']) && (mb_strlen($this->container['division']) > 50)) {
            $invalidProperties[] = "invalid value for 'division', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['verbal_confirmation_name']) && (mb_strlen($this->container['verbal_confirmation_name']) > 45)) {
            $invalidProperties[] = "invalid value for 'verbal_confirmation_name', the character length must be smaller than or equal to 45.";
        }

        if (!is_null($this->container['verbal_confirmation_phone_number']) && (mb_strlen($this->container['verbal_confirmation_phone_number']) > 45)) {
            $invalidProperties[] = "invalid value for 'verbal_confirmation_phone_number', the character length must be smaller than or equal to 45.";
        }

        if (!is_null($this->container['custom_attribute1']) && (mb_strlen($this->container['custom_attribute1']) > 100)) {
            $invalidProperties[] = "invalid value for 'custom_attribute1', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['custom_attribute2']) && (mb_strlen($this->container['custom_attribute2']) > 100)) {
            $invalidProperties[] = "invalid value for 'custom_attribute2', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['custom_attribute3']) && (mb_strlen($this->container['custom_attribute3']) > 100)) {
            $invalidProperties[] = "invalid value for 'custom_attribute3', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['custom_attribute4']) && (mb_strlen($this->container['custom_attribute4']) > 100)) {
            $invalidProperties[] = "invalid value for 'custom_attribute4', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['custom_attribute5']) && (mb_strlen($this->container['custom_attribute5']) > 100)) {
            $invalidProperties[] = "invalid value for 'custom_attribute5', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['custom_attribute6']) && (mb_strlen($this->container['custom_attribute6']) > 100)) {
            $invalidProperties[] = "invalid value for 'custom_attribute6', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['custom_attribute7']) && (mb_strlen($this->container['custom_attribute7']) > 100)) {
            $invalidProperties[] = "invalid value for 'custom_attribute7', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['custom_attribute8']) && (mb_strlen($this->container['custom_attribute8']) > 100)) {
            $invalidProperties[] = "invalid value for 'custom_attribute8', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['custom_attribute9']) && (mb_strlen($this->container['custom_attribute9']) > 100)) {
            $invalidProperties[] = "invalid value for 'custom_attribute9', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['custom_attribute10']) && (mb_strlen($this->container['custom_attribute10']) > 100)) {
            $invalidProperties[] = "invalid value for 'custom_attribute10', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['checkout_promise_ref']) && (mb_strlen($this->container['checkout_promise_ref']) > 60)) {
            $invalidProperties[] = "invalid value for 'checkout_promise_ref', the character length must be smaller than or equal to 60.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets self
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $self self
     *
     * @return self
     */
    public function setSelf($self)
    {
        if (is_null($self)) {
            throw new \InvalidArgumentException('non-nullable self cannot be null');
        }
        $this->container['self'] = $self;

        return $this;
    }

    /**
     * Gets business_unit
     *
     * @return \BeLenka\Deposco\Model\EntityRef
     */
    public function getBusinessUnit()
    {
        return $this->container['business_unit'];
    }

    /**
     * Sets business_unit
     *
     * @param \BeLenka\Deposco\Model\EntityRef $business_unit business_unit
     *
     * @return self
     */
    public function setBusinessUnit($business_unit)
    {
        if (is_null($business_unit)) {
            throw new \InvalidArgumentException('non-nullable business_unit cannot be null');
        }
        $this->container['business_unit'] = $business_unit;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string|null $number Number that uniquely identifies the customer order.
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }
        if ((mb_strlen($number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $number when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 50.');
        }

        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Status of the customer order.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets order_type
     *
     * @return string|null
     */
    public function getOrderType()
    {
        return $this->container['order_type'];
    }

    /**
     * Sets order_type
     *
     * @param string|null $order_type Type of customer order, which is used in order management profile processing.
     *
     * @return self
     */
    public function setOrderType($order_type)
    {
        if (is_null($order_type)) {
            array_push($this->openAPINullablesSetToNull, 'order_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getOrderTypeAllowableValues();
        if (!is_null($order_type) && !in_array($order_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'order_type', must be one of '%s'",
                    $order_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['order_type'] = $order_type;

        return $this;
    }

    /**
     * Gets delivery_type
     *
     * @return string|null
     */
    public function getDeliveryType()
    {
        return $this->container['delivery_type'];
    }

    /**
     * Sets delivery_type
     *
     * @param string|null $delivery_type Identifies the customer order for special fulfillment scenarios, such as store pickup.
     *
     * @return self
     */
    public function setDeliveryType($delivery_type)
    {
        if (is_null($delivery_type)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getDeliveryTypeAllowableValues();
        if (!is_null($delivery_type) && !in_array($delivery_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'delivery_type', must be one of '%s'",
                    $delivery_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['delivery_type'] = $delivery_type;

        return $this;
    }

    /**
     * Gets order_priority
     *
     * @return string|null
     */
    public function getOrderPriority()
    {
        return $this->container['order_priority'];
    }

    /**
     * Sets order_priority
     *
     * @param string|null $order_priority Numeric value that represents the importance of the order, where 0 is the highest priority, and 5 is the lowest priority.
     *
     * @return self
     */
    public function setOrderPriority($order_priority)
    {
        if (is_null($order_priority)) {
            throw new \InvalidArgumentException('non-nullable order_priority cannot be null');
        }
        $allowedValues = $this->getOrderPriorityAllowableValues();
        if (!in_array($order_priority, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'order_priority', must be one of '%s'",
                    $order_priority,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['order_priority'] = $order_priority;

        return $this;
    }

    /**
     * Gets order_summary
     *
     * @return string|null
     */
    public function getOrderSummary()
    {
        return $this->container['order_summary'];
    }

    /**
     * Sets order_summary
     *
     * @param string|null $order_summary Additional information about the order.
     *
     * @return self
     */
    public function setOrderSummary($order_summary)
    {
        if (is_null($order_summary)) {
            array_push($this->openAPINullablesSetToNull, 'order_summary');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_summary', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($order_summary) && (mb_strlen($order_summary) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $order_summary when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 1000.');
        }

        $this->container['order_summary'] = $order_summary;

        return $this;
    }

    /**
     * Gets order_source
     *
     * @return string|null
     */
    public function getOrderSource()
    {
        return $this->container['order_source'];
    }

    /**
     * Sets order_source
     *
     * @param string|null $order_source Reference field that identifies the source system in which the order was placed.
     *
     * @return self
     */
    public function setOrderSource($order_source)
    {
        if (is_null($order_source)) {
            array_push($this->openAPINullablesSetToNull, 'order_source');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_source', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($order_source) && (mb_strlen($order_source) > 100)) {
            throw new \InvalidArgumentException('invalid length for $order_source when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 100.');
        }

        $this->container['order_source'] = $order_source;

        return $this;
    }

    /**
     * Gets secondary_order_source
     *
     * @return string|null
     */
    public function getSecondaryOrderSource()
    {
        return $this->container['secondary_order_source'];
    }

    /**
     * Sets secondary_order_source
     *
     * @param string|null $secondary_order_source Additional source for the order. For example, the order may have been pulled from a ChannelAdvisor integration but was originally created through Amazon.
     *
     * @return self
     */
    public function setSecondaryOrderSource($secondary_order_source)
    {
        if (is_null($secondary_order_source)) {
            array_push($this->openAPINullablesSetToNull, 'secondary_order_source');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('secondary_order_source', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($secondary_order_source) && (mb_strlen($secondary_order_source) > 100)) {
            throw new \InvalidArgumentException('invalid length for $secondary_order_source when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 100.');
        }

        $this->container['secondary_order_source'] = $secondary_order_source;

        return $this;
    }

    /**
     * Gets external_order_number
     *
     * @return string
     */
    public function getExternalOrderNumber()
    {
        return $this->container['external_order_number'];
    }

    /**
     * Sets external_order_number
     *
     * @param string $external_order_number Business key or identifier of the order in an external system that is integrated with Deposco. The value can include hyphens (-) but must not include a period (.).
     *
     * @return self
     */
    public function setExternalOrderNumber($external_order_number)
    {
        if (is_null($external_order_number)) {
            throw new \InvalidArgumentException('non-nullable external_order_number cannot be null');
        }
        if ((mb_strlen($external_order_number) > 150)) {
            throw new \InvalidArgumentException('invalid length for $external_order_number when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 150.');
        }
        if ((!preg_match("/.*\\S.*/", ObjectSerializer::toString($external_order_number)))) {
            throw new \InvalidArgumentException("invalid value for \$external_order_number when calling CustomerOrderRequestDTOCustomerOrder., must conform to the pattern /.*\\S.*/.");
        }

        $this->container['external_order_number'] = $external_order_number;

        return $this;
    }

    /**
     * Gets related_order_number
     *
     * @return string|null
     */
    public function getRelatedOrderNumber()
    {
        return $this->container['related_order_number'];
    }

    /**
     * Sets related_order_number
     *
     * @param string|null $related_order_number Order number of another order that is related to this order.
     *
     * @return self
     */
    public function setRelatedOrderNumber($related_order_number)
    {
        if (is_null($related_order_number)) {
            array_push($this->openAPINullablesSetToNull, 'related_order_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('related_order_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($related_order_number) && (mb_strlen($related_order_number) > 256)) {
            throw new \InvalidArgumentException('invalid length for $related_order_number when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 256.');
        }

        $this->container['related_order_number'] = $related_order_number;

        return $this;
    }

    /**
     * Gets parent_order
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getParentOrder()
    {
        return $this->container['parent_order'];
    }

    /**
     * Sets parent_order
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $parent_order parent_order
     *
     * @return self
     */
    public function setParentOrder($parent_order)
    {
        if (is_null($parent_order)) {
            array_push($this->openAPINullablesSetToNull, 'parent_order');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent_order', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parent_order'] = $parent_order;

        return $this;
    }

    /**
     * Gets contract_number
     *
     * @return string|null
     */
    public function getContractNumber()
    {
        return $this->container['contract_number'];
    }

    /**
     * Sets contract_number
     *
     * @param string|null $contract_number Contract number for the order. Used in wholesale B2B scenarios where the order relates to a contract.
     *
     * @return self
     */
    public function setContractNumber($contract_number)
    {
        if (is_null($contract_number)) {
            array_push($this->openAPINullablesSetToNull, 'contract_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contract_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($contract_number) && (mb_strlen($contract_number) > 150)) {
            throw new \InvalidArgumentException('invalid length for $contract_number when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 150.');
        }

        $this->container['contract_number'] = $contract_number;

        return $this;
    }

    /**
     * Gets placed_date
     *
     * @return \DateTime
     */
    public function getPlacedDate()
    {
        return $this->container['placed_date'];
    }

    /**
     * Sets placed_date
     *
     * @param \DateTime $placed_date Date and time that the order was originally placed by the customer. This date can be different than the date that the order was created in Deposco.
     *
     * @return self
     */
    public function setPlacedDate($placed_date)
    {
        if (is_null($placed_date)) {
            array_push($this->openAPINullablesSetToNull, 'placed_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('placed_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['placed_date'] = $placed_date;

        return $this;
    }

    /**
     * Gets trading_partner
     *
     * @return \BeLenka\Deposco\Model\EntityRef
     */
    public function getTradingPartner()
    {
        return $this->container['trading_partner'];
    }

    /**
     * Sets trading_partner
     *
     * @param \BeLenka\Deposco\Model\EntityRef $trading_partner trading_partner
     *
     * @return self
     */
    public function setTradingPartner($trading_partner)
    {
        if (is_null($trading_partner)) {
            throw new \InvalidArgumentException('non-nullable trading_partner cannot be null');
        }
        $this->container['trading_partner'] = $trading_partner;

        return $this;
    }

    /**
     * Gets trading_partner_site
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getTradingPartnerSite()
    {
        return $this->container['trading_partner_site'];
    }

    /**
     * Sets trading_partner_site
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $trading_partner_site trading_partner_site
     *
     * @return self
     */
    public function setTradingPartnerSite($trading_partner_site)
    {
        if (is_null($trading_partner_site)) {
            array_push($this->openAPINullablesSetToNull, 'trading_partner_site');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('trading_partner_site', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['trading_partner_site'] = $trading_partner_site;

        return $this;
    }

    /**
     * Gets mark_for_site
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getMarkForSite()
    {
        return $this->container['mark_for_site'];
    }

    /**
     * Sets mark_for_site
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $mark_for_site mark_for_site
     *
     * @return self
     */
    public function setMarkForSite($mark_for_site)
    {
        if (is_null($mark_for_site)) {
            array_push($this->openAPINullablesSetToNull, 'mark_for_site');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mark_for_site', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mark_for_site'] = $mark_for_site;

        return $this;
    }

    /**
     * Gets cx_customer
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getCxCustomer()
    {
        return $this->container['cx_customer'];
    }

    /**
     * Sets cx_customer
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $cx_customer cx_customer
     *
     * @return self
     */
    public function setCxCustomer($cx_customer)
    {
        if (is_null($cx_customer)) {
            array_push($this->openAPINullablesSetToNull, 'cx_customer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cx_customer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cx_customer'] = $cx_customer;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string|null
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string|null $account_number Account number for the customer or trading partner associated with the order.
     *
     * @return self
     */
    public function setAccountNumber($account_number)
    {
        if (is_null($account_number)) {
            array_push($this->openAPINullablesSetToNull, 'account_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('account_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($account_number) && (mb_strlen($account_number) > 256)) {
            throw new \InvalidArgumentException('invalid length for $account_number when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 256.');
        }

        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets ship_to_contact
     *
     * @return \BeLenka\Deposco\Model\CustomerOrderDTOShipToContact|null
     */
    public function getShipToContact()
    {
        return $this->container['ship_to_contact'];
    }

    /**
     * Sets ship_to_contact
     *
     * @param \BeLenka\Deposco\Model\CustomerOrderDTOShipToContact|null $ship_to_contact ship_to_contact
     *
     * @return self
     */
    public function setShipToContact($ship_to_contact)
    {
        if (is_null($ship_to_contact)) {
            throw new \InvalidArgumentException('non-nullable ship_to_contact cannot be null');
        }
        $this->container['ship_to_contact'] = $ship_to_contact;

        return $this;
    }

    /**
     * Gets bill_to_contact
     *
     * @return \BeLenka\Deposco\Model\CustomerOrderDTOBillToContact|null
     */
    public function getBillToContact()
    {
        return $this->container['bill_to_contact'];
    }

    /**
     * Sets bill_to_contact
     *
     * @param \BeLenka\Deposco\Model\CustomerOrderDTOBillToContact|null $bill_to_contact bill_to_contact
     *
     * @return self
     */
    public function setBillToContact($bill_to_contact)
    {
        if (is_null($bill_to_contact)) {
            throw new \InvalidArgumentException('non-nullable bill_to_contact cannot be null');
        }
        $this->container['bill_to_contact'] = $bill_to_contact;

        return $this;
    }

    /**
     * Gets freight_bill_to_account
     *
     * @return string|null
     */
    public function getFreightBillToAccount()
    {
        return $this->container['freight_bill_to_account'];
    }

    /**
     * Sets freight_bill_to_account
     *
     * @param string|null $freight_bill_to_account Account number that is used to pay shipping costs for the order.
     *
     * @return self
     */
    public function setFreightBillToAccount($freight_bill_to_account)
    {
        if (is_null($freight_bill_to_account)) {
            array_push($this->openAPINullablesSetToNull, 'freight_bill_to_account');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('freight_bill_to_account', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($freight_bill_to_account) && (mb_strlen($freight_bill_to_account) > 50)) {
            throw new \InvalidArgumentException('invalid length for $freight_bill_to_account when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 50.');
        }

        $this->container['freight_bill_to_account'] = $freight_bill_to_account;

        return $this;
    }

    /**
     * Gets freight_bill_to_contact
     *
     * @return \BeLenka\Deposco\Model\CustomerOrderDTOFreightBillToContact|null
     */
    public function getFreightBillToContact()
    {
        return $this->container['freight_bill_to_contact'];
    }

    /**
     * Sets freight_bill_to_contact
     *
     * @param \BeLenka\Deposco\Model\CustomerOrderDTOFreightBillToContact|null $freight_bill_to_contact freight_bill_to_contact
     *
     * @return self
     */
    public function setFreightBillToContact($freight_bill_to_contact)
    {
        if (is_null($freight_bill_to_contact)) {
            throw new \InvalidArgumentException('non-nullable freight_bill_to_contact cannot be null');
        }
        $this->container['freight_bill_to_contact'] = $freight_bill_to_contact;

        return $this;
    }

    /**
     * Gets ship_from_contact
     *
     * @return \BeLenka\Deposco\Model\CustomerOrderDTOShipFromContact|null
     */
    public function getShipFromContact()
    {
        return $this->container['ship_from_contact'];
    }

    /**
     * Sets ship_from_contact
     *
     * @param \BeLenka\Deposco\Model\CustomerOrderDTOShipFromContact|null $ship_from_contact ship_from_contact
     *
     * @return self
     */
    public function setShipFromContact($ship_from_contact)
    {
        if (is_null($ship_from_contact)) {
            throw new \InvalidArgumentException('non-nullable ship_from_contact cannot be null');
        }
        $this->container['ship_from_contact'] = $ship_from_contact;

        return $this;
    }

    /**
     * Gets return_to_contact
     *
     * @return \BeLenka\Deposco\Model\CustomerOrderDTOReturnToContact|null
     */
    public function getReturnToContact()
    {
        return $this->container['return_to_contact'];
    }

    /**
     * Sets return_to_contact
     *
     * @param \BeLenka\Deposco\Model\CustomerOrderDTOReturnToContact|null $return_to_contact return_to_contact
     *
     * @return self
     */
    public function setReturnToContact($return_to_contact)
    {
        if (is_null($return_to_contact)) {
            throw new \InvalidArgumentException('non-nullable return_to_contact cannot be null');
        }
        $this->container['return_to_contact'] = $return_to_contact;

        return $this;
    }

    /**
     * Gets remit_to_contact
     *
     * @return \BeLenka\Deposco\Model\CustomerOrderDTORemitToContact|null
     */
    public function getRemitToContact()
    {
        return $this->container['remit_to_contact'];
    }

    /**
     * Sets remit_to_contact
     *
     * @param \BeLenka\Deposco\Model\CustomerOrderDTORemitToContact|null $remit_to_contact remit_to_contact
     *
     * @return self
     */
    public function setRemitToContact($remit_to_contact)
    {
        if (is_null($remit_to_contact)) {
            throw new \InvalidArgumentException('non-nullable remit_to_contact cannot be null');
        }
        $this->container['remit_to_contact'] = $remit_to_contact;

        return $this;
    }

    /**
     * Gets seller_contact
     *
     * @return \BeLenka\Deposco\Model\CustomerOrderDTOSellerContact|null
     */
    public function getSellerContact()
    {
        return $this->container['seller_contact'];
    }

    /**
     * Sets seller_contact
     *
     * @param \BeLenka\Deposco\Model\CustomerOrderDTOSellerContact|null $seller_contact seller_contact
     *
     * @return self
     */
    public function setSellerContact($seller_contact)
    {
        if (is_null($seller_contact)) {
            throw new \InvalidArgumentException('non-nullable seller_contact cannot be null');
        }
        $this->container['seller_contact'] = $seller_contact;

        return $this;
    }

    /**
     * Gets sales_rep_contact
     *
     * @return \BeLenka\Deposco\Model\CustomerOrderDTOSalesRepContact|null
     */
    public function getSalesRepContact()
    {
        return $this->container['sales_rep_contact'];
    }

    /**
     * Sets sales_rep_contact
     *
     * @param \BeLenka\Deposco\Model\CustomerOrderDTOSalesRepContact|null $sales_rep_contact sales_rep_contact
     *
     * @return self
     */
    public function setSalesRepContact($sales_rep_contact)
    {
        if (is_null($sales_rep_contact)) {
            throw new \InvalidArgumentException('non-nullable sales_rep_contact cannot be null');
        }
        $this->container['sales_rep_contact'] = $sales_rep_contact;

        return $this;
    }

    /**
     * Gets price_list
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getPriceList()
    {
        return $this->container['price_list'];
    }

    /**
     * Sets price_list
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $price_list price_list
     *
     * @return self
     */
    public function setPriceList($price_list)
    {
        if (is_null($price_list)) {
            array_push($this->openAPINullablesSetToNull, 'price_list');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('price_list', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['price_list'] = $price_list;

        return $this;
    }

    /**
     * Gets total
     *
     * @return int|null
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param int|null $total Calculated, if possible, based on the item quantity and unit price for each order line.
     *
     * @return self
     */
    public function setTotal($total)
    {
        if (is_null($total)) {
            throw new \InvalidArgumentException('non-nullable total cannot be null');
        }

        if (($total > 0)) {
            throw new \InvalidArgumentException('invalid value for $total when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 0.');
        }
        if (($total < 0)) {
            throw new \InvalidArgumentException('invalid value for $total when calling CustomerOrderRequestDTOCustomerOrder., must be bigger than or equal to 0.');
        }

        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets sub_total
     *
     * @return int|null
     */
    public function getSubTotal()
    {
        return $this->container['sub_total'];
    }

    /**
     * Sets sub_total
     *
     * @param int|null $sub_total Sum of the line total from all order lines for the order.
     *
     * @return self
     */
    public function setSubTotal($sub_total)
    {
        if (is_null($sub_total)) {
            throw new \InvalidArgumentException('non-nullable sub_total cannot be null');
        }

        if (($sub_total > 0)) {
            throw new \InvalidArgumentException('invalid value for $sub_total when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 0.');
        }
        if (($sub_total < 0)) {
            throw new \InvalidArgumentException('invalid value for $sub_total when calling CustomerOrderRequestDTOCustomerOrder., must be bigger than or equal to 0.');
        }

        $this->container['sub_total'] = $sub_total;

        return $this;
    }

    /**
     * Gets discount_subtotal
     *
     * @return int|null
     */
    public function getDiscountSubtotal()
    {
        return $this->container['discount_subtotal'];
    }

    /**
     * Sets discount_subtotal
     *
     * @param int|null $discount_subtotal Total discount amount across the entire order (discount amount for all order lines multiplied by the order quantity and the pack quantity).
     *
     * @return self
     */
    public function setDiscountSubtotal($discount_subtotal)
    {
        if (is_null($discount_subtotal)) {
            throw new \InvalidArgumentException('non-nullable discount_subtotal cannot be null');
        }

        if (($discount_subtotal > 0)) {
            throw new \InvalidArgumentException('invalid value for $discount_subtotal when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 0.');
        }
        if (($discount_subtotal < 0)) {
            throw new \InvalidArgumentException('invalid value for $discount_subtotal when calling CustomerOrderRequestDTOCustomerOrder., must be bigger than or equal to 0.');
        }

        $this->container['discount_subtotal'] = $discount_subtotal;

        return $this;
    }

    /**
     * Gets shipping_total
     *
     * @return int|null
     */
    public function getShippingTotal()
    {
        return $this->container['shipping_total'];
    }

    /**
     * Sets shipping_total
     *
     * @param int|null $shipping_total Total cost (or estimated cost) to ship the entire order. Typically populated as the order is captured in the sales system when a customer is paying for shipping.
     *
     * @return self
     */
    public function setShippingTotal($shipping_total)
    {
        if (is_null($shipping_total)) {
            throw new \InvalidArgumentException('non-nullable shipping_total cannot be null');
        }

        if (($shipping_total > 0)) {
            throw new \InvalidArgumentException('invalid value for $shipping_total when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 0.');
        }
        if (($shipping_total < 0)) {
            throw new \InvalidArgumentException('invalid value for $shipping_total when calling CustomerOrderRequestDTOCustomerOrder., must be bigger than or equal to 0.');
        }

        $this->container['shipping_total'] = $shipping_total;

        return $this;
    }

    /**
     * Gets shipping_amount
     *
     * @return int|null
     */
    public function getShippingAmount()
    {
        return $this->container['shipping_amount'];
    }

    /**
     * Sets shipping_amount
     *
     * @param int|null $shipping_amount Total of the actual shipping costs for all shipments for the order.
     *
     * @return self
     */
    public function setShippingAmount($shipping_amount)
    {
        if (is_null($shipping_amount)) {
            throw new \InvalidArgumentException('non-nullable shipping_amount cannot be null');
        }

        if (($shipping_amount > 0)) {
            throw new \InvalidArgumentException('invalid value for $shipping_amount when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 0.');
        }
        if (($shipping_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $shipping_amount when calling CustomerOrderRequestDTOCustomerOrder., must be bigger than or equal to 0.');
        }

        $this->container['shipping_amount'] = $shipping_amount;

        return $this;
    }

    /**
     * Gets taxable
     *
     * @return bool|null
     */
    public function getTaxable()
    {
        return $this->container['taxable'];
    }

    /**
     * Sets taxable
     *
     * @param bool|null $taxable Whether the order includes items that qualify as taxable.
     *
     * @return self
     */
    public function setTaxable($taxable)
    {
        if (is_null($taxable)) {
            throw new \InvalidArgumentException('non-nullable taxable cannot be null');
        }
        $this->container['taxable'] = $taxable;

        return $this;
    }

    /**
     * Gets tax_total
     *
     * @return int|null
     */
    public function getTaxTotal()
    {
        return $this->container['tax_total'];
    }

    /**
     * Sets tax_total
     *
     * @param int|null $tax_total Sum of the tax amount from all order lines for the order.
     *
     * @return self
     */
    public function setTaxTotal($tax_total)
    {
        if (is_null($tax_total)) {
            throw new \InvalidArgumentException('non-nullable tax_total cannot be null');
        }

        if (($tax_total > 0)) {
            throw new \InvalidArgumentException('invalid value for $tax_total when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 0.');
        }
        if (($tax_total < 0)) {
            throw new \InvalidArgumentException('invalid value for $tax_total when calling CustomerOrderRequestDTOCustomerOrder., must be bigger than or equal to 0.');
        }

        $this->container['tax_total'] = $tax_total;

        return $this;
    }

    /**
     * Gets taxable_total
     *
     * @return int|null
     */
    public function getTaxableTotal()
    {
        return $this->container['taxable_total'];
    }

    /**
     * Sets taxable_total
     *
     * @param int|null $taxable_total Sum of the values of the taxable items and quantities for all order lines on the order.
     *
     * @return self
     */
    public function setTaxableTotal($taxable_total)
    {
        if (is_null($taxable_total)) {
            throw new \InvalidArgumentException('non-nullable taxable_total cannot be null');
        }

        if (($taxable_total > 0)) {
            throw new \InvalidArgumentException('invalid value for $taxable_total when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 0.');
        }
        if (($taxable_total < 0)) {
            throw new \InvalidArgumentException('invalid value for $taxable_total when calling CustomerOrderRequestDTOCustomerOrder., must be bigger than or equal to 0.');
        }

        $this->container['taxable_total'] = $taxable_total;

        return $this;
    }

    /**
     * Gets untaxable_total
     *
     * @return int|null
     */
    public function getUntaxableTotal()
    {
        return $this->container['untaxable_total'];
    }

    /**
     * Sets untaxable_total
     *
     * @param int|null $untaxable_total Sum of the values of the items and quantities that are not taxable for all order lines on the order.
     *
     * @return self
     */
    public function setUntaxableTotal($untaxable_total)
    {
        if (is_null($untaxable_total)) {
            throw new \InvalidArgumentException('non-nullable untaxable_total cannot be null');
        }

        if (($untaxable_total > 0)) {
            throw new \InvalidArgumentException('invalid value for $untaxable_total when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 0.');
        }
        if (($untaxable_total < 0)) {
            throw new \InvalidArgumentException('invalid value for $untaxable_total when calling CustomerOrderRequestDTOCustomerOrder., must be bigger than or equal to 0.');
        }

        $this->container['untaxable_total'] = $untaxable_total;

        return $this;
    }

    /**
     * Gets ship_tax_total
     *
     * @return int|null
     */
    public function getShipTaxTotal()
    {
        return $this->container['ship_tax_total'];
    }

    /**
     * Sets ship_tax_total
     *
     * @param int|null $ship_tax_total Sum of the shipping tax total for all order lines for the order.
     *
     * @return self
     */
    public function setShipTaxTotal($ship_tax_total)
    {
        if (is_null($ship_tax_total)) {
            throw new \InvalidArgumentException('non-nullable ship_tax_total cannot be null');
        }

        if (($ship_tax_total > 0)) {
            throw new \InvalidArgumentException('invalid value for $ship_tax_total when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 0.');
        }
        if (($ship_tax_total < 0)) {
            throw new \InvalidArgumentException('invalid value for $ship_tax_total when calling CustomerOrderRequestDTOCustomerOrder., must be bigger than or equal to 0.');
        }

        $this->container['ship_tax_total'] = $ship_tax_total;

        return $this;
    }

    /**
     * Gets insurance_total
     *
     * @return int|null
     */
    public function getInsuranceTotal()
    {
        return $this->container['insurance_total'];
    }

    /**
     * Sets insurance_total
     *
     * @param int|null $insurance_total Sum of the insurance to apply for all order lines on the order.
     *
     * @return self
     */
    public function setInsuranceTotal($insurance_total)
    {
        if (is_null($insurance_total)) {
            throw new \InvalidArgumentException('non-nullable insurance_total cannot be null');
        }

        if (($insurance_total > 0)) {
            throw new \InvalidArgumentException('invalid value for $insurance_total when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 0.');
        }
        if (($insurance_total < 0)) {
            throw new \InvalidArgumentException('invalid value for $insurance_total when calling CustomerOrderRequestDTOCustomerOrder., must be bigger than or equal to 0.');
        }

        $this->container['insurance_total'] = $insurance_total;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code ISO 4217 code for the currency used on the order, such as `USD`, `GBP`, or `EUR`.
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        if (is_null($currency_code)) {
            array_push($this->openAPINullablesSetToNull, 'currency_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currency_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($currency_code) && (mb_strlen($currency_code) > 4)) {
            throw new \InvalidArgumentException('invalid length for $currency_code when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 4.');
        }

        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets payment_status
     *
     * @return string|null
     */
    public function getPaymentStatus()
    {
        return $this->container['payment_status'];
    }

    /**
     * Sets payment_status
     *
     * @param string|null $payment_status Status of the payment for the order.
     *
     * @return self
     */
    public function setPaymentStatus($payment_status)
    {
        if (is_null($payment_status)) {
            array_push($this->openAPINullablesSetToNull, 'payment_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($payment_status) && (mb_strlen($payment_status) > 30)) {
            throw new \InvalidArgumentException('invalid length for $payment_status when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 30.');
        }

        $this->container['payment_status'] = $payment_status;

        return $this;
    }

    /**
     * Gets ship_via
     *
     * @return string|null
     */
    public function getShipVia()
    {
        return $this->container['ship_via'];
    }

    /**
     * Sets ship_via
     *
     * @param string|null $ship_via Shipping service that is used to ship the order.
     *
     * @return self
     */
    public function setShipVia($ship_via)
    {
        if (is_null($ship_via)) {
            array_push($this->openAPINullablesSetToNull, 'ship_via');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ship_via', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($ship_via) && (mb_strlen($ship_via) > 50)) {
            throw new \InvalidArgumentException('invalid length for $ship_via when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 50.');
        }

        $this->container['ship_via'] = $ship_via;

        return $this;
    }

    /**
     * Gets shipping_service
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getShippingService()
    {
        return $this->container['shipping_service'];
    }

    /**
     * Sets shipping_service
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $shipping_service shipping_service
     *
     * @return self
     */
    public function setShippingService($shipping_service)
    {
        if (is_null($shipping_service)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_service');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_service', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shipping_service'] = $shipping_service;

        return $this;
    }

    /**
     * Gets ship_vendor
     *
     * @return string|null
     */
    public function getShipVendor()
    {
        return $this->container['ship_vendor'];
    }

    /**
     * Sets ship_vendor
     *
     * @param string|null $ship_vendor Shipping carrier, such as UPS, that is used to ship the order.
     *
     * @return self
     */
    public function setShipVendor($ship_vendor)
    {
        if (is_null($ship_vendor)) {
            array_push($this->openAPINullablesSetToNull, 'ship_vendor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ship_vendor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($ship_vendor) && (mb_strlen($ship_vendor) > 50)) {
            throw new \InvalidArgumentException('invalid length for $ship_vendor when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 50.');
        }

        $this->container['ship_vendor'] = $ship_vendor;

        return $this;
    }

    /**
     * Gets freight_terms_type
     *
     * @return string|null
     */
    public function getFreightTermsType()
    {
        return $this->container['freight_terms_type'];
    }

    /**
     * Sets freight_terms_type
     *
     * @param string|null $freight_terms_type Identifies how to determine the account that is responsible for payment of shipping costs for the customer order. Set to one of the following values:  - `Prepaid` - The shipping carrier account that created the shipment will be responsible for payment of shipping costs. - `Collect` - The recipient is billed for the shipment. - `Third Party` - A trading partner is billed for the shipment. - `Consignee` - Contractual billing is used to bill the customer/recipient for UPS Ground shipping services.
     *
     * @return self
     */
    public function setFreightTermsType($freight_terms_type)
    {
        if (is_null($freight_terms_type)) {
            array_push($this->openAPINullablesSetToNull, 'freight_terms_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('freight_terms_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getFreightTermsTypeAllowableValues();
        if (!is_null($freight_terms_type) && !in_array($freight_terms_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'freight_terms_type', must be one of '%s'",
                    $freight_terms_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['freight_terms_type'] = $freight_terms_type;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return \BeLenka\Deposco\Model\CustomerOrderDTOWeight|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param \BeLenka\Deposco\Model\CustomerOrderDTOWeight|null $weight weight
     *
     * @return self
     */
    public function setWeight($weight)
    {
        if (is_null($weight)) {
            throw new \InvalidArgumentException('non-nullable weight cannot be null');
        }
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets return_required
     *
     * @return bool|null
     */
    public function getReturnRequired()
    {
        return $this->container['return_required'];
    }

    /**
     * Sets return_required
     *
     * @param bool|null $return_required Whether to generate and print a return label for the order.
     *
     * @return self
     */
    public function setReturnRequired($return_required)
    {
        if (is_null($return_required)) {
            throw new \InvalidArgumentException('non-nullable return_required cannot be null');
        }
        $this->container['return_required'] = $return_required;

        return $this;
    }

    /**
     * Gets return_ship_via
     *
     * @return string|null
     */
    public function getReturnShipVia()
    {
        return $this->container['return_ship_via'];
    }

    /**
     * Sets return_ship_via
     *
     * @param string|null $return_ship_via Shipping service that should be used for any returns for the order.
     *
     * @return self
     */
    public function setReturnShipVia($return_ship_via)
    {
        if (is_null($return_ship_via)) {
            array_push($this->openAPINullablesSetToNull, 'return_ship_via');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('return_ship_via', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($return_ship_via) && (mb_strlen($return_ship_via) > 50)) {
            throw new \InvalidArgumentException('invalid length for $return_ship_via when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 50.');
        }

        $this->container['return_ship_via'] = $return_ship_via;

        return $this;
    }

    /**
     * Gets return_shipping_service
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getReturnShippingService()
    {
        return $this->container['return_shipping_service'];
    }

    /**
     * Sets return_shipping_service
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $return_shipping_service return_shipping_service
     *
     * @return self
     */
    public function setReturnShippingService($return_shipping_service)
    {
        if (is_null($return_shipping_service)) {
            array_push($this->openAPINullablesSetToNull, 'return_shipping_service');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('return_shipping_service', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['return_shipping_service'] = $return_shipping_service;

        return $this;
    }

    /**
     * Gets return_ship_option
     *
     * @return string|null
     */
    public function getReturnShipOption()
    {
        return $this->container['return_ship_option'];
    }

    /**
     * Sets return_ship_option
     *
     * @param string|null $return_ship_option Used by the GPPrintReturnLabel process to specify how to deliver the return label to the customer, such as print or electronic.
     *
     * @return self
     */
    public function setReturnShipOption($return_ship_option)
    {
        if (is_null($return_ship_option)) {
            array_push($this->openAPINullablesSetToNull, 'return_ship_option');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('return_ship_option', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($return_ship_option) && (mb_strlen($return_ship_option) > 100)) {
            throw new \InvalidArgumentException('invalid length for $return_ship_option when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 100.');
        }

        $this->container['return_ship_option'] = $return_ship_option;

        return $this;
    }

    /**
     * Gets delivery_confirmation
     *
     * @return string|null
     */
    public function getDeliveryConfirmation()
    {
        return $this->container['delivery_confirmation'];
    }

    /**
     * Sets delivery_confirmation
     *
     * @param string|null $delivery_confirmation Leave blank if no signature is required. Set to 2 if a signature is required. Use of other values depends on the shipping carrier.
     *
     * @return self
     */
    public function setDeliveryConfirmation($delivery_confirmation)
    {
        if (is_null($delivery_confirmation)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_confirmation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_confirmation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($delivery_confirmation) && (mb_strlen($delivery_confirmation) > 45)) {
            throw new \InvalidArgumentException('invalid length for $delivery_confirmation when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 45.');
        }

        $this->container['delivery_confirmation'] = $delivery_confirmation;

        return $this;
    }

    /**
     * Gets insurance_required
     *
     * @return bool|null
     */
    public function getInsuranceRequired()
    {
        return $this->container['insurance_required'];
    }

    /**
     * Sets insurance_required
     *
     * @param bool|null $insurance_required Whether insurance is required for the package(s) in which the order ships. Must be set to `true` if insurance is required above the minimum default value for the shipping carrier. Insurance cost is calculated based on the value of items in the shipping container.
     *
     * @return self
     */
    public function setInsuranceRequired($insurance_required)
    {
        if (is_null($insurance_required)) {
            throw new \InvalidArgumentException('non-nullable insurance_required cannot be null');
        }
        $this->container['insurance_required'] = $insurance_required;

        return $this;
    }

    /**
     * Gets home_delivery
     *
     * @return bool|null
     */
    public function getHomeDelivery()
    {
        return $this->container['home_delivery'];
    }

    /**
     * Sets home_delivery
     *
     * @param bool|null $home_delivery Used when FedEx is the shipping carrier to specify whether FedEx Home Delivery is required.
     *
     * @return self
     */
    public function setHomeDelivery($home_delivery)
    {
        if (is_null($home_delivery)) {
            throw new \InvalidArgumentException('non-nullable home_delivery cannot be null');
        }
        $this->container['home_delivery'] = $home_delivery;

        return $this;
    }

    /**
     * Gets residential
     *
     * @return bool|null
     */
    public function getResidential()
    {
        return $this->container['residential'];
    }

    /**
     * Sets residential
     *
     * @param bool|null $residential Used when UPS is the shipping carrier to identify whether the address is a residential address.
     *
     * @return self
     */
    public function setResidential($residential)
    {
        if (is_null($residential)) {
            throw new \InvalidArgumentException('non-nullable residential cannot be null');
        }
        $this->container['residential'] = $residential;

        return $this;
    }

    /**
     * Gets saturday_delivery
     *
     * @return bool|null
     */
    public function getSaturdayDelivery()
    {
        return $this->container['saturday_delivery'];
    }

    /**
     * Sets saturday_delivery
     *
     * @param bool|null $saturday_delivery Used when UPS is the shipping carrier to specify whether the customer is requesting Saturday delivery for the order.
     *
     * @return self
     */
    public function setSaturdayDelivery($saturday_delivery)
    {
        if (is_null($saturday_delivery)) {
            throw new \InvalidArgumentException('non-nullable saturday_delivery cannot be null');
        }
        $this->container['saturday_delivery'] = $saturday_delivery;

        return $this;
    }

    /**
     * Gets scac_code
     *
     * @return string|null
     */
    public function getScacCode()
    {
        return $this->container['scac_code'];
    }

    /**
     * Sets scac_code
     *
     * @param string|null $scac_code Standard Carrier Alpha Code (SCAC) code for the carrier that is used to transport the order.
     *
     * @return self
     */
    public function setScacCode($scac_code)
    {
        if (is_null($scac_code)) {
            array_push($this->openAPINullablesSetToNull, 'scac_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('scac_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($scac_code) && (mb_strlen($scac_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $scac_code when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 10.');
        }

        $this->container['scac_code'] = $scac_code;

        return $this;
    }

    /**
     * Gets trans_method_code
     *
     * @return string|null
     */
    public function getTransMethodCode()
    {
        return $this->container['trans_method_code'];
    }

    /**
     * Sets trans_method_code
     *
     * @param string|null $trans_method_code Optional code that defines the transportation method used by the carrier that is assigned to transport the order.
     *
     * @return self
     */
    public function setTransMethodCode($trans_method_code)
    {
        if (is_null($trans_method_code)) {
            array_push($this->openAPINullablesSetToNull, 'trans_method_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('trans_method_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($trans_method_code) && (mb_strlen($trans_method_code) > 50)) {
            throw new \InvalidArgumentException('invalid length for $trans_method_code when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 50.');
        }

        $this->container['trans_method_code'] = $trans_method_code;

        return $this;
    }

    /**
     * Gets routing_number
     *
     * @return string|null
     */
    public function getRoutingNumber()
    {
        return $this->container['routing_number'];
    }

    /**
     * Sets routing_number
     *
     * @param string|null $routing_number Transportation routing number for the trip to which the order is assigned.
     *
     * @return self
     */
    public function setRoutingNumber($routing_number)
    {
        if (is_null($routing_number)) {
            array_push($this->openAPINullablesSetToNull, 'routing_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('routing_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($routing_number) && (mb_strlen($routing_number) > 30)) {
            throw new \InvalidArgumentException('invalid length for $routing_number when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 30.');
        }

        $this->container['routing_number'] = $routing_number;

        return $this;
    }

    /**
     * Gets duty_paid_by
     *
     * @return string|null
     */
    public function getDutyPaidBy()
    {
        return $this->container['duty_paid_by'];
    }

    /**
     * Sets duty_paid_by
     *
     * @param string|null $duty_paid_by Used for international shipments to identify how duties are paid for the order. Set to `DDP` if duties are paid by the shipper or `DDU` if duties are paid by the recipient. If no value is specified, then the value for the shipping service that is assigned to the order is used. Supported only for certain shipping carriers such as UPS, FedEx, DHL eCommerce, DHL Express, and Globegistics.
     *
     * @return self
     */
    public function setDutyPaidBy($duty_paid_by)
    {
        if (is_null($duty_paid_by)) {
            array_push($this->openAPINullablesSetToNull, 'duty_paid_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('duty_paid_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($duty_paid_by) && (mb_strlen($duty_paid_by) > 20)) {
            throw new \InvalidArgumentException('invalid length for $duty_paid_by when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 20.');
        }

        $this->container['duty_paid_by'] = $duty_paid_by;

        return $this;
    }

    /**
     * Gets incoterms_type
     *
     * @return string|null
     */
    public function getIncotermsType()
    {
        return $this->container['incoterms_type'];
    }

    /**
     * Sets incoterms_type
     *
     * @param string|null $incoterms_type International Commercial Terms, such as EXS or FCA.
     *
     * @return self
     */
    public function setIncotermsType($incoterms_type)
    {
        if (is_null($incoterms_type)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getIncotermsTypeAllowableValues();
        if (!is_null($incoterms_type) && !in_array($incoterms_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'incoterms_type', must be one of '%s'",
                    $incoterms_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['incoterms_type'] = $incoterms_type;

        return $this;
    }

    /**
     * Gets import_type
     *
     * @return string|null
     */
    public function getImportType()
    {
        return $this->container['import_type'];
    }

    /**
     * Sets import_type
     *
     * @param string|null $import_type Used in socket integrations to identify the order for certain fulfillment scenarios, such as Amazon Prime orders from the Amazon Seller Central socket.
     *
     * @return self
     */
    public function setImportType($import_type)
    {
        if (is_null($import_type)) {
            array_push($this->openAPINullablesSetToNull, 'import_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('import_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($import_type) && (mb_strlen($import_type) > 100)) {
            throw new \InvalidArgumentException('invalid length for $import_type when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 100.');
        }

        $this->container['import_type'] = $import_type;

        return $this;
    }

    /**
     * Gets other_reference_number
     *
     * @return string|null
     */
    public function getOtherReferenceNumber()
    {
        return $this->container['other_reference_number'];
    }

    /**
     * Sets other_reference_number
     *
     * @param string|null $other_reference_number Additional reference number for the order.
     *
     * @return self
     */
    public function setOtherReferenceNumber($other_reference_number)
    {
        if (is_null($other_reference_number)) {
            array_push($this->openAPINullablesSetToNull, 'other_reference_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('other_reference_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($other_reference_number) && (mb_strlen($other_reference_number) > 256)) {
            throw new \InvalidArgumentException('invalid length for $other_reference_number when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 256.');
        }

        $this->container['other_reference_number'] = $other_reference_number;

        return $this;
    }

    /**
     * Gets other_reference_number2
     *
     * @return string|null
     */
    public function getOtherReferenceNumber2()
    {
        return $this->container['other_reference_number2'];
    }

    /**
     * Sets other_reference_number2
     *
     * @param string|null $other_reference_number2 Additional reference number for the order.
     *
     * @return self
     */
    public function setOtherReferenceNumber2($other_reference_number2)
    {
        if (is_null($other_reference_number2)) {
            array_push($this->openAPINullablesSetToNull, 'other_reference_number2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('other_reference_number2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($other_reference_number2) && (mb_strlen($other_reference_number2) > 256)) {
            throw new \InvalidArgumentException('invalid length for $other_reference_number2 when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 256.');
        }

        $this->container['other_reference_number2'] = $other_reference_number2;

        return $this;
    }

    /**
     * Gets integration_point
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getIntegrationPoint()
    {
        return $this->container['integration_point'];
    }

    /**
     * Sets integration_point
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $integration_point integration_point
     *
     * @return self
     */
    public function setIntegrationPoint($integration_point)
    {
        if (is_null($integration_point)) {
            array_push($this->openAPINullablesSetToNull, 'integration_point');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('integration_point', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['integration_point'] = $integration_point;

        return $this;
    }

    /**
     * Gets primary_sales_channel
     *
     * @return \BeLenka\Deposco\Model\EntityRef
     */
    public function getPrimarySalesChannel()
    {
        return $this->container['primary_sales_channel'];
    }

    /**
     * Sets primary_sales_channel
     *
     * @param \BeLenka\Deposco\Model\EntityRef $primary_sales_channel primary_sales_channel
     *
     * @return self
     */
    public function setPrimarySalesChannel($primary_sales_channel)
    {
        if (is_null($primary_sales_channel)) {
            throw new \InvalidArgumentException('non-nullable primary_sales_channel cannot be null');
        }
        $this->container['primary_sales_channel'] = $primary_sales_channel;

        return $this;
    }

    /**
     * Gets fulfillment_sales_channel
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getFulfillmentSalesChannel()
    {
        return $this->container['fulfillment_sales_channel'];
    }

    /**
     * Sets fulfillment_sales_channel
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $fulfillment_sales_channel fulfillment_sales_channel
     *
     * @return self
     */
    public function setFulfillmentSalesChannel($fulfillment_sales_channel)
    {
        if (is_null($fulfillment_sales_channel)) {
            array_push($this->openAPINullablesSetToNull, 'fulfillment_sales_channel');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fulfillment_sales_channel', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fulfillment_sales_channel'] = $fulfillment_sales_channel;

        return $this;
    }

    /**
     * Gets co_management_profile
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getCoManagementProfile()
    {
        return $this->container['co_management_profile'];
    }

    /**
     * Sets co_management_profile
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $co_management_profile co_management_profile
     *
     * @return self
     */
    public function setCoManagementProfile($co_management_profile)
    {
        if (is_null($co_management_profile)) {
            array_push($this->openAPINullablesSetToNull, 'co_management_profile');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('co_management_profile', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['co_management_profile'] = $co_management_profile;

        return $this;
    }

    /**
     * Gets routing_profile
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getRoutingProfile()
    {
        return $this->container['routing_profile'];
    }

    /**
     * Sets routing_profile
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $routing_profile routing_profile
     *
     * @return self
     */
    public function setRoutingProfile($routing_profile)
    {
        if (is_null($routing_profile)) {
            array_push($this->openAPINullablesSetToNull, 'routing_profile');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('routing_profile', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['routing_profile'] = $routing_profile;

        return $this;
    }

    /**
     * Gets consolidation_group_key
     *
     * @return string|null
     */
    public function getConsolidationGroupKey()
    {
        return $this->container['consolidation_group_key'];
    }

    /**
     * Sets consolidation_group_key
     *
     * @param string|null $consolidation_group_key ID that is generated to connect multiple customer orders that meet a specified set of matching criteria and can be consolidated during the order routing process so that they are fulfilled as if they are a single customer order.
     *
     * @return self
     */
    public function setConsolidationGroupKey($consolidation_group_key)
    {
        if (is_null($consolidation_group_key)) {
            array_push($this->openAPINullablesSetToNull, 'consolidation_group_key');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('consolidation_group_key', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($consolidation_group_key) && (mb_strlen($consolidation_group_key) > 40)) {
            throw new \InvalidArgumentException('invalid length for $consolidation_group_key when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 40.');
        }

        $this->container['consolidation_group_key'] = $consolidation_group_key;

        return $this;
    }

    /**
     * Gets sale_condition_code
     *
     * @return string|null
     */
    public function getSaleConditionCode()
    {
        return $this->container['sale_condition_code'];
    }

    /**
     * Sets sale_condition_code
     *
     * @param string|null $sale_condition_code Used for Amazon Vendor Central and Amazon Advantage socket integrations.
     *
     * @return self
     */
    public function setSaleConditionCode($sale_condition_code)
    {
        if (is_null($sale_condition_code)) {
            array_push($this->openAPINullablesSetToNull, 'sale_condition_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sale_condition_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sale_condition_code) && (mb_strlen($sale_condition_code) > 50)) {
            throw new \InvalidArgumentException('invalid length for $sale_condition_code when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 50.');
        }

        $this->container['sale_condition_code'] = $sale_condition_code;

        return $this;
    }

    /**
     * Gets department
     *
     * @return string|null
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param string|null $department Department for the order.
     *
     * @return self
     */
    public function setDepartment($department)
    {
        if (is_null($department)) {
            array_push($this->openAPINullablesSetToNull, 'department');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('department', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($department) && (mb_strlen($department) > 50)) {
            throw new \InvalidArgumentException('invalid length for $department when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 50.');
        }

        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets division
     *
     * @return string|null
     */
    public function getDivision()
    {
        return $this->container['division'];
    }

    /**
     * Sets division
     *
     * @param string|null $division Division for the order.
     *
     * @return self
     */
    public function setDivision($division)
    {
        if (is_null($division)) {
            array_push($this->openAPINullablesSetToNull, 'division');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('division', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($division) && (mb_strlen($division) > 50)) {
            throw new \InvalidArgumentException('invalid length for $division when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 50.');
        }

        $this->container['division'] = $division;

        return $this;
    }

    /**
     * Gets verbal_confirmation_name
     *
     * @return string|null
     */
    public function getVerbalConfirmationName()
    {
        return $this->container['verbal_confirmation_name'];
    }

    /**
     * Sets verbal_confirmation_name
     *
     * @param string|null $verbal_confirmation_name Reserved for future use.
     *
     * @return self
     */
    public function setVerbalConfirmationName($verbal_confirmation_name)
    {
        if (is_null($verbal_confirmation_name)) {
            array_push($this->openAPINullablesSetToNull, 'verbal_confirmation_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('verbal_confirmation_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($verbal_confirmation_name) && (mb_strlen($verbal_confirmation_name) > 45)) {
            throw new \InvalidArgumentException('invalid length for $verbal_confirmation_name when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 45.');
        }

        $this->container['verbal_confirmation_name'] = $verbal_confirmation_name;

        return $this;
    }

    /**
     * Gets verbal_confirmation_phone_number
     *
     * @return string|null
     */
    public function getVerbalConfirmationPhoneNumber()
    {
        return $this->container['verbal_confirmation_phone_number'];
    }

    /**
     * Sets verbal_confirmation_phone_number
     *
     * @param string|null $verbal_confirmation_phone_number Reserved for future use.
     *
     * @return self
     */
    public function setVerbalConfirmationPhoneNumber($verbal_confirmation_phone_number)
    {
        if (is_null($verbal_confirmation_phone_number)) {
            array_push($this->openAPINullablesSetToNull, 'verbal_confirmation_phone_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('verbal_confirmation_phone_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($verbal_confirmation_phone_number) && (mb_strlen($verbal_confirmation_phone_number) > 45)) {
            throw new \InvalidArgumentException('invalid length for $verbal_confirmation_phone_number when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 45.');
        }

        $this->container['verbal_confirmation_phone_number'] = $verbal_confirmation_phone_number;

        return $this;
    }

    /**
     * Gets custom_attribute1
     *
     * @return string|null
     */
    public function getCustomAttribute1()
    {
        return $this->container['custom_attribute1'];
    }

    /**
     * Sets custom_attribute1
     *
     * @param string|null $custom_attribute1 Custom attribute for the customer order.
     *
     * @return self
     */
    public function setCustomAttribute1($custom_attribute1)
    {
        if (is_null($custom_attribute1)) {
            array_push($this->openAPINullablesSetToNull, 'custom_attribute1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_attribute1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($custom_attribute1) && (mb_strlen($custom_attribute1) > 100)) {
            throw new \InvalidArgumentException('invalid length for $custom_attribute1 when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 100.');
        }

        $this->container['custom_attribute1'] = $custom_attribute1;

        return $this;
    }

    /**
     * Gets custom_attribute2
     *
     * @return string|null
     */
    public function getCustomAttribute2()
    {
        return $this->container['custom_attribute2'];
    }

    /**
     * Sets custom_attribute2
     *
     * @param string|null $custom_attribute2 Custom attribute for the customer order.
     *
     * @return self
     */
    public function setCustomAttribute2($custom_attribute2)
    {
        if (is_null($custom_attribute2)) {
            array_push($this->openAPINullablesSetToNull, 'custom_attribute2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_attribute2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($custom_attribute2) && (mb_strlen($custom_attribute2) > 100)) {
            throw new \InvalidArgumentException('invalid length for $custom_attribute2 when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 100.');
        }

        $this->container['custom_attribute2'] = $custom_attribute2;

        return $this;
    }

    /**
     * Gets custom_attribute3
     *
     * @return string|null
     */
    public function getCustomAttribute3()
    {
        return $this->container['custom_attribute3'];
    }

    /**
     * Sets custom_attribute3
     *
     * @param string|null $custom_attribute3 Custom attribute for the customer order.
     *
     * @return self
     */
    public function setCustomAttribute3($custom_attribute3)
    {
        if (is_null($custom_attribute3)) {
            array_push($this->openAPINullablesSetToNull, 'custom_attribute3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_attribute3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($custom_attribute3) && (mb_strlen($custom_attribute3) > 100)) {
            throw new \InvalidArgumentException('invalid length for $custom_attribute3 when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 100.');
        }

        $this->container['custom_attribute3'] = $custom_attribute3;

        return $this;
    }

    /**
     * Gets custom_attribute4
     *
     * @return string|null
     */
    public function getCustomAttribute4()
    {
        return $this->container['custom_attribute4'];
    }

    /**
     * Sets custom_attribute4
     *
     * @param string|null $custom_attribute4 Custom attribute for the customer order.
     *
     * @return self
     */
    public function setCustomAttribute4($custom_attribute4)
    {
        if (is_null($custom_attribute4)) {
            array_push($this->openAPINullablesSetToNull, 'custom_attribute4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_attribute4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($custom_attribute4) && (mb_strlen($custom_attribute4) > 100)) {
            throw new \InvalidArgumentException('invalid length for $custom_attribute4 when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 100.');
        }

        $this->container['custom_attribute4'] = $custom_attribute4;

        return $this;
    }

    /**
     * Gets custom_attribute5
     *
     * @return string|null
     */
    public function getCustomAttribute5()
    {
        return $this->container['custom_attribute5'];
    }

    /**
     * Sets custom_attribute5
     *
     * @param string|null $custom_attribute5 Custom attribute for the customer order.
     *
     * @return self
     */
    public function setCustomAttribute5($custom_attribute5)
    {
        if (is_null($custom_attribute5)) {
            array_push($this->openAPINullablesSetToNull, 'custom_attribute5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_attribute5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($custom_attribute5) && (mb_strlen($custom_attribute5) > 100)) {
            throw new \InvalidArgumentException('invalid length for $custom_attribute5 when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 100.');
        }

        $this->container['custom_attribute5'] = $custom_attribute5;

        return $this;
    }

    /**
     * Gets custom_attribute6
     *
     * @return string|null
     */
    public function getCustomAttribute6()
    {
        return $this->container['custom_attribute6'];
    }

    /**
     * Sets custom_attribute6
     *
     * @param string|null $custom_attribute6 Custom attribute for the customer order.
     *
     * @return self
     */
    public function setCustomAttribute6($custom_attribute6)
    {
        if (is_null($custom_attribute6)) {
            array_push($this->openAPINullablesSetToNull, 'custom_attribute6');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_attribute6', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($custom_attribute6) && (mb_strlen($custom_attribute6) > 100)) {
            throw new \InvalidArgumentException('invalid length for $custom_attribute6 when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 100.');
        }

        $this->container['custom_attribute6'] = $custom_attribute6;

        return $this;
    }

    /**
     * Gets custom_attribute7
     *
     * @return string|null
     */
    public function getCustomAttribute7()
    {
        return $this->container['custom_attribute7'];
    }

    /**
     * Sets custom_attribute7
     *
     * @param string|null $custom_attribute7 Custom attribute for the customer order.
     *
     * @return self
     */
    public function setCustomAttribute7($custom_attribute7)
    {
        if (is_null($custom_attribute7)) {
            array_push($this->openAPINullablesSetToNull, 'custom_attribute7');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_attribute7', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($custom_attribute7) && (mb_strlen($custom_attribute7) > 100)) {
            throw new \InvalidArgumentException('invalid length for $custom_attribute7 when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 100.');
        }

        $this->container['custom_attribute7'] = $custom_attribute7;

        return $this;
    }

    /**
     * Gets custom_attribute8
     *
     * @return string|null
     */
    public function getCustomAttribute8()
    {
        return $this->container['custom_attribute8'];
    }

    /**
     * Sets custom_attribute8
     *
     * @param string|null $custom_attribute8 Custom attribute for the customer order.
     *
     * @return self
     */
    public function setCustomAttribute8($custom_attribute8)
    {
        if (is_null($custom_attribute8)) {
            array_push($this->openAPINullablesSetToNull, 'custom_attribute8');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_attribute8', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($custom_attribute8) && (mb_strlen($custom_attribute8) > 100)) {
            throw new \InvalidArgumentException('invalid length for $custom_attribute8 when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 100.');
        }

        $this->container['custom_attribute8'] = $custom_attribute8;

        return $this;
    }

    /**
     * Gets custom_attribute9
     *
     * @return string|null
     */
    public function getCustomAttribute9()
    {
        return $this->container['custom_attribute9'];
    }

    /**
     * Sets custom_attribute9
     *
     * @param string|null $custom_attribute9 Custom attribute for the customer order.
     *
     * @return self
     */
    public function setCustomAttribute9($custom_attribute9)
    {
        if (is_null($custom_attribute9)) {
            array_push($this->openAPINullablesSetToNull, 'custom_attribute9');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_attribute9', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($custom_attribute9) && (mb_strlen($custom_attribute9) > 100)) {
            throw new \InvalidArgumentException('invalid length for $custom_attribute9 when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 100.');
        }

        $this->container['custom_attribute9'] = $custom_attribute9;

        return $this;
    }

    /**
     * Gets custom_attribute10
     *
     * @return string|null
     */
    public function getCustomAttribute10()
    {
        return $this->container['custom_attribute10'];
    }

    /**
     * Sets custom_attribute10
     *
     * @param string|null $custom_attribute10 Custom attribute for the customer order.
     *
     * @return self
     */
    public function setCustomAttribute10($custom_attribute10)
    {
        if (is_null($custom_attribute10)) {
            array_push($this->openAPINullablesSetToNull, 'custom_attribute10');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_attribute10', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($custom_attribute10) && (mb_strlen($custom_attribute10) > 100)) {
            throw new \InvalidArgumentException('invalid length for $custom_attribute10 when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 100.');
        }

        $this->container['custom_attribute10'] = $custom_attribute10;

        return $this;
    }

    /**
     * Gets co_lines
     *
     * @return \BeLenka\Deposco\Model\CustomerOrderLineCollectionDTO|null
     */
    public function getCoLines()
    {
        return $this->container['co_lines'];
    }

    /**
     * Sets co_lines
     *
     * @param \BeLenka\Deposco\Model\CustomerOrderLineCollectionDTO|null $co_lines co_lines
     *
     * @return self
     */
    public function setCoLines($co_lines)
    {
        if (is_null($co_lines)) {
            throw new \InvalidArgumentException('non-nullable co_lines cannot be null');
        }
        $this->container['co_lines'] = $co_lines;

        return $this;
    }

    /**
     * Gets co_dates
     *
     * @return \BeLenka\Deposco\Model\CustomerOrderDateDTO[]|null
     */
    public function getCoDates()
    {
        return $this->container['co_dates'];
    }

    /**
     * Sets co_dates
     *
     * @param \BeLenka\Deposco\Model\CustomerOrderDateDTO[]|null $co_dates Array of dates for the customer order.
     *
     * @return self
     */
    public function setCoDates($co_dates)
    {
        if (is_null($co_dates)) {
            array_push($this->openAPINullablesSetToNull, 'co_dates');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('co_dates', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['co_dates'] = $co_dates;

        return $this;
    }

    /**
     * Gets co_notes
     *
     * @return \BeLenka\Deposco\Model\CustomerOrderNoteDTO[]|null
     */
    public function getCoNotes()
    {
        return $this->container['co_notes'];
    }

    /**
     * Sets co_notes
     *
     * @param \BeLenka\Deposco\Model\CustomerOrderNoteDTO[]|null $co_notes Array of notes for the customer order.
     *
     * @return self
     */
    public function setCoNotes($co_notes)
    {
        if (is_null($co_notes)) {
            array_push($this->openAPINullablesSetToNull, 'co_notes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('co_notes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['co_notes'] = $co_notes;

        return $this;
    }

    /**
     * Gets fulfillment_orders
     *
     * @return \BeLenka\Deposco\Model\EntityRef[]|null
     */
    public function getFulfillmentOrders()
    {
        return $this->container['fulfillment_orders'];
    }

    /**
     * Sets fulfillment_orders
     *
     * @param \BeLenka\Deposco\Model\EntityRef[]|null $fulfillment_orders Array of fulfillment orders for the customer order.
     *
     * @return self
     */
    public function setFulfillmentOrders($fulfillment_orders)
    {
        if (is_null($fulfillment_orders)) {
            array_push($this->openAPINullablesSetToNull, 'fulfillment_orders');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fulfillment_orders', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fulfillment_orders'] = $fulfillment_orders;

        return $this;
    }

    /**
     * Gets carrier_special_services
     *
     * @return \BeLenka\Deposco\Model\CarrierSpecialServiceDTO[]|null
     */
    public function getCarrierSpecialServices()
    {
        return $this->container['carrier_special_services'];
    }

    /**
     * Sets carrier_special_services
     *
     * @param \BeLenka\Deposco\Model\CarrierSpecialServiceDTO[]|null $carrier_special_services Array of carrier special service records for the customer order. Carrier special service records contain information related to special services for shipping carriers such as dry ice and dangerous goods.
     *
     * @return self
     */
    public function setCarrierSpecialServices($carrier_special_services)
    {
        if (is_null($carrier_special_services)) {
            throw new \InvalidArgumentException('non-nullable carrier_special_services cannot be null');
        }
        $this->container['carrier_special_services'] = $carrier_special_services;

        return $this;
    }

    /**
     * Gets checkout_promise_ref
     *
     * @return string|null
     */
    public function getCheckoutPromiseRef()
    {
        return $this->container['checkout_promise_ref'];
    }

    /**
     * Sets checkout_promise_ref
     *
     * @param string|null $checkout_promise_ref A unique reference that was provided to the shopping cart of a customer when using the feature Customer Delivery Promise.
     *
     * @return self
     */
    public function setCheckoutPromiseRef($checkout_promise_ref)
    {
        if (is_null($checkout_promise_ref)) {
            array_push($this->openAPINullablesSetToNull, 'checkout_promise_ref');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('checkout_promise_ref', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($checkout_promise_ref) && (mb_strlen($checkout_promise_ref) > 60)) {
            throw new \InvalidArgumentException('invalid length for $checkout_promise_ref when calling CustomerOrderRequestDTOCustomerOrder., must be smaller than or equal to 60.');
        }

        $this->container['checkout_promise_ref'] = $checkout_promise_ref;

        return $this;
    }

    /**
     * Gets channels
     *
     * @return \BeLenka\Deposco\Model\ChannelDTO[]|null
     */
    public function getChannels()
    {
        return $this->container['channels'];
    }

    /**
     * Sets channels
     *
     * @param \BeLenka\Deposco\Model\ChannelDTO[]|null $channels Array of channel cross-references for the customer order.
     *
     * @return self
     */
    public function setChannels($channels)
    {
        if (is_null($channels)) {
            array_push($this->openAPINullablesSetToNull, 'channels');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('channels', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['channels'] = $channels;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime|null $created_date Date and time that the customer order was created.
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets updated_date
     *
     * @return \DateTime|null
     */
    public function getUpdatedDate()
    {
        return $this->container['updated_date'];
    }

    /**
     * Sets updated_date
     *
     * @param \DateTime|null $updated_date Date and time that the customer order was last updated.
     *
     * @return self
     */
    public function setUpdatedDate($updated_date)
    {
        if (is_null($updated_date)) {
            throw new \InvalidArgumentException('non-nullable updated_date cannot be null');
        }
        $this->container['updated_date'] = $updated_date;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            throw new \InvalidArgumentException('non-nullable created_by cannot be null');
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $updated_by updated_by
     *
     * @return self
     */
    public function setUpdatedBy($updated_by)
    {
        if (is_null($updated_by)) {
            throw new \InvalidArgumentException('non-nullable updated_by cannot be null');
        }
        $this->container['updated_by'] = $updated_by;

        return $this;
    }

    /**
     * Gets co_payment_terms
     *
     * @return \BeLenka\Deposco\Model\CustomerOrderPaymentTermDTO[]|null
     */
    public function getCoPaymentTerms()
    {
        return $this->container['co_payment_terms'];
    }

    /**
     * Sets co_payment_terms
     *
     * @param \BeLenka\Deposco\Model\CustomerOrderPaymentTermDTO[]|null $co_payment_terms co_payment_terms
     *
     * @return self
     */
    public function setCoPaymentTerms($co_payment_terms)
    {
        if (is_null($co_payment_terms)) {
            throw new \InvalidArgumentException('non-nullable co_payment_terms cannot be null');
        }
        $this->container['co_payment_terms'] = $co_payment_terms;

        return $this;
    }

    /**
     * Gets co_payments
     *
     * @return \BeLenka\Deposco\Model\CustomerOrderPaymentDTO[]|null
     */
    public function getCoPayments()
    {
        return $this->container['co_payments'];
    }

    /**
     * Sets co_payments
     *
     * @param \BeLenka\Deposco\Model\CustomerOrderPaymentDTO[]|null $co_payments co_payments
     *
     * @return self
     */
    public function setCoPayments($co_payments)
    {
        if (is_null($co_payments)) {
            throw new \InvalidArgumentException('non-nullable co_payments cannot be null');
        }
        $this->container['co_payments'] = $co_payments;

        return $this;
    }

    /**
     * Gets co_charge_allowances
     *
     * @return \BeLenka\Deposco\Model\CustomerOrderChargeAllowanceDTO[]|null
     */
    public function getCoChargeAllowances()
    {
        return $this->container['co_charge_allowances'];
    }

    /**
     * Sets co_charge_allowances
     *
     * @param \BeLenka\Deposco\Model\CustomerOrderChargeAllowanceDTO[]|null $co_charge_allowances co_charge_allowances
     *
     * @return self
     */
    public function setCoChargeAllowances($co_charge_allowances)
    {
        if (is_null($co_charge_allowances)) {
            throw new \InvalidArgumentException('non-nullable co_charge_allowances cannot be null');
        }
        $this->container['co_charge_allowances'] = $co_charge_allowances;

        return $this;
    }

    /**
     * Gets co_taxes
     *
     * @return \BeLenka\Deposco\Model\CustomerOrderTaxDTO[]|null
     */
    public function getCoTaxes()
    {
        return $this->container['co_taxes'];
    }

    /**
     * Sets co_taxes
     *
     * @param \BeLenka\Deposco\Model\CustomerOrderTaxDTO[]|null $co_taxes co_taxes
     *
     * @return self
     */
    public function setCoTaxes($co_taxes)
    {
        if (is_null($co_taxes)) {
            throw new \InvalidArgumentException('non-nullable co_taxes cannot be null');
        }
        $this->container['co_taxes'] = $co_taxes;

        return $this;
    }

    /**
     * Gets co_retail_activities
     *
     * @return \BeLenka\Deposco\Model\CustomerOrderRetailActivityDTO[]|null
     */
    public function getCoRetailActivities()
    {
        return $this->container['co_retail_activities'];
    }

    /**
     * Sets co_retail_activities
     *
     * @param \BeLenka\Deposco\Model\CustomerOrderRetailActivityDTO[]|null $co_retail_activities co_retail_activities
     *
     * @return self
     */
    public function setCoRetailActivities($co_retail_activities)
    {
        if (is_null($co_retail_activities)) {
            throw new \InvalidArgumentException('non-nullable co_retail_activities cannot be null');
        }
        $this->container['co_retail_activities'] = $co_retail_activities;

        return $this;
    }

    /**
     * Gets co_refunds
     *
     * @return \BeLenka\Deposco\Model\CustomerOrderRefundDTO[]|null
     */
    public function getCoRefunds()
    {
        return $this->container['co_refunds'];
    }

    /**
     * Sets co_refunds
     *
     * @param \BeLenka\Deposco\Model\CustomerOrderRefundDTO[]|null $co_refunds co_refunds
     *
     * @return self
     */
    public function setCoRefunds($co_refunds)
    {
        if (is_null($co_refunds)) {
            throw new \InvalidArgumentException('non-nullable co_refunds cannot be null');
        }
        $this->container['co_refunds'] = $co_refunds;

        return $this;
    }

    /**
     * Gets co_references
     *
     * @return \BeLenka\Deposco\Model\CustomerOrderReferenceDTO[]|null
     */
    public function getCoReferences()
    {
        return $this->container['co_references'];
    }

    /**
     * Sets co_references
     *
     * @param \BeLenka\Deposco\Model\CustomerOrderReferenceDTO[]|null $co_references co_references
     *
     * @return self
     */
    public function setCoReferences($co_references)
    {
        if (is_null($co_references)) {
            throw new \InvalidArgumentException('non-nullable co_references cannot be null');
        }
        $this->container['co_references'] = $co_references;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \BeLenka\Deposco\Model\CustomerOrderTagDTO[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \BeLenka\Deposco\Model\CustomerOrderTagDTO[]|null $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


