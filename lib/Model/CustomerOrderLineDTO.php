<?php
/**
 * CustomerOrderLineDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deposco API
 *
 * Welcome to the Deposco API Reference! The Deposco API enables you to integrate your system with Deposco.  * Integrate a product information system (PIM) by creating and retrieving data for items, packs, UPCs, and kits. * Set up warehouse data by creating facilities, zones, locations, and storage details. * Create inbound orders that can be received and outbound orders that can be fulfilled with Deposco warehouse management processes.  This reference provides details on available operations, endpoints, parameters, schemas, and responses.  Example requests and responses are also available for you to use as a reference. You can copy the examples to use as a starting point for your own requests.  Review the guides to learn how the API is used in common business scenarios such as setting up the warehouse and integrating a Product Information Management (PIM) system.  When you're ready to get started, register for a developer account and then log in to create your application in the developer portal.
 *
 * The version of the OpenAPI document: 2.0.2519
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\Deposco\Model;

use \ArrayAccess;
use \BeLenka\Deposco\ObjectSerializer;

/**
 * CustomerOrderLineDTO Class Doc Comment
 *
 * @category Class
 * @description Order line for a customer order, which identifies the quantity and pack for an item that the customer purchased.
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CustomerOrderLineDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CustomerOrderLineDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'self' => '\BeLenka\Deposco\Model\EntityRef',
        'business_unit' => '\BeLenka\Deposco\Model\EntityRef',
        'co_header' => '\BeLenka\Deposco\Model\EntityRef',
        'number' => 'string',
        'external_line_number' => 'string',
        'related_co_line' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'status' => 'string',
        'item' => '\BeLenka\Deposco\Model\EntityRef',
        'item_number' => 'string',
        'item_external_reference' => 'string',
        'pack' => '\BeLenka\Deposco\Model\EntityRef',
        'description' => 'string',
        'buyer_part_number' => 'string',
        'consumer_package_code' => 'string',
        'upc_case_code' => 'string',
        'vendor_part_number' => 'string',
        'ean' => 'string',
        'gtin' => 'string',
        'national_drug_code' => 'string',
        'isbn' => 'string',
        'lot_number' => 'string',
        'color_name' => 'string',
        'item_size' => 'string',
        'department' => 'string',
        'division' => 'string',
        'inventory_condition' => 'string',
        'inventory_attribute1' => 'string',
        'inventory_attribute2' => 'string',
        'order_quantity' => 'int',
        'pack_quantity' => 'int',
        'original_order_quantity' => 'int',
        'allocated_quantity' => 'int',
        'back_ordered' => 'bool',
        'back_order_quantity' => 'int',
        'shipped_quantity' => 'int',
        'returned_quantity' => 'int',
        'canceled_quantity' => 'int',
        'unit_cost' => 'int',
        'unit_price' => 'int',
        'net_price' => 'int',
        'line_total' => 'int',
        'shipping_amount' => 'int',
        'discount_amount' => 'int',
        'taxable' => 'bool',
        'taxable_total' => 'int',
        'tax_amount' => 'int',
        'extended_total' => 'int',
        'bill_to_contact' => '\BeLenka\Deposco\Model\CustomerOrderLineDTOBillToContact',
        'ship_to_contact' => '\BeLenka\Deposco\Model\CustomerOrderLineDTOShipToContact',
        'freight_bill_to_account' => 'string',
        'freight_bill_to_contact' => '\BeLenka\Deposco\Model\CustomerOrderLineDTOFreightBillToContact',
        'ship_from_contact' => '\BeLenka\Deposco\Model\CustomerOrderLineDTOShipFromContact',
        'remit_to_contact' => '\BeLenka\Deposco\Model\CustomerOrderLineDTORemitToContact',
        'seller_contact' => '\BeLenka\Deposco\Model\CustomerOrderLineDTOSellerContact',
        'trading_partner_site' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'mark_for_site' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'ship_from_facility' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'original_ship_from_facility' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'ship_vendor' => 'string',
        'weight' => '\BeLenka\Deposco\Model\CustomerOrderLineDTOWeight',
        'freight_terms_type' => 'string',
        'sourcing_group' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'custom_attribute1' => 'string',
        'custom_attribute2' => 'string',
        'custom_attribute3' => 'string',
        'custom_attribute4' => 'string',
        'custom_attribute5' => 'string',
        'custom_attribute6' => 'string',
        'custom_attribute7' => 'string',
        'custom_attribute8' => 'string',
        'custom_attribute9' => 'string',
        'custom_attribute10' => 'string',
        'co_dates' => '\BeLenka\Deposco\Model\CustomerOrderDateDTO[]',
        'co_references' => '\BeLenka\Deposco\Model\CustomerOrderReferenceDTO[]',
        'co_notes' => '\BeLenka\Deposco\Model\CustomerOrderNoteDTO[]',
        'co_line_allocations' => '\BeLenka\Deposco\Model\CustomerOrderLineAllocationDTO[]',
        'fulfillment_order_lines' => '\BeLenka\Deposco\Model\PaginatedEntityReference',
        'carrier_special_services' => '\BeLenka\Deposco\Model\CarrierSpecialServiceDTO[]',
        'co_charge_allowances' => '\BeLenka\Deposco\Model\CustomerOrderChargeAllowanceDTO[]',
        'co_taxes' => '\BeLenka\Deposco\Model\CustomerOrderTaxDTO[]',
        'co_refunds' => '\BeLenka\Deposco\Model\CustomerOrderRefundDTO[]',
        'co_payment_terms' => '\BeLenka\Deposco\Model\CustomerOrderPaymentTermDTO[]',
        'co_line_sites' => '\BeLenka\Deposco\Model\CustomerOrderLineSiteDTO[]',
        'channels' => '\BeLenka\Deposco\Model\ChannelDTO[]',
        'created_date' => '\DateTime',
        'updated_date' => '\DateTime',
        'created_by' => '\BeLenka\Deposco\Model\EntityRef',
        'updated_by' => '\BeLenka\Deposco\Model\EntityRef'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'self' => null,
        'business_unit' => null,
        'co_header' => null,
        'number' => null,
        'external_line_number' => null,
        'related_co_line' => null,
        'status' => null,
        'item' => null,
        'item_number' => null,
        'item_external_reference' => null,
        'pack' => null,
        'description' => null,
        'buyer_part_number' => null,
        'consumer_package_code' => null,
        'upc_case_code' => null,
        'vendor_part_number' => null,
        'ean' => null,
        'gtin' => null,
        'national_drug_code' => null,
        'isbn' => null,
        'lot_number' => null,
        'color_name' => null,
        'item_size' => null,
        'department' => null,
        'division' => null,
        'inventory_condition' => null,
        'inventory_attribute1' => null,
        'inventory_attribute2' => null,
        'order_quantity' => 'double',
        'pack_quantity' => null,
        'original_order_quantity' => 'double',
        'allocated_quantity' => 'double',
        'back_ordered' => null,
        'back_order_quantity' => 'double',
        'shipped_quantity' => 'double',
        'returned_quantity' => 'double',
        'canceled_quantity' => 'double',
        'unit_cost' => 'double',
        'unit_price' => 'double',
        'net_price' => 'double',
        'line_total' => 'double',
        'shipping_amount' => 'double',
        'discount_amount' => 'double',
        'taxable' => null,
        'taxable_total' => 'double',
        'tax_amount' => 'double',
        'extended_total' => 'double',
        'bill_to_contact' => null,
        'ship_to_contact' => null,
        'freight_bill_to_account' => null,
        'freight_bill_to_contact' => null,
        'ship_from_contact' => null,
        'remit_to_contact' => null,
        'seller_contact' => null,
        'trading_partner_site' => null,
        'mark_for_site' => null,
        'ship_from_facility' => null,
        'original_ship_from_facility' => null,
        'ship_vendor' => null,
        'weight' => null,
        'freight_terms_type' => null,
        'sourcing_group' => null,
        'custom_attribute1' => null,
        'custom_attribute2' => null,
        'custom_attribute3' => null,
        'custom_attribute4' => null,
        'custom_attribute5' => null,
        'custom_attribute6' => null,
        'custom_attribute7' => null,
        'custom_attribute8' => null,
        'custom_attribute9' => null,
        'custom_attribute10' => null,
        'co_dates' => null,
        'co_references' => null,
        'co_notes' => null,
        'co_line_allocations' => null,
        'fulfillment_order_lines' => null,
        'carrier_special_services' => null,
        'co_charge_allowances' => null,
        'co_taxes' => null,
        'co_refunds' => null,
        'co_payment_terms' => null,
        'co_line_sites' => null,
        'channels' => null,
        'created_date' => 'date-time',
        'updated_date' => 'date-time',
        'created_by' => null,
        'updated_by' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'self' => false,
        'business_unit' => false,
        'co_header' => false,
        'number' => false,
        'external_line_number' => false,
        'related_co_line' => true,
        'status' => true,
        'item' => false,
        'item_number' => false,
        'item_external_reference' => true,
        'pack' => false,
        'description' => true,
        'buyer_part_number' => true,
        'consumer_package_code' => true,
        'upc_case_code' => true,
        'vendor_part_number' => true,
        'ean' => true,
        'gtin' => true,
        'national_drug_code' => true,
        'isbn' => true,
        'lot_number' => true,
        'color_name' => true,
        'item_size' => true,
        'department' => true,
        'division' => true,
        'inventory_condition' => true,
        'inventory_attribute1' => true,
        'inventory_attribute2' => true,
        'order_quantity' => false,
        'pack_quantity' => false,
        'original_order_quantity' => false,
        'allocated_quantity' => false,
        'back_ordered' => false,
        'back_order_quantity' => false,
        'shipped_quantity' => false,
        'returned_quantity' => false,
        'canceled_quantity' => false,
        'unit_cost' => false,
        'unit_price' => false,
        'net_price' => false,
        'line_total' => false,
        'shipping_amount' => false,
        'discount_amount' => false,
        'taxable' => false,
        'taxable_total' => false,
        'tax_amount' => false,
        'extended_total' => false,
        'bill_to_contact' => false,
        'ship_to_contact' => false,
        'freight_bill_to_account' => true,
        'freight_bill_to_contact' => false,
        'ship_from_contact' => false,
        'remit_to_contact' => false,
        'seller_contact' => false,
        'trading_partner_site' => true,
        'mark_for_site' => true,
        'ship_from_facility' => true,
        'original_ship_from_facility' => true,
        'ship_vendor' => true,
        'weight' => false,
        'freight_terms_type' => true,
        'sourcing_group' => true,
        'custom_attribute1' => true,
        'custom_attribute2' => true,
        'custom_attribute3' => true,
        'custom_attribute4' => true,
        'custom_attribute5' => true,
        'custom_attribute6' => true,
        'custom_attribute7' => true,
        'custom_attribute8' => true,
        'custom_attribute9' => true,
        'custom_attribute10' => true,
        'co_dates' => true,
        'co_references' => true,
        'co_notes' => true,
        'co_line_allocations' => true,
        'fulfillment_order_lines' => true,
        'carrier_special_services' => false,
        'co_charge_allowances' => true,
        'co_taxes' => true,
        'co_refunds' => true,
        'co_payment_terms' => true,
        'co_line_sites' => true,
        'channels' => true,
        'created_date' => false,
        'updated_date' => false,
        'created_by' => false,
        'updated_by' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'self' => 'self',
        'business_unit' => 'businessUnit',
        'co_header' => 'coHeader',
        'number' => 'number',
        'external_line_number' => 'externalLineNumber',
        'related_co_line' => 'relatedCoLine',
        'status' => 'status',
        'item' => 'item',
        'item_number' => 'itemNumber',
        'item_external_reference' => 'itemExternalReference',
        'pack' => 'pack',
        'description' => 'description',
        'buyer_part_number' => 'buyerPartNumber',
        'consumer_package_code' => 'consumerPackageCode',
        'upc_case_code' => 'upcCaseCode',
        'vendor_part_number' => 'vendorPartNumber',
        'ean' => 'ean',
        'gtin' => 'gtin',
        'national_drug_code' => 'nationalDrugCode',
        'isbn' => 'isbn',
        'lot_number' => 'lotNumber',
        'color_name' => 'colorName',
        'item_size' => 'itemSize',
        'department' => 'department',
        'division' => 'division',
        'inventory_condition' => 'inventoryCondition',
        'inventory_attribute1' => 'inventoryAttribute1',
        'inventory_attribute2' => 'inventoryAttribute2',
        'order_quantity' => 'orderQuantity',
        'pack_quantity' => 'packQuantity',
        'original_order_quantity' => 'originalOrderQuantity',
        'allocated_quantity' => 'allocatedQuantity',
        'back_ordered' => 'backOrdered',
        'back_order_quantity' => 'backOrderQuantity',
        'shipped_quantity' => 'shippedQuantity',
        'returned_quantity' => 'returnedQuantity',
        'canceled_quantity' => 'canceledQuantity',
        'unit_cost' => 'unitCost',
        'unit_price' => 'unitPrice',
        'net_price' => 'netPrice',
        'line_total' => 'lineTotal',
        'shipping_amount' => 'shippingAmount',
        'discount_amount' => 'discountAmount',
        'taxable' => 'taxable',
        'taxable_total' => 'taxableTotal',
        'tax_amount' => 'taxAmount',
        'extended_total' => 'extendedTotal',
        'bill_to_contact' => 'billToContact',
        'ship_to_contact' => 'shipToContact',
        'freight_bill_to_account' => 'freightBillToAccount',
        'freight_bill_to_contact' => 'freightBillToContact',
        'ship_from_contact' => 'shipFromContact',
        'remit_to_contact' => 'remitToContact',
        'seller_contact' => 'sellerContact',
        'trading_partner_site' => 'tradingPartnerSite',
        'mark_for_site' => 'markForSite',
        'ship_from_facility' => 'shipFromFacility',
        'original_ship_from_facility' => 'originalShipFromFacility',
        'ship_vendor' => 'shipVendor',
        'weight' => 'weight',
        'freight_terms_type' => 'freightTermsType',
        'sourcing_group' => 'sourcingGroup',
        'custom_attribute1' => 'customAttribute1',
        'custom_attribute2' => 'customAttribute2',
        'custom_attribute3' => 'customAttribute3',
        'custom_attribute4' => 'customAttribute4',
        'custom_attribute5' => 'customAttribute5',
        'custom_attribute6' => 'customAttribute6',
        'custom_attribute7' => 'customAttribute7',
        'custom_attribute8' => 'customAttribute8',
        'custom_attribute9' => 'customAttribute9',
        'custom_attribute10' => 'customAttribute10',
        'co_dates' => 'coDates',
        'co_references' => 'coReferences',
        'co_notes' => 'coNotes',
        'co_line_allocations' => 'coLineAllocations',
        'fulfillment_order_lines' => 'fulfillmentOrderLines',
        'carrier_special_services' => 'carrierSpecialServices',
        'co_charge_allowances' => 'coChargeAllowances',
        'co_taxes' => 'coTaxes',
        'co_refunds' => 'coRefunds',
        'co_payment_terms' => 'coPaymentTerms',
        'co_line_sites' => 'coLineSites',
        'channels' => 'channels',
        'created_date' => 'createdDate',
        'updated_date' => 'updatedDate',
        'created_by' => 'createdBy',
        'updated_by' => 'updatedBy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'self' => 'setSelf',
        'business_unit' => 'setBusinessUnit',
        'co_header' => 'setCoHeader',
        'number' => 'setNumber',
        'external_line_number' => 'setExternalLineNumber',
        'related_co_line' => 'setRelatedCoLine',
        'status' => 'setStatus',
        'item' => 'setItem',
        'item_number' => 'setItemNumber',
        'item_external_reference' => 'setItemExternalReference',
        'pack' => 'setPack',
        'description' => 'setDescription',
        'buyer_part_number' => 'setBuyerPartNumber',
        'consumer_package_code' => 'setConsumerPackageCode',
        'upc_case_code' => 'setUpcCaseCode',
        'vendor_part_number' => 'setVendorPartNumber',
        'ean' => 'setEan',
        'gtin' => 'setGtin',
        'national_drug_code' => 'setNationalDrugCode',
        'isbn' => 'setIsbn',
        'lot_number' => 'setLotNumber',
        'color_name' => 'setColorName',
        'item_size' => 'setItemSize',
        'department' => 'setDepartment',
        'division' => 'setDivision',
        'inventory_condition' => 'setInventoryCondition',
        'inventory_attribute1' => 'setInventoryAttribute1',
        'inventory_attribute2' => 'setInventoryAttribute2',
        'order_quantity' => 'setOrderQuantity',
        'pack_quantity' => 'setPackQuantity',
        'original_order_quantity' => 'setOriginalOrderQuantity',
        'allocated_quantity' => 'setAllocatedQuantity',
        'back_ordered' => 'setBackOrdered',
        'back_order_quantity' => 'setBackOrderQuantity',
        'shipped_quantity' => 'setShippedQuantity',
        'returned_quantity' => 'setReturnedQuantity',
        'canceled_quantity' => 'setCanceledQuantity',
        'unit_cost' => 'setUnitCost',
        'unit_price' => 'setUnitPrice',
        'net_price' => 'setNetPrice',
        'line_total' => 'setLineTotal',
        'shipping_amount' => 'setShippingAmount',
        'discount_amount' => 'setDiscountAmount',
        'taxable' => 'setTaxable',
        'taxable_total' => 'setTaxableTotal',
        'tax_amount' => 'setTaxAmount',
        'extended_total' => 'setExtendedTotal',
        'bill_to_contact' => 'setBillToContact',
        'ship_to_contact' => 'setShipToContact',
        'freight_bill_to_account' => 'setFreightBillToAccount',
        'freight_bill_to_contact' => 'setFreightBillToContact',
        'ship_from_contact' => 'setShipFromContact',
        'remit_to_contact' => 'setRemitToContact',
        'seller_contact' => 'setSellerContact',
        'trading_partner_site' => 'setTradingPartnerSite',
        'mark_for_site' => 'setMarkForSite',
        'ship_from_facility' => 'setShipFromFacility',
        'original_ship_from_facility' => 'setOriginalShipFromFacility',
        'ship_vendor' => 'setShipVendor',
        'weight' => 'setWeight',
        'freight_terms_type' => 'setFreightTermsType',
        'sourcing_group' => 'setSourcingGroup',
        'custom_attribute1' => 'setCustomAttribute1',
        'custom_attribute2' => 'setCustomAttribute2',
        'custom_attribute3' => 'setCustomAttribute3',
        'custom_attribute4' => 'setCustomAttribute4',
        'custom_attribute5' => 'setCustomAttribute5',
        'custom_attribute6' => 'setCustomAttribute6',
        'custom_attribute7' => 'setCustomAttribute7',
        'custom_attribute8' => 'setCustomAttribute8',
        'custom_attribute9' => 'setCustomAttribute9',
        'custom_attribute10' => 'setCustomAttribute10',
        'co_dates' => 'setCoDates',
        'co_references' => 'setCoReferences',
        'co_notes' => 'setCoNotes',
        'co_line_allocations' => 'setCoLineAllocations',
        'fulfillment_order_lines' => 'setFulfillmentOrderLines',
        'carrier_special_services' => 'setCarrierSpecialServices',
        'co_charge_allowances' => 'setCoChargeAllowances',
        'co_taxes' => 'setCoTaxes',
        'co_refunds' => 'setCoRefunds',
        'co_payment_terms' => 'setCoPaymentTerms',
        'co_line_sites' => 'setCoLineSites',
        'channels' => 'setChannels',
        'created_date' => 'setCreatedDate',
        'updated_date' => 'setUpdatedDate',
        'created_by' => 'setCreatedBy',
        'updated_by' => 'setUpdatedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'self' => 'getSelf',
        'business_unit' => 'getBusinessUnit',
        'co_header' => 'getCoHeader',
        'number' => 'getNumber',
        'external_line_number' => 'getExternalLineNumber',
        'related_co_line' => 'getRelatedCoLine',
        'status' => 'getStatus',
        'item' => 'getItem',
        'item_number' => 'getItemNumber',
        'item_external_reference' => 'getItemExternalReference',
        'pack' => 'getPack',
        'description' => 'getDescription',
        'buyer_part_number' => 'getBuyerPartNumber',
        'consumer_package_code' => 'getConsumerPackageCode',
        'upc_case_code' => 'getUpcCaseCode',
        'vendor_part_number' => 'getVendorPartNumber',
        'ean' => 'getEan',
        'gtin' => 'getGtin',
        'national_drug_code' => 'getNationalDrugCode',
        'isbn' => 'getIsbn',
        'lot_number' => 'getLotNumber',
        'color_name' => 'getColorName',
        'item_size' => 'getItemSize',
        'department' => 'getDepartment',
        'division' => 'getDivision',
        'inventory_condition' => 'getInventoryCondition',
        'inventory_attribute1' => 'getInventoryAttribute1',
        'inventory_attribute2' => 'getInventoryAttribute2',
        'order_quantity' => 'getOrderQuantity',
        'pack_quantity' => 'getPackQuantity',
        'original_order_quantity' => 'getOriginalOrderQuantity',
        'allocated_quantity' => 'getAllocatedQuantity',
        'back_ordered' => 'getBackOrdered',
        'back_order_quantity' => 'getBackOrderQuantity',
        'shipped_quantity' => 'getShippedQuantity',
        'returned_quantity' => 'getReturnedQuantity',
        'canceled_quantity' => 'getCanceledQuantity',
        'unit_cost' => 'getUnitCost',
        'unit_price' => 'getUnitPrice',
        'net_price' => 'getNetPrice',
        'line_total' => 'getLineTotal',
        'shipping_amount' => 'getShippingAmount',
        'discount_amount' => 'getDiscountAmount',
        'taxable' => 'getTaxable',
        'taxable_total' => 'getTaxableTotal',
        'tax_amount' => 'getTaxAmount',
        'extended_total' => 'getExtendedTotal',
        'bill_to_contact' => 'getBillToContact',
        'ship_to_contact' => 'getShipToContact',
        'freight_bill_to_account' => 'getFreightBillToAccount',
        'freight_bill_to_contact' => 'getFreightBillToContact',
        'ship_from_contact' => 'getShipFromContact',
        'remit_to_contact' => 'getRemitToContact',
        'seller_contact' => 'getSellerContact',
        'trading_partner_site' => 'getTradingPartnerSite',
        'mark_for_site' => 'getMarkForSite',
        'ship_from_facility' => 'getShipFromFacility',
        'original_ship_from_facility' => 'getOriginalShipFromFacility',
        'ship_vendor' => 'getShipVendor',
        'weight' => 'getWeight',
        'freight_terms_type' => 'getFreightTermsType',
        'sourcing_group' => 'getSourcingGroup',
        'custom_attribute1' => 'getCustomAttribute1',
        'custom_attribute2' => 'getCustomAttribute2',
        'custom_attribute3' => 'getCustomAttribute3',
        'custom_attribute4' => 'getCustomAttribute4',
        'custom_attribute5' => 'getCustomAttribute5',
        'custom_attribute6' => 'getCustomAttribute6',
        'custom_attribute7' => 'getCustomAttribute7',
        'custom_attribute8' => 'getCustomAttribute8',
        'custom_attribute9' => 'getCustomAttribute9',
        'custom_attribute10' => 'getCustomAttribute10',
        'co_dates' => 'getCoDates',
        'co_references' => 'getCoReferences',
        'co_notes' => 'getCoNotes',
        'co_line_allocations' => 'getCoLineAllocations',
        'fulfillment_order_lines' => 'getFulfillmentOrderLines',
        'carrier_special_services' => 'getCarrierSpecialServices',
        'co_charge_allowances' => 'getCoChargeAllowances',
        'co_taxes' => 'getCoTaxes',
        'co_refunds' => 'getCoRefunds',
        'co_payment_terms' => 'getCoPaymentTerms',
        'co_line_sites' => 'getCoLineSites',
        'channels' => 'getChannels',
        'created_date' => 'getCreatedDate',
        'updated_date' => 'getUpdatedDate',
        'created_by' => 'getCreatedBy',
        'updated_by' => 'getUpdatedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_BACK_ORDERED = 'Back Ordered';
    public const STATUS_COMPLETE = 'Complete';
    public const STATUS__NEW = 'New';
    public const STATUS_CANCELED = 'Canceled';
    public const STATUS_VOID = 'Void';
    public const STATUS_INCOMPLETE = 'Incomplete';
    public const STATUS_CLOSED = 'Closed';
    public const STATUS_OPEN = 'Open';
    public const STATUS_SOURCED = 'Sourced';
    public const STATUS_ALLOCATING = 'Allocating';
    public const STATUS_PARTIALLY_ALLOCATED = 'Partially Allocated';
    public const STATUS_ALLOCATED = 'Allocated';
    public const STATUS_PARTIALLY_IN_FULFILLMENT = 'Partially InFulfillment';
    public const STATUS_IN_FULFILLMENT = 'InFulfillment';
    public const STATUS_PARTIALLY_RELEASED = 'Partially Released';
    public const STATUS_RELEASED = 'Released';
    public const STATUS_REVIEW = 'Review';
    public const STATUS_ACCEPTED = 'Accepted';
    public const STATUS_DRAFT = 'Draft';
    public const STATUS_TEMPLATE = 'Template';
    public const STATUS_REJECTED = 'Rejected';
    public const STATUS_FUTURE = 'Future';
    public const FREIGHT_TERMS_TYPE_PREPAID = 'Prepaid';
    public const FREIGHT_TERMS_TYPE_COLLECT = 'Collect';
    public const FREIGHT_TERMS_TYPE_THIRD_PARTY = 'Third Party';
    public const FREIGHT_TERMS_TYPE_CONSIGNEE = 'Consignee';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_BACK_ORDERED,
            self::STATUS_COMPLETE,
            self::STATUS__NEW,
            self::STATUS_CANCELED,
            self::STATUS_VOID,
            self::STATUS_INCOMPLETE,
            self::STATUS_CLOSED,
            self::STATUS_OPEN,
            self::STATUS_SOURCED,
            self::STATUS_ALLOCATING,
            self::STATUS_PARTIALLY_ALLOCATED,
            self::STATUS_ALLOCATED,
            self::STATUS_PARTIALLY_IN_FULFILLMENT,
            self::STATUS_IN_FULFILLMENT,
            self::STATUS_PARTIALLY_RELEASED,
            self::STATUS_RELEASED,
            self::STATUS_REVIEW,
            self::STATUS_ACCEPTED,
            self::STATUS_DRAFT,
            self::STATUS_TEMPLATE,
            self::STATUS_REJECTED,
            self::STATUS_FUTURE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFreightTermsTypeAllowableValues()
    {
        return [
            self::FREIGHT_TERMS_TYPE_PREPAID,
            self::FREIGHT_TERMS_TYPE_COLLECT,
            self::FREIGHT_TERMS_TYPE_THIRD_PARTY,
            self::FREIGHT_TERMS_TYPE_CONSIGNEE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('self', $data ?? [], null);
        $this->setIfExists('business_unit', $data ?? [], null);
        $this->setIfExists('co_header', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('external_line_number', $data ?? [], null);
        $this->setIfExists('related_co_line', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('item', $data ?? [], null);
        $this->setIfExists('item_number', $data ?? [], null);
        $this->setIfExists('item_external_reference', $data ?? [], null);
        $this->setIfExists('pack', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('buyer_part_number', $data ?? [], null);
        $this->setIfExists('consumer_package_code', $data ?? [], null);
        $this->setIfExists('upc_case_code', $data ?? [], null);
        $this->setIfExists('vendor_part_number', $data ?? [], null);
        $this->setIfExists('ean', $data ?? [], null);
        $this->setIfExists('gtin', $data ?? [], null);
        $this->setIfExists('national_drug_code', $data ?? [], null);
        $this->setIfExists('isbn', $data ?? [], null);
        $this->setIfExists('lot_number', $data ?? [], null);
        $this->setIfExists('color_name', $data ?? [], null);
        $this->setIfExists('item_size', $data ?? [], null);
        $this->setIfExists('department', $data ?? [], null);
        $this->setIfExists('division', $data ?? [], null);
        $this->setIfExists('inventory_condition', $data ?? [], null);
        $this->setIfExists('inventory_attribute1', $data ?? [], null);
        $this->setIfExists('inventory_attribute2', $data ?? [], null);
        $this->setIfExists('order_quantity', $data ?? [], null);
        $this->setIfExists('pack_quantity', $data ?? [], null);
        $this->setIfExists('original_order_quantity', $data ?? [], null);
        $this->setIfExists('allocated_quantity', $data ?? [], null);
        $this->setIfExists('back_ordered', $data ?? [], null);
        $this->setIfExists('back_order_quantity', $data ?? [], null);
        $this->setIfExists('shipped_quantity', $data ?? [], null);
        $this->setIfExists('returned_quantity', $data ?? [], null);
        $this->setIfExists('canceled_quantity', $data ?? [], null);
        $this->setIfExists('unit_cost', $data ?? [], null);
        $this->setIfExists('unit_price', $data ?? [], null);
        $this->setIfExists('net_price', $data ?? [], null);
        $this->setIfExists('line_total', $data ?? [], null);
        $this->setIfExists('shipping_amount', $data ?? [], null);
        $this->setIfExists('discount_amount', $data ?? [], null);
        $this->setIfExists('taxable', $data ?? [], null);
        $this->setIfExists('taxable_total', $data ?? [], null);
        $this->setIfExists('tax_amount', $data ?? [], null);
        $this->setIfExists('extended_total', $data ?? [], null);
        $this->setIfExists('bill_to_contact', $data ?? [], null);
        $this->setIfExists('ship_to_contact', $data ?? [], null);
        $this->setIfExists('freight_bill_to_account', $data ?? [], null);
        $this->setIfExists('freight_bill_to_contact', $data ?? [], null);
        $this->setIfExists('ship_from_contact', $data ?? [], null);
        $this->setIfExists('remit_to_contact', $data ?? [], null);
        $this->setIfExists('seller_contact', $data ?? [], null);
        $this->setIfExists('trading_partner_site', $data ?? [], null);
        $this->setIfExists('mark_for_site', $data ?? [], null);
        $this->setIfExists('ship_from_facility', $data ?? [], null);
        $this->setIfExists('original_ship_from_facility', $data ?? [], null);
        $this->setIfExists('ship_vendor', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
        $this->setIfExists('freight_terms_type', $data ?? [], null);
        $this->setIfExists('sourcing_group', $data ?? [], null);
        $this->setIfExists('custom_attribute1', $data ?? [], null);
        $this->setIfExists('custom_attribute2', $data ?? [], null);
        $this->setIfExists('custom_attribute3', $data ?? [], null);
        $this->setIfExists('custom_attribute4', $data ?? [], null);
        $this->setIfExists('custom_attribute5', $data ?? [], null);
        $this->setIfExists('custom_attribute6', $data ?? [], null);
        $this->setIfExists('custom_attribute7', $data ?? [], null);
        $this->setIfExists('custom_attribute8', $data ?? [], null);
        $this->setIfExists('custom_attribute9', $data ?? [], null);
        $this->setIfExists('custom_attribute10', $data ?? [], null);
        $this->setIfExists('co_dates', $data ?? [], null);
        $this->setIfExists('co_references', $data ?? [], null);
        $this->setIfExists('co_notes', $data ?? [], null);
        $this->setIfExists('co_line_allocations', $data ?? [], null);
        $this->setIfExists('fulfillment_order_lines', $data ?? [], null);
        $this->setIfExists('carrier_special_services', $data ?? [], null);
        $this->setIfExists('co_charge_allowances', $data ?? [], null);
        $this->setIfExists('co_taxes', $data ?? [], null);
        $this->setIfExists('co_refunds', $data ?? [], null);
        $this->setIfExists('co_payment_terms', $data ?? [], null);
        $this->setIfExists('co_line_sites', $data ?? [], null);
        $this->setIfExists('channels', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('updated_date', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('updated_by', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['number']) && (mb_strlen($this->container['number']) > 50)) {
            $invalidProperties[] = "invalid value for 'number', the character length must be smaller than or equal to 50.";
        }

        if ($this->container['external_line_number'] === null) {
            $invalidProperties[] = "'external_line_number' can't be null";
        }
        if ((mb_strlen($this->container['external_line_number']) > 150)) {
            $invalidProperties[] = "invalid value for 'external_line_number', the character length must be smaller than or equal to 150.";
        }

        if (!preg_match("/.*\\S.*/", $this->container['external_line_number'])) {
            $invalidProperties[] = "invalid value for 'external_line_number', must be conform to the pattern /.*\\S.*/.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['item_number']) && (mb_strlen($this->container['item_number']) > 256)) {
            $invalidProperties[] = "invalid value for 'item_number', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['item_external_reference']) && (mb_strlen($this->container['item_external_reference']) > 256)) {
            $invalidProperties[] = "invalid value for 'item_external_reference', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 256)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['buyer_part_number']) && (mb_strlen($this->container['buyer_part_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'buyer_part_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['consumer_package_code']) && (mb_strlen($this->container['consumer_package_code']) > 50)) {
            $invalidProperties[] = "invalid value for 'consumer_package_code', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['upc_case_code']) && (mb_strlen($this->container['upc_case_code']) > 50)) {
            $invalidProperties[] = "invalid value for 'upc_case_code', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['vendor_part_number']) && (mb_strlen($this->container['vendor_part_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'vendor_part_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['ean']) && (mb_strlen($this->container['ean']) > 50)) {
            $invalidProperties[] = "invalid value for 'ean', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['gtin']) && (mb_strlen($this->container['gtin']) > 50)) {
            $invalidProperties[] = "invalid value for 'gtin', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['national_drug_code']) && (mb_strlen($this->container['national_drug_code']) > 50)) {
            $invalidProperties[] = "invalid value for 'national_drug_code', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['isbn']) && (mb_strlen($this->container['isbn']) > 50)) {
            $invalidProperties[] = "invalid value for 'isbn', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['lot_number']) && (mb_strlen($this->container['lot_number']) > 200)) {
            $invalidProperties[] = "invalid value for 'lot_number', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['color_name']) && (mb_strlen($this->container['color_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'color_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['item_size']) && (mb_strlen($this->container['item_size']) > 50)) {
            $invalidProperties[] = "invalid value for 'item_size', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['department']) && (mb_strlen($this->container['department']) > 50)) {
            $invalidProperties[] = "invalid value for 'department', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['division']) && (mb_strlen($this->container['division']) > 50)) {
            $invalidProperties[] = "invalid value for 'division', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['inventory_condition']) && (mb_strlen($this->container['inventory_condition']) > 255)) {
            $invalidProperties[] = "invalid value for 'inventory_condition', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['inventory_attribute1']) && (mb_strlen($this->container['inventory_attribute1']) > 255)) {
            $invalidProperties[] = "invalid value for 'inventory_attribute1', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['inventory_attribute2']) && (mb_strlen($this->container['inventory_attribute2']) > 255)) {
            $invalidProperties[] = "invalid value for 'inventory_attribute2', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['order_quantity'] === null) {
            $invalidProperties[] = "'order_quantity' can't be null";
        }
        if (($this->container['order_quantity'] > 0)) {
            $invalidProperties[] = "invalid value for 'order_quantity', must be smaller than or equal to 0.";
        }

        if (($this->container['order_quantity'] <= 0)) {
            $invalidProperties[] = "invalid value for 'order_quantity', must be bigger than 0.";
        }

        if ($this->container['pack_quantity'] === null) {
            $invalidProperties[] = "'pack_quantity' can't be null";
        }
        if (($this->container['pack_quantity'] < 1)) {
            $invalidProperties[] = "invalid value for 'pack_quantity', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['original_order_quantity']) && ($this->container['original_order_quantity'] > 0)) {
            $invalidProperties[] = "invalid value for 'original_order_quantity', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['original_order_quantity']) && ($this->container['original_order_quantity'] < 0)) {
            $invalidProperties[] = "invalid value for 'original_order_quantity', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['allocated_quantity']) && ($this->container['allocated_quantity'] > 0)) {
            $invalidProperties[] = "invalid value for 'allocated_quantity', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['allocated_quantity']) && ($this->container['allocated_quantity'] < 0)) {
            $invalidProperties[] = "invalid value for 'allocated_quantity', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['back_order_quantity']) && ($this->container['back_order_quantity'] > 0)) {
            $invalidProperties[] = "invalid value for 'back_order_quantity', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['back_order_quantity']) && ($this->container['back_order_quantity'] < 0)) {
            $invalidProperties[] = "invalid value for 'back_order_quantity', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['shipped_quantity']) && ($this->container['shipped_quantity'] > 0)) {
            $invalidProperties[] = "invalid value for 'shipped_quantity', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['shipped_quantity']) && ($this->container['shipped_quantity'] < 0)) {
            $invalidProperties[] = "invalid value for 'shipped_quantity', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['returned_quantity']) && ($this->container['returned_quantity'] > 0)) {
            $invalidProperties[] = "invalid value for 'returned_quantity', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['returned_quantity']) && ($this->container['returned_quantity'] < 0)) {
            $invalidProperties[] = "invalid value for 'returned_quantity', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['canceled_quantity']) && ($this->container['canceled_quantity'] > 0)) {
            $invalidProperties[] = "invalid value for 'canceled_quantity', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['canceled_quantity']) && ($this->container['canceled_quantity'] < 0)) {
            $invalidProperties[] = "invalid value for 'canceled_quantity', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['unit_cost']) && ($this->container['unit_cost'] > 0)) {
            $invalidProperties[] = "invalid value for 'unit_cost', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['unit_cost']) && ($this->container['unit_cost'] < 0)) {
            $invalidProperties[] = "invalid value for 'unit_cost', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['unit_price']) && ($this->container['unit_price'] > 0)) {
            $invalidProperties[] = "invalid value for 'unit_price', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['unit_price']) && ($this->container['unit_price'] < 0)) {
            $invalidProperties[] = "invalid value for 'unit_price', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['net_price']) && ($this->container['net_price'] > 0)) {
            $invalidProperties[] = "invalid value for 'net_price', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['net_price']) && ($this->container['net_price'] < 0)) {
            $invalidProperties[] = "invalid value for 'net_price', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['line_total']) && ($this->container['line_total'] > 0)) {
            $invalidProperties[] = "invalid value for 'line_total', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['line_total']) && ($this->container['line_total'] < 0)) {
            $invalidProperties[] = "invalid value for 'line_total', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['shipping_amount']) && ($this->container['shipping_amount'] > 0)) {
            $invalidProperties[] = "invalid value for 'shipping_amount', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['shipping_amount']) && ($this->container['shipping_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'shipping_amount', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['discount_amount']) && ($this->container['discount_amount'] > 0)) {
            $invalidProperties[] = "invalid value for 'discount_amount', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['discount_amount']) && ($this->container['discount_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'discount_amount', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['taxable_total']) && ($this->container['taxable_total'] > 0)) {
            $invalidProperties[] = "invalid value for 'taxable_total', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['taxable_total']) && ($this->container['taxable_total'] < 0)) {
            $invalidProperties[] = "invalid value for 'taxable_total', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['tax_amount']) && ($this->container['tax_amount'] > 0)) {
            $invalidProperties[] = "invalid value for 'tax_amount', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['tax_amount']) && ($this->container['tax_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'tax_amount', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['extended_total']) && ($this->container['extended_total'] > 0)) {
            $invalidProperties[] = "invalid value for 'extended_total', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['extended_total']) && ($this->container['extended_total'] < 0)) {
            $invalidProperties[] = "invalid value for 'extended_total', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['freight_bill_to_account']) && (mb_strlen($this->container['freight_bill_to_account']) > 50)) {
            $invalidProperties[] = "invalid value for 'freight_bill_to_account', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['ship_vendor']) && (mb_strlen($this->container['ship_vendor']) > 50)) {
            $invalidProperties[] = "invalid value for 'ship_vendor', the character length must be smaller than or equal to 50.";
        }

        $allowedValues = $this->getFreightTermsTypeAllowableValues();
        if (!is_null($this->container['freight_terms_type']) && !in_array($this->container['freight_terms_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'freight_terms_type', must be one of '%s'",
                $this->container['freight_terms_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['custom_attribute1']) && (mb_strlen($this->container['custom_attribute1']) > 400)) {
            $invalidProperties[] = "invalid value for 'custom_attribute1', the character length must be smaller than or equal to 400.";
        }

        if (!is_null($this->container['custom_attribute2']) && (mb_strlen($this->container['custom_attribute2']) > 400)) {
            $invalidProperties[] = "invalid value for 'custom_attribute2', the character length must be smaller than or equal to 400.";
        }

        if (!is_null($this->container['custom_attribute3']) && (mb_strlen($this->container['custom_attribute3']) > 400)) {
            $invalidProperties[] = "invalid value for 'custom_attribute3', the character length must be smaller than or equal to 400.";
        }

        if (!is_null($this->container['custom_attribute4']) && (mb_strlen($this->container['custom_attribute4']) > 400)) {
            $invalidProperties[] = "invalid value for 'custom_attribute4', the character length must be smaller than or equal to 400.";
        }

        if (!is_null($this->container['custom_attribute5']) && (mb_strlen($this->container['custom_attribute5']) > 400)) {
            $invalidProperties[] = "invalid value for 'custom_attribute5', the character length must be smaller than or equal to 400.";
        }

        if (!is_null($this->container['custom_attribute6']) && (mb_strlen($this->container['custom_attribute6']) > 400)) {
            $invalidProperties[] = "invalid value for 'custom_attribute6', the character length must be smaller than or equal to 400.";
        }

        if (!is_null($this->container['custom_attribute7']) && (mb_strlen($this->container['custom_attribute7']) > 400)) {
            $invalidProperties[] = "invalid value for 'custom_attribute7', the character length must be smaller than or equal to 400.";
        }

        if (!is_null($this->container['custom_attribute8']) && (mb_strlen($this->container['custom_attribute8']) > 400)) {
            $invalidProperties[] = "invalid value for 'custom_attribute8', the character length must be smaller than or equal to 400.";
        }

        if (!is_null($this->container['custom_attribute9']) && (mb_strlen($this->container['custom_attribute9']) > 400)) {
            $invalidProperties[] = "invalid value for 'custom_attribute9', the character length must be smaller than or equal to 400.";
        }

        if (!is_null($this->container['custom_attribute10']) && (mb_strlen($this->container['custom_attribute10']) > 400)) {
            $invalidProperties[] = "invalid value for 'custom_attribute10', the character length must be smaller than or equal to 400.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets self
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $self self
     *
     * @return self
     */
    public function setSelf($self)
    {
        if (is_null($self)) {
            throw new \InvalidArgumentException('non-nullable self cannot be null');
        }
        $this->container['self'] = $self;

        return $this;
    }

    /**
     * Gets business_unit
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getBusinessUnit()
    {
        return $this->container['business_unit'];
    }

    /**
     * Sets business_unit
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $business_unit business_unit
     *
     * @return self
     */
    public function setBusinessUnit($business_unit)
    {
        if (is_null($business_unit)) {
            throw new \InvalidArgumentException('non-nullable business_unit cannot be null');
        }
        $this->container['business_unit'] = $business_unit;

        return $this;
    }

    /**
     * Gets co_header
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getCoHeader()
    {
        return $this->container['co_header'];
    }

    /**
     * Sets co_header
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $co_header co_header
     *
     * @return self
     */
    public function setCoHeader($co_header)
    {
        if (is_null($co_header)) {
            throw new \InvalidArgumentException('non-nullable co_header cannot be null');
        }
        $this->container['co_header'] = $co_header;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string|null $number Identification number for the order line.
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }
        if ((mb_strlen($number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $number when calling CustomerOrderLineDTO., must be smaller than or equal to 50.');
        }

        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets external_line_number
     *
     * @return string
     */
    public function getExternalLineNumber()
    {
        return $this->container['external_line_number'];
    }

    /**
     * Sets external_line_number
     *
     * @param string $external_line_number Identifier of the order line in an external system that is integrated with Deposco.
     *
     * @return self
     */
    public function setExternalLineNumber($external_line_number)
    {
        if (is_null($external_line_number)) {
            throw new \InvalidArgumentException('non-nullable external_line_number cannot be null');
        }
        if ((mb_strlen($external_line_number) > 150)) {
            throw new \InvalidArgumentException('invalid length for $external_line_number when calling CustomerOrderLineDTO., must be smaller than or equal to 150.');
        }
        if ((!preg_match("/.*\\S.*/", ObjectSerializer::toString($external_line_number)))) {
            throw new \InvalidArgumentException("invalid value for \$external_line_number when calling CustomerOrderLineDTO., must conform to the pattern /.*\\S.*/.");
        }

        $this->container['external_line_number'] = $external_line_number;

        return $this;
    }

    /**
     * Gets related_co_line
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getRelatedCoLine()
    {
        return $this->container['related_co_line'];
    }

    /**
     * Sets related_co_line
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $related_co_line related_co_line
     *
     * @return self
     */
    public function setRelatedCoLine($related_co_line)
    {
        if (is_null($related_co_line)) {
            array_push($this->openAPINullablesSetToNull, 'related_co_line');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('related_co_line', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['related_co_line'] = $related_co_line;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Status of the order line.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets item
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getItem()
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $item item
     *
     * @return self
     */
    public function setItem($item)
    {
        if (is_null($item)) {
            throw new \InvalidArgumentException('non-nullable item cannot be null');
        }
        $this->container['item'] = $item;

        return $this;
    }

    /**
     * Gets item_number
     *
     * @return string|null
     */
    public function getItemNumber()
    {
        return $this->container['item_number'];
    }

    /**
     * Sets item_number
     *
     * @param string|null $item_number Number of the item on the order line. Either `itemNumber` or `itemExternalReference` must be provided.
     *
     * @return self
     */
    public function setItemNumber($item_number)
    {
        if (is_null($item_number)) {
            throw new \InvalidArgumentException('non-nullable item_number cannot be null');
        }
        if ((mb_strlen($item_number) > 256)) {
            throw new \InvalidArgumentException('invalid length for $item_number when calling CustomerOrderLineDTO., must be smaller than or equal to 256.');
        }

        $this->container['item_number'] = $item_number;

        return $this;
    }

    /**
     * Gets item_external_reference
     *
     * @return string|null
     */
    public function getItemExternalReference()
    {
        return $this->container['item_external_reference'];
    }

    /**
     * Sets item_external_reference
     *
     * @param string|null $item_external_reference External reference number of the item on the order line. Optionally used to identify the item in Deposco's system.
     *
     * @return self
     */
    public function setItemExternalReference($item_external_reference)
    {
        if (is_null($item_external_reference)) {
            array_push($this->openAPINullablesSetToNull, 'item_external_reference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_external_reference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($item_external_reference) && (mb_strlen($item_external_reference) > 256)) {
            throw new \InvalidArgumentException('invalid length for $item_external_reference when calling CustomerOrderLineDTO., must be smaller than or equal to 256.');
        }

        $this->container['item_external_reference'] = $item_external_reference;

        return $this;
    }

    /**
     * Gets pack
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getPack()
    {
        return $this->container['pack'];
    }

    /**
     * Sets pack
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $pack pack
     *
     * @return self
     */
    public function setPack($pack)
    {
        if (is_null($pack)) {
            throw new \InvalidArgumentException('non-nullable pack cannot be null');
        }
        $this->container['pack'] = $pack;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Text that describes the order line or the item on the order line.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($description) && (mb_strlen($description) > 256)) {
            throw new \InvalidArgumentException('invalid length for $description when calling CustomerOrderLineDTO., must be smaller than or equal to 256.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets buyer_part_number
     *
     * @return string|null
     */
    public function getBuyerPartNumber()
    {
        return $this->container['buyer_part_number'];
    }

    /**
     * Sets buyer_part_number
     *
     * @param string|null $buyer_part_number Customer reference number for the part number of the item on the order line.
     *
     * @return self
     */
    public function setBuyerPartNumber($buyer_part_number)
    {
        if (is_null($buyer_part_number)) {
            array_push($this->openAPINullablesSetToNull, 'buyer_part_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('buyer_part_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($buyer_part_number) && (mb_strlen($buyer_part_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $buyer_part_number when calling CustomerOrderLineDTO., must be smaller than or equal to 50.');
        }

        $this->container['buyer_part_number'] = $buyer_part_number;

        return $this;
    }

    /**
     * Gets consumer_package_code
     *
     * @return string|null
     */
    public function getConsumerPackageCode()
    {
        return $this->container['consumer_package_code'];
    }

    /**
     * Sets consumer_package_code
     *
     * @param string|null $consumer_package_code Consumer package code for the item on the order line.
     *
     * @return self
     */
    public function setConsumerPackageCode($consumer_package_code)
    {
        if (is_null($consumer_package_code)) {
            array_push($this->openAPINullablesSetToNull, 'consumer_package_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('consumer_package_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($consumer_package_code) && (mb_strlen($consumer_package_code) > 50)) {
            throw new \InvalidArgumentException('invalid length for $consumer_package_code when calling CustomerOrderLineDTO., must be smaller than or equal to 50.');
        }

        $this->container['consumer_package_code'] = $consumer_package_code;

        return $this;
    }

    /**
     * Gets upc_case_code
     *
     * @return string|null
     */
    public function getUpcCaseCode()
    {
        return $this->container['upc_case_code'];
    }

    /**
     * Sets upc_case_code
     *
     * @param string|null $upc_case_code UPC case code for the item on the order line.
     *
     * @return self
     */
    public function setUpcCaseCode($upc_case_code)
    {
        if (is_null($upc_case_code)) {
            array_push($this->openAPINullablesSetToNull, 'upc_case_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('upc_case_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($upc_case_code) && (mb_strlen($upc_case_code) > 50)) {
            throw new \InvalidArgumentException('invalid length for $upc_case_code when calling CustomerOrderLineDTO., must be smaller than or equal to 50.');
        }

        $this->container['upc_case_code'] = $upc_case_code;

        return $this;
    }

    /**
     * Gets vendor_part_number
     *
     * @return string|null
     */
    public function getVendorPartNumber()
    {
        return $this->container['vendor_part_number'];
    }

    /**
     * Sets vendor_part_number
     *
     * @param string|null $vendor_part_number Vendor part number for the item on the order line.
     *
     * @return self
     */
    public function setVendorPartNumber($vendor_part_number)
    {
        if (is_null($vendor_part_number)) {
            array_push($this->openAPINullablesSetToNull, 'vendor_part_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vendor_part_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($vendor_part_number) && (mb_strlen($vendor_part_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $vendor_part_number when calling CustomerOrderLineDTO., must be smaller than or equal to 50.');
        }

        $this->container['vendor_part_number'] = $vendor_part_number;

        return $this;
    }

    /**
     * Gets ean
     *
     * @return string|null
     */
    public function getEan()
    {
        return $this->container['ean'];
    }

    /**
     * Sets ean
     *
     * @param string|null $ean European Article Number (EAN) for the item on the order line.
     *
     * @return self
     */
    public function setEan($ean)
    {
        if (is_null($ean)) {
            array_push($this->openAPINullablesSetToNull, 'ean');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ean', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($ean) && (mb_strlen($ean) > 50)) {
            throw new \InvalidArgumentException('invalid length for $ean when calling CustomerOrderLineDTO., must be smaller than or equal to 50.');
        }

        $this->container['ean'] = $ean;

        return $this;
    }

    /**
     * Gets gtin
     *
     * @return string|null
     */
    public function getGtin()
    {
        return $this->container['gtin'];
    }

    /**
     * Sets gtin
     *
     * @param string|null $gtin Global Trade Item Number (GTIN) for the item on the order line.
     *
     * @return self
     */
    public function setGtin($gtin)
    {
        if (is_null($gtin)) {
            array_push($this->openAPINullablesSetToNull, 'gtin');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gtin', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($gtin) && (mb_strlen($gtin) > 50)) {
            throw new \InvalidArgumentException('invalid length for $gtin when calling CustomerOrderLineDTO., must be smaller than or equal to 50.');
        }

        $this->container['gtin'] = $gtin;

        return $this;
    }

    /**
     * Gets national_drug_code
     *
     * @return string|null
     */
    public function getNationalDrugCode()
    {
        return $this->container['national_drug_code'];
    }

    /**
     * Sets national_drug_code
     *
     * @param string|null $national_drug_code National Drug Code (NDC) for the item on the order line.
     *
     * @return self
     */
    public function setNationalDrugCode($national_drug_code)
    {
        if (is_null($national_drug_code)) {
            array_push($this->openAPINullablesSetToNull, 'national_drug_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('national_drug_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($national_drug_code) && (mb_strlen($national_drug_code) > 50)) {
            throw new \InvalidArgumentException('invalid length for $national_drug_code when calling CustomerOrderLineDTO., must be smaller than or equal to 50.');
        }

        $this->container['national_drug_code'] = $national_drug_code;

        return $this;
    }

    /**
     * Gets isbn
     *
     * @return string|null
     */
    public function getIsbn()
    {
        return $this->container['isbn'];
    }

    /**
     * Sets isbn
     *
     * @param string|null $isbn International Standard Book Number (ISBN) for the item on the order line.
     *
     * @return self
     */
    public function setIsbn($isbn)
    {
        if (is_null($isbn)) {
            array_push($this->openAPINullablesSetToNull, 'isbn');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('isbn', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($isbn) && (mb_strlen($isbn) > 50)) {
            throw new \InvalidArgumentException('invalid length for $isbn when calling CustomerOrderLineDTO., must be smaller than or equal to 50.');
        }

        $this->container['isbn'] = $isbn;

        return $this;
    }

    /**
     * Gets lot_number
     *
     * @return string|null
     */
    public function getLotNumber()
    {
        return $this->container['lot_number'];
    }

    /**
     * Sets lot_number
     *
     * @param string|null $lot_number Lot number for the item on the order line.
     *
     * @return self
     */
    public function setLotNumber($lot_number)
    {
        if (is_null($lot_number)) {
            array_push($this->openAPINullablesSetToNull, 'lot_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lot_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($lot_number) && (mb_strlen($lot_number) > 200)) {
            throw new \InvalidArgumentException('invalid length for $lot_number when calling CustomerOrderLineDTO., must be smaller than or equal to 200.');
        }

        $this->container['lot_number'] = $lot_number;

        return $this;
    }

    /**
     * Gets color_name
     *
     * @return string|null
     */
    public function getColorName()
    {
        return $this->container['color_name'];
    }

    /**
     * Sets color_name
     *
     * @param string|null $color_name Name of the color for the item on the order line.
     *
     * @return self
     */
    public function setColorName($color_name)
    {
        if (is_null($color_name)) {
            array_push($this->openAPINullablesSetToNull, 'color_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('color_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($color_name) && (mb_strlen($color_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $color_name when calling CustomerOrderLineDTO., must be smaller than or equal to 50.');
        }

        $this->container['color_name'] = $color_name;

        return $this;
    }

    /**
     * Gets item_size
     *
     * @return string|null
     */
    public function getItemSize()
    {
        return $this->container['item_size'];
    }

    /**
     * Sets item_size
     *
     * @param string|null $item_size Size of the item on the order line.
     *
     * @return self
     */
    public function setItemSize($item_size)
    {
        if (is_null($item_size)) {
            array_push($this->openAPINullablesSetToNull, 'item_size');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_size', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($item_size) && (mb_strlen($item_size) > 50)) {
            throw new \InvalidArgumentException('invalid length for $item_size when calling CustomerOrderLineDTO., must be smaller than or equal to 50.');
        }

        $this->container['item_size'] = $item_size;

        return $this;
    }

    /**
     * Gets department
     *
     * @return string|null
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param string|null $department Department for the stock on the order line.
     *
     * @return self
     */
    public function setDepartment($department)
    {
        if (is_null($department)) {
            array_push($this->openAPINullablesSetToNull, 'department');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('department', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($department) && (mb_strlen($department) > 50)) {
            throw new \InvalidArgumentException('invalid length for $department when calling CustomerOrderLineDTO., must be smaller than or equal to 50.');
        }

        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets division
     *
     * @return string|null
     */
    public function getDivision()
    {
        return $this->container['division'];
    }

    /**
     * Sets division
     *
     * @param string|null $division Division for the stock on the order line.
     *
     * @return self
     */
    public function setDivision($division)
    {
        if (is_null($division)) {
            array_push($this->openAPINullablesSetToNull, 'division');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('division', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($division) && (mb_strlen($division) > 50)) {
            throw new \InvalidArgumentException('invalid length for $division when calling CustomerOrderLineDTO., must be smaller than or equal to 50.');
        }

        $this->container['division'] = $division;

        return $this;
    }

    /**
     * Gets inventory_condition
     *
     * @return string|null
     */
    public function getInventoryCondition()
    {
        return $this->container['inventory_condition'];
    }

    /**
     * Sets inventory_condition
     *
     * @param string|null $inventory_condition Additional field for describing the condition of the stock on the order line.
     *
     * @return self
     */
    public function setInventoryCondition($inventory_condition)
    {
        if (is_null($inventory_condition)) {
            array_push($this->openAPINullablesSetToNull, 'inventory_condition');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inventory_condition', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($inventory_condition) && (mb_strlen($inventory_condition) > 255)) {
            throw new \InvalidArgumentException('invalid length for $inventory_condition when calling CustomerOrderLineDTO., must be smaller than or equal to 255.');
        }

        $this->container['inventory_condition'] = $inventory_condition;

        return $this;
    }

    /**
     * Gets inventory_attribute1
     *
     * @return string|null
     */
    public function getInventoryAttribute1()
    {
        return $this->container['inventory_attribute1'];
    }

    /**
     * Sets inventory_attribute1
     *
     * @param string|null $inventory_attribute1 Additional field for providing descriptive information for the stock on the order line.
     *
     * @return self
     */
    public function setInventoryAttribute1($inventory_attribute1)
    {
        if (is_null($inventory_attribute1)) {
            array_push($this->openAPINullablesSetToNull, 'inventory_attribute1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inventory_attribute1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($inventory_attribute1) && (mb_strlen($inventory_attribute1) > 255)) {
            throw new \InvalidArgumentException('invalid length for $inventory_attribute1 when calling CustomerOrderLineDTO., must be smaller than or equal to 255.');
        }

        $this->container['inventory_attribute1'] = $inventory_attribute1;

        return $this;
    }

    /**
     * Gets inventory_attribute2
     *
     * @return string|null
     */
    public function getInventoryAttribute2()
    {
        return $this->container['inventory_attribute2'];
    }

    /**
     * Sets inventory_attribute2
     *
     * @param string|null $inventory_attribute2 Additional field for providing descriptive information for the stock on the order line.
     *
     * @return self
     */
    public function setInventoryAttribute2($inventory_attribute2)
    {
        if (is_null($inventory_attribute2)) {
            array_push($this->openAPINullablesSetToNull, 'inventory_attribute2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inventory_attribute2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($inventory_attribute2) && (mb_strlen($inventory_attribute2) > 255)) {
            throw new \InvalidArgumentException('invalid length for $inventory_attribute2 when calling CustomerOrderLineDTO., must be smaller than or equal to 255.');
        }

        $this->container['inventory_attribute2'] = $inventory_attribute2;

        return $this;
    }

    /**
     * Gets order_quantity
     *
     * @return int
     */
    public function getOrderQuantity()
    {
        return $this->container['order_quantity'];
    }

    /**
     * Sets order_quantity
     *
     * @param int $order_quantity Quantity of the item that was ordered.
     *
     * @return self
     */
    public function setOrderQuantity($order_quantity)
    {
        if (is_null($order_quantity)) {
            throw new \InvalidArgumentException('non-nullable order_quantity cannot be null');
        }

        if (($order_quantity > 0)) {
            throw new \InvalidArgumentException('invalid value for $order_quantity when calling CustomerOrderLineDTO., must be smaller than or equal to 0.');
        }
        if (($order_quantity <= 0)) {
            throw new \InvalidArgumentException('invalid value for $order_quantity when calling CustomerOrderLineDTO., must be bigger than 0.');
        }

        $this->container['order_quantity'] = $order_quantity;

        return $this;
    }

    /**
     * Gets pack_quantity
     *
     * @return int
     */
    public function getPackQuantity()
    {
        return $this->container['pack_quantity'];
    }

    /**
     * Sets pack_quantity
     *
     * @param int $pack_quantity Quantity of the pack that was ordered.
     *
     * @return self
     */
    public function setPackQuantity($pack_quantity)
    {
        if (is_null($pack_quantity)) {
            throw new \InvalidArgumentException('non-nullable pack_quantity cannot be null');
        }

        if (($pack_quantity < 1)) {
            throw new \InvalidArgumentException('invalid value for $pack_quantity when calling CustomerOrderLineDTO., must be bigger than or equal to 1.');
        }

        $this->container['pack_quantity'] = $pack_quantity;

        return $this;
    }

    /**
     * Gets original_order_quantity
     *
     * @return int|null
     */
    public function getOriginalOrderQuantity()
    {
        return $this->container['original_order_quantity'];
    }

    /**
     * Sets original_order_quantity
     *
     * @param int|null $original_order_quantity Quantity of the item on the order line when the order line was initially created. Must be a positive quantity.
     *
     * @return self
     */
    public function setOriginalOrderQuantity($original_order_quantity)
    {
        if (is_null($original_order_quantity)) {
            throw new \InvalidArgumentException('non-nullable original_order_quantity cannot be null');
        }

        if (($original_order_quantity > 0)) {
            throw new \InvalidArgumentException('invalid value for $original_order_quantity when calling CustomerOrderLineDTO., must be smaller than or equal to 0.');
        }
        if (($original_order_quantity < 0)) {
            throw new \InvalidArgumentException('invalid value for $original_order_quantity when calling CustomerOrderLineDTO., must be bigger than or equal to 0.');
        }

        $this->container['original_order_quantity'] = $original_order_quantity;

        return $this;
    }

    /**
     * Gets allocated_quantity
     *
     * @return int|null
     */
    public function getAllocatedQuantity()
    {
        return $this->container['allocated_quantity'];
    }

    /**
     * Sets allocated_quantity
     *
     * @param int|null $allocated_quantity Calculated quantity of stock that has been successfully allocated for fulfilling the order line.
     *
     * @return self
     */
    public function setAllocatedQuantity($allocated_quantity)
    {
        if (is_null($allocated_quantity)) {
            throw new \InvalidArgumentException('non-nullable allocated_quantity cannot be null');
        }

        if (($allocated_quantity > 0)) {
            throw new \InvalidArgumentException('invalid value for $allocated_quantity when calling CustomerOrderLineDTO., must be smaller than or equal to 0.');
        }
        if (($allocated_quantity < 0)) {
            throw new \InvalidArgumentException('invalid value for $allocated_quantity when calling CustomerOrderLineDTO., must be bigger than or equal to 0.');
        }

        $this->container['allocated_quantity'] = $allocated_quantity;

        return $this;
    }

    /**
     * Gets back_ordered
     *
     * @return bool|null
     */
    public function getBackOrdered()
    {
        return $this->container['back_ordered'];
    }

    /**
     * Sets back_ordered
     *
     * @param bool|null $back_ordered Whether stock was successfully allocated to fulfill the entire order line (`false`) or some or all of the order line quantity could not be allocated (`true`).
     *
     * @return self
     */
    public function setBackOrdered($back_ordered)
    {
        if (is_null($back_ordered)) {
            throw new \InvalidArgumentException('non-nullable back_ordered cannot be null');
        }
        $this->container['back_ordered'] = $back_ordered;

        return $this;
    }

    /**
     * Gets back_order_quantity
     *
     * @return int|null
     */
    public function getBackOrderQuantity()
    {
        return $this->container['back_order_quantity'];
    }

    /**
     * Sets back_order_quantity
     *
     * @param int|null $back_order_quantity Calculated quantity of stock that could not be allocated/fulfilled for the order line.
     *
     * @return self
     */
    public function setBackOrderQuantity($back_order_quantity)
    {
        if (is_null($back_order_quantity)) {
            throw new \InvalidArgumentException('non-nullable back_order_quantity cannot be null');
        }

        if (($back_order_quantity > 0)) {
            throw new \InvalidArgumentException('invalid value for $back_order_quantity when calling CustomerOrderLineDTO., must be smaller than or equal to 0.');
        }
        if (($back_order_quantity < 0)) {
            throw new \InvalidArgumentException('invalid value for $back_order_quantity when calling CustomerOrderLineDTO., must be bigger than or equal to 0.');
        }

        $this->container['back_order_quantity'] = $back_order_quantity;

        return $this;
    }

    /**
     * Gets shipped_quantity
     *
     * @return int|null
     */
    public function getShippedQuantity()
    {
        return $this->container['shipped_quantity'];
    }

    /**
     * Sets shipped_quantity
     *
     * @param int|null $shipped_quantity Calculated quantity from the order line that has shipped to the customer.
     *
     * @return self
     */
    public function setShippedQuantity($shipped_quantity)
    {
        if (is_null($shipped_quantity)) {
            throw new \InvalidArgumentException('non-nullable shipped_quantity cannot be null');
        }

        if (($shipped_quantity > 0)) {
            throw new \InvalidArgumentException('invalid value for $shipped_quantity when calling CustomerOrderLineDTO., must be smaller than or equal to 0.');
        }
        if (($shipped_quantity < 0)) {
            throw new \InvalidArgumentException('invalid value for $shipped_quantity when calling CustomerOrderLineDTO., must be bigger than or equal to 0.');
        }

        $this->container['shipped_quantity'] = $shipped_quantity;

        return $this;
    }

    /**
     * Gets returned_quantity
     *
     * @return int|null
     */
    public function getReturnedQuantity()
    {
        return $this->container['returned_quantity'];
    }

    /**
     * Sets returned_quantity
     *
     * @param int|null $returned_quantity Calculated quantity from the order line that was returned by the customer.
     *
     * @return self
     */
    public function setReturnedQuantity($returned_quantity)
    {
        if (is_null($returned_quantity)) {
            throw new \InvalidArgumentException('non-nullable returned_quantity cannot be null');
        }

        if (($returned_quantity > 0)) {
            throw new \InvalidArgumentException('invalid value for $returned_quantity when calling CustomerOrderLineDTO., must be smaller than or equal to 0.');
        }
        if (($returned_quantity < 0)) {
            throw new \InvalidArgumentException('invalid value for $returned_quantity when calling CustomerOrderLineDTO., must be bigger than or equal to 0.');
        }

        $this->container['returned_quantity'] = $returned_quantity;

        return $this;
    }

    /**
     * Gets canceled_quantity
     *
     * @return int|null
     */
    public function getCanceledQuantity()
    {
        return $this->container['canceled_quantity'];
    }

    /**
     * Sets canceled_quantity
     *
     * @param int|null $canceled_quantity Calculated quantity from the order line that was canceled.
     *
     * @return self
     */
    public function setCanceledQuantity($canceled_quantity)
    {
        if (is_null($canceled_quantity)) {
            throw new \InvalidArgumentException('non-nullable canceled_quantity cannot be null');
        }

        if (($canceled_quantity > 0)) {
            throw new \InvalidArgumentException('invalid value for $canceled_quantity when calling CustomerOrderLineDTO., must be smaller than or equal to 0.');
        }
        if (($canceled_quantity < 0)) {
            throw new \InvalidArgumentException('invalid value for $canceled_quantity when calling CustomerOrderLineDTO., must be bigger than or equal to 0.');
        }

        $this->container['canceled_quantity'] = $canceled_quantity;

        return $this;
    }

    /**
     * Gets unit_cost
     *
     * @return int|null
     */
    public function getUnitCost()
    {
        return $this->container['unit_cost'];
    }

    /**
     * Sets unit_cost
     *
     * @param int|null $unit_cost Unit cost of the item on the order line.
     *
     * @return self
     */
    public function setUnitCost($unit_cost)
    {
        if (is_null($unit_cost)) {
            throw new \InvalidArgumentException('non-nullable unit_cost cannot be null');
        }

        if (($unit_cost > 0)) {
            throw new \InvalidArgumentException('invalid value for $unit_cost when calling CustomerOrderLineDTO., must be smaller than or equal to 0.');
        }
        if (($unit_cost < 0)) {
            throw new \InvalidArgumentException('invalid value for $unit_cost when calling CustomerOrderLineDTO., must be bigger than or equal to 0.');
        }

        $this->container['unit_cost'] = $unit_cost;

        return $this;
    }

    /**
     * Gets unit_price
     *
     * @return int|null
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param int|null $unit_price Unit price of the item on the order line.
     *
     * @return self
     */
    public function setUnitPrice($unit_price)
    {
        if (is_null($unit_price)) {
            throw new \InvalidArgumentException('non-nullable unit_price cannot be null');
        }

        if (($unit_price > 0)) {
            throw new \InvalidArgumentException('invalid value for $unit_price when calling CustomerOrderLineDTO., must be smaller than or equal to 0.');
        }
        if (($unit_price < 0)) {
            throw new \InvalidArgumentException('invalid value for $unit_price when calling CustomerOrderLineDTO., must be bigger than or equal to 0.');
        }

        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets net_price
     *
     * @return int|null
     */
    public function getNetPrice()
    {
        return $this->container['net_price'];
    }

    /**
     * Sets net_price
     *
     * @param int|null $net_price Unit price of the item on the order line with the discount applied. If no discount is applied, then the value is the same as the unit price.
     *
     * @return self
     */
    public function setNetPrice($net_price)
    {
        if (is_null($net_price)) {
            throw new \InvalidArgumentException('non-nullable net_price cannot be null');
        }

        if (($net_price > 0)) {
            throw new \InvalidArgumentException('invalid value for $net_price when calling CustomerOrderLineDTO., must be smaller than or equal to 0.');
        }
        if (($net_price < 0)) {
            throw new \InvalidArgumentException('invalid value for $net_price when calling CustomerOrderLineDTO., must be bigger than or equal to 0.');
        }

        $this->container['net_price'] = $net_price;

        return $this;
    }

    /**
     * Gets line_total
     *
     * @return int|null
     */
    public function getLineTotal()
    {
        return $this->container['line_total'];
    }

    /**
     * Sets line_total
     *
     * @param int|null $line_total Calculated total from multiplying the net price by the order quantity and the pack quantity.
     *
     * @return self
     */
    public function setLineTotal($line_total)
    {
        if (is_null($line_total)) {
            throw new \InvalidArgumentException('non-nullable line_total cannot be null');
        }

        if (($line_total > 0)) {
            throw new \InvalidArgumentException('invalid value for $line_total when calling CustomerOrderLineDTO., must be smaller than or equal to 0.');
        }
        if (($line_total < 0)) {
            throw new \InvalidArgumentException('invalid value for $line_total when calling CustomerOrderLineDTO., must be bigger than or equal to 0.');
        }

        $this->container['line_total'] = $line_total;

        return $this;
    }

    /**
     * Gets shipping_amount
     *
     * @return int|null
     */
    public function getShippingAmount()
    {
        return $this->container['shipping_amount'];
    }

    /**
     * Sets shipping_amount
     *
     * @param int|null $shipping_amount Calculated total of shipping costs for the order line.
     *
     * @return self
     */
    public function setShippingAmount($shipping_amount)
    {
        if (is_null($shipping_amount)) {
            throw new \InvalidArgumentException('non-nullable shipping_amount cannot be null');
        }

        if (($shipping_amount > 0)) {
            throw new \InvalidArgumentException('invalid value for $shipping_amount when calling CustomerOrderLineDTO., must be smaller than or equal to 0.');
        }
        if (($shipping_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $shipping_amount when calling CustomerOrderLineDTO., must be bigger than or equal to 0.');
        }

        $this->container['shipping_amount'] = $shipping_amount;

        return $this;
    }

    /**
     * Gets discount_amount
     *
     * @return int|null
     */
    public function getDiscountAmount()
    {
        return $this->container['discount_amount'];
    }

    /**
     * Sets discount_amount
     *
     * @param int|null $discount_amount Unit discount amount. For example, if the unit price is $1 and the discount is 10%, then the value is $0.10.
     *
     * @return self
     */
    public function setDiscountAmount($discount_amount)
    {
        if (is_null($discount_amount)) {
            throw new \InvalidArgumentException('non-nullable discount_amount cannot be null');
        }

        if (($discount_amount > 0)) {
            throw new \InvalidArgumentException('invalid value for $discount_amount when calling CustomerOrderLineDTO., must be smaller than or equal to 0.');
        }
        if (($discount_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $discount_amount when calling CustomerOrderLineDTO., must be bigger than or equal to 0.');
        }

        $this->container['discount_amount'] = $discount_amount;

        return $this;
    }

    /**
     * Gets taxable
     *
     * @return bool|null
     */
    public function getTaxable()
    {
        return $this->container['taxable'];
    }

    /**
     * Sets taxable
     *
     * @param bool|null $taxable Whether the order line can be taxed.
     *
     * @return self
     */
    public function setTaxable($taxable)
    {
        if (is_null($taxable)) {
            throw new \InvalidArgumentException('non-nullable taxable cannot be null');
        }
        $this->container['taxable'] = $taxable;

        return $this;
    }

    /**
     * Gets taxable_total
     *
     * @return int|null
     */
    public function getTaxableTotal()
    {
        return $this->container['taxable_total'];
    }

    /**
     * Sets taxable_total
     *
     * @param int|null $taxable_total Total value that is eligible for taxation for the order line.
     *
     * @return self
     */
    public function setTaxableTotal($taxable_total)
    {
        if (is_null($taxable_total)) {
            throw new \InvalidArgumentException('non-nullable taxable_total cannot be null');
        }

        if (($taxable_total > 0)) {
            throw new \InvalidArgumentException('invalid value for $taxable_total when calling CustomerOrderLineDTO., must be smaller than or equal to 0.');
        }
        if (($taxable_total < 0)) {
            throw new \InvalidArgumentException('invalid value for $taxable_total when calling CustomerOrderLineDTO., must be bigger than or equal to 0.');
        }

        $this->container['taxable_total'] = $taxable_total;

        return $this;
    }

    /**
     * Gets tax_amount
     *
     * @return int|null
     */
    public function getTaxAmount()
    {
        return $this->container['tax_amount'];
    }

    /**
     * Sets tax_amount
     *
     * @param int|null $tax_amount Tax that is applied to the line total.
     *
     * @return self
     */
    public function setTaxAmount($tax_amount)
    {
        if (is_null($tax_amount)) {
            throw new \InvalidArgumentException('non-nullable tax_amount cannot be null');
        }

        if (($tax_amount > 0)) {
            throw new \InvalidArgumentException('invalid value for $tax_amount when calling CustomerOrderLineDTO., must be smaller than or equal to 0.');
        }
        if (($tax_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $tax_amount when calling CustomerOrderLineDTO., must be bigger than or equal to 0.');
        }

        $this->container['tax_amount'] = $tax_amount;

        return $this;
    }

    /**
     * Gets extended_total
     *
     * @return int|null
     */
    public function getExtendedTotal()
    {
        return $this->container['extended_total'];
    }

    /**
     * Sets extended_total
     *
     * @param int|null $extended_total Calculated sum of the tax amount and the line total for the order line.
     *
     * @return self
     */
    public function setExtendedTotal($extended_total)
    {
        if (is_null($extended_total)) {
            throw new \InvalidArgumentException('non-nullable extended_total cannot be null');
        }

        if (($extended_total > 0)) {
            throw new \InvalidArgumentException('invalid value for $extended_total when calling CustomerOrderLineDTO., must be smaller than or equal to 0.');
        }
        if (($extended_total < 0)) {
            throw new \InvalidArgumentException('invalid value for $extended_total when calling CustomerOrderLineDTO., must be bigger than or equal to 0.');
        }

        $this->container['extended_total'] = $extended_total;

        return $this;
    }

    /**
     * Gets bill_to_contact
     *
     * @return \BeLenka\Deposco\Model\CustomerOrderLineDTOBillToContact|null
     */
    public function getBillToContact()
    {
        return $this->container['bill_to_contact'];
    }

    /**
     * Sets bill_to_contact
     *
     * @param \BeLenka\Deposco\Model\CustomerOrderLineDTOBillToContact|null $bill_to_contact bill_to_contact
     *
     * @return self
     */
    public function setBillToContact($bill_to_contact)
    {
        if (is_null($bill_to_contact)) {
            throw new \InvalidArgumentException('non-nullable bill_to_contact cannot be null');
        }
        $this->container['bill_to_contact'] = $bill_to_contact;

        return $this;
    }

    /**
     * Gets ship_to_contact
     *
     * @return \BeLenka\Deposco\Model\CustomerOrderLineDTOShipToContact|null
     */
    public function getShipToContact()
    {
        return $this->container['ship_to_contact'];
    }

    /**
     * Sets ship_to_contact
     *
     * @param \BeLenka\Deposco\Model\CustomerOrderLineDTOShipToContact|null $ship_to_contact ship_to_contact
     *
     * @return self
     */
    public function setShipToContact($ship_to_contact)
    {
        if (is_null($ship_to_contact)) {
            throw new \InvalidArgumentException('non-nullable ship_to_contact cannot be null');
        }
        $this->container['ship_to_contact'] = $ship_to_contact;

        return $this;
    }

    /**
     * Gets freight_bill_to_account
     *
     * @return string|null
     */
    public function getFreightBillToAccount()
    {
        return $this->container['freight_bill_to_account'];
    }

    /**
     * Sets freight_bill_to_account
     *
     * @param string|null $freight_bill_to_account Account number that is used to pay shipping costs for the order line.
     *
     * @return self
     */
    public function setFreightBillToAccount($freight_bill_to_account)
    {
        if (is_null($freight_bill_to_account)) {
            array_push($this->openAPINullablesSetToNull, 'freight_bill_to_account');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('freight_bill_to_account', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($freight_bill_to_account) && (mb_strlen($freight_bill_to_account) > 50)) {
            throw new \InvalidArgumentException('invalid length for $freight_bill_to_account when calling CustomerOrderLineDTO., must be smaller than or equal to 50.');
        }

        $this->container['freight_bill_to_account'] = $freight_bill_to_account;

        return $this;
    }

    /**
     * Gets freight_bill_to_contact
     *
     * @return \BeLenka\Deposco\Model\CustomerOrderLineDTOFreightBillToContact|null
     */
    public function getFreightBillToContact()
    {
        return $this->container['freight_bill_to_contact'];
    }

    /**
     * Sets freight_bill_to_contact
     *
     * @param \BeLenka\Deposco\Model\CustomerOrderLineDTOFreightBillToContact|null $freight_bill_to_contact freight_bill_to_contact
     *
     * @return self
     */
    public function setFreightBillToContact($freight_bill_to_contact)
    {
        if (is_null($freight_bill_to_contact)) {
            throw new \InvalidArgumentException('non-nullable freight_bill_to_contact cannot be null');
        }
        $this->container['freight_bill_to_contact'] = $freight_bill_to_contact;

        return $this;
    }

    /**
     * Gets ship_from_contact
     *
     * @return \BeLenka\Deposco\Model\CustomerOrderLineDTOShipFromContact|null
     */
    public function getShipFromContact()
    {
        return $this->container['ship_from_contact'];
    }

    /**
     * Sets ship_from_contact
     *
     * @param \BeLenka\Deposco\Model\CustomerOrderLineDTOShipFromContact|null $ship_from_contact ship_from_contact
     *
     * @return self
     */
    public function setShipFromContact($ship_from_contact)
    {
        if (is_null($ship_from_contact)) {
            throw new \InvalidArgumentException('non-nullable ship_from_contact cannot be null');
        }
        $this->container['ship_from_contact'] = $ship_from_contact;

        return $this;
    }

    /**
     * Gets remit_to_contact
     *
     * @return \BeLenka\Deposco\Model\CustomerOrderLineDTORemitToContact|null
     */
    public function getRemitToContact()
    {
        return $this->container['remit_to_contact'];
    }

    /**
     * Sets remit_to_contact
     *
     * @param \BeLenka\Deposco\Model\CustomerOrderLineDTORemitToContact|null $remit_to_contact remit_to_contact
     *
     * @return self
     */
    public function setRemitToContact($remit_to_contact)
    {
        if (is_null($remit_to_contact)) {
            throw new \InvalidArgumentException('non-nullable remit_to_contact cannot be null');
        }
        $this->container['remit_to_contact'] = $remit_to_contact;

        return $this;
    }

    /**
     * Gets seller_contact
     *
     * @return \BeLenka\Deposco\Model\CustomerOrderLineDTOSellerContact|null
     */
    public function getSellerContact()
    {
        return $this->container['seller_contact'];
    }

    /**
     * Sets seller_contact
     *
     * @param \BeLenka\Deposco\Model\CustomerOrderLineDTOSellerContact|null $seller_contact seller_contact
     *
     * @return self
     */
    public function setSellerContact($seller_contact)
    {
        if (is_null($seller_contact)) {
            throw new \InvalidArgumentException('non-nullable seller_contact cannot be null');
        }
        $this->container['seller_contact'] = $seller_contact;

        return $this;
    }

    /**
     * Gets trading_partner_site
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getTradingPartnerSite()
    {
        return $this->container['trading_partner_site'];
    }

    /**
     * Sets trading_partner_site
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $trading_partner_site trading_partner_site
     *
     * @return self
     */
    public function setTradingPartnerSite($trading_partner_site)
    {
        if (is_null($trading_partner_site)) {
            array_push($this->openAPINullablesSetToNull, 'trading_partner_site');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('trading_partner_site', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['trading_partner_site'] = $trading_partner_site;

        return $this;
    }

    /**
     * Gets mark_for_site
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getMarkForSite()
    {
        return $this->container['mark_for_site'];
    }

    /**
     * Sets mark_for_site
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $mark_for_site mark_for_site
     *
     * @return self
     */
    public function setMarkForSite($mark_for_site)
    {
        if (is_null($mark_for_site)) {
            array_push($this->openAPINullablesSetToNull, 'mark_for_site');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mark_for_site', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mark_for_site'] = $mark_for_site;

        return $this;
    }

    /**
     * Gets ship_from_facility
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getShipFromFacility()
    {
        return $this->container['ship_from_facility'];
    }

    /**
     * Sets ship_from_facility
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $ship_from_facility ship_from_facility
     *
     * @return self
     */
    public function setShipFromFacility($ship_from_facility)
    {
        if (is_null($ship_from_facility)) {
            array_push($this->openAPINullablesSetToNull, 'ship_from_facility');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ship_from_facility', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ship_from_facility'] = $ship_from_facility;

        return $this;
    }

    /**
     * Gets original_ship_from_facility
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getOriginalShipFromFacility()
    {
        return $this->container['original_ship_from_facility'];
    }

    /**
     * Sets original_ship_from_facility
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $original_ship_from_facility original_ship_from_facility
     *
     * @return self
     */
    public function setOriginalShipFromFacility($original_ship_from_facility)
    {
        if (is_null($original_ship_from_facility)) {
            array_push($this->openAPINullablesSetToNull, 'original_ship_from_facility');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('original_ship_from_facility', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['original_ship_from_facility'] = $original_ship_from_facility;

        return $this;
    }

    /**
     * Gets ship_vendor
     *
     * @return string|null
     */
    public function getShipVendor()
    {
        return $this->container['ship_vendor'];
    }

    /**
     * Sets ship_vendor
     *
     * @param string|null $ship_vendor Shipping carrier that is used to ship the stock on the order line.
     *
     * @return self
     */
    public function setShipVendor($ship_vendor)
    {
        if (is_null($ship_vendor)) {
            array_push($this->openAPINullablesSetToNull, 'ship_vendor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ship_vendor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($ship_vendor) && (mb_strlen($ship_vendor) > 50)) {
            throw new \InvalidArgumentException('invalid length for $ship_vendor when calling CustomerOrderLineDTO., must be smaller than or equal to 50.');
        }

        $this->container['ship_vendor'] = $ship_vendor;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return \BeLenka\Deposco\Model\CustomerOrderLineDTOWeight|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param \BeLenka\Deposco\Model\CustomerOrderLineDTOWeight|null $weight weight
     *
     * @return self
     */
    public function setWeight($weight)
    {
        if (is_null($weight)) {
            throw new \InvalidArgumentException('non-nullable weight cannot be null');
        }
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets freight_terms_type
     *
     * @return string|null
     */
    public function getFreightTermsType()
    {
        return $this->container['freight_terms_type'];
    }

    /**
     * Sets freight_terms_type
     *
     * @param string|null $freight_terms_type Identifies how to determine the account that is responsible for payment of shipping costs for the order line. Set to one of the following values:  - `Prepaid` - The shipping carrier account that created the shipment will be responsible for payment of shipping costs. - `Collect` - The recipient is billed for the shipment. - `Third Party` - A trading partner is billed for the shipment. - `Consignee` - Contractual billing is used to bill the customer/recipient for UPS Ground shipping services.
     *
     * @return self
     */
    public function setFreightTermsType($freight_terms_type)
    {
        if (is_null($freight_terms_type)) {
            array_push($this->openAPINullablesSetToNull, 'freight_terms_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('freight_terms_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getFreightTermsTypeAllowableValues();
        if (!is_null($freight_terms_type) && !in_array($freight_terms_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'freight_terms_type', must be one of '%s'",
                    $freight_terms_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['freight_terms_type'] = $freight_terms_type;

        return $this;
    }

    /**
     * Gets sourcing_group
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getSourcingGroup()
    {
        return $this->container['sourcing_group'];
    }

    /**
     * Sets sourcing_group
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $sourcing_group sourcing_group
     *
     * @return self
     */
    public function setSourcingGroup($sourcing_group)
    {
        if (is_null($sourcing_group)) {
            array_push($this->openAPINullablesSetToNull, 'sourcing_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sourcing_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sourcing_group'] = $sourcing_group;

        return $this;
    }

    /**
     * Gets custom_attribute1
     *
     * @return string|null
     */
    public function getCustomAttribute1()
    {
        return $this->container['custom_attribute1'];
    }

    /**
     * Sets custom_attribute1
     *
     * @param string|null $custom_attribute1 Custom attribute for the order line.
     *
     * @return self
     */
    public function setCustomAttribute1($custom_attribute1)
    {
        if (is_null($custom_attribute1)) {
            array_push($this->openAPINullablesSetToNull, 'custom_attribute1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_attribute1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($custom_attribute1) && (mb_strlen($custom_attribute1) > 400)) {
            throw new \InvalidArgumentException('invalid length for $custom_attribute1 when calling CustomerOrderLineDTO., must be smaller than or equal to 400.');
        }

        $this->container['custom_attribute1'] = $custom_attribute1;

        return $this;
    }

    /**
     * Gets custom_attribute2
     *
     * @return string|null
     */
    public function getCustomAttribute2()
    {
        return $this->container['custom_attribute2'];
    }

    /**
     * Sets custom_attribute2
     *
     * @param string|null $custom_attribute2 Custom attribute for the order line.
     *
     * @return self
     */
    public function setCustomAttribute2($custom_attribute2)
    {
        if (is_null($custom_attribute2)) {
            array_push($this->openAPINullablesSetToNull, 'custom_attribute2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_attribute2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($custom_attribute2) && (mb_strlen($custom_attribute2) > 400)) {
            throw new \InvalidArgumentException('invalid length for $custom_attribute2 when calling CustomerOrderLineDTO., must be smaller than or equal to 400.');
        }

        $this->container['custom_attribute2'] = $custom_attribute2;

        return $this;
    }

    /**
     * Gets custom_attribute3
     *
     * @return string|null
     */
    public function getCustomAttribute3()
    {
        return $this->container['custom_attribute3'];
    }

    /**
     * Sets custom_attribute3
     *
     * @param string|null $custom_attribute3 Custom attribute for the order line.
     *
     * @return self
     */
    public function setCustomAttribute3($custom_attribute3)
    {
        if (is_null($custom_attribute3)) {
            array_push($this->openAPINullablesSetToNull, 'custom_attribute3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_attribute3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($custom_attribute3) && (mb_strlen($custom_attribute3) > 400)) {
            throw new \InvalidArgumentException('invalid length for $custom_attribute3 when calling CustomerOrderLineDTO., must be smaller than or equal to 400.');
        }

        $this->container['custom_attribute3'] = $custom_attribute3;

        return $this;
    }

    /**
     * Gets custom_attribute4
     *
     * @return string|null
     */
    public function getCustomAttribute4()
    {
        return $this->container['custom_attribute4'];
    }

    /**
     * Sets custom_attribute4
     *
     * @param string|null $custom_attribute4 Custom attribute for the order line.
     *
     * @return self
     */
    public function setCustomAttribute4($custom_attribute4)
    {
        if (is_null($custom_attribute4)) {
            array_push($this->openAPINullablesSetToNull, 'custom_attribute4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_attribute4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($custom_attribute4) && (mb_strlen($custom_attribute4) > 400)) {
            throw new \InvalidArgumentException('invalid length for $custom_attribute4 when calling CustomerOrderLineDTO., must be smaller than or equal to 400.');
        }

        $this->container['custom_attribute4'] = $custom_attribute4;

        return $this;
    }

    /**
     * Gets custom_attribute5
     *
     * @return string|null
     */
    public function getCustomAttribute5()
    {
        return $this->container['custom_attribute5'];
    }

    /**
     * Sets custom_attribute5
     *
     * @param string|null $custom_attribute5 Custom attribute for the order line.
     *
     * @return self
     */
    public function setCustomAttribute5($custom_attribute5)
    {
        if (is_null($custom_attribute5)) {
            array_push($this->openAPINullablesSetToNull, 'custom_attribute5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_attribute5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($custom_attribute5) && (mb_strlen($custom_attribute5) > 400)) {
            throw new \InvalidArgumentException('invalid length for $custom_attribute5 when calling CustomerOrderLineDTO., must be smaller than or equal to 400.');
        }

        $this->container['custom_attribute5'] = $custom_attribute5;

        return $this;
    }

    /**
     * Gets custom_attribute6
     *
     * @return string|null
     */
    public function getCustomAttribute6()
    {
        return $this->container['custom_attribute6'];
    }

    /**
     * Sets custom_attribute6
     *
     * @param string|null $custom_attribute6 Custom attribute for the order line.
     *
     * @return self
     */
    public function setCustomAttribute6($custom_attribute6)
    {
        if (is_null($custom_attribute6)) {
            array_push($this->openAPINullablesSetToNull, 'custom_attribute6');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_attribute6', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($custom_attribute6) && (mb_strlen($custom_attribute6) > 400)) {
            throw new \InvalidArgumentException('invalid length for $custom_attribute6 when calling CustomerOrderLineDTO., must be smaller than or equal to 400.');
        }

        $this->container['custom_attribute6'] = $custom_attribute6;

        return $this;
    }

    /**
     * Gets custom_attribute7
     *
     * @return string|null
     */
    public function getCustomAttribute7()
    {
        return $this->container['custom_attribute7'];
    }

    /**
     * Sets custom_attribute7
     *
     * @param string|null $custom_attribute7 Custom attribute for the order line.
     *
     * @return self
     */
    public function setCustomAttribute7($custom_attribute7)
    {
        if (is_null($custom_attribute7)) {
            array_push($this->openAPINullablesSetToNull, 'custom_attribute7');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_attribute7', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($custom_attribute7) && (mb_strlen($custom_attribute7) > 400)) {
            throw new \InvalidArgumentException('invalid length for $custom_attribute7 when calling CustomerOrderLineDTO., must be smaller than or equal to 400.');
        }

        $this->container['custom_attribute7'] = $custom_attribute7;

        return $this;
    }

    /**
     * Gets custom_attribute8
     *
     * @return string|null
     */
    public function getCustomAttribute8()
    {
        return $this->container['custom_attribute8'];
    }

    /**
     * Sets custom_attribute8
     *
     * @param string|null $custom_attribute8 Custom attribute for the order line.
     *
     * @return self
     */
    public function setCustomAttribute8($custom_attribute8)
    {
        if (is_null($custom_attribute8)) {
            array_push($this->openAPINullablesSetToNull, 'custom_attribute8');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_attribute8', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($custom_attribute8) && (mb_strlen($custom_attribute8) > 400)) {
            throw new \InvalidArgumentException('invalid length for $custom_attribute8 when calling CustomerOrderLineDTO., must be smaller than or equal to 400.');
        }

        $this->container['custom_attribute8'] = $custom_attribute8;

        return $this;
    }

    /**
     * Gets custom_attribute9
     *
     * @return string|null
     */
    public function getCustomAttribute9()
    {
        return $this->container['custom_attribute9'];
    }

    /**
     * Sets custom_attribute9
     *
     * @param string|null $custom_attribute9 Custom attribute for the order line.
     *
     * @return self
     */
    public function setCustomAttribute9($custom_attribute9)
    {
        if (is_null($custom_attribute9)) {
            array_push($this->openAPINullablesSetToNull, 'custom_attribute9');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_attribute9', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($custom_attribute9) && (mb_strlen($custom_attribute9) > 400)) {
            throw new \InvalidArgumentException('invalid length for $custom_attribute9 when calling CustomerOrderLineDTO., must be smaller than or equal to 400.');
        }

        $this->container['custom_attribute9'] = $custom_attribute9;

        return $this;
    }

    /**
     * Gets custom_attribute10
     *
     * @return string|null
     */
    public function getCustomAttribute10()
    {
        return $this->container['custom_attribute10'];
    }

    /**
     * Sets custom_attribute10
     *
     * @param string|null $custom_attribute10 Custom attribute for the order line.
     *
     * @return self
     */
    public function setCustomAttribute10($custom_attribute10)
    {
        if (is_null($custom_attribute10)) {
            array_push($this->openAPINullablesSetToNull, 'custom_attribute10');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_attribute10', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($custom_attribute10) && (mb_strlen($custom_attribute10) > 400)) {
            throw new \InvalidArgumentException('invalid length for $custom_attribute10 when calling CustomerOrderLineDTO., must be smaller than or equal to 400.');
        }

        $this->container['custom_attribute10'] = $custom_attribute10;

        return $this;
    }

    /**
     * Gets co_dates
     *
     * @return \BeLenka\Deposco\Model\CustomerOrderDateDTO[]|null
     */
    public function getCoDates()
    {
        return $this->container['co_dates'];
    }

    /**
     * Sets co_dates
     *
     * @param \BeLenka\Deposco\Model\CustomerOrderDateDTO[]|null $co_dates Array of dates for the order line.
     *
     * @return self
     */
    public function setCoDates($co_dates)
    {
        if (is_null($co_dates)) {
            array_push($this->openAPINullablesSetToNull, 'co_dates');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('co_dates', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['co_dates'] = $co_dates;

        return $this;
    }

    /**
     * Gets co_references
     *
     * @return \BeLenka\Deposco\Model\CustomerOrderReferenceDTO[]|null
     */
    public function getCoReferences()
    {
        return $this->container['co_references'];
    }

    /**
     * Sets co_references
     *
     * @param \BeLenka\Deposco\Model\CustomerOrderReferenceDTO[]|null $co_references Array of reference values for the order line.
     *
     * @return self
     */
    public function setCoReferences($co_references)
    {
        if (is_null($co_references)) {
            array_push($this->openAPINullablesSetToNull, 'co_references');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('co_references', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['co_references'] = $co_references;

        return $this;
    }

    /**
     * Gets co_notes
     *
     * @return \BeLenka\Deposco\Model\CustomerOrderNoteDTO[]|null
     */
    public function getCoNotes()
    {
        return $this->container['co_notes'];
    }

    /**
     * Sets co_notes
     *
     * @param \BeLenka\Deposco\Model\CustomerOrderNoteDTO[]|null $co_notes Array of notes for the order line.
     *
     * @return self
     */
    public function setCoNotes($co_notes)
    {
        if (is_null($co_notes)) {
            array_push($this->openAPINullablesSetToNull, 'co_notes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('co_notes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['co_notes'] = $co_notes;

        return $this;
    }

    /**
     * Gets co_line_allocations
     *
     * @return \BeLenka\Deposco\Model\CustomerOrderLineAllocationDTO[]|null
     */
    public function getCoLineAllocations()
    {
        return $this->container['co_line_allocations'];
    }

    /**
     * Sets co_line_allocations
     *
     * @param \BeLenka\Deposco\Model\CustomerOrderLineAllocationDTO[]|null $co_line_allocations Array of allocations for the order line.
     *
     * @return self
     */
    public function setCoLineAllocations($co_line_allocations)
    {
        if (is_null($co_line_allocations)) {
            array_push($this->openAPINullablesSetToNull, 'co_line_allocations');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('co_line_allocations', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['co_line_allocations'] = $co_line_allocations;

        return $this;
    }

    /**
     * Gets fulfillment_order_lines
     *
     * @return \BeLenka\Deposco\Model\PaginatedEntityReference|null
     */
    public function getFulfillmentOrderLines()
    {
        return $this->container['fulfillment_order_lines'];
    }

    /**
     * Sets fulfillment_order_lines
     *
     * @param \BeLenka\Deposco\Model\PaginatedEntityReference|null $fulfillment_order_lines fulfillment_order_lines
     *
     * @return self
     */
    public function setFulfillmentOrderLines($fulfillment_order_lines)
    {
        if (is_null($fulfillment_order_lines)) {
            array_push($this->openAPINullablesSetToNull, 'fulfillment_order_lines');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fulfillment_order_lines', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fulfillment_order_lines'] = $fulfillment_order_lines;

        return $this;
    }

    /**
     * Gets carrier_special_services
     *
     * @return \BeLenka\Deposco\Model\CarrierSpecialServiceDTO[]|null
     */
    public function getCarrierSpecialServices()
    {
        return $this->container['carrier_special_services'];
    }

    /**
     * Sets carrier_special_services
     *
     * @param \BeLenka\Deposco\Model\CarrierSpecialServiceDTO[]|null $carrier_special_services Array of carrier special service records for the customer order. Carrier special service records contain information related to special services for shipping carriers such as dry ice and dangerous goods.
     *
     * @return self
     */
    public function setCarrierSpecialServices($carrier_special_services)
    {
        if (is_null($carrier_special_services)) {
            throw new \InvalidArgumentException('non-nullable carrier_special_services cannot be null');
        }
        $this->container['carrier_special_services'] = $carrier_special_services;

        return $this;
    }

    /**
     * Gets co_charge_allowances
     *
     * @return \BeLenka\Deposco\Model\CustomerOrderChargeAllowanceDTO[]|null
     */
    public function getCoChargeAllowances()
    {
        return $this->container['co_charge_allowances'];
    }

    /**
     * Sets co_charge_allowances
     *
     * @param \BeLenka\Deposco\Model\CustomerOrderChargeAllowanceDTO[]|null $co_charge_allowances Array of charge allowances for the order line.
     *
     * @return self
     */
    public function setCoChargeAllowances($co_charge_allowances)
    {
        if (is_null($co_charge_allowances)) {
            array_push($this->openAPINullablesSetToNull, 'co_charge_allowances');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('co_charge_allowances', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['co_charge_allowances'] = $co_charge_allowances;

        return $this;
    }

    /**
     * Gets co_taxes
     *
     * @return \BeLenka\Deposco\Model\CustomerOrderTaxDTO[]|null
     */
    public function getCoTaxes()
    {
        return $this->container['co_taxes'];
    }

    /**
     * Sets co_taxes
     *
     * @param \BeLenka\Deposco\Model\CustomerOrderTaxDTO[]|null $co_taxes Array of taxes for the order line.
     *
     * @return self
     */
    public function setCoTaxes($co_taxes)
    {
        if (is_null($co_taxes)) {
            array_push($this->openAPINullablesSetToNull, 'co_taxes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('co_taxes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['co_taxes'] = $co_taxes;

        return $this;
    }

    /**
     * Gets co_refunds
     *
     * @return \BeLenka\Deposco\Model\CustomerOrderRefundDTO[]|null
     */
    public function getCoRefunds()
    {
        return $this->container['co_refunds'];
    }

    /**
     * Sets co_refunds
     *
     * @param \BeLenka\Deposco\Model\CustomerOrderRefundDTO[]|null $co_refunds Array of refunds for the order line.
     *
     * @return self
     */
    public function setCoRefunds($co_refunds)
    {
        if (is_null($co_refunds)) {
            array_push($this->openAPINullablesSetToNull, 'co_refunds');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('co_refunds', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['co_refunds'] = $co_refunds;

        return $this;
    }

    /**
     * Gets co_payment_terms
     *
     * @return \BeLenka\Deposco\Model\CustomerOrderPaymentTermDTO[]|null
     */
    public function getCoPaymentTerms()
    {
        return $this->container['co_payment_terms'];
    }

    /**
     * Sets co_payment_terms
     *
     * @param \BeLenka\Deposco\Model\CustomerOrderPaymentTermDTO[]|null $co_payment_terms Array of payment terms for the order line.
     *
     * @return self
     */
    public function setCoPaymentTerms($co_payment_terms)
    {
        if (is_null($co_payment_terms)) {
            array_push($this->openAPINullablesSetToNull, 'co_payment_terms');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('co_payment_terms', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['co_payment_terms'] = $co_payment_terms;

        return $this;
    }

    /**
     * Gets co_line_sites
     *
     * @return \BeLenka\Deposco\Model\CustomerOrderLineSiteDTO[]|null
     */
    public function getCoLineSites()
    {
        return $this->container['co_line_sites'];
    }

    /**
     * Sets co_line_sites
     *
     * @param \BeLenka\Deposco\Model\CustomerOrderLineSiteDTO[]|null $co_line_sites Array of sites to which stock for the order line should ship.
     *
     * @return self
     */
    public function setCoLineSites($co_line_sites)
    {
        if (is_null($co_line_sites)) {
            array_push($this->openAPINullablesSetToNull, 'co_line_sites');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('co_line_sites', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['co_line_sites'] = $co_line_sites;

        return $this;
    }

    /**
     * Gets channels
     *
     * @return \BeLenka\Deposco\Model\ChannelDTO[]|null
     */
    public function getChannels()
    {
        return $this->container['channels'];
    }

    /**
     * Sets channels
     *
     * @param \BeLenka\Deposco\Model\ChannelDTO[]|null $channels Array of channel cross-references for the order line.
     *
     * @return self
     */
    public function setChannels($channels)
    {
        if (is_null($channels)) {
            array_push($this->openAPINullablesSetToNull, 'channels');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('channels', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['channels'] = $channels;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime|null $created_date Date and time that the order line was created.
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets updated_date
     *
     * @return \DateTime|null
     */
    public function getUpdatedDate()
    {
        return $this->container['updated_date'];
    }

    /**
     * Sets updated_date
     *
     * @param \DateTime|null $updated_date Date and time that the order line was last updated.
     *
     * @return self
     */
    public function setUpdatedDate($updated_date)
    {
        if (is_null($updated_date)) {
            throw new \InvalidArgumentException('non-nullable updated_date cannot be null');
        }
        $this->container['updated_date'] = $updated_date;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            throw new \InvalidArgumentException('non-nullable created_by cannot be null');
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $updated_by updated_by
     *
     * @return self
     */
    public function setUpdatedBy($updated_by)
    {
        if (is_null($updated_by)) {
            throw new \InvalidArgumentException('non-nullable updated_by cannot be null');
        }
        $this->container['updated_by'] = $updated_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


