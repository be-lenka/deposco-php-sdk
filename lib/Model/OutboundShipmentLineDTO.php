<?php
/**
 * OutboundShipmentLineDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deposco API
 *
 * Welcome to the Deposco API Reference! The Deposco API enables you to integrate your system with Deposco.  * Integrate a product information system (PIM) by creating and retrieving data for items, packs, UPCs, and kits. * Set up warehouse data by creating facilities, zones, locations, and storage details. * Create inbound orders that can be received and outbound orders that can be fulfilled with Deposco warehouse management processes.  This reference provides details on available operations, endpoints, parameters, schemas, and responses.  Example requests and responses are also available for you to use as a reference. You can copy the examples to use as a starting point for your own requests.  Review the guides to learn how the API is used in common business scenarios such as setting up the warehouse and integrating a Product Information Management (PIM) system.  When you're ready to get started, register for a developer account and then log in to create your application in the developer portal.
 *
 * The version of the OpenAPI document: 2.0.2519
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\Deposco\Model;

use \ArrayAccess;
use \BeLenka\Deposco\ObjectSerializer;

/**
 * OutboundShipmentLineDTO Class Doc Comment
 *
 * @category Class
 * @description Shipment line for an outbound shipment, which identifies the quantity and pack for an item in the shipment.
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OutboundShipmentLineDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OutboundShipmentLineDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'self' => '\BeLenka\Deposco\Model\EntityRef',
        'business_unit' => '\BeLenka\Deposco\Model\EntityRef',
        'shipment' => '\BeLenka\Deposco\Model\EntityRef',
        'number' => 'string',
        'order_line' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'order_line_details' => '\BeLenka\Deposco\Model\BaseShipmentLineDTOOrderLineDetails',
        'item' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'substituted_item' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'pack' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'pack_details' => '\BeLenka\Deposco\Model\BaseShipmentLineDTOPackDetails',
        'description' => 'string',
        'order_pack_quantity' => 'int',
        'shipped_pack_quantity' => 'int',
        'damaged_pack_quantity' => 'int',
        'shipped_damaged_pack_quantity' => 'int',
        'returned_pack_quantity' => 'int',
        'canceled_pack_quantity' => 'int',
        'shortage_pack_quantity' => 'int',
        'picked_pack_quantity' => 'int',
        'package_count' => 'int',
        'piece_count' => 'int',
        'total_weight' => '\BeLenka\Deposco\Model\BaseShipmentLineDTOTotalWeight',
        'chargeable_weight' => '\BeLenka\Deposco\Model\BaseShipmentLineDTOChargeableWeight',
        'lot_number' => 'string',
        'line_serial_numbers' => '\BeLenka\Deposco\Model\BaseShipmentLineDTOLineSerialNumbersInner[]',
        'born_on_date' => '\DateTime',
        'expiration_date' => '\DateTime',
        'inventory_condition' => 'string',
        'inventory_attribute1' => 'string',
        'inventory_attribute2' => 'string',
        'unit_cost' => 'int',
        'freight_cost' => 'int',
        'tax_cost' => 'int',
        'hazmat_flag' => 'bool',
        'external_line_number' => 'string',
        'import_reference' => 'string',
        'export_reference' => 'string',
        'invoiced' => 'bool',
        'created_date' => '\DateTime',
        'updated_date' => '\DateTime',
        'created_by' => '\BeLenka\Deposco\Model\EntityRef',
        'updated_by' => '\BeLenka\Deposco\Model\EntityRef'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'self' => null,
        'business_unit' => null,
        'shipment' => null,
        'number' => null,
        'order_line' => null,
        'order_line_details' => null,
        'item' => null,
        'substituted_item' => null,
        'pack' => null,
        'pack_details' => null,
        'description' => null,
        'order_pack_quantity' => 'double',
        'shipped_pack_quantity' => 'double',
        'damaged_pack_quantity' => 'double',
        'shipped_damaged_pack_quantity' => 'double',
        'returned_pack_quantity' => 'double',
        'canceled_pack_quantity' => 'double',
        'shortage_pack_quantity' => 'double',
        'picked_pack_quantity' => 'double',
        'package_count' => 'int32',
        'piece_count' => 'double',
        'total_weight' => null,
        'chargeable_weight' => null,
        'lot_number' => null,
        'line_serial_numbers' => null,
        'born_on_date' => 'date-time',
        'expiration_date' => 'date-time',
        'inventory_condition' => null,
        'inventory_attribute1' => null,
        'inventory_attribute2' => null,
        'unit_cost' => 'double',
        'freight_cost' => 'double',
        'tax_cost' => 'double',
        'hazmat_flag' => null,
        'external_line_number' => null,
        'import_reference' => null,
        'export_reference' => null,
        'invoiced' => null,
        'created_date' => 'date-time',
        'updated_date' => 'date-time',
        'created_by' => null,
        'updated_by' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'self' => false,
        'business_unit' => false,
        'shipment' => false,
        'number' => false,
        'order_line' => true,
        'order_line_details' => false,
        'item' => true,
        'substituted_item' => true,
        'pack' => true,
        'pack_details' => false,
        'description' => false,
        'order_pack_quantity' => false,
        'shipped_pack_quantity' => false,
        'damaged_pack_quantity' => false,
        'shipped_damaged_pack_quantity' => false,
        'returned_pack_quantity' => false,
        'canceled_pack_quantity' => false,
        'shortage_pack_quantity' => false,
        'picked_pack_quantity' => false,
        'package_count' => false,
        'piece_count' => false,
        'total_weight' => false,
        'chargeable_weight' => false,
        'lot_number' => false,
        'line_serial_numbers' => false,
        'born_on_date' => false,
        'expiration_date' => false,
        'inventory_condition' => false,
        'inventory_attribute1' => false,
        'inventory_attribute2' => false,
        'unit_cost' => false,
        'freight_cost' => false,
        'tax_cost' => false,
        'hazmat_flag' => false,
        'external_line_number' => false,
        'import_reference' => false,
        'export_reference' => false,
        'invoiced' => false,
        'created_date' => false,
        'updated_date' => false,
        'created_by' => false,
        'updated_by' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'self' => 'self',
        'business_unit' => 'businessUnit',
        'shipment' => 'shipment',
        'number' => 'number',
        'order_line' => 'orderLine',
        'order_line_details' => 'orderLineDetails',
        'item' => 'item',
        'substituted_item' => 'substitutedItem',
        'pack' => 'pack',
        'pack_details' => 'packDetails',
        'description' => 'description',
        'order_pack_quantity' => 'orderPackQuantity',
        'shipped_pack_quantity' => 'shippedPackQuantity',
        'damaged_pack_quantity' => 'damagedPackQuantity',
        'shipped_damaged_pack_quantity' => 'shippedDamagedPackQuantity',
        'returned_pack_quantity' => 'returnedPackQuantity',
        'canceled_pack_quantity' => 'canceledPackQuantity',
        'shortage_pack_quantity' => 'shortagePackQuantity',
        'picked_pack_quantity' => 'pickedPackQuantity',
        'package_count' => 'packageCount',
        'piece_count' => 'pieceCount',
        'total_weight' => 'totalWeight',
        'chargeable_weight' => 'chargeableWeight',
        'lot_number' => 'lotNumber',
        'line_serial_numbers' => 'lineSerialNumbers',
        'born_on_date' => 'bornOnDate',
        'expiration_date' => 'expirationDate',
        'inventory_condition' => 'inventoryCondition',
        'inventory_attribute1' => 'inventoryAttribute1',
        'inventory_attribute2' => 'inventoryAttribute2',
        'unit_cost' => 'unitCost',
        'freight_cost' => 'freightCost',
        'tax_cost' => 'taxCost',
        'hazmat_flag' => 'hazmatFlag',
        'external_line_number' => 'externalLineNumber',
        'import_reference' => 'importReference',
        'export_reference' => 'exportReference',
        'invoiced' => 'invoiced',
        'created_date' => 'createdDate',
        'updated_date' => 'updatedDate',
        'created_by' => 'createdBy',
        'updated_by' => 'updatedBy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'self' => 'setSelf',
        'business_unit' => 'setBusinessUnit',
        'shipment' => 'setShipment',
        'number' => 'setNumber',
        'order_line' => 'setOrderLine',
        'order_line_details' => 'setOrderLineDetails',
        'item' => 'setItem',
        'substituted_item' => 'setSubstitutedItem',
        'pack' => 'setPack',
        'pack_details' => 'setPackDetails',
        'description' => 'setDescription',
        'order_pack_quantity' => 'setOrderPackQuantity',
        'shipped_pack_quantity' => 'setShippedPackQuantity',
        'damaged_pack_quantity' => 'setDamagedPackQuantity',
        'shipped_damaged_pack_quantity' => 'setShippedDamagedPackQuantity',
        'returned_pack_quantity' => 'setReturnedPackQuantity',
        'canceled_pack_quantity' => 'setCanceledPackQuantity',
        'shortage_pack_quantity' => 'setShortagePackQuantity',
        'picked_pack_quantity' => 'setPickedPackQuantity',
        'package_count' => 'setPackageCount',
        'piece_count' => 'setPieceCount',
        'total_weight' => 'setTotalWeight',
        'chargeable_weight' => 'setChargeableWeight',
        'lot_number' => 'setLotNumber',
        'line_serial_numbers' => 'setLineSerialNumbers',
        'born_on_date' => 'setBornOnDate',
        'expiration_date' => 'setExpirationDate',
        'inventory_condition' => 'setInventoryCondition',
        'inventory_attribute1' => 'setInventoryAttribute1',
        'inventory_attribute2' => 'setInventoryAttribute2',
        'unit_cost' => 'setUnitCost',
        'freight_cost' => 'setFreightCost',
        'tax_cost' => 'setTaxCost',
        'hazmat_flag' => 'setHazmatFlag',
        'external_line_number' => 'setExternalLineNumber',
        'import_reference' => 'setImportReference',
        'export_reference' => 'setExportReference',
        'invoiced' => 'setInvoiced',
        'created_date' => 'setCreatedDate',
        'updated_date' => 'setUpdatedDate',
        'created_by' => 'setCreatedBy',
        'updated_by' => 'setUpdatedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'self' => 'getSelf',
        'business_unit' => 'getBusinessUnit',
        'shipment' => 'getShipment',
        'number' => 'getNumber',
        'order_line' => 'getOrderLine',
        'order_line_details' => 'getOrderLineDetails',
        'item' => 'getItem',
        'substituted_item' => 'getSubstitutedItem',
        'pack' => 'getPack',
        'pack_details' => 'getPackDetails',
        'description' => 'getDescription',
        'order_pack_quantity' => 'getOrderPackQuantity',
        'shipped_pack_quantity' => 'getShippedPackQuantity',
        'damaged_pack_quantity' => 'getDamagedPackQuantity',
        'shipped_damaged_pack_quantity' => 'getShippedDamagedPackQuantity',
        'returned_pack_quantity' => 'getReturnedPackQuantity',
        'canceled_pack_quantity' => 'getCanceledPackQuantity',
        'shortage_pack_quantity' => 'getShortagePackQuantity',
        'picked_pack_quantity' => 'getPickedPackQuantity',
        'package_count' => 'getPackageCount',
        'piece_count' => 'getPieceCount',
        'total_weight' => 'getTotalWeight',
        'chargeable_weight' => 'getChargeableWeight',
        'lot_number' => 'getLotNumber',
        'line_serial_numbers' => 'getLineSerialNumbers',
        'born_on_date' => 'getBornOnDate',
        'expiration_date' => 'getExpirationDate',
        'inventory_condition' => 'getInventoryCondition',
        'inventory_attribute1' => 'getInventoryAttribute1',
        'inventory_attribute2' => 'getInventoryAttribute2',
        'unit_cost' => 'getUnitCost',
        'freight_cost' => 'getFreightCost',
        'tax_cost' => 'getTaxCost',
        'hazmat_flag' => 'getHazmatFlag',
        'external_line_number' => 'getExternalLineNumber',
        'import_reference' => 'getImportReference',
        'export_reference' => 'getExportReference',
        'invoiced' => 'getInvoiced',
        'created_date' => 'getCreatedDate',
        'updated_date' => 'getUpdatedDate',
        'created_by' => 'getCreatedBy',
        'updated_by' => 'getUpdatedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('self', $data ?? [], null);
        $this->setIfExists('business_unit', $data ?? [], null);
        $this->setIfExists('shipment', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('order_line', $data ?? [], null);
        $this->setIfExists('order_line_details', $data ?? [], null);
        $this->setIfExists('item', $data ?? [], null);
        $this->setIfExists('substituted_item', $data ?? [], null);
        $this->setIfExists('pack', $data ?? [], null);
        $this->setIfExists('pack_details', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('order_pack_quantity', $data ?? [], null);
        $this->setIfExists('shipped_pack_quantity', $data ?? [], null);
        $this->setIfExists('damaged_pack_quantity', $data ?? [], null);
        $this->setIfExists('shipped_damaged_pack_quantity', $data ?? [], null);
        $this->setIfExists('returned_pack_quantity', $data ?? [], null);
        $this->setIfExists('canceled_pack_quantity', $data ?? [], null);
        $this->setIfExists('shortage_pack_quantity', $data ?? [], null);
        $this->setIfExists('picked_pack_quantity', $data ?? [], null);
        $this->setIfExists('package_count', $data ?? [], null);
        $this->setIfExists('piece_count', $data ?? [], null);
        $this->setIfExists('total_weight', $data ?? [], null);
        $this->setIfExists('chargeable_weight', $data ?? [], null);
        $this->setIfExists('lot_number', $data ?? [], null);
        $this->setIfExists('line_serial_numbers', $data ?? [], null);
        $this->setIfExists('born_on_date', $data ?? [], null);
        $this->setIfExists('expiration_date', $data ?? [], null);
        $this->setIfExists('inventory_condition', $data ?? [], null);
        $this->setIfExists('inventory_attribute1', $data ?? [], null);
        $this->setIfExists('inventory_attribute2', $data ?? [], null);
        $this->setIfExists('unit_cost', $data ?? [], null);
        $this->setIfExists('freight_cost', $data ?? [], null);
        $this->setIfExists('tax_cost', $data ?? [], null);
        $this->setIfExists('hazmat_flag', $data ?? [], null);
        $this->setIfExists('external_line_number', $data ?? [], null);
        $this->setIfExists('import_reference', $data ?? [], null);
        $this->setIfExists('export_reference', $data ?? [], null);
        $this->setIfExists('invoiced', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('updated_date', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('updated_by', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['number'] === null) {
            $invalidProperties[] = "'number' can't be null";
        }
        if ((mb_strlen($this->container['number']) > 50)) {
            $invalidProperties[] = "invalid value for 'number', the character length must be smaller than or equal to 50.";
        }

        if (!preg_match("/.*\\S.*/", $this->container['number'])) {
            $invalidProperties[] = "invalid value for 'number', must be conform to the pattern /.*\\S.*/.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 500)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 500.";
        }

        if (!is_null($this->container['package_count']) && ($this->container['package_count'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'package_count', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['lot_number']) && (mb_strlen($this->container['lot_number']) > 200)) {
            $invalidProperties[] = "invalid value for 'lot_number', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['inventory_condition']) && (mb_strlen($this->container['inventory_condition']) > 255)) {
            $invalidProperties[] = "invalid value for 'inventory_condition', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['inventory_attribute1']) && (mb_strlen($this->container['inventory_attribute1']) > 255)) {
            $invalidProperties[] = "invalid value for 'inventory_attribute1', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['inventory_attribute2']) && (mb_strlen($this->container['inventory_attribute2']) > 255)) {
            $invalidProperties[] = "invalid value for 'inventory_attribute2', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['external_line_number']) && (mb_strlen($this->container['external_line_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'external_line_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['import_reference']) && (mb_strlen($this->container['import_reference']) > 50)) {
            $invalidProperties[] = "invalid value for 'import_reference', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['export_reference']) && (mb_strlen($this->container['export_reference']) > 50)) {
            $invalidProperties[] = "invalid value for 'export_reference', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets self
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $self self
     *
     * @return self
     */
    public function setSelf($self)
    {
        if (is_null($self)) {
            throw new \InvalidArgumentException('non-nullable self cannot be null');
        }
        $this->container['self'] = $self;

        return $this;
    }

    /**
     * Gets business_unit
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getBusinessUnit()
    {
        return $this->container['business_unit'];
    }

    /**
     * Sets business_unit
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $business_unit business_unit
     *
     * @return self
     */
    public function setBusinessUnit($business_unit)
    {
        if (is_null($business_unit)) {
            throw new \InvalidArgumentException('non-nullable business_unit cannot be null');
        }
        $this->container['business_unit'] = $business_unit;

        return $this;
    }

    /**
     * Gets shipment
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getShipment()
    {
        return $this->container['shipment'];
    }

    /**
     * Sets shipment
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $shipment shipment
     *
     * @return self
     */
    public function setShipment($shipment)
    {
        if (is_null($shipment)) {
            throw new \InvalidArgumentException('non-nullable shipment cannot be null');
        }
        $this->container['shipment'] = $shipment;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number Unique identification number for the shipment line.
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }
        if ((mb_strlen($number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $number when calling OutboundShipmentLineDTO., must be smaller than or equal to 50.');
        }
        if ((!preg_match("/.*\\S.*/", ObjectSerializer::toString($number)))) {
            throw new \InvalidArgumentException("invalid value for \$number when calling OutboundShipmentLineDTO., must conform to the pattern /.*\\S.*/.");
        }

        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets order_line
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getOrderLine()
    {
        return $this->container['order_line'];
    }

    /**
     * Sets order_line
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $order_line order_line
     *
     * @return self
     */
    public function setOrderLine($order_line)
    {
        if (is_null($order_line)) {
            array_push($this->openAPINullablesSetToNull, 'order_line');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_line', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['order_line'] = $order_line;

        return $this;
    }

    /**
     * Gets order_line_details
     *
     * @return \BeLenka\Deposco\Model\BaseShipmentLineDTOOrderLineDetails|null
     */
    public function getOrderLineDetails()
    {
        return $this->container['order_line_details'];
    }

    /**
     * Sets order_line_details
     *
     * @param \BeLenka\Deposco\Model\BaseShipmentLineDTOOrderLineDetails|null $order_line_details order_line_details
     *
     * @return self
     */
    public function setOrderLineDetails($order_line_details)
    {
        if (is_null($order_line_details)) {
            throw new \InvalidArgumentException('non-nullable order_line_details cannot be null');
        }
        $this->container['order_line_details'] = $order_line_details;

        return $this;
    }

    /**
     * Gets item
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getItem()
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $item item
     *
     * @return self
     */
    public function setItem($item)
    {
        if (is_null($item)) {
            array_push($this->openAPINullablesSetToNull, 'item');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['item'] = $item;

        return $this;
    }

    /**
     * Gets substituted_item
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getSubstitutedItem()
    {
        return $this->container['substituted_item'];
    }

    /**
     * Sets substituted_item
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $substituted_item substituted_item
     *
     * @return self
     */
    public function setSubstitutedItem($substituted_item)
    {
        if (is_null($substituted_item)) {
            array_push($this->openAPINullablesSetToNull, 'substituted_item');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('substituted_item', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['substituted_item'] = $substituted_item;

        return $this;
    }

    /**
     * Gets pack
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getPack()
    {
        return $this->container['pack'];
    }

    /**
     * Sets pack
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $pack pack
     *
     * @return self
     */
    public function setPack($pack)
    {
        if (is_null($pack)) {
            array_push($this->openAPINullablesSetToNull, 'pack');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pack', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pack'] = $pack;

        return $this;
    }

    /**
     * Gets pack_details
     *
     * @return \BeLenka\Deposco\Model\BaseShipmentLineDTOPackDetails|null
     */
    public function getPackDetails()
    {
        return $this->container['pack_details'];
    }

    /**
     * Sets pack_details
     *
     * @param \BeLenka\Deposco\Model\BaseShipmentLineDTOPackDetails|null $pack_details pack_details
     *
     * @return self
     */
    public function setPackDetails($pack_details)
    {
        if (is_null($pack_details)) {
            throw new \InvalidArgumentException('non-nullable pack_details cannot be null');
        }
        $this->container['pack_details'] = $pack_details;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 500)) {
            throw new \InvalidArgumentException('invalid length for $description when calling OutboundShipmentLineDTO., must be smaller than or equal to 500.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets order_pack_quantity
     *
     * @return int|null
     */
    public function getOrderPackQuantity()
    {
        return $this->container['order_pack_quantity'];
    }

    /**
     * Sets order_pack_quantity
     *
     * @param int|null $order_pack_quantity Quantity of the item/pack that was ordered.
     *
     * @return self
     */
    public function setOrderPackQuantity($order_pack_quantity)
    {
        if (is_null($order_pack_quantity)) {
            throw new \InvalidArgumentException('non-nullable order_pack_quantity cannot be null');
        }

        $this->container['order_pack_quantity'] = $order_pack_quantity;

        return $this;
    }

    /**
     * Gets shipped_pack_quantity
     *
     * @return int|null
     */
    public function getShippedPackQuantity()
    {
        return $this->container['shipped_pack_quantity'];
    }

    /**
     * Sets shipped_pack_quantity
     *
     * @param int|null $shipped_pack_quantity Quantity of the item/pack that was shipped.
     *
     * @return self
     */
    public function setShippedPackQuantity($shipped_pack_quantity)
    {
        if (is_null($shipped_pack_quantity)) {
            throw new \InvalidArgumentException('non-nullable shipped_pack_quantity cannot be null');
        }

        $this->container['shipped_pack_quantity'] = $shipped_pack_quantity;

        return $this;
    }

    /**
     * Gets damaged_pack_quantity
     *
     * @return int|null
     */
    public function getDamagedPackQuantity()
    {
        return $this->container['damaged_pack_quantity'];
    }

    /**
     * Sets damaged_pack_quantity
     *
     * @param int|null $damaged_pack_quantity Quantity of the item/pack that was damaged.
     *
     * @return self
     */
    public function setDamagedPackQuantity($damaged_pack_quantity)
    {
        if (is_null($damaged_pack_quantity)) {
            throw new \InvalidArgumentException('non-nullable damaged_pack_quantity cannot be null');
        }

        $this->container['damaged_pack_quantity'] = $damaged_pack_quantity;

        return $this;
    }

    /**
     * Gets shipped_damaged_pack_quantity
     *
     * @return int|null
     */
    public function getShippedDamagedPackQuantity()
    {
        return $this->container['shipped_damaged_pack_quantity'];
    }

    /**
     * Sets shipped_damaged_pack_quantity
     *
     * @param int|null $shipped_damaged_pack_quantity General shipment attribute.
     *
     * @return self
     */
    public function setShippedDamagedPackQuantity($shipped_damaged_pack_quantity)
    {
        if (is_null($shipped_damaged_pack_quantity)) {
            throw new \InvalidArgumentException('non-nullable shipped_damaged_pack_quantity cannot be null');
        }

        $this->container['shipped_damaged_pack_quantity'] = $shipped_damaged_pack_quantity;

        return $this;
    }

    /**
     * Gets returned_pack_quantity
     *
     * @return int|null
     */
    public function getReturnedPackQuantity()
    {
        return $this->container['returned_pack_quantity'];
    }

    /**
     * Sets returned_pack_quantity
     *
     * @param int|null $returned_pack_quantity Quantity of the item/pack that was returned.
     *
     * @return self
     */
    public function setReturnedPackQuantity($returned_pack_quantity)
    {
        if (is_null($returned_pack_quantity)) {
            throw new \InvalidArgumentException('non-nullable returned_pack_quantity cannot be null');
        }

        $this->container['returned_pack_quantity'] = $returned_pack_quantity;

        return $this;
    }

    /**
     * Gets canceled_pack_quantity
     *
     * @return int|null
     */
    public function getCanceledPackQuantity()
    {
        return $this->container['canceled_pack_quantity'];
    }

    /**
     * Sets canceled_pack_quantity
     *
     * @param int|null $canceled_pack_quantity Quantity of the item/pack on the order line that was canceled.
     *
     * @return self
     */
    public function setCanceledPackQuantity($canceled_pack_quantity)
    {
        if (is_null($canceled_pack_quantity)) {
            throw new \InvalidArgumentException('non-nullable canceled_pack_quantity cannot be null');
        }

        $this->container['canceled_pack_quantity'] = $canceled_pack_quantity;

        return $this;
    }

    /**
     * Gets shortage_pack_quantity
     *
     * @return int|null
     */
    public function getShortagePackQuantity()
    {
        return $this->container['shortage_pack_quantity'];
    }

    /**
     * Sets shortage_pack_quantity
     *
     * @param int|null $shortage_pack_quantity Quantity of the item/pack that is _not_ being shipped for the order line.
     *
     * @return self
     */
    public function setShortagePackQuantity($shortage_pack_quantity)
    {
        if (is_null($shortage_pack_quantity)) {
            throw new \InvalidArgumentException('non-nullable shortage_pack_quantity cannot be null');
        }

        $this->container['shortage_pack_quantity'] = $shortage_pack_quantity;

        return $this;
    }

    /**
     * Gets picked_pack_quantity
     *
     * @return int|null
     */
    public function getPickedPackQuantity()
    {
        return $this->container['picked_pack_quantity'];
    }

    /**
     * Sets picked_pack_quantity
     *
     * @param int|null $picked_pack_quantity Quantity of the item/pack that has been picked to fulfill the order line.
     *
     * @return self
     */
    public function setPickedPackQuantity($picked_pack_quantity)
    {
        if (is_null($picked_pack_quantity)) {
            throw new \InvalidArgumentException('non-nullable picked_pack_quantity cannot be null');
        }

        $this->container['picked_pack_quantity'] = $picked_pack_quantity;

        return $this;
    }

    /**
     * Gets package_count
     *
     * @return int|null
     */
    public function getPackageCount()
    {
        return $this->container['package_count'];
    }

    /**
     * Sets package_count
     *
     * @param int|null $package_count Count of the number of packages for the shipment line.
     *
     * @return self
     */
    public function setPackageCount($package_count)
    {
        if (is_null($package_count)) {
            throw new \InvalidArgumentException('non-nullable package_count cannot be null');
        }

        if (($package_count > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $package_count when calling OutboundShipmentLineDTO., must be smaller than or equal to 2147483647.');
        }
        if (($package_count < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $package_count when calling OutboundShipmentLineDTO., must be bigger than or equal to -2147483648.');
        }

        $this->container['package_count'] = $package_count;

        return $this;
    }

    /**
     * Gets piece_count
     *
     * @return int|null
     */
    public function getPieceCount()
    {
        return $this->container['piece_count'];
    }

    /**
     * Sets piece_count
     *
     * @param int|null $piece_count General shipment attribute.
     *
     * @return self
     */
    public function setPieceCount($piece_count)
    {
        if (is_null($piece_count)) {
            throw new \InvalidArgumentException('non-nullable piece_count cannot be null');
        }

        $this->container['piece_count'] = $piece_count;

        return $this;
    }

    /**
     * Gets total_weight
     *
     * @return \BeLenka\Deposco\Model\BaseShipmentLineDTOTotalWeight|null
     */
    public function getTotalWeight()
    {
        return $this->container['total_weight'];
    }

    /**
     * Sets total_weight
     *
     * @param \BeLenka\Deposco\Model\BaseShipmentLineDTOTotalWeight|null $total_weight total_weight
     *
     * @return self
     */
    public function setTotalWeight($total_weight)
    {
        if (is_null($total_weight)) {
            throw new \InvalidArgumentException('non-nullable total_weight cannot be null');
        }
        $this->container['total_weight'] = $total_weight;

        return $this;
    }

    /**
     * Gets chargeable_weight
     *
     * @return \BeLenka\Deposco\Model\BaseShipmentLineDTOChargeableWeight|null
     */
    public function getChargeableWeight()
    {
        return $this->container['chargeable_weight'];
    }

    /**
     * Sets chargeable_weight
     *
     * @param \BeLenka\Deposco\Model\BaseShipmentLineDTOChargeableWeight|null $chargeable_weight chargeable_weight
     *
     * @return self
     */
    public function setChargeableWeight($chargeable_weight)
    {
        if (is_null($chargeable_weight)) {
            throw new \InvalidArgumentException('non-nullable chargeable_weight cannot be null');
        }
        $this->container['chargeable_weight'] = $chargeable_weight;

        return $this;
    }

    /**
     * Gets lot_number
     *
     * @return string|null
     */
    public function getLotNumber()
    {
        return $this->container['lot_number'];
    }

    /**
     * Sets lot_number
     *
     * @param string|null $lot_number Lot number of the stock for the item on the shipment line.
     *
     * @return self
     */
    public function setLotNumber($lot_number)
    {
        if (is_null($lot_number)) {
            throw new \InvalidArgumentException('non-nullable lot_number cannot be null');
        }
        if ((mb_strlen($lot_number) > 200)) {
            throw new \InvalidArgumentException('invalid length for $lot_number when calling OutboundShipmentLineDTO., must be smaller than or equal to 200.');
        }

        $this->container['lot_number'] = $lot_number;

        return $this;
    }

    /**
     * Gets line_serial_numbers
     *
     * @return \BeLenka\Deposco\Model\BaseShipmentLineDTOLineSerialNumbersInner[]|null
     */
    public function getLineSerialNumbers()
    {
        return $this->container['line_serial_numbers'];
    }

    /**
     * Sets line_serial_numbers
     *
     * @param \BeLenka\Deposco\Model\BaseShipmentLineDTOLineSerialNumbersInner[]|null $line_serial_numbers Array of serial numbers for the stock on the shipment line.
     *
     * @return self
     */
    public function setLineSerialNumbers($line_serial_numbers)
    {
        if (is_null($line_serial_numbers)) {
            throw new \InvalidArgumentException('non-nullable line_serial_numbers cannot be null');
        }
        $this->container['line_serial_numbers'] = $line_serial_numbers;

        return $this;
    }

    /**
     * Gets born_on_date
     *
     * @return \DateTime|null
     */
    public function getBornOnDate()
    {
        return $this->container['born_on_date'];
    }

    /**
     * Sets born_on_date
     *
     * @param \DateTime|null $born_on_date Born On date of the stock for the item on the shipment line.
     *
     * @return self
     */
    public function setBornOnDate($born_on_date)
    {
        if (is_null($born_on_date)) {
            throw new \InvalidArgumentException('non-nullable born_on_date cannot be null');
        }
        $this->container['born_on_date'] = $born_on_date;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return \DateTime|null
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param \DateTime|null $expiration_date Expiration date of the stock for the item on the shipment line.
     *
     * @return self
     */
    public function setExpirationDate($expiration_date)
    {
        if (is_null($expiration_date)) {
            throw new \InvalidArgumentException('non-nullable expiration_date cannot be null');
        }
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets inventory_condition
     *
     * @return string|null
     */
    public function getInventoryCondition()
    {
        return $this->container['inventory_condition'];
    }

    /**
     * Sets inventory_condition
     *
     * @param string|null $inventory_condition Condition of the inventory on the shipment line.
     *
     * @return self
     */
    public function setInventoryCondition($inventory_condition)
    {
        if (is_null($inventory_condition)) {
            throw new \InvalidArgumentException('non-nullable inventory_condition cannot be null');
        }
        if ((mb_strlen($inventory_condition) > 255)) {
            throw new \InvalidArgumentException('invalid length for $inventory_condition when calling OutboundShipmentLineDTO., must be smaller than or equal to 255.');
        }

        $this->container['inventory_condition'] = $inventory_condition;

        return $this;
    }

    /**
     * Gets inventory_attribute1
     *
     * @return string|null
     */
    public function getInventoryAttribute1()
    {
        return $this->container['inventory_attribute1'];
    }

    /**
     * Sets inventory_attribute1
     *
     * @param string|null $inventory_attribute1 Additional field for inventory attributes for the stock on the shipment line.
     *
     * @return self
     */
    public function setInventoryAttribute1($inventory_attribute1)
    {
        if (is_null($inventory_attribute1)) {
            throw new \InvalidArgumentException('non-nullable inventory_attribute1 cannot be null');
        }
        if ((mb_strlen($inventory_attribute1) > 255)) {
            throw new \InvalidArgumentException('invalid length for $inventory_attribute1 when calling OutboundShipmentLineDTO., must be smaller than or equal to 255.');
        }

        $this->container['inventory_attribute1'] = $inventory_attribute1;

        return $this;
    }

    /**
     * Gets inventory_attribute2
     *
     * @return string|null
     */
    public function getInventoryAttribute2()
    {
        return $this->container['inventory_attribute2'];
    }

    /**
     * Sets inventory_attribute2
     *
     * @param string|null $inventory_attribute2 Additional field for inventory attributes for the stock on the shipment line.
     *
     * @return self
     */
    public function setInventoryAttribute2($inventory_attribute2)
    {
        if (is_null($inventory_attribute2)) {
            throw new \InvalidArgumentException('non-nullable inventory_attribute2 cannot be null');
        }
        if ((mb_strlen($inventory_attribute2) > 255)) {
            throw new \InvalidArgumentException('invalid length for $inventory_attribute2 when calling OutboundShipmentLineDTO., must be smaller than or equal to 255.');
        }

        $this->container['inventory_attribute2'] = $inventory_attribute2;

        return $this;
    }

    /**
     * Gets unit_cost
     *
     * @return int|null
     */
    public function getUnitCost()
    {
        return $this->container['unit_cost'];
    }

    /**
     * Sets unit_cost
     *
     * @param int|null $unit_cost Unit cost for the item on the shipment line.
     *
     * @return self
     */
    public function setUnitCost($unit_cost)
    {
        if (is_null($unit_cost)) {
            throw new \InvalidArgumentException('non-nullable unit_cost cannot be null');
        }

        $this->container['unit_cost'] = $unit_cost;

        return $this;
    }

    /**
     * Gets freight_cost
     *
     * @return int|null
     */
    public function getFreightCost()
    {
        return $this->container['freight_cost'];
    }

    /**
     * Sets freight_cost
     *
     * @param int|null $freight_cost Cost to ship the item on the shipment line.
     *
     * @return self
     */
    public function setFreightCost($freight_cost)
    {
        if (is_null($freight_cost)) {
            throw new \InvalidArgumentException('non-nullable freight_cost cannot be null');
        }

        $this->container['freight_cost'] = $freight_cost;

        return $this;
    }

    /**
     * Gets tax_cost
     *
     * @return int|null
     */
    public function getTaxCost()
    {
        return $this->container['tax_cost'];
    }

    /**
     * Sets tax_cost
     *
     * @param int|null $tax_cost Tax cost for the shipment line.
     *
     * @return self
     */
    public function setTaxCost($tax_cost)
    {
        if (is_null($tax_cost)) {
            throw new \InvalidArgumentException('non-nullable tax_cost cannot be null');
        }

        $this->container['tax_cost'] = $tax_cost;

        return $this;
    }

    /**
     * Gets hazmat_flag
     *
     * @return bool|null
     */
    public function getHazmatFlag()
    {
        return $this->container['hazmat_flag'];
    }

    /**
     * Sets hazmat_flag
     *
     * @param bool|null $hazmat_flag Whether the item on the shipment line includes hazardous materials.
     *
     * @return self
     */
    public function setHazmatFlag($hazmat_flag)
    {
        if (is_null($hazmat_flag)) {
            throw new \InvalidArgumentException('non-nullable hazmat_flag cannot be null');
        }
        $this->container['hazmat_flag'] = $hazmat_flag;

        return $this;
    }

    /**
     * Gets external_line_number
     *
     * @return string|null
     */
    public function getExternalLineNumber()
    {
        return $this->container['external_line_number'];
    }

    /**
     * Sets external_line_number
     *
     * @param string|null $external_line_number Reference number for the associated order line in an external system where the order was created.
     *
     * @return self
     */
    public function setExternalLineNumber($external_line_number)
    {
        if (is_null($external_line_number)) {
            throw new \InvalidArgumentException('non-nullable external_line_number cannot be null');
        }
        if ((mb_strlen($external_line_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $external_line_number when calling OutboundShipmentLineDTO., must be smaller than or equal to 50.');
        }

        $this->container['external_line_number'] = $external_line_number;

        return $this;
    }

    /**
     * Gets import_reference
     *
     * @return string|null
     */
    public function getImportReference()
    {
        return $this->container['import_reference'];
    }

    /**
     * Sets import_reference
     *
     * @param string|null $import_reference Reference number for the order line that is associated with the shipment line when the order was imported from an external system.
     *
     * @return self
     */
    public function setImportReference($import_reference)
    {
        if (is_null($import_reference)) {
            throw new \InvalidArgumentException('non-nullable import_reference cannot be null');
        }
        if ((mb_strlen($import_reference) > 50)) {
            throw new \InvalidArgumentException('invalid length for $import_reference when calling OutboundShipmentLineDTO., must be smaller than or equal to 50.');
        }

        $this->container['import_reference'] = $import_reference;

        return $this;
    }

    /**
     * Gets export_reference
     *
     * @return string|null
     */
    public function getExportReference()
    {
        return $this->container['export_reference'];
    }

    /**
     * Sets export_reference
     *
     * @param string|null $export_reference Reference number for the associated order line that is associated with the shipment line when the order was exported from Deposco to an external system.
     *
     * @return self
     */
    public function setExportReference($export_reference)
    {
        if (is_null($export_reference)) {
            throw new \InvalidArgumentException('non-nullable export_reference cannot be null');
        }
        if ((mb_strlen($export_reference) > 50)) {
            throw new \InvalidArgumentException('invalid length for $export_reference when calling OutboundShipmentLineDTO., must be smaller than or equal to 50.');
        }

        $this->container['export_reference'] = $export_reference;

        return $this;
    }

    /**
     * Gets invoiced
     *
     * @return bool|null
     */
    public function getInvoiced()
    {
        return $this->container['invoiced'];
    }

    /**
     * Sets invoiced
     *
     * @param bool|null $invoiced General shipment attribute.
     *
     * @return self
     */
    public function setInvoiced($invoiced)
    {
        if (is_null($invoiced)) {
            throw new \InvalidArgumentException('non-nullable invoiced cannot be null');
        }
        $this->container['invoiced'] = $invoiced;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime|null $created_date Date and time that the shipment line was created.
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets updated_date
     *
     * @return \DateTime|null
     */
    public function getUpdatedDate()
    {
        return $this->container['updated_date'];
    }

    /**
     * Sets updated_date
     *
     * @param \DateTime|null $updated_date Date and time that the shipment line was last updated.
     *
     * @return self
     */
    public function setUpdatedDate($updated_date)
    {
        if (is_null($updated_date)) {
            throw new \InvalidArgumentException('non-nullable updated_date cannot be null');
        }
        $this->container['updated_date'] = $updated_date;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            throw new \InvalidArgumentException('non-nullable created_by cannot be null');
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $updated_by updated_by
     *
     * @return self
     */
    public function setUpdatedBy($updated_by)
    {
        if (is_null($updated_by)) {
            throw new \InvalidArgumentException('non-nullable updated_by cannot be null');
        }
        $this->container['updated_by'] = $updated_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


