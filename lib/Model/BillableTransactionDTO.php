<?php
/**
 * BillableTransactionDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deposco API
 *
 * Welcome to the Deposco API Reference! The Deposco API enables you to integrate your system with Deposco.  * Integrate a product information system (PIM) by creating and retrieving data for items, packs, UPCs, and kits. * Set up warehouse data by creating facilities, zones, locations, and storage details. * Create inbound orders that can be received and outbound orders that can be fulfilled with Deposco warehouse management processes.  This reference provides details on available operations, endpoints, parameters, schemas, and responses.  Example requests and responses are also available for you to use as a reference. You can copy the examples to use as a starting point for your own requests.  Review the guides to learn how the API is used in common business scenarios such as setting up the warehouse and integrating a Product Information Management (PIM) system.  When you're ready to get started, register for a developer account and then log in to create your application in the developer portal.
 *
 * The version of the OpenAPI document: 2.0.2519
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\Deposco\Model;

use \ArrayAccess;
use \BeLenka\Deposco\ObjectSerializer;

/**
 * BillableTransactionDTO Class Doc Comment
 *
 * @category Class
 * @description Billable transaction for an activity that was performed for and is billed to a tenant company of a 3PL provider.
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BillableTransactionDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BillableTransactionDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'self' => '\BeLenka\Deposco\Model\EntityRef',
        'business_unit' => '\BeLenka\Deposco\Model\EntityRef',
        'status' => 'string',
        'description' => 'string',
        'billing_profile' => '\BeLenka\Deposco\Model\EntityRef',
        'billing_config' => '\BeLenka\Deposco\Model\EntityRef',
        'transaction_type' => 'string',
        'transaction_source' => 'string',
        'transaction_number' => 'string',
        'facility' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'location' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'container_number' => 'string',
        'order_header' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'item' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'item_attributes' => '\BeLenka\Deposco\Model\BillableTransactionDTOItemAttributes',
        'quantity' => 'int',
        'total_price' => 'int',
        'total_cost' => 'int',
        'currency_code' => 'string',
        'effective_date' => '\DateTime',
        'associated_user' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'custom_attribute1' => 'string',
        'created_date' => '\DateTime',
        'updated_date' => '\DateTime',
        'created_by' => '\BeLenka\Deposco\Model\EntityRef',
        'updated_by' => '\BeLenka\Deposco\Model\EntityRef'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'self' => null,
        'business_unit' => null,
        'status' => null,
        'description' => null,
        'billing_profile' => null,
        'billing_config' => null,
        'transaction_type' => null,
        'transaction_source' => null,
        'transaction_number' => null,
        'facility' => null,
        'location' => null,
        'container_number' => null,
        'order_header' => null,
        'item' => null,
        'item_attributes' => null,
        'quantity' => 'double',
        'total_price' => 'double',
        'total_cost' => 'double',
        'currency_code' => null,
        'effective_date' => 'date',
        'associated_user' => null,
        'custom_attribute1' => null,
        'created_date' => 'date-time',
        'updated_date' => 'date-time',
        'created_by' => null,
        'updated_by' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'self' => false,
        'business_unit' => false,
        'status' => false,
        'description' => false,
        'billing_profile' => false,
        'billing_config' => false,
        'transaction_type' => false,
        'transaction_source' => false,
        'transaction_number' => false,
        'facility' => true,
        'location' => true,
        'container_number' => false,
        'order_header' => true,
        'item' => true,
        'item_attributes' => false,
        'quantity' => false,
        'total_price' => false,
        'total_cost' => false,
        'currency_code' => true,
        'effective_date' => false,
        'associated_user' => true,
        'custom_attribute1' => false,
        'created_date' => false,
        'updated_date' => false,
        'created_by' => false,
        'updated_by' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'self' => 'self',
        'business_unit' => 'businessUnit',
        'status' => 'status',
        'description' => 'description',
        'billing_profile' => 'billingProfile',
        'billing_config' => 'billingConfig',
        'transaction_type' => 'transactionType',
        'transaction_source' => 'transactionSource',
        'transaction_number' => 'transactionNumber',
        'facility' => 'facility',
        'location' => 'location',
        'container_number' => 'containerNumber',
        'order_header' => 'orderHeader',
        'item' => 'item',
        'item_attributes' => 'itemAttributes',
        'quantity' => 'quantity',
        'total_price' => 'totalPrice',
        'total_cost' => 'totalCost',
        'currency_code' => 'currencyCode',
        'effective_date' => 'effectiveDate',
        'associated_user' => 'associatedUser',
        'custom_attribute1' => 'customAttribute1',
        'created_date' => 'createdDate',
        'updated_date' => 'updatedDate',
        'created_by' => 'createdBy',
        'updated_by' => 'updatedBy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'self' => 'setSelf',
        'business_unit' => 'setBusinessUnit',
        'status' => 'setStatus',
        'description' => 'setDescription',
        'billing_profile' => 'setBillingProfile',
        'billing_config' => 'setBillingConfig',
        'transaction_type' => 'setTransactionType',
        'transaction_source' => 'setTransactionSource',
        'transaction_number' => 'setTransactionNumber',
        'facility' => 'setFacility',
        'location' => 'setLocation',
        'container_number' => 'setContainerNumber',
        'order_header' => 'setOrderHeader',
        'item' => 'setItem',
        'item_attributes' => 'setItemAttributes',
        'quantity' => 'setQuantity',
        'total_price' => 'setTotalPrice',
        'total_cost' => 'setTotalCost',
        'currency_code' => 'setCurrencyCode',
        'effective_date' => 'setEffectiveDate',
        'associated_user' => 'setAssociatedUser',
        'custom_attribute1' => 'setCustomAttribute1',
        'created_date' => 'setCreatedDate',
        'updated_date' => 'setUpdatedDate',
        'created_by' => 'setCreatedBy',
        'updated_by' => 'setUpdatedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'self' => 'getSelf',
        'business_unit' => 'getBusinessUnit',
        'status' => 'getStatus',
        'description' => 'getDescription',
        'billing_profile' => 'getBillingProfile',
        'billing_config' => 'getBillingConfig',
        'transaction_type' => 'getTransactionType',
        'transaction_source' => 'getTransactionSource',
        'transaction_number' => 'getTransactionNumber',
        'facility' => 'getFacility',
        'location' => 'getLocation',
        'container_number' => 'getContainerNumber',
        'order_header' => 'getOrderHeader',
        'item' => 'getItem',
        'item_attributes' => 'getItemAttributes',
        'quantity' => 'getQuantity',
        'total_price' => 'getTotalPrice',
        'total_cost' => 'getTotalCost',
        'currency_code' => 'getCurrencyCode',
        'effective_date' => 'getEffectiveDate',
        'associated_user' => 'getAssociatedUser',
        'custom_attribute1' => 'getCustomAttribute1',
        'created_date' => 'getCreatedDate',
        'updated_date' => 'getUpdatedDate',
        'created_by' => 'getCreatedBy',
        'updated_by' => 'getUpdatedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_APPROVED = 'Approved';
    public const STATUS_REJECTED = 'Rejected';
    public const STATUS_PENDING_APPROVAL = 'Pending Approval';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_APPROVED,
            self::STATUS_REJECTED,
            self::STATUS_PENDING_APPROVAL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('self', $data ?? [], null);
        $this->setIfExists('business_unit', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('billing_profile', $data ?? [], null);
        $this->setIfExists('billing_config', $data ?? [], null);
        $this->setIfExists('transaction_type', $data ?? [], null);
        $this->setIfExists('transaction_source', $data ?? [], null);
        $this->setIfExists('transaction_number', $data ?? [], null);
        $this->setIfExists('facility', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('container_number', $data ?? [], null);
        $this->setIfExists('order_header', $data ?? [], null);
        $this->setIfExists('item', $data ?? [], null);
        $this->setIfExists('item_attributes', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('total_price', $data ?? [], null);
        $this->setIfExists('total_cost', $data ?? [], null);
        $this->setIfExists('currency_code', $data ?? [], null);
        $this->setIfExists('effective_date', $data ?? [], null);
        $this->setIfExists('associated_user', $data ?? [], null);
        $this->setIfExists('custom_attribute1', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('updated_date', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('updated_by', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['business_unit'] === null) {
            $invalidProperties[] = "'business_unit' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 255)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['billing_config'] === null) {
            $invalidProperties[] = "'billing_config' can't be null";
        }
        if (!is_null($this->container['transaction_type']) && (mb_strlen($this->container['transaction_type']) > 100)) {
            $invalidProperties[] = "invalid value for 'transaction_type', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['transaction_source']) && (mb_strlen($this->container['transaction_source']) > 50)) {
            $invalidProperties[] = "invalid value for 'transaction_source', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['transaction_number']) && (mb_strlen($this->container['transaction_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'transaction_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['container_number']) && (mb_strlen($this->container['container_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'container_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['quantity']) && ($this->container['quantity'] > 0)) {
            $invalidProperties[] = "invalid value for 'quantity', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['quantity']) && ($this->container['quantity'] < 0)) {
            $invalidProperties[] = "invalid value for 'quantity', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['total_price']) && ($this->container['total_price'] > 0)) {
            $invalidProperties[] = "invalid value for 'total_price', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['total_price']) && ($this->container['total_price'] < 0)) {
            $invalidProperties[] = "invalid value for 'total_price', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['total_cost']) && ($this->container['total_cost'] > 0)) {
            $invalidProperties[] = "invalid value for 'total_cost', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['total_cost']) && ($this->container['total_cost'] < 0)) {
            $invalidProperties[] = "invalid value for 'total_cost', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['currency_code']) && (mb_strlen($this->container['currency_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'currency_code', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['custom_attribute1']) && (mb_strlen($this->container['custom_attribute1']) > 100)) {
            $invalidProperties[] = "invalid value for 'custom_attribute1', the character length must be smaller than or equal to 100.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets self
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $self self
     *
     * @return self
     */
    public function setSelf($self)
    {
        if (is_null($self)) {
            throw new \InvalidArgumentException('non-nullable self cannot be null');
        }
        $this->container['self'] = $self;

        return $this;
    }

    /**
     * Gets business_unit
     *
     * @return \BeLenka\Deposco\Model\EntityRef
     */
    public function getBusinessUnit()
    {
        return $this->container['business_unit'];
    }

    /**
     * Sets business_unit
     *
     * @param \BeLenka\Deposco\Model\EntityRef $business_unit business_unit
     *
     * @return self
     */
    public function setBusinessUnit($business_unit)
    {
        if (is_null($business_unit)) {
            throw new \InvalidArgumentException('non-nullable business_unit cannot be null');
        }
        $this->container['business_unit'] = $business_unit;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Status of the billable transaction. New transactions should be created with a status of `Pending Approval`.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Text that provides additional identifying information for the billable transaction.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $description when calling BillableTransactionDTO., must be smaller than or equal to 255.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets billing_profile
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getBillingProfile()
    {
        return $this->container['billing_profile'];
    }

    /**
     * Sets billing_profile
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $billing_profile billing_profile
     *
     * @return self
     */
    public function setBillingProfile($billing_profile)
    {
        if (is_null($billing_profile)) {
            throw new \InvalidArgumentException('non-nullable billing_profile cannot be null');
        }
        $this->container['billing_profile'] = $billing_profile;

        return $this;
    }

    /**
     * Gets billing_config
     *
     * @return \BeLenka\Deposco\Model\EntityRef
     */
    public function getBillingConfig()
    {
        return $this->container['billing_config'];
    }

    /**
     * Sets billing_config
     *
     * @param \BeLenka\Deposco\Model\EntityRef $billing_config billing_config
     *
     * @return self
     */
    public function setBillingConfig($billing_config)
    {
        if (is_null($billing_config)) {
            throw new \InvalidArgumentException('non-nullable billing_config cannot be null');
        }
        $this->container['billing_config'] = $billing_config;

        return $this;
    }

    /**
     * Gets transaction_type
     *
     * @return string|null
     */
    public function getTransactionType()
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type
     *
     * @param string|null $transaction_type Type of billing config record that generated the billable transaction.
     *
     * @return self
     */
    public function setTransactionType($transaction_type)
    {
        if (is_null($transaction_type)) {
            throw new \InvalidArgumentException('non-nullable transaction_type cannot be null');
        }
        if ((mb_strlen($transaction_type) > 100)) {
            throw new \InvalidArgumentException('invalid length for $transaction_type when calling BillableTransactionDTO., must be smaller than or equal to 100.');
        }

        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }

    /**
     * Gets transaction_source
     *
     * @return string|null
     */
    public function getTransactionSource()
    {
        return $this->container['transaction_source'];
    }

    /**
     * Sets transaction_source
     *
     * @param string|null $transaction_source Source system that created the billable transaction. Automatically set to the name of the API application that created the billable transaction, if applicable.
     *
     * @return self
     */
    public function setTransactionSource($transaction_source)
    {
        if (is_null($transaction_source)) {
            throw new \InvalidArgumentException('non-nullable transaction_source cannot be null');
        }
        if ((mb_strlen($transaction_source) > 50)) {
            throw new \InvalidArgumentException('invalid length for $transaction_source when calling BillableTransactionDTO., must be smaller than or equal to 50.');
        }

        $this->container['transaction_source'] = $transaction_source;

        return $this;
    }

    /**
     * Gets transaction_number
     *
     * @return string|null
     */
    public function getTransactionNumber()
    {
        return $this->container['transaction_number'];
    }

    /**
     * Sets transaction_number
     *
     * @param string|null $transaction_number Reference number for the billable transaction in an external system.
     *
     * @return self
     */
    public function setTransactionNumber($transaction_number)
    {
        if (is_null($transaction_number)) {
            throw new \InvalidArgumentException('non-nullable transaction_number cannot be null');
        }
        if ((mb_strlen($transaction_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $transaction_number when calling BillableTransactionDTO., must be smaller than or equal to 50.');
        }

        $this->container['transaction_number'] = $transaction_number;

        return $this;
    }

    /**
     * Gets facility
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getFacility()
    {
        return $this->container['facility'];
    }

    /**
     * Sets facility
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $facility facility
     *
     * @return self
     */
    public function setFacility($facility)
    {
        if (is_null($facility)) {
            array_push($this->openAPINullablesSetToNull, 'facility');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('facility', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['facility'] = $facility;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $location location
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            array_push($this->openAPINullablesSetToNull, 'location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('location', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets container_number
     *
     * @return string|null
     */
    public function getContainerNumber()
    {
        return $this->container['container_number'];
    }

    /**
     * Sets container_number
     *
     * @param string|null $container_number Container number of the container that is associated with the billable transaction.
     *
     * @return self
     */
    public function setContainerNumber($container_number)
    {
        if (is_null($container_number)) {
            throw new \InvalidArgumentException('non-nullable container_number cannot be null');
        }
        if ((mb_strlen($container_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $container_number when calling BillableTransactionDTO., must be smaller than or equal to 50.');
        }

        $this->container['container_number'] = $container_number;

        return $this;
    }

    /**
     * Gets order_header
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getOrderHeader()
    {
        return $this->container['order_header'];
    }

    /**
     * Sets order_header
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $order_header order_header
     *
     * @return self
     */
    public function setOrderHeader($order_header)
    {
        if (is_null($order_header)) {
            array_push($this->openAPINullablesSetToNull, 'order_header');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_header', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['order_header'] = $order_header;

        return $this;
    }

    /**
     * Gets item
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getItem()
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $item item
     *
     * @return self
     */
    public function setItem($item)
    {
        if (is_null($item)) {
            array_push($this->openAPINullablesSetToNull, 'item');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['item'] = $item;

        return $this;
    }

    /**
     * Gets item_attributes
     *
     * @return \BeLenka\Deposco\Model\BillableTransactionDTOItemAttributes|null
     */
    public function getItemAttributes()
    {
        return $this->container['item_attributes'];
    }

    /**
     * Sets item_attributes
     *
     * @param \BeLenka\Deposco\Model\BillableTransactionDTOItemAttributes|null $item_attributes item_attributes
     *
     * @return self
     */
    public function setItemAttributes($item_attributes)
    {
        if (is_null($item_attributes)) {
            throw new \InvalidArgumentException('non-nullable item_attributes cannot be null');
        }
        $this->container['item_attributes'] = $item_attributes;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int|null $quantity Quantity for the activity that was performed for the billable transaction.
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }

        if (($quantity > 0)) {
            throw new \InvalidArgumentException('invalid value for $quantity when calling BillableTransactionDTO., must be smaller than or equal to 0.');
        }
        if (($quantity < 0)) {
            throw new \InvalidArgumentException('invalid value for $quantity when calling BillableTransactionDTO., must be bigger than or equal to 0.');
        }

        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets total_price
     *
     * @return int|null
     */
    public function getTotalPrice()
    {
        return $this->container['total_price'];
    }

    /**
     * Sets total_price
     *
     * @param int|null $total_price Total price for the billable transaction. Calculated based on the `quantity` for the activity and the `price` for the associated billing config record.
     *
     * @return self
     */
    public function setTotalPrice($total_price)
    {
        if (is_null($total_price)) {
            throw new \InvalidArgumentException('non-nullable total_price cannot be null');
        }

        if (($total_price > 0)) {
            throw new \InvalidArgumentException('invalid value for $total_price when calling BillableTransactionDTO., must be smaller than or equal to 0.');
        }
        if (($total_price < 0)) {
            throw new \InvalidArgumentException('invalid value for $total_price when calling BillableTransactionDTO., must be bigger than or equal to 0.');
        }

        $this->container['total_price'] = $total_price;

        return $this;
    }

    /**
     * Gets total_cost
     *
     * @return int|null
     */
    public function getTotalCost()
    {
        return $this->container['total_cost'];
    }

    /**
     * Sets total_cost
     *
     * @param int|null $total_cost Total cost for the billable transaction. This is an informational field that is typically used only for reporting purposes or for display purposes on an invoice.
     *
     * @return self
     */
    public function setTotalCost($total_cost)
    {
        if (is_null($total_cost)) {
            throw new \InvalidArgumentException('non-nullable total_cost cannot be null');
        }

        if (($total_cost > 0)) {
            throw new \InvalidArgumentException('invalid value for $total_cost when calling BillableTransactionDTO., must be smaller than or equal to 0.');
        }
        if (($total_cost < 0)) {
            throw new \InvalidArgumentException('invalid value for $total_cost when calling BillableTransactionDTO., must be bigger than or equal to 0.');
        }

        $this->container['total_cost'] = $total_cost;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code ISO 4217 code for the currency that is used for the billable transaction, such as `USD`, `GBP`, or `EUR`.
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        if (is_null($currency_code)) {
            array_push($this->openAPINullablesSetToNull, 'currency_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currency_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($currency_code) && (mb_strlen($currency_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $currency_code when calling BillableTransactionDTO., must be smaller than or equal to 3.');
        }

        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets effective_date
     *
     * @return \DateTime|null
     */
    public function getEffectiveDate()
    {
        return $this->container['effective_date'];
    }

    /**
     * Sets effective_date
     *
     * @param \DateTime|null $effective_date Date on which the billable transaction is effective and can be included on an invoice.
     *
     * @return self
     */
    public function setEffectiveDate($effective_date)
    {
        if (is_null($effective_date)) {
            throw new \InvalidArgumentException('non-nullable effective_date cannot be null');
        }
        $this->container['effective_date'] = $effective_date;

        return $this;
    }

    /**
     * Gets associated_user
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getAssociatedUser()
    {
        return $this->container['associated_user'];
    }

    /**
     * Sets associated_user
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $associated_user associated_user
     *
     * @return self
     */
    public function setAssociatedUser($associated_user)
    {
        if (is_null($associated_user)) {
            array_push($this->openAPINullablesSetToNull, 'associated_user');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('associated_user', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['associated_user'] = $associated_user;

        return $this;
    }

    /**
     * Gets custom_attribute1
     *
     * @return string|null
     */
    public function getCustomAttribute1()
    {
        return $this->container['custom_attribute1'];
    }

    /**
     * Sets custom_attribute1
     *
     * @param string|null $custom_attribute1 Custom attribute for the billable transaction.
     *
     * @return self
     */
    public function setCustomAttribute1($custom_attribute1)
    {
        if (is_null($custom_attribute1)) {
            throw new \InvalidArgumentException('non-nullable custom_attribute1 cannot be null');
        }
        if ((mb_strlen($custom_attribute1) > 100)) {
            throw new \InvalidArgumentException('invalid length for $custom_attribute1 when calling BillableTransactionDTO., must be smaller than or equal to 100.');
        }

        $this->container['custom_attribute1'] = $custom_attribute1;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime|null $created_date Date and time that the billable transaction was created.
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets updated_date
     *
     * @return \DateTime|null
     */
    public function getUpdatedDate()
    {
        return $this->container['updated_date'];
    }

    /**
     * Sets updated_date
     *
     * @param \DateTime|null $updated_date Date and time that the billable transaction was last updated.
     *
     * @return self
     */
    public function setUpdatedDate($updated_date)
    {
        if (is_null($updated_date)) {
            throw new \InvalidArgumentException('non-nullable updated_date cannot be null');
        }
        $this->container['updated_date'] = $updated_date;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            throw new \InvalidArgumentException('non-nullable created_by cannot be null');
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $updated_by updated_by
     *
     * @return self
     */
    public function setUpdatedBy($updated_by)
    {
        if (is_null($updated_by)) {
            throw new \InvalidArgumentException('non-nullable updated_by cannot be null');
        }
        $this->container['updated_by'] = $updated_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


