<?php
/**
 * CarrierSpecialServiceDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deposco API
 *
 * Welcome to the Deposco API Reference! The Deposco API enables you to integrate your system with Deposco.  * Integrate a product information system (PIM) by creating and retrieving data for items, packs, UPCs, and kits. * Set up warehouse data by creating facilities, zones, locations, and storage details. * Create inbound orders that can be received and outbound orders that can be fulfilled with Deposco warehouse management processes.  This reference provides details on available operations, endpoints, parameters, schemas, and responses.  Example requests and responses are also available for you to use as a reference. You can copy the examples to use as a starting point for your own requests.  Review the guides to learn how the API is used in common business scenarios such as setting up the warehouse and integrating a Product Information Management (PIM) system.  When you're ready to get started, register for a developer account and then log in to create your application in the developer portal.
 *
 * The version of the OpenAPI document: 2.0.2519
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\Deposco\Model;

use \ArrayAccess;
use \BeLenka\Deposco\ObjectSerializer;

/**
 * CarrierSpecialServiceDTO Class Doc Comment
 *
 * @category Class
 * @description Object that defines settings for value-added shipping and handling services provided by a specific shipping carrier.
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CarrierSpecialServiceDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CarrierSpecialServiceDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'self' => '\BeLenka\Deposco\Model\EntityRef',
        'ship_vendor' => 'string',
        'item' => '\BeLenka\Deposco\Model\EntityRef',
        'pack' => '\BeLenka\Deposco\Model\EntityRef',
        'sales_order' => '\BeLenka\Deposco\Model\EntityRef',
        'order_line' => '\BeLenka\Deposco\Model\EntityRef',
        'customer_order' => '\BeLenka\Deposco\Model\EntityRef',
        'customer_order_line' => '\BeLenka\Deposco\Model\EntityRef',
        'battery' => 'bool',
        'battery_material' => 'string',
        'battery_packing' => 'string',
        'battery_regulation' => 'string',
        'chemical_identifier' => 'string',
        'commodity_regulations' => 'string',
        'dangerous_goods_amount' => 'int',
        'dangerous_goods_uom' => 'string',
        'hazard_class' => 'int',
        'hazard_label_description' => 'string',
        'hazmat_excepted_quantity' => 'string',
        'hazmat_limited_quantity' => 'string',
        'limited_qty_packing_instructions' => 'string',
        'packaging_group_type' => 'string',
        'packaging_type' => 'string',
        'packing_instructions' => 'string',
        'proper_shipping_name' => 'string',
        'regulation_set' => 'string',
        'sub_risk_class1' => 'string',
        'sub_risk_class2' => 'string',
        'sub_risk_class3' => 'string',
        'technical_name' => 'string',
        'transportation_mode' => 'string',
        'un_number' => 'string',
        'ships_with_dry_ice' => 'bool',
        'medical_use' => 'bool',
        'alcohol' => 'bool',
        'hold_at_location' => 'bool',
        'return_receipt_requested' => 'bool',
        'saturday_delivery' => 'bool',
        'liftgate_delivery' => 'bool',
        'export_compliance_statement' => 'string',
        'created_date' => '\DateTime',
        'updated_date' => '\DateTime',
        'created_by' => '\BeLenka\Deposco\Model\EntityRef',
        'updated_by' => '\BeLenka\Deposco\Model\EntityRef'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'self' => null,
        'ship_vendor' => null,
        'item' => null,
        'pack' => null,
        'sales_order' => null,
        'order_line' => null,
        'customer_order' => null,
        'customer_order_line' => null,
        'battery' => null,
        'battery_material' => null,
        'battery_packing' => null,
        'battery_regulation' => null,
        'chemical_identifier' => null,
        'commodity_regulations' => null,
        'dangerous_goods_amount' => 'double',
        'dangerous_goods_uom' => null,
        'hazard_class' => 'double',
        'hazard_label_description' => null,
        'hazmat_excepted_quantity' => null,
        'hazmat_limited_quantity' => null,
        'limited_qty_packing_instructions' => null,
        'packaging_group_type' => null,
        'packaging_type' => null,
        'packing_instructions' => null,
        'proper_shipping_name' => null,
        'regulation_set' => null,
        'sub_risk_class1' => null,
        'sub_risk_class2' => null,
        'sub_risk_class3' => null,
        'technical_name' => null,
        'transportation_mode' => null,
        'un_number' => null,
        'ships_with_dry_ice' => null,
        'medical_use' => null,
        'alcohol' => null,
        'hold_at_location' => null,
        'return_receipt_requested' => null,
        'saturday_delivery' => null,
        'liftgate_delivery' => null,
        'export_compliance_statement' => null,
        'created_date' => 'date-time',
        'updated_date' => 'date-time',
        'created_by' => null,
        'updated_by' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'self' => false,
        'ship_vendor' => false,
        'item' => false,
        'pack' => false,
        'sales_order' => false,
        'order_line' => false,
        'customer_order' => false,
        'customer_order_line' => false,
        'battery' => false,
        'battery_material' => true,
        'battery_packing' => true,
        'battery_regulation' => true,
        'chemical_identifier' => true,
        'commodity_regulations' => true,
        'dangerous_goods_amount' => true,
        'dangerous_goods_uom' => true,
        'hazard_class' => true,
        'hazard_label_description' => true,
        'hazmat_excepted_quantity' => true,
        'hazmat_limited_quantity' => true,
        'limited_qty_packing_instructions' => true,
        'packaging_group_type' => true,
        'packaging_type' => true,
        'packing_instructions' => true,
        'proper_shipping_name' => true,
        'regulation_set' => true,
        'sub_risk_class1' => true,
        'sub_risk_class2' => true,
        'sub_risk_class3' => true,
        'technical_name' => true,
        'transportation_mode' => true,
        'un_number' => true,
        'ships_with_dry_ice' => false,
        'medical_use' => false,
        'alcohol' => false,
        'hold_at_location' => false,
        'return_receipt_requested' => false,
        'saturday_delivery' => false,
        'liftgate_delivery' => false,
        'export_compliance_statement' => true,
        'created_date' => false,
        'updated_date' => false,
        'created_by' => false,
        'updated_by' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'self' => 'self',
        'ship_vendor' => 'shipVendor',
        'item' => 'item',
        'pack' => 'pack',
        'sales_order' => 'salesOrder',
        'order_line' => 'orderLine',
        'customer_order' => 'customerOrder',
        'customer_order_line' => 'customerOrderLine',
        'battery' => 'battery',
        'battery_material' => 'batteryMaterial',
        'battery_packing' => 'batteryPacking',
        'battery_regulation' => 'batteryRegulation',
        'chemical_identifier' => 'chemicalIdentifier',
        'commodity_regulations' => 'commodityRegulations',
        'dangerous_goods_amount' => 'dangerousGoodsAmount',
        'dangerous_goods_uom' => 'dangerousGoodsUOM',
        'hazard_class' => 'hazardClass',
        'hazard_label_description' => 'hazardLabelDescription',
        'hazmat_excepted_quantity' => 'hazmatExceptedQuantity',
        'hazmat_limited_quantity' => 'hazmatLimitedQuantity',
        'limited_qty_packing_instructions' => 'limitedQtyPackingInstructions',
        'packaging_group_type' => 'packagingGroupType',
        'packaging_type' => 'packagingType',
        'packing_instructions' => 'packingInstructions',
        'proper_shipping_name' => 'properShippingName',
        'regulation_set' => 'regulationSet',
        'sub_risk_class1' => 'subRiskClass1',
        'sub_risk_class2' => 'subRiskClass2',
        'sub_risk_class3' => 'subRiskClass3',
        'technical_name' => 'technicalName',
        'transportation_mode' => 'transportationMode',
        'un_number' => 'unNumber',
        'ships_with_dry_ice' => 'shipsWithDryIce',
        'medical_use' => 'medicalUse',
        'alcohol' => 'alcohol',
        'hold_at_location' => 'holdAtLocation',
        'return_receipt_requested' => 'returnReceiptRequested',
        'saturday_delivery' => 'saturdayDelivery',
        'liftgate_delivery' => 'liftgateDelivery',
        'export_compliance_statement' => 'exportComplianceStatement',
        'created_date' => 'createdDate',
        'updated_date' => 'updatedDate',
        'created_by' => 'createdBy',
        'updated_by' => 'updatedBy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'self' => 'setSelf',
        'ship_vendor' => 'setShipVendor',
        'item' => 'setItem',
        'pack' => 'setPack',
        'sales_order' => 'setSalesOrder',
        'order_line' => 'setOrderLine',
        'customer_order' => 'setCustomerOrder',
        'customer_order_line' => 'setCustomerOrderLine',
        'battery' => 'setBattery',
        'battery_material' => 'setBatteryMaterial',
        'battery_packing' => 'setBatteryPacking',
        'battery_regulation' => 'setBatteryRegulation',
        'chemical_identifier' => 'setChemicalIdentifier',
        'commodity_regulations' => 'setCommodityRegulations',
        'dangerous_goods_amount' => 'setDangerousGoodsAmount',
        'dangerous_goods_uom' => 'setDangerousGoodsUom',
        'hazard_class' => 'setHazardClass',
        'hazard_label_description' => 'setHazardLabelDescription',
        'hazmat_excepted_quantity' => 'setHazmatExceptedQuantity',
        'hazmat_limited_quantity' => 'setHazmatLimitedQuantity',
        'limited_qty_packing_instructions' => 'setLimitedQtyPackingInstructions',
        'packaging_group_type' => 'setPackagingGroupType',
        'packaging_type' => 'setPackagingType',
        'packing_instructions' => 'setPackingInstructions',
        'proper_shipping_name' => 'setProperShippingName',
        'regulation_set' => 'setRegulationSet',
        'sub_risk_class1' => 'setSubRiskClass1',
        'sub_risk_class2' => 'setSubRiskClass2',
        'sub_risk_class3' => 'setSubRiskClass3',
        'technical_name' => 'setTechnicalName',
        'transportation_mode' => 'setTransportationMode',
        'un_number' => 'setUnNumber',
        'ships_with_dry_ice' => 'setShipsWithDryIce',
        'medical_use' => 'setMedicalUse',
        'alcohol' => 'setAlcohol',
        'hold_at_location' => 'setHoldAtLocation',
        'return_receipt_requested' => 'setReturnReceiptRequested',
        'saturday_delivery' => 'setSaturdayDelivery',
        'liftgate_delivery' => 'setLiftgateDelivery',
        'export_compliance_statement' => 'setExportComplianceStatement',
        'created_date' => 'setCreatedDate',
        'updated_date' => 'setUpdatedDate',
        'created_by' => 'setCreatedBy',
        'updated_by' => 'setUpdatedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'self' => 'getSelf',
        'ship_vendor' => 'getShipVendor',
        'item' => 'getItem',
        'pack' => 'getPack',
        'sales_order' => 'getSalesOrder',
        'order_line' => 'getOrderLine',
        'customer_order' => 'getCustomerOrder',
        'customer_order_line' => 'getCustomerOrderLine',
        'battery' => 'getBattery',
        'battery_material' => 'getBatteryMaterial',
        'battery_packing' => 'getBatteryPacking',
        'battery_regulation' => 'getBatteryRegulation',
        'chemical_identifier' => 'getChemicalIdentifier',
        'commodity_regulations' => 'getCommodityRegulations',
        'dangerous_goods_amount' => 'getDangerousGoodsAmount',
        'dangerous_goods_uom' => 'getDangerousGoodsUom',
        'hazard_class' => 'getHazardClass',
        'hazard_label_description' => 'getHazardLabelDescription',
        'hazmat_excepted_quantity' => 'getHazmatExceptedQuantity',
        'hazmat_limited_quantity' => 'getHazmatLimitedQuantity',
        'limited_qty_packing_instructions' => 'getLimitedQtyPackingInstructions',
        'packaging_group_type' => 'getPackagingGroupType',
        'packaging_type' => 'getPackagingType',
        'packing_instructions' => 'getPackingInstructions',
        'proper_shipping_name' => 'getProperShippingName',
        'regulation_set' => 'getRegulationSet',
        'sub_risk_class1' => 'getSubRiskClass1',
        'sub_risk_class2' => 'getSubRiskClass2',
        'sub_risk_class3' => 'getSubRiskClass3',
        'technical_name' => 'getTechnicalName',
        'transportation_mode' => 'getTransportationMode',
        'un_number' => 'getUnNumber',
        'ships_with_dry_ice' => 'getShipsWithDryIce',
        'medical_use' => 'getMedicalUse',
        'alcohol' => 'getAlcohol',
        'hold_at_location' => 'getHoldAtLocation',
        'return_receipt_requested' => 'getReturnReceiptRequested',
        'saturday_delivery' => 'getSaturdayDelivery',
        'liftgate_delivery' => 'getLiftgateDelivery',
        'export_compliance_statement' => 'getExportComplianceStatement',
        'created_date' => 'getCreatedDate',
        'updated_date' => 'getUpdatedDate',
        'created_by' => 'getCreatedBy',
        'updated_by' => 'getUpdatedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const BATTERY_MATERIAL_ION = 'LITHIUM_ION';
    public const BATTERY_MATERIAL_METAL = 'LITHIUM_METAL';
    public const BATTERY_PACKING_CONTAINED_IN_EQUIPMENT = 'CONTAINED_IN_EQUIPMENT';
    public const BATTERY_PACKING_PACKED_WITH_EQUIPMENT = 'PACKED_WITH_EQUIPMENT';
    public const BATTERY_PACKING_STANDALONE = 'STANDALONE';
    public const BATTERY_REGULATION_IATA_SECTION_II = 'IATA_SECTION_II';
    public const EXPORT_COMPLIANCE_STATEMENT_NO_EEI_30_37_F = 'NO EEI 30.37(F)';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBatteryMaterialAllowableValues()
    {
        return [
            self::BATTERY_MATERIAL_ION,
            self::BATTERY_MATERIAL_METAL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBatteryPackingAllowableValues()
    {
        return [
            self::BATTERY_PACKING_CONTAINED_IN_EQUIPMENT,
            self::BATTERY_PACKING_PACKED_WITH_EQUIPMENT,
            self::BATTERY_PACKING_STANDALONE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBatteryRegulationAllowableValues()
    {
        return [
            self::BATTERY_REGULATION_IATA_SECTION_II,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExportComplianceStatementAllowableValues()
    {
        return [
            self::EXPORT_COMPLIANCE_STATEMENT_NO_EEI_30_37_F,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('self', $data ?? [], null);
        $this->setIfExists('ship_vendor', $data ?? [], null);
        $this->setIfExists('item', $data ?? [], null);
        $this->setIfExists('pack', $data ?? [], null);
        $this->setIfExists('sales_order', $data ?? [], null);
        $this->setIfExists('order_line', $data ?? [], null);
        $this->setIfExists('customer_order', $data ?? [], null);
        $this->setIfExists('customer_order_line', $data ?? [], null);
        $this->setIfExists('battery', $data ?? [], null);
        $this->setIfExists('battery_material', $data ?? [], null);
        $this->setIfExists('battery_packing', $data ?? [], null);
        $this->setIfExists('battery_regulation', $data ?? [], null);
        $this->setIfExists('chemical_identifier', $data ?? [], null);
        $this->setIfExists('commodity_regulations', $data ?? [], null);
        $this->setIfExists('dangerous_goods_amount', $data ?? [], null);
        $this->setIfExists('dangerous_goods_uom', $data ?? [], null);
        $this->setIfExists('hazard_class', $data ?? [], null);
        $this->setIfExists('hazard_label_description', $data ?? [], null);
        $this->setIfExists('hazmat_excepted_quantity', $data ?? [], null);
        $this->setIfExists('hazmat_limited_quantity', $data ?? [], null);
        $this->setIfExists('limited_qty_packing_instructions', $data ?? [], null);
        $this->setIfExists('packaging_group_type', $data ?? [], null);
        $this->setIfExists('packaging_type', $data ?? [], null);
        $this->setIfExists('packing_instructions', $data ?? [], null);
        $this->setIfExists('proper_shipping_name', $data ?? [], null);
        $this->setIfExists('regulation_set', $data ?? [], null);
        $this->setIfExists('sub_risk_class1', $data ?? [], null);
        $this->setIfExists('sub_risk_class2', $data ?? [], null);
        $this->setIfExists('sub_risk_class3', $data ?? [], null);
        $this->setIfExists('technical_name', $data ?? [], null);
        $this->setIfExists('transportation_mode', $data ?? [], null);
        $this->setIfExists('un_number', $data ?? [], null);
        $this->setIfExists('ships_with_dry_ice', $data ?? [], null);
        $this->setIfExists('medical_use', $data ?? [], null);
        $this->setIfExists('alcohol', $data ?? [], null);
        $this->setIfExists('hold_at_location', $data ?? [], null);
        $this->setIfExists('return_receipt_requested', $data ?? [], null);
        $this->setIfExists('saturday_delivery', $data ?? [], null);
        $this->setIfExists('liftgate_delivery', $data ?? [], null);
        $this->setIfExists('export_compliance_statement', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('updated_date', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('updated_by', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['ship_vendor'] === null) {
            $invalidProperties[] = "'ship_vendor' can't be null";
        }
        if ((mb_strlen($this->container['ship_vendor']) > 50)) {
            $invalidProperties[] = "invalid value for 'ship_vendor', the character length must be smaller than or equal to 50.";
        }

        if (!preg_match("/.*\\S.*/", $this->container['ship_vendor'])) {
            $invalidProperties[] = "invalid value for 'ship_vendor', must be conform to the pattern /.*\\S.*/.";
        }

        $allowedValues = $this->getBatteryMaterialAllowableValues();
        if (!is_null($this->container['battery_material']) && !in_array($this->container['battery_material'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'battery_material', must be one of '%s'",
                $this->container['battery_material'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBatteryPackingAllowableValues();
        if (!is_null($this->container['battery_packing']) && !in_array($this->container['battery_packing'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'battery_packing', must be one of '%s'",
                $this->container['battery_packing'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBatteryRegulationAllowableValues();
        if (!is_null($this->container['battery_regulation']) && !in_array($this->container['battery_regulation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'battery_regulation', must be one of '%s'",
                $this->container['battery_regulation'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['chemical_identifier']) && (mb_strlen($this->container['chemical_identifier']) > 30)) {
            $invalidProperties[] = "invalid value for 'chemical_identifier', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['chemical_identifier']) && (mb_strlen($this->container['chemical_identifier']) < 1)) {
            $invalidProperties[] = "invalid value for 'chemical_identifier', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['commodity_regulations']) && (mb_strlen($this->container['commodity_regulations']) > 30)) {
            $invalidProperties[] = "invalid value for 'commodity_regulations', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['commodity_regulations']) && (mb_strlen($this->container['commodity_regulations']) < 1)) {
            $invalidProperties[] = "invalid value for 'commodity_regulations', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['dangerous_goods_amount']) && ($this->container['dangerous_goods_amount'] > 0)) {
            $invalidProperties[] = "invalid value for 'dangerous_goods_amount', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['dangerous_goods_amount']) && ($this->container['dangerous_goods_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'dangerous_goods_amount', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['dangerous_goods_uom']) && (mb_strlen($this->container['dangerous_goods_uom']) > 20)) {
            $invalidProperties[] = "invalid value for 'dangerous_goods_uom', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['dangerous_goods_uom']) && (mb_strlen($this->container['dangerous_goods_uom']) < 1)) {
            $invalidProperties[] = "invalid value for 'dangerous_goods_uom', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['hazard_class']) && ($this->container['hazard_class'] > 0)) {
            $invalidProperties[] = "invalid value for 'hazard_class', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['hazard_class']) && ($this->container['hazard_class'] < 0)) {
            $invalidProperties[] = "invalid value for 'hazard_class', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['hazard_label_description']) && (mb_strlen($this->container['hazard_label_description']) > 50)) {
            $invalidProperties[] = "invalid value for 'hazard_label_description', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['hazard_label_description']) && (mb_strlen($this->container['hazard_label_description']) < 1)) {
            $invalidProperties[] = "invalid value for 'hazard_label_description', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['hazmat_excepted_quantity']) && (mb_strlen($this->container['hazmat_excepted_quantity']) > 20)) {
            $invalidProperties[] = "invalid value for 'hazmat_excepted_quantity', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['hazmat_excepted_quantity']) && (mb_strlen($this->container['hazmat_excepted_quantity']) < 1)) {
            $invalidProperties[] = "invalid value for 'hazmat_excepted_quantity', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['hazmat_limited_quantity']) && (mb_strlen($this->container['hazmat_limited_quantity']) > 20)) {
            $invalidProperties[] = "invalid value for 'hazmat_limited_quantity', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['hazmat_limited_quantity']) && (mb_strlen($this->container['hazmat_limited_quantity']) < 1)) {
            $invalidProperties[] = "invalid value for 'hazmat_limited_quantity', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['limited_qty_packing_instructions']) && (mb_strlen($this->container['limited_qty_packing_instructions']) > 20)) {
            $invalidProperties[] = "invalid value for 'limited_qty_packing_instructions', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['limited_qty_packing_instructions']) && (mb_strlen($this->container['limited_qty_packing_instructions']) < 1)) {
            $invalidProperties[] = "invalid value for 'limited_qty_packing_instructions', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['packaging_group_type']) && (mb_strlen($this->container['packaging_group_type']) > 30)) {
            $invalidProperties[] = "invalid value for 'packaging_group_type', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['packaging_group_type']) && (mb_strlen($this->container['packaging_group_type']) < 1)) {
            $invalidProperties[] = "invalid value for 'packaging_group_type', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['packaging_type']) && (mb_strlen($this->container['packaging_type']) > 50)) {
            $invalidProperties[] = "invalid value for 'packaging_type', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['packaging_type']) && (mb_strlen($this->container['packaging_type']) < 1)) {
            $invalidProperties[] = "invalid value for 'packaging_type', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['packing_instructions']) && (mb_strlen($this->container['packing_instructions']) > 20)) {
            $invalidProperties[] = "invalid value for 'packing_instructions', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['packing_instructions']) && (mb_strlen($this->container['packing_instructions']) < 1)) {
            $invalidProperties[] = "invalid value for 'packing_instructions', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['proper_shipping_name']) && (mb_strlen($this->container['proper_shipping_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'proper_shipping_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['proper_shipping_name']) && (mb_strlen($this->container['proper_shipping_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'proper_shipping_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['regulation_set']) && (mb_strlen($this->container['regulation_set']) > 30)) {
            $invalidProperties[] = "invalid value for 'regulation_set', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['regulation_set']) && (mb_strlen($this->container['regulation_set']) < 1)) {
            $invalidProperties[] = "invalid value for 'regulation_set', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['sub_risk_class1']) && (mb_strlen($this->container['sub_risk_class1']) > 30)) {
            $invalidProperties[] = "invalid value for 'sub_risk_class1', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['sub_risk_class1']) && (mb_strlen($this->container['sub_risk_class1']) < 1)) {
            $invalidProperties[] = "invalid value for 'sub_risk_class1', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['sub_risk_class2']) && (mb_strlen($this->container['sub_risk_class2']) > 30)) {
            $invalidProperties[] = "invalid value for 'sub_risk_class2', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['sub_risk_class2']) && (mb_strlen($this->container['sub_risk_class2']) < 1)) {
            $invalidProperties[] = "invalid value for 'sub_risk_class2', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['sub_risk_class3']) && (mb_strlen($this->container['sub_risk_class3']) > 30)) {
            $invalidProperties[] = "invalid value for 'sub_risk_class3', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['sub_risk_class3']) && (mb_strlen($this->container['sub_risk_class3']) < 1)) {
            $invalidProperties[] = "invalid value for 'sub_risk_class3', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['technical_name']) && (mb_strlen($this->container['technical_name']) > 20)) {
            $invalidProperties[] = "invalid value for 'technical_name', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['technical_name']) && (mb_strlen($this->container['technical_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'technical_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['transportation_mode']) && (mb_strlen($this->container['transportation_mode']) > 30)) {
            $invalidProperties[] = "invalid value for 'transportation_mode', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['transportation_mode']) && (mb_strlen($this->container['transportation_mode']) < 1)) {
            $invalidProperties[] = "invalid value for 'transportation_mode', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['un_number']) && (mb_strlen($this->container['un_number']) > 100)) {
            $invalidProperties[] = "invalid value for 'un_number', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['un_number']) && (mb_strlen($this->container['un_number']) < 1)) {
            $invalidProperties[] = "invalid value for 'un_number', the character length must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getExportComplianceStatementAllowableValues();
        if (!is_null($this->container['export_compliance_statement']) && !in_array($this->container['export_compliance_statement'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'export_compliance_statement', must be one of '%s'",
                $this->container['export_compliance_statement'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets self
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $self self
     *
     * @return self
     */
    public function setSelf($self)
    {
        if (is_null($self)) {
            throw new \InvalidArgumentException('non-nullable self cannot be null');
        }
        $this->container['self'] = $self;

        return $this;
    }

    /**
     * Gets ship_vendor
     *
     * @return string
     */
    public function getShipVendor()
    {
        return $this->container['ship_vendor'];
    }

    /**
     * Sets ship_vendor
     *
     * @param string $ship_vendor Shipping carrier that provides the service.
     *
     * @return self
     */
    public function setShipVendor($ship_vendor)
    {
        if (is_null($ship_vendor)) {
            throw new \InvalidArgumentException('non-nullable ship_vendor cannot be null');
        }
        if ((mb_strlen($ship_vendor) > 50)) {
            throw new \InvalidArgumentException('invalid length for $ship_vendor when calling CarrierSpecialServiceDTO., must be smaller than or equal to 50.');
        }
        if ((!preg_match("/.*\\S.*/", ObjectSerializer::toString($ship_vendor)))) {
            throw new \InvalidArgumentException("invalid value for \$ship_vendor when calling CarrierSpecialServiceDTO., must conform to the pattern /.*\\S.*/.");
        }

        $this->container['ship_vendor'] = $ship_vendor;

        return $this;
    }

    /**
     * Gets item
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getItem()
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $item item
     *
     * @return self
     */
    public function setItem($item)
    {
        if (is_null($item)) {
            throw new \InvalidArgumentException('non-nullable item cannot be null');
        }
        $this->container['item'] = $item;

        return $this;
    }

    /**
     * Gets pack
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getPack()
    {
        return $this->container['pack'];
    }

    /**
     * Sets pack
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $pack pack
     *
     * @return self
     */
    public function setPack($pack)
    {
        if (is_null($pack)) {
            throw new \InvalidArgumentException('non-nullable pack cannot be null');
        }
        $this->container['pack'] = $pack;

        return $this;
    }

    /**
     * Gets sales_order
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getSalesOrder()
    {
        return $this->container['sales_order'];
    }

    /**
     * Sets sales_order
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $sales_order sales_order
     *
     * @return self
     */
    public function setSalesOrder($sales_order)
    {
        if (is_null($sales_order)) {
            throw new \InvalidArgumentException('non-nullable sales_order cannot be null');
        }
        $this->container['sales_order'] = $sales_order;

        return $this;
    }

    /**
     * Gets order_line
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getOrderLine()
    {
        return $this->container['order_line'];
    }

    /**
     * Sets order_line
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $order_line order_line
     *
     * @return self
     */
    public function setOrderLine($order_line)
    {
        if (is_null($order_line)) {
            throw new \InvalidArgumentException('non-nullable order_line cannot be null');
        }
        $this->container['order_line'] = $order_line;

        return $this;
    }

    /**
     * Gets customer_order
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getCustomerOrder()
    {
        return $this->container['customer_order'];
    }

    /**
     * Sets customer_order
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $customer_order customer_order
     *
     * @return self
     */
    public function setCustomerOrder($customer_order)
    {
        if (is_null($customer_order)) {
            throw new \InvalidArgumentException('non-nullable customer_order cannot be null');
        }
        $this->container['customer_order'] = $customer_order;

        return $this;
    }

    /**
     * Gets customer_order_line
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getCustomerOrderLine()
    {
        return $this->container['customer_order_line'];
    }

    /**
     * Sets customer_order_line
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $customer_order_line customer_order_line
     *
     * @return self
     */
    public function setCustomerOrderLine($customer_order_line)
    {
        if (is_null($customer_order_line)) {
            throw new \InvalidArgumentException('non-nullable customer_order_line cannot be null');
        }
        $this->container['customer_order_line'] = $customer_order_line;

        return $this;
    }

    /**
     * Gets battery
     *
     * @return bool|null
     */
    public function getBattery()
    {
        return $this->container['battery'];
    }

    /**
     * Sets battery
     *
     * @param bool|null $battery Whether the associated item includes a battery or is itself a battery.
     *
     * @return self
     */
    public function setBattery($battery)
    {
        if (is_null($battery)) {
            throw new \InvalidArgumentException('non-nullable battery cannot be null');
        }
        $this->container['battery'] = $battery;

        return $this;
    }

    /**
     * Gets battery_material
     *
     * @return string|null
     */
    public function getBatteryMaterial()
    {
        return $this->container['battery_material'];
    }

    /**
     * Sets battery_material
     *
     * @param string|null $battery_material Type of lithium battery.
     *
     * @return self
     */
    public function setBatteryMaterial($battery_material)
    {
        if (is_null($battery_material)) {
            array_push($this->openAPINullablesSetToNull, 'battery_material');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('battery_material', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getBatteryMaterialAllowableValues();
        if (!is_null($battery_material) && !in_array($battery_material, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'battery_material', must be one of '%s'",
                    $battery_material,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['battery_material'] = $battery_material;

        return $this;
    }

    /**
     * Gets battery_packing
     *
     * @return string|null
     */
    public function getBatteryPacking()
    {
        return $this->container['battery_packing'];
    }

    /**
     * Sets battery_packing
     *
     * @param string|null $battery_packing How a lithium battery is packed in the shipment.
     *
     * @return self
     */
    public function setBatteryPacking($battery_packing)
    {
        if (is_null($battery_packing)) {
            array_push($this->openAPINullablesSetToNull, 'battery_packing');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('battery_packing', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getBatteryPackingAllowableValues();
        if (!is_null($battery_packing) && !in_array($battery_packing, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'battery_packing', must be one of '%s'",
                    $battery_packing,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['battery_packing'] = $battery_packing;

        return $this;
    }

    /**
     * Gets battery_regulation
     *
     * @return string|null
     */
    public function getBatteryRegulation()
    {
        return $this->container['battery_regulation'];
    }

    /**
     * Sets battery_regulation
     *
     * @param string|null $battery_regulation Used when shipping lithium batteries.
     *
     * @return self
     */
    public function setBatteryRegulation($battery_regulation)
    {
        if (is_null($battery_regulation)) {
            array_push($this->openAPINullablesSetToNull, 'battery_regulation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('battery_regulation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getBatteryRegulationAllowableValues();
        if (!is_null($battery_regulation) && !in_array($battery_regulation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'battery_regulation', must be one of '%s'",
                    $battery_regulation,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['battery_regulation'] = $battery_regulation;

        return $this;
    }

    /**
     * Gets chemical_identifier
     *
     * @return string|null
     */
    public function getChemicalIdentifier()
    {
        return $this->container['chemical_identifier'];
    }

    /**
     * Sets chemical_identifier
     *
     * @param string|null $chemical_identifier Record identifier for the chemical in either the UPS Chemical Table or the Personal Chemical Table for the UPS account. Applies only for shipments with UPS socket-based integrations.
     *
     * @return self
     */
    public function setChemicalIdentifier($chemical_identifier)
    {
        if (is_null($chemical_identifier)) {
            array_push($this->openAPINullablesSetToNull, 'chemical_identifier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('chemical_identifier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($chemical_identifier) && (mb_strlen($chemical_identifier) > 30)) {
            throw new \InvalidArgumentException('invalid length for $chemical_identifier when calling CarrierSpecialServiceDTO., must be smaller than or equal to 30.');
        }
        if (!is_null($chemical_identifier) && (mb_strlen($chemical_identifier) < 1)) {
            throw new \InvalidArgumentException('invalid length for $chemical_identifier when calling CarrierSpecialServiceDTO., must be bigger than or equal to 1.');
        }

        $this->container['chemical_identifier'] = $chemical_identifier;

        return $this;
    }

    /**
     * Gets commodity_regulations
     *
     * @return string|null
     */
    public function getCommodityRegulations()
    {
        return $this->container['commodity_regulations'];
    }

    /**
     * Sets commodity_regulations
     *
     * @param string|null $commodity_regulations Code for the regulation level of the dangerous goods commodity. Applies only for shipments with UPS socket-based integrations. Provide a value of FR for Fully Regulated, LQ for Limited Quantity, EQ for Excepted Quantity, or LR for Lightly Regulated.
     *
     * @return self
     */
    public function setCommodityRegulations($commodity_regulations)
    {
        if (is_null($commodity_regulations)) {
            array_push($this->openAPINullablesSetToNull, 'commodity_regulations');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('commodity_regulations', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($commodity_regulations) && (mb_strlen($commodity_regulations) > 30)) {
            throw new \InvalidArgumentException('invalid length for $commodity_regulations when calling CarrierSpecialServiceDTO., must be smaller than or equal to 30.');
        }
        if (!is_null($commodity_regulations) && (mb_strlen($commodity_regulations) < 1)) {
            throw new \InvalidArgumentException('invalid length for $commodity_regulations when calling CarrierSpecialServiceDTO., must be bigger than or equal to 1.');
        }

        $this->container['commodity_regulations'] = $commodity_regulations;

        return $this;
    }

    /**
     * Gets dangerous_goods_amount
     *
     * @return int|null
     */
    public function getDangerousGoodsAmount()
    {
        return $this->container['dangerous_goods_amount'];
    }

    /**
     * Sets dangerous_goods_amount
     *
     * @param int|null $dangerous_goods_amount Weight of the dangerous good. If a weight is not specified, then the pack weight of the item is used.
     *
     * @return self
     */
    public function setDangerousGoodsAmount($dangerous_goods_amount)
    {
        if (is_null($dangerous_goods_amount)) {
            array_push($this->openAPINullablesSetToNull, 'dangerous_goods_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dangerous_goods_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($dangerous_goods_amount) && ($dangerous_goods_amount > 0)) {
            throw new \InvalidArgumentException('invalid value for $dangerous_goods_amount when calling CarrierSpecialServiceDTO., must be smaller than or equal to 0.');
        }
        if (!is_null($dangerous_goods_amount) && ($dangerous_goods_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $dangerous_goods_amount when calling CarrierSpecialServiceDTO., must be bigger than or equal to 0.');
        }

        $this->container['dangerous_goods_amount'] = $dangerous_goods_amount;

        return $this;
    }

    /**
     * Gets dangerous_goods_uom
     *
     * @return string|null
     */
    public function getDangerousGoodsUom()
    {
        return $this->container['dangerous_goods_uom'];
    }

    /**
     * Sets dangerous_goods_uom
     *
     * @param string|null $dangerous_goods_uom Unit of measure for the weight of the dangerous good.
     *
     * @return self
     */
    public function setDangerousGoodsUom($dangerous_goods_uom)
    {
        if (is_null($dangerous_goods_uom)) {
            array_push($this->openAPINullablesSetToNull, 'dangerous_goods_uom');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dangerous_goods_uom', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($dangerous_goods_uom) && (mb_strlen($dangerous_goods_uom) > 20)) {
            throw new \InvalidArgumentException('invalid length for $dangerous_goods_uom when calling CarrierSpecialServiceDTO., must be smaller than or equal to 20.');
        }
        if (!is_null($dangerous_goods_uom) && (mb_strlen($dangerous_goods_uom) < 1)) {
            throw new \InvalidArgumentException('invalid length for $dangerous_goods_uom when calling CarrierSpecialServiceDTO., must be bigger than or equal to 1.');
        }

        $this->container['dangerous_goods_uom'] = $dangerous_goods_uom;

        return $this;
    }

    /**
     * Gets hazard_class
     *
     * @return int|null
     */
    public function getHazardClass()
    {
        return $this->container['hazard_class'];
    }

    /**
     * Sets hazard_class
     *
     * @param int|null $hazard_class IATA hazardous material class or division.
     *
     * @return self
     */
    public function setHazardClass($hazard_class)
    {
        if (is_null($hazard_class)) {
            array_push($this->openAPINullablesSetToNull, 'hazard_class');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hazard_class', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($hazard_class) && ($hazard_class > 0)) {
            throw new \InvalidArgumentException('invalid value for $hazard_class when calling CarrierSpecialServiceDTO., must be smaller than or equal to 0.');
        }
        if (!is_null($hazard_class) && ($hazard_class < 0)) {
            throw new \InvalidArgumentException('invalid value for $hazard_class when calling CarrierSpecialServiceDTO., must be bigger than or equal to 0.');
        }

        $this->container['hazard_class'] = $hazard_class;

        return $this;
    }

    /**
     * Gets hazard_label_description
     *
     * @return string|null
     */
    public function getHazardLabelDescription()
    {
        return $this->container['hazard_label_description'];
    }

    /**
     * Sets hazard_label_description
     *
     * @param string|null $hazard_label_description Type of label that is required on the package for the dangerous goods commodity. Applies only for shipments with UPS socket-based integrations.
     *
     * @return self
     */
    public function setHazardLabelDescription($hazard_label_description)
    {
        if (is_null($hazard_label_description)) {
            array_push($this->openAPINullablesSetToNull, 'hazard_label_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hazard_label_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($hazard_label_description) && (mb_strlen($hazard_label_description) > 50)) {
            throw new \InvalidArgumentException('invalid length for $hazard_label_description when calling CarrierSpecialServiceDTO., must be smaller than or equal to 50.');
        }
        if (!is_null($hazard_label_description) && (mb_strlen($hazard_label_description) < 1)) {
            throw new \InvalidArgumentException('invalid length for $hazard_label_description when calling CarrierSpecialServiceDTO., must be bigger than or equal to 1.');
        }

        $this->container['hazard_label_description'] = $hazard_label_description;

        return $this;
    }

    /**
     * Gets hazmat_excepted_quantity
     *
     * @return string|null
     */
    public function getHazmatExceptedQuantity()
    {
        return $this->container['hazmat_excepted_quantity'];
    }

    /**
     * Sets hazmat_excepted_quantity
     *
     * @param string|null $hazmat_excepted_quantity Maximum quantity per inner and outer packaging for transporting dangerous goods as excepted quantities (very small volumes).
     *
     * @return self
     */
    public function setHazmatExceptedQuantity($hazmat_excepted_quantity)
    {
        if (is_null($hazmat_excepted_quantity)) {
            array_push($this->openAPINullablesSetToNull, 'hazmat_excepted_quantity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hazmat_excepted_quantity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($hazmat_excepted_quantity) && (mb_strlen($hazmat_excepted_quantity) > 20)) {
            throw new \InvalidArgumentException('invalid length for $hazmat_excepted_quantity when calling CarrierSpecialServiceDTO., must be smaller than or equal to 20.');
        }
        if (!is_null($hazmat_excepted_quantity) && (mb_strlen($hazmat_excepted_quantity) < 1)) {
            throw new \InvalidArgumentException('invalid length for $hazmat_excepted_quantity when calling CarrierSpecialServiceDTO., must be bigger than or equal to 1.');
        }

        $this->container['hazmat_excepted_quantity'] = $hazmat_excepted_quantity;

        return $this;
    }

    /**
     * Gets hazmat_limited_quantity
     *
     * @return string|null
     */
    public function getHazmatLimitedQuantity()
    {
        return $this->container['hazmat_limited_quantity'];
    }

    /**
     * Sets hazmat_limited_quantity
     *
     * @param string|null $hazmat_limited_quantity Maximum quantity per inner packaging or article for transporting dangerous goods as limited quantities.
     *
     * @return self
     */
    public function setHazmatLimitedQuantity($hazmat_limited_quantity)
    {
        if (is_null($hazmat_limited_quantity)) {
            array_push($this->openAPINullablesSetToNull, 'hazmat_limited_quantity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hazmat_limited_quantity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($hazmat_limited_quantity) && (mb_strlen($hazmat_limited_quantity) > 20)) {
            throw new \InvalidArgumentException('invalid length for $hazmat_limited_quantity when calling CarrierSpecialServiceDTO., must be smaller than or equal to 20.');
        }
        if (!is_null($hazmat_limited_quantity) && (mb_strlen($hazmat_limited_quantity) < 1)) {
            throw new \InvalidArgumentException('invalid length for $hazmat_limited_quantity when calling CarrierSpecialServiceDTO., must be bigger than or equal to 1.');
        }

        $this->container['hazmat_limited_quantity'] = $hazmat_limited_quantity;

        return $this;
    }

    /**
     * Gets limited_qty_packing_instructions
     *
     * @return string|null
     */
    public function getLimitedQtyPackingInstructions()
    {
        return $this->container['limited_qty_packing_instructions'];
    }

    /**
     * Sets limited_qty_packing_instructions
     *
     * @param string|null $limited_qty_packing_instructions Packing instructions for limited quantity hazardous materials.
     *
     * @return self
     */
    public function setLimitedQtyPackingInstructions($limited_qty_packing_instructions)
    {
        if (is_null($limited_qty_packing_instructions)) {
            array_push($this->openAPINullablesSetToNull, 'limited_qty_packing_instructions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('limited_qty_packing_instructions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($limited_qty_packing_instructions) && (mb_strlen($limited_qty_packing_instructions) > 20)) {
            throw new \InvalidArgumentException('invalid length for $limited_qty_packing_instructions when calling CarrierSpecialServiceDTO., must be smaller than or equal to 20.');
        }
        if (!is_null($limited_qty_packing_instructions) && (mb_strlen($limited_qty_packing_instructions) < 1)) {
            throw new \InvalidArgumentException('invalid length for $limited_qty_packing_instructions when calling CarrierSpecialServiceDTO., must be bigger than or equal to 1.');
        }

        $this->container['limited_qty_packing_instructions'] = $limited_qty_packing_instructions;

        return $this;
    }

    /**
     * Gets packaging_group_type
     *
     * @return string|null
     */
    public function getPackagingGroupType()
    {
        return $this->container['packaging_group_type'];
    }

    /**
     * Sets packaging_group_type
     *
     * @param string|null $packaging_group_type Group level that reflects the potential degree of danger represented by the regulated good. Provide a value of (null), I, II, or III. Applies only for shipments with UPS socket-based integrations.
     *
     * @return self
     */
    public function setPackagingGroupType($packaging_group_type)
    {
        if (is_null($packaging_group_type)) {
            array_push($this->openAPINullablesSetToNull, 'packaging_group_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('packaging_group_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($packaging_group_type) && (mb_strlen($packaging_group_type) > 30)) {
            throw new \InvalidArgumentException('invalid length for $packaging_group_type when calling CarrierSpecialServiceDTO., must be smaller than or equal to 30.');
        }
        if (!is_null($packaging_group_type) && (mb_strlen($packaging_group_type) < 1)) {
            throw new \InvalidArgumentException('invalid length for $packaging_group_type when calling CarrierSpecialServiceDTO., must be bigger than or equal to 1.');
        }

        $this->container['packaging_group_type'] = $packaging_group_type;

        return $this;
    }

    /**
     * Gets packaging_type
     *
     * @return string|null
     */
    public function getPackagingType()
    {
        return $this->container['packaging_type'];
    }

    /**
     * Sets packaging_type
     *
     * @param string|null $packaging_type Either the IATA packing group for a hazardous commodity or the FedEx package type when packing a shipment in FedEx Express flat rate packaging.
     *
     * @return self
     */
    public function setPackagingType($packaging_type)
    {
        if (is_null($packaging_type)) {
            array_push($this->openAPINullablesSetToNull, 'packaging_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('packaging_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($packaging_type) && (mb_strlen($packaging_type) > 50)) {
            throw new \InvalidArgumentException('invalid length for $packaging_type when calling CarrierSpecialServiceDTO., must be smaller than or equal to 50.');
        }
        if (!is_null($packaging_type) && (mb_strlen($packaging_type) < 1)) {
            throw new \InvalidArgumentException('invalid length for $packaging_type when calling CarrierSpecialServiceDTO., must be bigger than or equal to 1.');
        }

        $this->container['packaging_type'] = $packaging_type;

        return $this;
    }

    /**
     * Gets packing_instructions
     *
     * @return string|null
     */
    public function getPackingInstructions()
    {
        return $this->container['packing_instructions'];
    }

    /**
     * Sets packing_instructions
     *
     * @param string|null $packing_instructions IATA documentation and limits for validation of an individual packing group or category.
     *
     * @return self
     */
    public function setPackingInstructions($packing_instructions)
    {
        if (is_null($packing_instructions)) {
            array_push($this->openAPINullablesSetToNull, 'packing_instructions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('packing_instructions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($packing_instructions) && (mb_strlen($packing_instructions) > 20)) {
            throw new \InvalidArgumentException('invalid length for $packing_instructions when calling CarrierSpecialServiceDTO., must be smaller than or equal to 20.');
        }
        if (!is_null($packing_instructions) && (mb_strlen($packing_instructions) < 1)) {
            throw new \InvalidArgumentException('invalid length for $packing_instructions when calling CarrierSpecialServiceDTO., must be bigger than or equal to 1.');
        }

        $this->container['packing_instructions'] = $packing_instructions;

        return $this;
    }

    /**
     * Gets proper_shipping_name
     *
     * @return string|null
     */
    public function getProperShippingName()
    {
        return $this->container['proper_shipping_name'];
    }

    /**
     * Sets proper_shipping_name
     *
     * @param string|null $proper_shipping_name Proper shipping name for the hazardous material.
     *
     * @return self
     */
    public function setProperShippingName($proper_shipping_name)
    {
        if (is_null($proper_shipping_name)) {
            array_push($this->openAPINullablesSetToNull, 'proper_shipping_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('proper_shipping_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($proper_shipping_name) && (mb_strlen($proper_shipping_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $proper_shipping_name when calling CarrierSpecialServiceDTO., must be smaller than or equal to 50.');
        }
        if (!is_null($proper_shipping_name) && (mb_strlen($proper_shipping_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $proper_shipping_name when calling CarrierSpecialServiceDTO., must be bigger than or equal to 1.');
        }

        $this->container['proper_shipping_name'] = $proper_shipping_name;

        return $this;
    }

    /**
     * Gets regulation_set
     *
     * @return string|null
     */
    public function getRegulationSet()
    {
        return $this->container['regulation_set'];
    }

    /**
     * Sets regulation_set
     *
     * @param string|null $regulation_set Regulatory set that is associated with a shipment of dangerous goods. Applies only for shipments with UPS socket-based integrations. Provide a value of ADR for Europe to Europe ground movement, CFR for hazardous materials regulated by the U.S. Department of Transportation within the U.S. or ground shipments to Canada, IATA for worldwide air movement, or TDG for Canada-to-Canada ground movement or Canada-to-U.S. standard movement.
     *
     * @return self
     */
    public function setRegulationSet($regulation_set)
    {
        if (is_null($regulation_set)) {
            array_push($this->openAPINullablesSetToNull, 'regulation_set');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('regulation_set', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($regulation_set) && (mb_strlen($regulation_set) > 30)) {
            throw new \InvalidArgumentException('invalid length for $regulation_set when calling CarrierSpecialServiceDTO., must be smaller than or equal to 30.');
        }
        if (!is_null($regulation_set) && (mb_strlen($regulation_set) < 1)) {
            throw new \InvalidArgumentException('invalid length for $regulation_set when calling CarrierSpecialServiceDTO., must be bigger than or equal to 1.');
        }

        $this->container['regulation_set'] = $regulation_set;

        return $this;
    }

    /**
     * Gets sub_risk_class1
     *
     * @return string|null
     */
    public function getSubRiskClass1()
    {
        return $this->container['sub_risk_class1'];
    }

    /**
     * Sets sub_risk_class1
     *
     * @param string|null $sub_risk_class1 Subrisk class for a dangerous good. Applies only for shipments with UPS socket-based integrations.
     *
     * @return self
     */
    public function setSubRiskClass1($sub_risk_class1)
    {
        if (is_null($sub_risk_class1)) {
            array_push($this->openAPINullablesSetToNull, 'sub_risk_class1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sub_risk_class1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sub_risk_class1) && (mb_strlen($sub_risk_class1) > 30)) {
            throw new \InvalidArgumentException('invalid length for $sub_risk_class1 when calling CarrierSpecialServiceDTO., must be smaller than or equal to 30.');
        }
        if (!is_null($sub_risk_class1) && (mb_strlen($sub_risk_class1) < 1)) {
            throw new \InvalidArgumentException('invalid length for $sub_risk_class1 when calling CarrierSpecialServiceDTO., must be bigger than or equal to 1.');
        }

        $this->container['sub_risk_class1'] = $sub_risk_class1;

        return $this;
    }

    /**
     * Gets sub_risk_class2
     *
     * @return string|null
     */
    public function getSubRiskClass2()
    {
        return $this->container['sub_risk_class2'];
    }

    /**
     * Sets sub_risk_class2
     *
     * @param string|null $sub_risk_class2 Additional subrisk class for a dangerous good with multiple subrisks. Applies only for shipments with UPS socket-based integrations.
     *
     * @return self
     */
    public function setSubRiskClass2($sub_risk_class2)
    {
        if (is_null($sub_risk_class2)) {
            array_push($this->openAPINullablesSetToNull, 'sub_risk_class2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sub_risk_class2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sub_risk_class2) && (mb_strlen($sub_risk_class2) > 30)) {
            throw new \InvalidArgumentException('invalid length for $sub_risk_class2 when calling CarrierSpecialServiceDTO., must be smaller than or equal to 30.');
        }
        if (!is_null($sub_risk_class2) && (mb_strlen($sub_risk_class2) < 1)) {
            throw new \InvalidArgumentException('invalid length for $sub_risk_class2 when calling CarrierSpecialServiceDTO., must be bigger than or equal to 1.');
        }

        $this->container['sub_risk_class2'] = $sub_risk_class2;

        return $this;
    }

    /**
     * Gets sub_risk_class3
     *
     * @return string|null
     */
    public function getSubRiskClass3()
    {
        return $this->container['sub_risk_class3'];
    }

    /**
     * Sets sub_risk_class3
     *
     * @param string|null $sub_risk_class3 Additional subrisk class for a dangerous good with multiple subrisks. Applies only for shipments with UPS socket-based integrations.
     *
     * @return self
     */
    public function setSubRiskClass3($sub_risk_class3)
    {
        if (is_null($sub_risk_class3)) {
            array_push($this->openAPINullablesSetToNull, 'sub_risk_class3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sub_risk_class3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sub_risk_class3) && (mb_strlen($sub_risk_class3) > 30)) {
            throw new \InvalidArgumentException('invalid length for $sub_risk_class3 when calling CarrierSpecialServiceDTO., must be smaller than or equal to 30.');
        }
        if (!is_null($sub_risk_class3) && (mb_strlen($sub_risk_class3) < 1)) {
            throw new \InvalidArgumentException('invalid length for $sub_risk_class3 when calling CarrierSpecialServiceDTO., must be bigger than or equal to 1.');
        }

        $this->container['sub_risk_class3'] = $sub_risk_class3;

        return $this;
    }

    /**
     * Gets technical_name
     *
     * @return string|null
     */
    public function getTechnicalName()
    {
        return $this->container['technical_name'];
    }

    /**
     * Sets technical_name
     *
     * @param string|null $technical_name Recognized chemical name for the dangerous good that is currently used in scientific handbooks, journals, and texts. Applies only for shipments with UPS socket-based integrations.
     *
     * @return self
     */
    public function setTechnicalName($technical_name)
    {
        if (is_null($technical_name)) {
            array_push($this->openAPINullablesSetToNull, 'technical_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('technical_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($technical_name) && (mb_strlen($technical_name) > 20)) {
            throw new \InvalidArgumentException('invalid length for $technical_name when calling CarrierSpecialServiceDTO., must be smaller than or equal to 20.');
        }
        if (!is_null($technical_name) && (mb_strlen($technical_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $technical_name when calling CarrierSpecialServiceDTO., must be bigger than or equal to 1.');
        }

        $this->container['technical_name'] = $technical_name;

        return $this;
    }

    /**
     * Gets transportation_mode
     *
     * @return string|null
     */
    public function getTransportationMode()
    {
        return $this->container['transportation_mode'];
    }

    /**
     * Sets transportation_mode
     *
     * @param string|null $transportation_mode Mode of transportation for the shipment that includes dangerous goods. Applies only for shipments with UPS socket-based integrations. Provide a value of Highway, Ground, PAX, Passenger Aircraft, CAO, or Cargo Aircraft Only.
     *
     * @return self
     */
    public function setTransportationMode($transportation_mode)
    {
        if (is_null($transportation_mode)) {
            array_push($this->openAPINullablesSetToNull, 'transportation_mode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transportation_mode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($transportation_mode) && (mb_strlen($transportation_mode) > 30)) {
            throw new \InvalidArgumentException('invalid length for $transportation_mode when calling CarrierSpecialServiceDTO., must be smaller than or equal to 30.');
        }
        if (!is_null($transportation_mode) && (mb_strlen($transportation_mode) < 1)) {
            throw new \InvalidArgumentException('invalid length for $transportation_mode when calling CarrierSpecialServiceDTO., must be bigger than or equal to 1.');
        }

        $this->container['transportation_mode'] = $transportation_mode;

        return $this;
    }

    /**
     * Gets un_number
     *
     * @return string|null
     */
    public function getUnNumber()
    {
        return $this->container['un_number'];
    }

    /**
     * Sets un_number
     *
     * @param string|null $un_number Four-digit number/code that is assigned to a dangerous good by the United Nations Subcommittee of Experts on the Transport of Dangerous Goods. The number identifies dangerous goods and applies all provisions such as packaging, marking, labeling of packages, compatibility between dangerous goods, carriage during transport, and file are spillage control measures in case of emergency.
     *
     * @return self
     */
    public function setUnNumber($un_number)
    {
        if (is_null($un_number)) {
            array_push($this->openAPINullablesSetToNull, 'un_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('un_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($un_number) && (mb_strlen($un_number) > 100)) {
            throw new \InvalidArgumentException('invalid length for $un_number when calling CarrierSpecialServiceDTO., must be smaller than or equal to 100.');
        }
        if (!is_null($un_number) && (mb_strlen($un_number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $un_number when calling CarrierSpecialServiceDTO., must be bigger than or equal to 1.');
        }

        $this->container['un_number'] = $un_number;

        return $this;
    }

    /**
     * Gets ships_with_dry_ice
     *
     * @return bool|null
     */
    public function getShipsWithDryIce()
    {
        return $this->container['ships_with_dry_ice'];
    }

    /**
     * Sets ships_with_dry_ice
     *
     * @param bool|null $ships_with_dry_ice Whether an item ships in a package with dry ice.
     *
     * @return self
     */
    public function setShipsWithDryIce($ships_with_dry_ice)
    {
        if (is_null($ships_with_dry_ice)) {
            throw new \InvalidArgumentException('non-nullable ships_with_dry_ice cannot be null');
        }
        $this->container['ships_with_dry_ice'] = $ships_with_dry_ice;

        return $this;
    }

    /**
     * Gets medical_use
     *
     * @return bool|null
     */
    public function getMedicalUse()
    {
        return $this->container['medical_use'];
    }

    /**
     * Sets medical_use
     *
     * @param bool|null $medical_use Whether the item is used for medical purposes, which may enable you to take advantage of discounted rates. Applies only for shipments with UPS socket-based integrations.
     *
     * @return self
     */
    public function setMedicalUse($medical_use)
    {
        if (is_null($medical_use)) {
            throw new \InvalidArgumentException('non-nullable medical_use cannot be null');
        }
        $this->container['medical_use'] = $medical_use;

        return $this;
    }

    /**
     * Gets alcohol
     *
     * @return bool|null
     */
    public function getAlcohol()
    {
        return $this->container['alcohol'];
    }

    /**
     * Sets alcohol
     *
     * @param bool|null $alcohol Whether the associated item is classified as alcohol such as beer, wine, or spirits. Supported only for shipments with UPS socket-based integrations.
     *
     * @return self
     */
    public function setAlcohol($alcohol)
    {
        if (is_null($alcohol)) {
            throw new \InvalidArgumentException('non-nullable alcohol cannot be null');
        }
        $this->container['alcohol'] = $alcohol;

        return $this;
    }

    /**
     * Gets hold_at_location
     *
     * @return bool|null
     */
    public function getHoldAtLocation()
    {
        return $this->container['hold_at_location'];
    }

    /**
     * Sets hold_at_location
     *
     * @param bool|null $hold_at_location Whether the shipment should be held at a specific FedEx location instead of being delivered directly to the customer or trading partner that placed the order. The customer or trading partner can then pick up the shipment at their convenience.
     *
     * @return self
     */
    public function setHoldAtLocation($hold_at_location)
    {
        if (is_null($hold_at_location)) {
            throw new \InvalidArgumentException('non-nullable hold_at_location cannot be null');
        }
        $this->container['hold_at_location'] = $hold_at_location;

        return $this;
    }

    /**
     * Gets return_receipt_requested
     *
     * @return bool|null
     */
    public function getReturnReceiptRequested()
    {
        return $this->container['return_receipt_requested'];
    }

    /**
     * Sets return_receipt_requested
     *
     * @param bool|null $return_receipt_requested Whether to request a return receipt for shipments with Stamps.com.
     *
     * @return self
     */
    public function setReturnReceiptRequested($return_receipt_requested)
    {
        if (is_null($return_receipt_requested)) {
            throw new \InvalidArgumentException('non-nullable return_receipt_requested cannot be null');
        }
        $this->container['return_receipt_requested'] = $return_receipt_requested;

        return $this;
    }

    /**
     * Gets saturday_delivery
     *
     * @return bool|null
     */
    public function getSaturdayDelivery()
    {
        return $this->container['saturday_delivery'];
    }

    /**
     * Sets saturday_delivery
     *
     * @param bool|null $saturday_delivery Whether to request Saturday delivery for the shipment that is associated with the order. Applies only for shipments with UPS socket-based integrations.
     *
     * @return self
     */
    public function setSaturdayDelivery($saturday_delivery)
    {
        if (is_null($saturday_delivery)) {
            throw new \InvalidArgumentException('non-nullable saturday_delivery cannot be null');
        }
        $this->container['saturday_delivery'] = $saturday_delivery;

        return $this;
    }

    /**
     * Gets liftgate_delivery
     *
     * @return bool|null
     */
    public function getLiftgateDelivery()
    {
        return $this->container['liftgate_delivery'];
    }

    /**
     * Sets liftgate_delivery
     *
     * @param bool|null $liftgate_delivery Whether to request liftgate delivery for the shipment that is associated with the order when the order includes large, heavy items.
     *
     * @return self
     */
    public function setLiftgateDelivery($liftgate_delivery)
    {
        if (is_null($liftgate_delivery)) {
            throw new \InvalidArgumentException('non-nullable liftgate_delivery cannot be null');
        }
        $this->container['liftgate_delivery'] = $liftgate_delivery;

        return $this;
    }

    /**
     * Gets export_compliance_statement
     *
     * @return string|null
     */
    public function getExportComplianceStatement()
    {
        return $this->container['export_compliance_statement'];
    }

    /**
     * Sets export_compliance_statement
     *
     * @param string|null $export_compliance_statement Reserved for future use.
     *
     * @return self
     */
    public function setExportComplianceStatement($export_compliance_statement)
    {
        if (is_null($export_compliance_statement)) {
            array_push($this->openAPINullablesSetToNull, 'export_compliance_statement');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('export_compliance_statement', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getExportComplianceStatementAllowableValues();
        if (!is_null($export_compliance_statement) && !in_array($export_compliance_statement, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'export_compliance_statement', must be one of '%s'",
                    $export_compliance_statement,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['export_compliance_statement'] = $export_compliance_statement;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime|null $created_date Date and time that the Carrier Special Service record was created.
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets updated_date
     *
     * @return \DateTime|null
     */
    public function getUpdatedDate()
    {
        return $this->container['updated_date'];
    }

    /**
     * Sets updated_date
     *
     * @param \DateTime|null $updated_date Date and time that the Carrier Special Service record was last updated.
     *
     * @return self
     */
    public function setUpdatedDate($updated_date)
    {
        if (is_null($updated_date)) {
            throw new \InvalidArgumentException('non-nullable updated_date cannot be null');
        }
        $this->container['updated_date'] = $updated_date;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            throw new \InvalidArgumentException('non-nullable created_by cannot be null');
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $updated_by updated_by
     *
     * @return self
     */
    public function setUpdatedBy($updated_by)
    {
        if (is_null($updated_by)) {
            throw new \InvalidArgumentException('non-nullable updated_by cannot be null');
        }
        $this->container['updated_by'] = $updated_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


