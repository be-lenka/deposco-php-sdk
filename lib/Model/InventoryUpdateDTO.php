<?php
/**
 * InventoryUpdateDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deposco API
 *
 * Welcome to the Deposco API Reference! The Deposco API enables you to integrate your system with Deposco.  * Integrate a product information system (PIM) by creating and retrieving data for items, packs, UPCs, and kits. * Set up warehouse data by creating facilities, zones, locations, and storage details. * Create inbound orders that can be received and outbound orders that can be fulfilled with Deposco warehouse management processes.  This reference provides details on available operations, endpoints, parameters, schemas, and responses.  Example requests and responses are also available for you to use as a reference. You can copy the examples to use as a starting point for your own requests.  Review the guides to learn how the API is used in common business scenarios such as setting up the warehouse and integrating a Product Information Management (PIM) system.  When you're ready to get started, register for a developer account and then log in to create your application in the developer portal.
 *
 * The version of the OpenAPI document: 2.0.2519
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\Deposco\Model;

use \ArrayAccess;
use \BeLenka\Deposco\ObjectSerializer;

/**
 * InventoryUpdateDTO Class Doc Comment
 *
 * @category Class
 * @description Request to update inventory attributes for an item at a specific location in a facility.
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InventoryUpdateDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InventoryUpdateDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'self' => '\BeLenka\Deposco\Model\EntityRef',
        'business_unit' => '\BeLenka\Deposco\Model\EntityRef',
        'existing_inventory' => '\BeLenka\Deposco\Model\InventoryUpdateDTOExistingInventory',
        'modified_inventory' => '\BeLenka\Deposco\Model\InventoryUpdateDTOModifiedInventory',
        'reason_code' => 'string',
        'activity_name' => 'string',
        'adjustment_user' => 'string',
        'ledger_custom_attribute1' => 'string',
        'ledger_custom_attribute2' => 'string',
        'ledger_custom_attribute3' => 'string',
        'transaction_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'self' => null,
        'business_unit' => null,
        'existing_inventory' => null,
        'modified_inventory' => null,
        'reason_code' => null,
        'activity_name' => null,
        'adjustment_user' => null,
        'ledger_custom_attribute1' => null,
        'ledger_custom_attribute2' => null,
        'ledger_custom_attribute3' => null,
        'transaction_number' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'self' => false,
        'business_unit' => false,
        'existing_inventory' => false,
        'modified_inventory' => false,
        'reason_code' => true,
        'activity_name' => true,
        'adjustment_user' => false,
        'ledger_custom_attribute1' => false,
        'ledger_custom_attribute2' => false,
        'ledger_custom_attribute3' => false,
        'transaction_number' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'self' => 'self',
        'business_unit' => 'businessUnit',
        'existing_inventory' => 'existingInventory',
        'modified_inventory' => 'modifiedInventory',
        'reason_code' => 'reasonCode',
        'activity_name' => 'activityName',
        'adjustment_user' => 'adjustmentUser',
        'ledger_custom_attribute1' => 'ledgerCustomAttribute1',
        'ledger_custom_attribute2' => 'ledgerCustomAttribute2',
        'ledger_custom_attribute3' => 'ledgerCustomAttribute3',
        'transaction_number' => 'transactionNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'self' => 'setSelf',
        'business_unit' => 'setBusinessUnit',
        'existing_inventory' => 'setExistingInventory',
        'modified_inventory' => 'setModifiedInventory',
        'reason_code' => 'setReasonCode',
        'activity_name' => 'setActivityName',
        'adjustment_user' => 'setAdjustmentUser',
        'ledger_custom_attribute1' => 'setLedgerCustomAttribute1',
        'ledger_custom_attribute2' => 'setLedgerCustomAttribute2',
        'ledger_custom_attribute3' => 'setLedgerCustomAttribute3',
        'transaction_number' => 'setTransactionNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'self' => 'getSelf',
        'business_unit' => 'getBusinessUnit',
        'existing_inventory' => 'getExistingInventory',
        'modified_inventory' => 'getModifiedInventory',
        'reason_code' => 'getReasonCode',
        'activity_name' => 'getActivityName',
        'adjustment_user' => 'getAdjustmentUser',
        'ledger_custom_attribute1' => 'getLedgerCustomAttribute1',
        'ledger_custom_attribute2' => 'getLedgerCustomAttribute2',
        'ledger_custom_attribute3' => 'getLedgerCustomAttribute3',
        'transaction_number' => 'getTransactionNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('self', $data ?? [], null);
        $this->setIfExists('business_unit', $data ?? [], null);
        $this->setIfExists('existing_inventory', $data ?? [], null);
        $this->setIfExists('modified_inventory', $data ?? [], null);
        $this->setIfExists('reason_code', $data ?? [], null);
        $this->setIfExists('activity_name', $data ?? [], null);
        $this->setIfExists('adjustment_user', $data ?? [], null);
        $this->setIfExists('ledger_custom_attribute1', $data ?? [], null);
        $this->setIfExists('ledger_custom_attribute2', $data ?? [], null);
        $this->setIfExists('ledger_custom_attribute3', $data ?? [], null);
        $this->setIfExists('transaction_number', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['existing_inventory'] === null) {
            $invalidProperties[] = "'existing_inventory' can't be null";
        }
        if ($this->container['modified_inventory'] === null) {
            $invalidProperties[] = "'modified_inventory' can't be null";
        }
        if (!is_null($this->container['reason_code']) && (mb_strlen($this->container['reason_code']) > 20)) {
            $invalidProperties[] = "invalid value for 'reason_code', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['activity_name']) && (mb_strlen($this->container['activity_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'activity_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['adjustment_user']) && (mb_strlen($this->container['adjustment_user']) > 50)) {
            $invalidProperties[] = "invalid value for 'adjustment_user', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['ledger_custom_attribute1']) && (mb_strlen($this->container['ledger_custom_attribute1']) > 50)) {
            $invalidProperties[] = "invalid value for 'ledger_custom_attribute1', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['ledger_custom_attribute2']) && (mb_strlen($this->container['ledger_custom_attribute2']) > 50)) {
            $invalidProperties[] = "invalid value for 'ledger_custom_attribute2', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['ledger_custom_attribute3']) && (mb_strlen($this->container['ledger_custom_attribute3']) > 50)) {
            $invalidProperties[] = "invalid value for 'ledger_custom_attribute3', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['transaction_number']) && (mb_strlen($this->container['transaction_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'transaction_number', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets self
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $self self
     *
     * @return self
     */
    public function setSelf($self)
    {
        if (is_null($self)) {
            throw new \InvalidArgumentException('non-nullable self cannot be null');
        }
        $this->container['self'] = $self;

        return $this;
    }

    /**
     * Gets business_unit
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getBusinessUnit()
    {
        return $this->container['business_unit'];
    }

    /**
     * Sets business_unit
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $business_unit business_unit
     *
     * @return self
     */
    public function setBusinessUnit($business_unit)
    {
        if (is_null($business_unit)) {
            throw new \InvalidArgumentException('non-nullable business_unit cannot be null');
        }
        $this->container['business_unit'] = $business_unit;

        return $this;
    }

    /**
     * Gets existing_inventory
     *
     * @return \BeLenka\Deposco\Model\InventoryUpdateDTOExistingInventory
     */
    public function getExistingInventory()
    {
        return $this->container['existing_inventory'];
    }

    /**
     * Sets existing_inventory
     *
     * @param \BeLenka\Deposco\Model\InventoryUpdateDTOExistingInventory $existing_inventory existing_inventory
     *
     * @return self
     */
    public function setExistingInventory($existing_inventory)
    {
        if (is_null($existing_inventory)) {
            throw new \InvalidArgumentException('non-nullable existing_inventory cannot be null');
        }
        $this->container['existing_inventory'] = $existing_inventory;

        return $this;
    }

    /**
     * Gets modified_inventory
     *
     * @return \BeLenka\Deposco\Model\InventoryUpdateDTOModifiedInventory
     */
    public function getModifiedInventory()
    {
        return $this->container['modified_inventory'];
    }

    /**
     * Sets modified_inventory
     *
     * @param \BeLenka\Deposco\Model\InventoryUpdateDTOModifiedInventory $modified_inventory modified_inventory
     *
     * @return self
     */
    public function setModifiedInventory($modified_inventory)
    {
        if (is_null($modified_inventory)) {
            throw new \InvalidArgumentException('non-nullable modified_inventory cannot be null');
        }
        $this->container['modified_inventory'] = $modified_inventory;

        return $this;
    }

    /**
     * Gets reason_code
     *
     * @return string|null
     */
    public function getReasonCode()
    {
        return $this->container['reason_code'];
    }

    /**
     * Sets reason_code
     *
     * @param string|null $reason_code Code that identifies the reason for the inventory update.
     *
     * @return self
     */
    public function setReasonCode($reason_code)
    {
        if (is_null($reason_code)) {
            array_push($this->openAPINullablesSetToNull, 'reason_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reason_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($reason_code) && (mb_strlen($reason_code) > 20)) {
            throw new \InvalidArgumentException('invalid length for $reason_code when calling InventoryUpdateDTO., must be smaller than or equal to 20.');
        }

        $this->container['reason_code'] = $reason_code;

        return $this;
    }

    /**
     * Gets activity_name
     *
     * @return string|null
     */
    public function getActivityName()
    {
        return $this->container['activity_name'];
    }

    /**
     * Sets activity_name
     *
     * @param string|null $activity_name Name of the activity that resulted in the inventory update.
     *
     * @return self
     */
    public function setActivityName($activity_name)
    {
        if (is_null($activity_name)) {
            array_push($this->openAPINullablesSetToNull, 'activity_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('activity_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($activity_name) && (mb_strlen($activity_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $activity_name when calling InventoryUpdateDTO., must be smaller than or equal to 50.');
        }

        $this->container['activity_name'] = $activity_name;

        return $this;
    }

    /**
     * Gets adjustment_user
     *
     * @return string|null
     */
    public function getAdjustmentUser()
    {
        return $this->container['adjustment_user'];
    }

    /**
     * Sets adjustment_user
     *
     * @param string|null $adjustment_user Identification number for the activity that resulted in the inventory update.
     *
     * @return self
     */
    public function setAdjustmentUser($adjustment_user)
    {
        if (is_null($adjustment_user)) {
            throw new \InvalidArgumentException('non-nullable adjustment_user cannot be null');
        }
        if ((mb_strlen($adjustment_user) > 50)) {
            throw new \InvalidArgumentException('invalid length for $adjustment_user when calling InventoryUpdateDTO., must be smaller than or equal to 50.');
        }

        $this->container['adjustment_user'] = $adjustment_user;

        return $this;
    }

    /**
     * Gets ledger_custom_attribute1
     *
     * @return string|null
     */
    public function getLedgerCustomAttribute1()
    {
        return $this->container['ledger_custom_attribute1'];
    }

    /**
     * Sets ledger_custom_attribute1
     *
     * @param string|null $ledger_custom_attribute1 Custom attribute that is stored in the Inventory Ledger record for the inventory update.
     *
     * @return self
     */
    public function setLedgerCustomAttribute1($ledger_custom_attribute1)
    {
        if (is_null($ledger_custom_attribute1)) {
            throw new \InvalidArgumentException('non-nullable ledger_custom_attribute1 cannot be null');
        }
        if ((mb_strlen($ledger_custom_attribute1) > 50)) {
            throw new \InvalidArgumentException('invalid length for $ledger_custom_attribute1 when calling InventoryUpdateDTO., must be smaller than or equal to 50.');
        }

        $this->container['ledger_custom_attribute1'] = $ledger_custom_attribute1;

        return $this;
    }

    /**
     * Gets ledger_custom_attribute2
     *
     * @return string|null
     */
    public function getLedgerCustomAttribute2()
    {
        return $this->container['ledger_custom_attribute2'];
    }

    /**
     * Sets ledger_custom_attribute2
     *
     * @param string|null $ledger_custom_attribute2 Custom attribute that is stored in the Inventory Ledger record for the inventory update.
     *
     * @return self
     */
    public function setLedgerCustomAttribute2($ledger_custom_attribute2)
    {
        if (is_null($ledger_custom_attribute2)) {
            throw new \InvalidArgumentException('non-nullable ledger_custom_attribute2 cannot be null');
        }
        if ((mb_strlen($ledger_custom_attribute2) > 50)) {
            throw new \InvalidArgumentException('invalid length for $ledger_custom_attribute2 when calling InventoryUpdateDTO., must be smaller than or equal to 50.');
        }

        $this->container['ledger_custom_attribute2'] = $ledger_custom_attribute2;

        return $this;
    }

    /**
     * Gets ledger_custom_attribute3
     *
     * @return string|null
     */
    public function getLedgerCustomAttribute3()
    {
        return $this->container['ledger_custom_attribute3'];
    }

    /**
     * Sets ledger_custom_attribute3
     *
     * @param string|null $ledger_custom_attribute3 Custom attribute that is stored in the Inventory Ledger record for the inventory update.
     *
     * @return self
     */
    public function setLedgerCustomAttribute3($ledger_custom_attribute3)
    {
        if (is_null($ledger_custom_attribute3)) {
            throw new \InvalidArgumentException('non-nullable ledger_custom_attribute3 cannot be null');
        }
        if ((mb_strlen($ledger_custom_attribute3) > 50)) {
            throw new \InvalidArgumentException('invalid length for $ledger_custom_attribute3 when calling InventoryUpdateDTO., must be smaller than or equal to 50.');
        }

        $this->container['ledger_custom_attribute3'] = $ledger_custom_attribute3;

        return $this;
    }

    /**
     * Gets transaction_number
     *
     * @return string|null
     */
    public function getTransactionNumber()
    {
        return $this->container['transaction_number'];
    }

    /**
     * Sets transaction_number
     *
     * @param string|null $transaction_number Identification number for the activity that resulted in the inventory update.
     *
     * @return self
     */
    public function setTransactionNumber($transaction_number)
    {
        if (is_null($transaction_number)) {
            array_push($this->openAPINullablesSetToNull, 'transaction_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transaction_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($transaction_number) && (mb_strlen($transaction_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $transaction_number when calling InventoryUpdateDTO., must be smaller than or equal to 50.');
        }

        $this->container['transaction_number'] = $transaction_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


