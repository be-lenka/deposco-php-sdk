<?php
/**
 * ShippedContainerDTOShippedContainerLinesInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deposco API
 *
 * Welcome to the Deposco API Reference! The Deposco API enables you to integrate your system with Deposco.  * Integrate a product information system (PIM) by creating and retrieving data for items, packs, UPCs, and kits. * Set up warehouse data by creating facilities, zones, locations, and storage details. * Create inbound orders that can be received and outbound orders that can be fulfilled with Deposco warehouse management processes.  This reference provides details on available operations, endpoints, parameters, schemas, and responses.  Example requests and responses are also available for you to use as a reference. You can copy the examples to use as a starting point for your own requests.  Review the guides to learn how the API is used in common business scenarios such as setting up the warehouse and integrating a Product Information Management (PIM) system.  When you're ready to get started, register for a developer account and then log in to create your application in the developer portal.
 *
 * The version of the OpenAPI document: 2.0.2519
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\Deposco\Model;

use \ArrayAccess;
use \BeLenka\Deposco\ObjectSerializer;

/**
 * ShippedContainerDTOShippedContainerLinesInner Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ShippedContainerDTOShippedContainerLinesInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ShippedContainerDTO_shippedContainerLines_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'self' => '\BeLenka\Deposco\Model\EntityRef',
        'item' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'pack' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'external_line_number' => 'string',
        'shipped_pack_quantity' => 'int',
        'shipped_damaged_pack_quantity' => 'int',
        'canceled_pack_quantity' => 'int',
        'lot_number' => 'string',
        'line_serial_numbers' => '\BeLenka\Deposco\Model\BaseShipmentLineDTOLineSerialNumbersInner[]',
        'born_on_date' => '\DateTime',
        'expiration_date' => '\DateTime',
        'inventory_condition' => 'string',
        'inventory_attribute1' => 'string',
        'inventory_attribute2' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'self' => null,
        'item' => null,
        'pack' => null,
        'external_line_number' => null,
        'shipped_pack_quantity' => 'double',
        'shipped_damaged_pack_quantity' => 'double',
        'canceled_pack_quantity' => 'double',
        'lot_number' => null,
        'line_serial_numbers' => null,
        'born_on_date' => 'date-time',
        'expiration_date' => 'date-time',
        'inventory_condition' => null,
        'inventory_attribute1' => null,
        'inventory_attribute2' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'self' => false,
        'item' => true,
        'pack' => true,
        'external_line_number' => false,
        'shipped_pack_quantity' => false,
        'shipped_damaged_pack_quantity' => false,
        'canceled_pack_quantity' => false,
        'lot_number' => false,
        'line_serial_numbers' => false,
        'born_on_date' => false,
        'expiration_date' => false,
        'inventory_condition' => false,
        'inventory_attribute1' => false,
        'inventory_attribute2' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'self' => 'self',
        'item' => 'item',
        'pack' => 'pack',
        'external_line_number' => 'externalLineNumber',
        'shipped_pack_quantity' => 'shippedPackQuantity',
        'shipped_damaged_pack_quantity' => 'shippedDamagedPackQuantity',
        'canceled_pack_quantity' => 'canceledPackQuantity',
        'lot_number' => 'lotNumber',
        'line_serial_numbers' => 'lineSerialNumbers',
        'born_on_date' => 'bornOnDate',
        'expiration_date' => 'expirationDate',
        'inventory_condition' => 'inventoryCondition',
        'inventory_attribute1' => 'inventoryAttribute1',
        'inventory_attribute2' => 'inventoryAttribute2'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'self' => 'setSelf',
        'item' => 'setItem',
        'pack' => 'setPack',
        'external_line_number' => 'setExternalLineNumber',
        'shipped_pack_quantity' => 'setShippedPackQuantity',
        'shipped_damaged_pack_quantity' => 'setShippedDamagedPackQuantity',
        'canceled_pack_quantity' => 'setCanceledPackQuantity',
        'lot_number' => 'setLotNumber',
        'line_serial_numbers' => 'setLineSerialNumbers',
        'born_on_date' => 'setBornOnDate',
        'expiration_date' => 'setExpirationDate',
        'inventory_condition' => 'setInventoryCondition',
        'inventory_attribute1' => 'setInventoryAttribute1',
        'inventory_attribute2' => 'setInventoryAttribute2'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'self' => 'getSelf',
        'item' => 'getItem',
        'pack' => 'getPack',
        'external_line_number' => 'getExternalLineNumber',
        'shipped_pack_quantity' => 'getShippedPackQuantity',
        'shipped_damaged_pack_quantity' => 'getShippedDamagedPackQuantity',
        'canceled_pack_quantity' => 'getCanceledPackQuantity',
        'lot_number' => 'getLotNumber',
        'line_serial_numbers' => 'getLineSerialNumbers',
        'born_on_date' => 'getBornOnDate',
        'expiration_date' => 'getExpirationDate',
        'inventory_condition' => 'getInventoryCondition',
        'inventory_attribute1' => 'getInventoryAttribute1',
        'inventory_attribute2' => 'getInventoryAttribute2'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('self', $data ?? [], null);
        $this->setIfExists('item', $data ?? [], null);
        $this->setIfExists('pack', $data ?? [], null);
        $this->setIfExists('external_line_number', $data ?? [], null);
        $this->setIfExists('shipped_pack_quantity', $data ?? [], null);
        $this->setIfExists('shipped_damaged_pack_quantity', $data ?? [], null);
        $this->setIfExists('canceled_pack_quantity', $data ?? [], null);
        $this->setIfExists('lot_number', $data ?? [], null);
        $this->setIfExists('line_serial_numbers', $data ?? [], null);
        $this->setIfExists('born_on_date', $data ?? [], null);
        $this->setIfExists('expiration_date', $data ?? [], null);
        $this->setIfExists('inventory_condition', $data ?? [], null);
        $this->setIfExists('inventory_attribute1', $data ?? [], null);
        $this->setIfExists('inventory_attribute2', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['external_line_number']) && (mb_strlen($this->container['external_line_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'external_line_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['shipped_pack_quantity']) && ($this->container['shipped_pack_quantity'] > 0)) {
            $invalidProperties[] = "invalid value for 'shipped_pack_quantity', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['shipped_pack_quantity']) && ($this->container['shipped_pack_quantity'] < 0)) {
            $invalidProperties[] = "invalid value for 'shipped_pack_quantity', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['shipped_damaged_pack_quantity']) && ($this->container['shipped_damaged_pack_quantity'] > 0)) {
            $invalidProperties[] = "invalid value for 'shipped_damaged_pack_quantity', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['shipped_damaged_pack_quantity']) && ($this->container['shipped_damaged_pack_quantity'] < 0)) {
            $invalidProperties[] = "invalid value for 'shipped_damaged_pack_quantity', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['canceled_pack_quantity']) && ($this->container['canceled_pack_quantity'] > 0)) {
            $invalidProperties[] = "invalid value for 'canceled_pack_quantity', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['canceled_pack_quantity']) && ($this->container['canceled_pack_quantity'] < 0)) {
            $invalidProperties[] = "invalid value for 'canceled_pack_quantity', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['lot_number']) && (mb_strlen($this->container['lot_number']) > 200)) {
            $invalidProperties[] = "invalid value for 'lot_number', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['inventory_condition']) && (mb_strlen($this->container['inventory_condition']) > 255)) {
            $invalidProperties[] = "invalid value for 'inventory_condition', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['inventory_attribute1']) && (mb_strlen($this->container['inventory_attribute1']) > 255)) {
            $invalidProperties[] = "invalid value for 'inventory_attribute1', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['inventory_attribute2']) && (mb_strlen($this->container['inventory_attribute2']) > 255)) {
            $invalidProperties[] = "invalid value for 'inventory_attribute2', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets self
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $self self
     *
     * @return self
     */
    public function setSelf($self)
    {
        if (is_null($self)) {
            throw new \InvalidArgumentException('non-nullable self cannot be null');
        }
        $this->container['self'] = $self;

        return $this;
    }

    /**
     * Gets item
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getItem()
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $item item
     *
     * @return self
     */
    public function setItem($item)
    {
        if (is_null($item)) {
            array_push($this->openAPINullablesSetToNull, 'item');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['item'] = $item;

        return $this;
    }

    /**
     * Gets pack
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getPack()
    {
        return $this->container['pack'];
    }

    /**
     * Sets pack
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $pack pack
     *
     * @return self
     */
    public function setPack($pack)
    {
        if (is_null($pack)) {
            array_push($this->openAPINullablesSetToNull, 'pack');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pack', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pack'] = $pack;

        return $this;
    }

    /**
     * Gets external_line_number
     *
     * @return string|null
     */
    public function getExternalLineNumber()
    {
        return $this->container['external_line_number'];
    }

    /**
     * Sets external_line_number
     *
     * @param string|null $external_line_number Reference number for the associated order line in an external system where the order was created.
     *
     * @return self
     */
    public function setExternalLineNumber($external_line_number)
    {
        if (is_null($external_line_number)) {
            throw new \InvalidArgumentException('non-nullable external_line_number cannot be null');
        }
        if ((mb_strlen($external_line_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $external_line_number when calling ShippedContainerDTOShippedContainerLinesInner., must be smaller than or equal to 50.');
        }

        $this->container['external_line_number'] = $external_line_number;

        return $this;
    }

    /**
     * Gets shipped_pack_quantity
     *
     * @return int|null
     */
    public function getShippedPackQuantity()
    {
        return $this->container['shipped_pack_quantity'];
    }

    /**
     * Sets shipped_pack_quantity
     *
     * @param int|null $shipped_pack_quantity Quantity of the item/pack in the shipped container.
     *
     * @return self
     */
    public function setShippedPackQuantity($shipped_pack_quantity)
    {
        if (is_null($shipped_pack_quantity)) {
            throw new \InvalidArgumentException('non-nullable shipped_pack_quantity cannot be null');
        }

        if (($shipped_pack_quantity > 0)) {
            throw new \InvalidArgumentException('invalid value for $shipped_pack_quantity when calling ShippedContainerDTOShippedContainerLinesInner., must be smaller than or equal to 0.');
        }
        if (($shipped_pack_quantity < 0)) {
            throw new \InvalidArgumentException('invalid value for $shipped_pack_quantity when calling ShippedContainerDTOShippedContainerLinesInner., must be bigger than or equal to 0.');
        }

        $this->container['shipped_pack_quantity'] = $shipped_pack_quantity;

        return $this;
    }

    /**
     * Gets shipped_damaged_pack_quantity
     *
     * @return int|null
     */
    public function getShippedDamagedPackQuantity()
    {
        return $this->container['shipped_damaged_pack_quantity'];
    }

    /**
     * Sets shipped_damaged_pack_quantity
     *
     * @param int|null $shipped_damaged_pack_quantity Quantity of the item/pack in the shipped container that was damaged.
     *
     * @return self
     */
    public function setShippedDamagedPackQuantity($shipped_damaged_pack_quantity)
    {
        if (is_null($shipped_damaged_pack_quantity)) {
            throw new \InvalidArgumentException('non-nullable shipped_damaged_pack_quantity cannot be null');
        }

        if (($shipped_damaged_pack_quantity > 0)) {
            throw new \InvalidArgumentException('invalid value for $shipped_damaged_pack_quantity when calling ShippedContainerDTOShippedContainerLinesInner., must be smaller than or equal to 0.');
        }
        if (($shipped_damaged_pack_quantity < 0)) {
            throw new \InvalidArgumentException('invalid value for $shipped_damaged_pack_quantity when calling ShippedContainerDTOShippedContainerLinesInner., must be bigger than or equal to 0.');
        }

        $this->container['shipped_damaged_pack_quantity'] = $shipped_damaged_pack_quantity;

        return $this;
    }

    /**
     * Gets canceled_pack_quantity
     *
     * @return int|null
     */
    public function getCanceledPackQuantity()
    {
        return $this->container['canceled_pack_quantity'];
    }

    /**
     * Sets canceled_pack_quantity
     *
     * @param int|null $canceled_pack_quantity Quantity of the item/pack on the order line that was canceled.
     *
     * @return self
     */
    public function setCanceledPackQuantity($canceled_pack_quantity)
    {
        if (is_null($canceled_pack_quantity)) {
            throw new \InvalidArgumentException('non-nullable canceled_pack_quantity cannot be null');
        }

        if (($canceled_pack_quantity > 0)) {
            throw new \InvalidArgumentException('invalid value for $canceled_pack_quantity when calling ShippedContainerDTOShippedContainerLinesInner., must be smaller than or equal to 0.');
        }
        if (($canceled_pack_quantity < 0)) {
            throw new \InvalidArgumentException('invalid value for $canceled_pack_quantity when calling ShippedContainerDTOShippedContainerLinesInner., must be bigger than or equal to 0.');
        }

        $this->container['canceled_pack_quantity'] = $canceled_pack_quantity;

        return $this;
    }

    /**
     * Gets lot_number
     *
     * @return string|null
     */
    public function getLotNumber()
    {
        return $this->container['lot_number'];
    }

    /**
     * Sets lot_number
     *
     * @param string|null $lot_number Lot number for the items in the shipped container.
     *
     * @return self
     */
    public function setLotNumber($lot_number)
    {
        if (is_null($lot_number)) {
            throw new \InvalidArgumentException('non-nullable lot_number cannot be null');
        }
        if ((mb_strlen($lot_number) > 200)) {
            throw new \InvalidArgumentException('invalid length for $lot_number when calling ShippedContainerDTOShippedContainerLinesInner., must be smaller than or equal to 200.');
        }

        $this->container['lot_number'] = $lot_number;

        return $this;
    }

    /**
     * Gets line_serial_numbers
     *
     * @return \BeLenka\Deposco\Model\BaseShipmentLineDTOLineSerialNumbersInner[]|null
     */
    public function getLineSerialNumbers()
    {
        return $this->container['line_serial_numbers'];
    }

    /**
     * Sets line_serial_numbers
     *
     * @param \BeLenka\Deposco\Model\BaseShipmentLineDTOLineSerialNumbersInner[]|null $line_serial_numbers Array of serial numbers for the items in the shipped container.
     *
     * @return self
     */
    public function setLineSerialNumbers($line_serial_numbers)
    {
        if (is_null($line_serial_numbers)) {
            throw new \InvalidArgumentException('non-nullable line_serial_numbers cannot be null');
        }
        $this->container['line_serial_numbers'] = $line_serial_numbers;

        return $this;
    }

    /**
     * Gets born_on_date
     *
     * @return \DateTime|null
     */
    public function getBornOnDate()
    {
        return $this->container['born_on_date'];
    }

    /**
     * Sets born_on_date
     *
     * @param \DateTime|null $born_on_date Born on date for the items in the shipped container.
     *
     * @return self
     */
    public function setBornOnDate($born_on_date)
    {
        if (is_null($born_on_date)) {
            throw new \InvalidArgumentException('non-nullable born_on_date cannot be null');
        }
        $this->container['born_on_date'] = $born_on_date;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return \DateTime|null
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param \DateTime|null $expiration_date Expiration date for the items in the shipped container.
     *
     * @return self
     */
    public function setExpirationDate($expiration_date)
    {
        if (is_null($expiration_date)) {
            throw new \InvalidArgumentException('non-nullable expiration_date cannot be null');
        }
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets inventory_condition
     *
     * @return string|null
     */
    public function getInventoryCondition()
    {
        return $this->container['inventory_condition'];
    }

    /**
     * Sets inventory_condition
     *
     * @param string|null $inventory_condition Condition of the inventory in the shipped container.
     *
     * @return self
     */
    public function setInventoryCondition($inventory_condition)
    {
        if (is_null($inventory_condition)) {
            throw new \InvalidArgumentException('non-nullable inventory_condition cannot be null');
        }
        if ((mb_strlen($inventory_condition) > 255)) {
            throw new \InvalidArgumentException('invalid length for $inventory_condition when calling ShippedContainerDTOShippedContainerLinesInner., must be smaller than or equal to 255.');
        }

        $this->container['inventory_condition'] = $inventory_condition;

        return $this;
    }

    /**
     * Gets inventory_attribute1
     *
     * @return string|null
     */
    public function getInventoryAttribute1()
    {
        return $this->container['inventory_attribute1'];
    }

    /**
     * Sets inventory_attribute1
     *
     * @param string|null $inventory_attribute1 Additional field for inventory attributes for the stock in the shipped container.
     *
     * @return self
     */
    public function setInventoryAttribute1($inventory_attribute1)
    {
        if (is_null($inventory_attribute1)) {
            throw new \InvalidArgumentException('non-nullable inventory_attribute1 cannot be null');
        }
        if ((mb_strlen($inventory_attribute1) > 255)) {
            throw new \InvalidArgumentException('invalid length for $inventory_attribute1 when calling ShippedContainerDTOShippedContainerLinesInner., must be smaller than or equal to 255.');
        }

        $this->container['inventory_attribute1'] = $inventory_attribute1;

        return $this;
    }

    /**
     * Gets inventory_attribute2
     *
     * @return string|null
     */
    public function getInventoryAttribute2()
    {
        return $this->container['inventory_attribute2'];
    }

    /**
     * Sets inventory_attribute2
     *
     * @param string|null $inventory_attribute2 Additional field for inventory attributes for the stock in the shipped container.
     *
     * @return self
     */
    public function setInventoryAttribute2($inventory_attribute2)
    {
        if (is_null($inventory_attribute2)) {
            throw new \InvalidArgumentException('non-nullable inventory_attribute2 cannot be null');
        }
        if ((mb_strlen($inventory_attribute2) > 255)) {
            throw new \InvalidArgumentException('invalid length for $inventory_attribute2 when calling ShippedContainerDTOShippedContainerLinesInner., must be smaller than or equal to 255.');
        }

        $this->container['inventory_attribute2'] = $inventory_attribute2;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


