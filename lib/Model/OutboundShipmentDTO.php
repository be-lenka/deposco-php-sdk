<?php
/**
 * OutboundShipmentDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deposco API
 *
 * Welcome to the Deposco API Reference! The Deposco API enables you to integrate your system with Deposco.  * Integrate a product information system (PIM) by creating and retrieving data for items, packs, UPCs, and kits. * Set up warehouse data by creating facilities, zones, locations, and storage details. * Create inbound orders that can be received and outbound orders that can be fulfilled with Deposco warehouse management processes.  This reference provides details on available operations, endpoints, parameters, schemas, and responses.  Example requests and responses are also available for you to use as a reference. You can copy the examples to use as a starting point for your own requests.  Review the guides to learn how the API is used in common business scenarios such as setting up the warehouse and integrating a Product Information Management (PIM) system.  When you're ready to get started, register for a developer account and then log in to create your application in the developer portal.
 *
 * The version of the OpenAPI document: 2.0.2519
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\Deposco\Model;

use \ArrayAccess;
use \BeLenka\Deposco\ObjectSerializer;

/**
 * OutboundShipmentDTO Class Doc Comment
 *
 * @category Class
 * @description Shipment header for an outbound shipment, which contains information for the entire shipment, such as address information and dates.
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OutboundShipmentDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OutboundShipmentDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'self' => '\BeLenka\Deposco\Model\EntityRef',
        'business_unit' => '\BeLenka\Deposco\Model\EntityRef',
        'number' => 'string',
        'order_headers' => '\BeLenka\Deposco\Model\BaseShipmentDTOOrderHeaders',
        'ship_via' => 'string',
        'ship_method' => 'string',
        'ship_vendor' => 'string',
        'tracking_number' => 'string',
        'tracking_url' => 'string',
        'routing_number' => 'string',
        'ship_to_contact' => '\BeLenka\Deposco\Model\AddressContactDTO',
        'ship_to_address' => '\BeLenka\Deposco\Model\AddressDTO',
        'ship_from_contact' => '\BeLenka\Deposco\Model\AddressContactDTO',
        'ship_from_address' => '\BeLenka\Deposco\Model\AddressDTO',
        'ship_from_zone' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'consignee_partner' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'bill_to_contact' => '\BeLenka\Deposco\Model\AddressContactDTO',
        'bill_to_account_number' => 'string',
        'bill_to_address' => '\BeLenka\Deposco\Model\AddressDTO',
        'bill_to_partner' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'freight_bill_to_partner' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'freight_bill_to_contact' => '\BeLenka\Deposco\Model\AddressContactDTO',
        'freight_bill_to_account' => 'string',
        'freight_bill_to_address' => '\BeLenka\Deposco\Model\AddressDTO',
        'deliver_to_contact' => '\BeLenka\Deposco\Model\AddressContactDTO',
        'deliver_to_address' => '\BeLenka\Deposco\Model\AddressDTO',
        'shipment_dates' => '\BeLenka\Deposco\Model\BaseShipmentDTOShipmentDates',
        'total_weight' => '\BeLenka\Deposco\Model\BaseShipmentDTOTotalWeight',
        'chargeable_weight' => '\BeLenka\Deposco\Model\BaseShipmentDTOChargeableWeight',
        'total_cube' => '\BeLenka\Deposco\Model\Measurement',
        'lpn_number' => 'string',
        'container_type' => 'string',
        'total_pieces' => 'int',
        'total_packages' => 'int',
        'full_case_packages' => 'int',
        'split_case_packages' => 'int',
        'full_case_pick_complete' => 'bool',
        'split_case_pick_complete' => 'bool',
        'driver_pallet_count_flag' => 'bool',
        'shipping_costs' => '\BeLenka\Deposco\Model\BaseShipmentDTOShippingCosts',
        'bol_number' => 'string',
        'handling_instructions' => 'string',
        'authorization_code' => 'string',
        'trailer_loaded_by' => 'string',
        'shipper_freight_count_flag' => 'bool',
        'driver_piece_count_flag' => 'bool',
        'returns' => '\BeLenka\Deposco\Model\BaseShipmentDTOReturns',
        'residential' => 'bool',
        'home_delivery' => 'bool',
        'saturday_delivery' => 'bool',
        'delivery_confirmation' => 'int',
        'hub_id' => 'string',
        'cod_amount' => 'int',
        'ship_mode' => 'string',
        'drop_ship' => 'bool',
        'complete' => 'bool',
        'correct' => 'bool',
        'on_time' => 'bool',
        'cust_check_flag' => 'bool',
        'master_flag' => 'bool',
        'ship_from_fob_flag' => 'bool',
        'ship_to_fob_flag' => 'bool',
        'total_distance' => 'int',
        'total_miles' => 'int',
        'notification_code1' => 'string',
        'notification_code2' => 'string',
        'notification_code3' => 'string',
        'verbal_confirmation_phone_number' => 'string',
        'integration_source' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'integration_point' => '\BeLenka\Deposco\Model\EntityRef',
        'import_reference' => 'string',
        'export_reference' => 'string',
        'other_reference_number' => 'string',
        'channels' => '\BeLenka\Deposco\Model\ChannelDTO[]',
        'custom_fields' => '\BeLenka\Deposco\Model\CustomFieldDTO[]',
        'created_date' => '\DateTime',
        'updated_date' => '\DateTime',
        'created_by' => '\BeLenka\Deposco\Model\EntityRef',
        'updated_by' => '\BeLenka\Deposco\Model\EntityRef',
        'type' => 'string',
        'ship_from_facility' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'status' => 'string',
        'shipment_lines' => '\BeLenka\Deposco\Model\OutboundShipmentLineCollectionDTO',
        'shipped_containers' => '\BeLenka\Deposco\Model\ShippedContainerCollectionDTO',
        'trip' => '\BeLenka\Deposco\Model\NullableEntityRef'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'self' => null,
        'business_unit' => null,
        'number' => null,
        'order_headers' => null,
        'ship_via' => null,
        'ship_method' => null,
        'ship_vendor' => null,
        'tracking_number' => null,
        'tracking_url' => null,
        'routing_number' => null,
        'ship_to_contact' => null,
        'ship_to_address' => null,
        'ship_from_contact' => null,
        'ship_from_address' => null,
        'ship_from_zone' => null,
        'consignee_partner' => null,
        'bill_to_contact' => null,
        'bill_to_account_number' => null,
        'bill_to_address' => null,
        'bill_to_partner' => null,
        'freight_bill_to_partner' => null,
        'freight_bill_to_contact' => null,
        'freight_bill_to_account' => null,
        'freight_bill_to_address' => null,
        'deliver_to_contact' => null,
        'deliver_to_address' => null,
        'shipment_dates' => null,
        'total_weight' => null,
        'chargeable_weight' => null,
        'total_cube' => null,
        'lpn_number' => null,
        'container_type' => null,
        'total_pieces' => 'double',
        'total_packages' => 'int32',
        'full_case_packages' => 'int32',
        'split_case_packages' => 'int32',
        'full_case_pick_complete' => null,
        'split_case_pick_complete' => null,
        'driver_pallet_count_flag' => null,
        'shipping_costs' => null,
        'bol_number' => null,
        'handling_instructions' => null,
        'authorization_code' => null,
        'trailer_loaded_by' => null,
        'shipper_freight_count_flag' => null,
        'driver_piece_count_flag' => null,
        'returns' => null,
        'residential' => null,
        'home_delivery' => null,
        'saturday_delivery' => null,
        'delivery_confirmation' => 'int32',
        'hub_id' => null,
        'cod_amount' => 'double',
        'ship_mode' => null,
        'drop_ship' => null,
        'complete' => null,
        'correct' => null,
        'on_time' => null,
        'cust_check_flag' => null,
        'master_flag' => null,
        'ship_from_fob_flag' => null,
        'ship_to_fob_flag' => null,
        'total_distance' => 'double',
        'total_miles' => 'double',
        'notification_code1' => null,
        'notification_code2' => null,
        'notification_code3' => null,
        'verbal_confirmation_phone_number' => null,
        'integration_source' => null,
        'integration_point' => null,
        'import_reference' => null,
        'export_reference' => null,
        'other_reference_number' => null,
        'channels' => null,
        'custom_fields' => null,
        'created_date' => 'date-time',
        'updated_date' => 'date-time',
        'created_by' => null,
        'updated_by' => null,
        'type' => null,
        'ship_from_facility' => null,
        'status' => null,
        'shipment_lines' => null,
        'shipped_containers' => null,
        'trip' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'self' => false,
        'business_unit' => false,
        'number' => false,
        'order_headers' => false,
        'ship_via' => false,
        'ship_method' => false,
        'ship_vendor' => false,
        'tracking_number' => false,
        'tracking_url' => false,
        'routing_number' => false,
        'ship_to_contact' => false,
        'ship_to_address' => false,
        'ship_from_contact' => false,
        'ship_from_address' => false,
        'ship_from_zone' => true,
        'consignee_partner' => true,
        'bill_to_contact' => false,
        'bill_to_account_number' => false,
        'bill_to_address' => false,
        'bill_to_partner' => true,
        'freight_bill_to_partner' => true,
        'freight_bill_to_contact' => false,
        'freight_bill_to_account' => false,
        'freight_bill_to_address' => false,
        'deliver_to_contact' => false,
        'deliver_to_address' => false,
        'shipment_dates' => false,
        'total_weight' => false,
        'chargeable_weight' => false,
        'total_cube' => false,
        'lpn_number' => false,
        'container_type' => false,
        'total_pieces' => false,
        'total_packages' => false,
        'full_case_packages' => false,
        'split_case_packages' => false,
        'full_case_pick_complete' => false,
        'split_case_pick_complete' => false,
        'driver_pallet_count_flag' => false,
        'shipping_costs' => false,
        'bol_number' => false,
        'handling_instructions' => false,
        'authorization_code' => false,
        'trailer_loaded_by' => false,
        'shipper_freight_count_flag' => false,
        'driver_piece_count_flag' => false,
        'returns' => false,
        'residential' => false,
        'home_delivery' => false,
        'saturday_delivery' => false,
        'delivery_confirmation' => false,
        'hub_id' => false,
        'cod_amount' => false,
        'ship_mode' => false,
        'drop_ship' => false,
        'complete' => false,
        'correct' => false,
        'on_time' => false,
        'cust_check_flag' => false,
        'master_flag' => false,
        'ship_from_fob_flag' => false,
        'ship_to_fob_flag' => false,
        'total_distance' => false,
        'total_miles' => false,
        'notification_code1' => false,
        'notification_code2' => false,
        'notification_code3' => false,
        'verbal_confirmation_phone_number' => false,
        'integration_source' => true,
        'integration_point' => false,
        'import_reference' => false,
        'export_reference' => false,
        'other_reference_number' => false,
        'channels' => false,
        'custom_fields' => false,
        'created_date' => false,
        'updated_date' => false,
        'created_by' => false,
        'updated_by' => false,
        'type' => true,
        'ship_from_facility' => true,
        'status' => false,
        'shipment_lines' => false,
        'shipped_containers' => false,
        'trip' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'self' => 'self',
        'business_unit' => 'businessUnit',
        'number' => 'number',
        'order_headers' => 'orderHeaders',
        'ship_via' => 'shipVia',
        'ship_method' => 'shipMethod',
        'ship_vendor' => 'shipVendor',
        'tracking_number' => 'trackingNumber',
        'tracking_url' => 'trackingUrl',
        'routing_number' => 'routingNumber',
        'ship_to_contact' => 'shipToContact',
        'ship_to_address' => 'shipToAddress',
        'ship_from_contact' => 'shipFromContact',
        'ship_from_address' => 'shipFromAddress',
        'ship_from_zone' => 'shipFromZone',
        'consignee_partner' => 'consigneePartner',
        'bill_to_contact' => 'billToContact',
        'bill_to_account_number' => 'billToAccountNumber',
        'bill_to_address' => 'billToAddress',
        'bill_to_partner' => 'billToPartner',
        'freight_bill_to_partner' => 'freightBillToPartner',
        'freight_bill_to_contact' => 'freightBillToContact',
        'freight_bill_to_account' => 'freightBillToAccount',
        'freight_bill_to_address' => 'freightBillToAddress',
        'deliver_to_contact' => 'deliverToContact',
        'deliver_to_address' => 'deliverToAddress',
        'shipment_dates' => 'shipmentDates',
        'total_weight' => 'totalWeight',
        'chargeable_weight' => 'chargeableWeight',
        'total_cube' => 'totalCube',
        'lpn_number' => 'lpnNumber',
        'container_type' => 'containerType',
        'total_pieces' => 'totalPieces',
        'total_packages' => 'totalPackages',
        'full_case_packages' => 'fullCasePackages',
        'split_case_packages' => 'splitCasePackages',
        'full_case_pick_complete' => 'fullCasePickComplete',
        'split_case_pick_complete' => 'splitCasePickComplete',
        'driver_pallet_count_flag' => 'driverPalletCountFlag',
        'shipping_costs' => 'shippingCosts',
        'bol_number' => 'bolNumber',
        'handling_instructions' => 'handlingInstructions',
        'authorization_code' => 'authorizationCode',
        'trailer_loaded_by' => 'trailerLoadedBy',
        'shipper_freight_count_flag' => 'shipperFreightCountFlag',
        'driver_piece_count_flag' => 'driverPieceCountFlag',
        'returns' => 'returns',
        'residential' => 'residential',
        'home_delivery' => 'homeDelivery',
        'saturday_delivery' => 'saturdayDelivery',
        'delivery_confirmation' => 'deliveryConfirmation',
        'hub_id' => 'hubId',
        'cod_amount' => 'codAmount',
        'ship_mode' => 'shipMode',
        'drop_ship' => 'dropShip',
        'complete' => 'complete',
        'correct' => 'correct',
        'on_time' => 'onTime',
        'cust_check_flag' => 'custCheckFlag',
        'master_flag' => 'masterFlag',
        'ship_from_fob_flag' => 'shipFromFobFlag',
        'ship_to_fob_flag' => 'shipToFobFlag',
        'total_distance' => 'totalDistance',
        'total_miles' => 'totalMiles',
        'notification_code1' => 'notificationCode1',
        'notification_code2' => 'notificationCode2',
        'notification_code3' => 'notificationCode3',
        'verbal_confirmation_phone_number' => 'verbalConfirmationPhoneNumber',
        'integration_source' => 'integrationSource',
        'integration_point' => 'integrationPoint',
        'import_reference' => 'importReference',
        'export_reference' => 'exportReference',
        'other_reference_number' => 'otherReferenceNumber',
        'channels' => 'channels',
        'custom_fields' => 'customFields',
        'created_date' => 'createdDate',
        'updated_date' => 'updatedDate',
        'created_by' => 'createdBy',
        'updated_by' => 'updatedBy',
        'type' => 'type',
        'ship_from_facility' => 'shipFromFacility',
        'status' => 'status',
        'shipment_lines' => 'shipmentLines',
        'shipped_containers' => 'shippedContainers',
        'trip' => 'trip'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'self' => 'setSelf',
        'business_unit' => 'setBusinessUnit',
        'number' => 'setNumber',
        'order_headers' => 'setOrderHeaders',
        'ship_via' => 'setShipVia',
        'ship_method' => 'setShipMethod',
        'ship_vendor' => 'setShipVendor',
        'tracking_number' => 'setTrackingNumber',
        'tracking_url' => 'setTrackingUrl',
        'routing_number' => 'setRoutingNumber',
        'ship_to_contact' => 'setShipToContact',
        'ship_to_address' => 'setShipToAddress',
        'ship_from_contact' => 'setShipFromContact',
        'ship_from_address' => 'setShipFromAddress',
        'ship_from_zone' => 'setShipFromZone',
        'consignee_partner' => 'setConsigneePartner',
        'bill_to_contact' => 'setBillToContact',
        'bill_to_account_number' => 'setBillToAccountNumber',
        'bill_to_address' => 'setBillToAddress',
        'bill_to_partner' => 'setBillToPartner',
        'freight_bill_to_partner' => 'setFreightBillToPartner',
        'freight_bill_to_contact' => 'setFreightBillToContact',
        'freight_bill_to_account' => 'setFreightBillToAccount',
        'freight_bill_to_address' => 'setFreightBillToAddress',
        'deliver_to_contact' => 'setDeliverToContact',
        'deliver_to_address' => 'setDeliverToAddress',
        'shipment_dates' => 'setShipmentDates',
        'total_weight' => 'setTotalWeight',
        'chargeable_weight' => 'setChargeableWeight',
        'total_cube' => 'setTotalCube',
        'lpn_number' => 'setLpnNumber',
        'container_type' => 'setContainerType',
        'total_pieces' => 'setTotalPieces',
        'total_packages' => 'setTotalPackages',
        'full_case_packages' => 'setFullCasePackages',
        'split_case_packages' => 'setSplitCasePackages',
        'full_case_pick_complete' => 'setFullCasePickComplete',
        'split_case_pick_complete' => 'setSplitCasePickComplete',
        'driver_pallet_count_flag' => 'setDriverPalletCountFlag',
        'shipping_costs' => 'setShippingCosts',
        'bol_number' => 'setBolNumber',
        'handling_instructions' => 'setHandlingInstructions',
        'authorization_code' => 'setAuthorizationCode',
        'trailer_loaded_by' => 'setTrailerLoadedBy',
        'shipper_freight_count_flag' => 'setShipperFreightCountFlag',
        'driver_piece_count_flag' => 'setDriverPieceCountFlag',
        'returns' => 'setReturns',
        'residential' => 'setResidential',
        'home_delivery' => 'setHomeDelivery',
        'saturday_delivery' => 'setSaturdayDelivery',
        'delivery_confirmation' => 'setDeliveryConfirmation',
        'hub_id' => 'setHubId',
        'cod_amount' => 'setCodAmount',
        'ship_mode' => 'setShipMode',
        'drop_ship' => 'setDropShip',
        'complete' => 'setComplete',
        'correct' => 'setCorrect',
        'on_time' => 'setOnTime',
        'cust_check_flag' => 'setCustCheckFlag',
        'master_flag' => 'setMasterFlag',
        'ship_from_fob_flag' => 'setShipFromFobFlag',
        'ship_to_fob_flag' => 'setShipToFobFlag',
        'total_distance' => 'setTotalDistance',
        'total_miles' => 'setTotalMiles',
        'notification_code1' => 'setNotificationCode1',
        'notification_code2' => 'setNotificationCode2',
        'notification_code3' => 'setNotificationCode3',
        'verbal_confirmation_phone_number' => 'setVerbalConfirmationPhoneNumber',
        'integration_source' => 'setIntegrationSource',
        'integration_point' => 'setIntegrationPoint',
        'import_reference' => 'setImportReference',
        'export_reference' => 'setExportReference',
        'other_reference_number' => 'setOtherReferenceNumber',
        'channels' => 'setChannels',
        'custom_fields' => 'setCustomFields',
        'created_date' => 'setCreatedDate',
        'updated_date' => 'setUpdatedDate',
        'created_by' => 'setCreatedBy',
        'updated_by' => 'setUpdatedBy',
        'type' => 'setType',
        'ship_from_facility' => 'setShipFromFacility',
        'status' => 'setStatus',
        'shipment_lines' => 'setShipmentLines',
        'shipped_containers' => 'setShippedContainers',
        'trip' => 'setTrip'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'self' => 'getSelf',
        'business_unit' => 'getBusinessUnit',
        'number' => 'getNumber',
        'order_headers' => 'getOrderHeaders',
        'ship_via' => 'getShipVia',
        'ship_method' => 'getShipMethod',
        'ship_vendor' => 'getShipVendor',
        'tracking_number' => 'getTrackingNumber',
        'tracking_url' => 'getTrackingUrl',
        'routing_number' => 'getRoutingNumber',
        'ship_to_contact' => 'getShipToContact',
        'ship_to_address' => 'getShipToAddress',
        'ship_from_contact' => 'getShipFromContact',
        'ship_from_address' => 'getShipFromAddress',
        'ship_from_zone' => 'getShipFromZone',
        'consignee_partner' => 'getConsigneePartner',
        'bill_to_contact' => 'getBillToContact',
        'bill_to_account_number' => 'getBillToAccountNumber',
        'bill_to_address' => 'getBillToAddress',
        'bill_to_partner' => 'getBillToPartner',
        'freight_bill_to_partner' => 'getFreightBillToPartner',
        'freight_bill_to_contact' => 'getFreightBillToContact',
        'freight_bill_to_account' => 'getFreightBillToAccount',
        'freight_bill_to_address' => 'getFreightBillToAddress',
        'deliver_to_contact' => 'getDeliverToContact',
        'deliver_to_address' => 'getDeliverToAddress',
        'shipment_dates' => 'getShipmentDates',
        'total_weight' => 'getTotalWeight',
        'chargeable_weight' => 'getChargeableWeight',
        'total_cube' => 'getTotalCube',
        'lpn_number' => 'getLpnNumber',
        'container_type' => 'getContainerType',
        'total_pieces' => 'getTotalPieces',
        'total_packages' => 'getTotalPackages',
        'full_case_packages' => 'getFullCasePackages',
        'split_case_packages' => 'getSplitCasePackages',
        'full_case_pick_complete' => 'getFullCasePickComplete',
        'split_case_pick_complete' => 'getSplitCasePickComplete',
        'driver_pallet_count_flag' => 'getDriverPalletCountFlag',
        'shipping_costs' => 'getShippingCosts',
        'bol_number' => 'getBolNumber',
        'handling_instructions' => 'getHandlingInstructions',
        'authorization_code' => 'getAuthorizationCode',
        'trailer_loaded_by' => 'getTrailerLoadedBy',
        'shipper_freight_count_flag' => 'getShipperFreightCountFlag',
        'driver_piece_count_flag' => 'getDriverPieceCountFlag',
        'returns' => 'getReturns',
        'residential' => 'getResidential',
        'home_delivery' => 'getHomeDelivery',
        'saturday_delivery' => 'getSaturdayDelivery',
        'delivery_confirmation' => 'getDeliveryConfirmation',
        'hub_id' => 'getHubId',
        'cod_amount' => 'getCodAmount',
        'ship_mode' => 'getShipMode',
        'drop_ship' => 'getDropShip',
        'complete' => 'getComplete',
        'correct' => 'getCorrect',
        'on_time' => 'getOnTime',
        'cust_check_flag' => 'getCustCheckFlag',
        'master_flag' => 'getMasterFlag',
        'ship_from_fob_flag' => 'getShipFromFobFlag',
        'ship_to_fob_flag' => 'getShipToFobFlag',
        'total_distance' => 'getTotalDistance',
        'total_miles' => 'getTotalMiles',
        'notification_code1' => 'getNotificationCode1',
        'notification_code2' => 'getNotificationCode2',
        'notification_code3' => 'getNotificationCode3',
        'verbal_confirmation_phone_number' => 'getVerbalConfirmationPhoneNumber',
        'integration_source' => 'getIntegrationSource',
        'integration_point' => 'getIntegrationPoint',
        'import_reference' => 'getImportReference',
        'export_reference' => 'getExportReference',
        'other_reference_number' => 'getOtherReferenceNumber',
        'channels' => 'getChannels',
        'custom_fields' => 'getCustomFields',
        'created_date' => 'getCreatedDate',
        'updated_date' => 'getUpdatedDate',
        'created_by' => 'getCreatedBy',
        'updated_by' => 'getUpdatedBy',
        'type' => 'getType',
        'ship_from_facility' => 'getShipFromFacility',
        'status' => 'getStatus',
        'shipment_lines' => 'getShipmentLines',
        'shipped_containers' => 'getShippedContainers',
        'trip' => 'getTrip'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SHIP_MODE_AIR = 'Air';
    public const SHIP_MODE_OCEAN = 'Ocean';
    public const SHIP_MODE_GROUND = 'Ground';
    public const TYPE_OUTBOUND_SHIPMENT = 'Outbound Shipment';
    public const TYPE_NULL = 'null';
    public const STATUS__NEW = 'New';
    public const STATUS_SHIPPING = 'Shipping';
    public const STATUS_SHIPPED = 'Shipped';
    public const STATUS_ROLLED_BACK = 'Rolled Back';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShipModeAllowableValues()
    {
        return [
            self::SHIP_MODE_AIR,
            self::SHIP_MODE_OCEAN,
            self::SHIP_MODE_GROUND,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_OUTBOUND_SHIPMENT,
            self::TYPE_NULL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS__NEW,
            self::STATUS_SHIPPING,
            self::STATUS_SHIPPED,
            self::STATUS_ROLLED_BACK,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('self', $data ?? [], null);
        $this->setIfExists('business_unit', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('order_headers', $data ?? [], null);
        $this->setIfExists('ship_via', $data ?? [], null);
        $this->setIfExists('ship_method', $data ?? [], null);
        $this->setIfExists('ship_vendor', $data ?? [], null);
        $this->setIfExists('tracking_number', $data ?? [], null);
        $this->setIfExists('tracking_url', $data ?? [], null);
        $this->setIfExists('routing_number', $data ?? [], null);
        $this->setIfExists('ship_to_contact', $data ?? [], null);
        $this->setIfExists('ship_to_address', $data ?? [], null);
        $this->setIfExists('ship_from_contact', $data ?? [], null);
        $this->setIfExists('ship_from_address', $data ?? [], null);
        $this->setIfExists('ship_from_zone', $data ?? [], null);
        $this->setIfExists('consignee_partner', $data ?? [], null);
        $this->setIfExists('bill_to_contact', $data ?? [], null);
        $this->setIfExists('bill_to_account_number', $data ?? [], null);
        $this->setIfExists('bill_to_address', $data ?? [], null);
        $this->setIfExists('bill_to_partner', $data ?? [], null);
        $this->setIfExists('freight_bill_to_partner', $data ?? [], null);
        $this->setIfExists('freight_bill_to_contact', $data ?? [], null);
        $this->setIfExists('freight_bill_to_account', $data ?? [], null);
        $this->setIfExists('freight_bill_to_address', $data ?? [], null);
        $this->setIfExists('deliver_to_contact', $data ?? [], null);
        $this->setIfExists('deliver_to_address', $data ?? [], null);
        $this->setIfExists('shipment_dates', $data ?? [], null);
        $this->setIfExists('total_weight', $data ?? [], null);
        $this->setIfExists('chargeable_weight', $data ?? [], null);
        $this->setIfExists('total_cube', $data ?? [], null);
        $this->setIfExists('lpn_number', $data ?? [], null);
        $this->setIfExists('container_type', $data ?? [], null);
        $this->setIfExists('total_pieces', $data ?? [], null);
        $this->setIfExists('total_packages', $data ?? [], null);
        $this->setIfExists('full_case_packages', $data ?? [], null);
        $this->setIfExists('split_case_packages', $data ?? [], null);
        $this->setIfExists('full_case_pick_complete', $data ?? [], null);
        $this->setIfExists('split_case_pick_complete', $data ?? [], null);
        $this->setIfExists('driver_pallet_count_flag', $data ?? [], null);
        $this->setIfExists('shipping_costs', $data ?? [], null);
        $this->setIfExists('bol_number', $data ?? [], null);
        $this->setIfExists('handling_instructions', $data ?? [], null);
        $this->setIfExists('authorization_code', $data ?? [], null);
        $this->setIfExists('trailer_loaded_by', $data ?? [], null);
        $this->setIfExists('shipper_freight_count_flag', $data ?? [], null);
        $this->setIfExists('driver_piece_count_flag', $data ?? [], null);
        $this->setIfExists('returns', $data ?? [], null);
        $this->setIfExists('residential', $data ?? [], null);
        $this->setIfExists('home_delivery', $data ?? [], null);
        $this->setIfExists('saturday_delivery', $data ?? [], null);
        $this->setIfExists('delivery_confirmation', $data ?? [], null);
        $this->setIfExists('hub_id', $data ?? [], null);
        $this->setIfExists('cod_amount', $data ?? [], null);
        $this->setIfExists('ship_mode', $data ?? [], null);
        $this->setIfExists('drop_ship', $data ?? [], null);
        $this->setIfExists('complete', $data ?? [], null);
        $this->setIfExists('correct', $data ?? [], null);
        $this->setIfExists('on_time', $data ?? [], null);
        $this->setIfExists('cust_check_flag', $data ?? [], null);
        $this->setIfExists('master_flag', $data ?? [], null);
        $this->setIfExists('ship_from_fob_flag', $data ?? [], null);
        $this->setIfExists('ship_to_fob_flag', $data ?? [], null);
        $this->setIfExists('total_distance', $data ?? [], null);
        $this->setIfExists('total_miles', $data ?? [], null);
        $this->setIfExists('notification_code1', $data ?? [], null);
        $this->setIfExists('notification_code2', $data ?? [], null);
        $this->setIfExists('notification_code3', $data ?? [], null);
        $this->setIfExists('verbal_confirmation_phone_number', $data ?? [], null);
        $this->setIfExists('integration_source', $data ?? [], null);
        $this->setIfExists('integration_point', $data ?? [], null);
        $this->setIfExists('import_reference', $data ?? [], null);
        $this->setIfExists('export_reference', $data ?? [], null);
        $this->setIfExists('other_reference_number', $data ?? [], null);
        $this->setIfExists('channels', $data ?? [], null);
        $this->setIfExists('custom_fields', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('updated_date', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('updated_by', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('ship_from_facility', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('shipment_lines', $data ?? [], null);
        $this->setIfExists('shipped_containers', $data ?? [], null);
        $this->setIfExists('trip', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['business_unit'] === null) {
            $invalidProperties[] = "'business_unit' can't be null";
        }
        if ($this->container['number'] === null) {
            $invalidProperties[] = "'number' can't be null";
        }
        if ((mb_strlen($this->container['number']) > 50)) {
            $invalidProperties[] = "invalid value for 'number', the character length must be smaller than or equal to 50.";
        }

        if (!preg_match("/.*\\S.*/", $this->container['number'])) {
            $invalidProperties[] = "invalid value for 'number', must be conform to the pattern /.*\\S.*/.";
        }

        if (!is_null($this->container['ship_via']) && (mb_strlen($this->container['ship_via']) > 192)) {
            $invalidProperties[] = "invalid value for 'ship_via', the character length must be smaller than or equal to 192.";
        }

        if (!is_null($this->container['ship_method']) && (mb_strlen($this->container['ship_method']) > 50)) {
            $invalidProperties[] = "invalid value for 'ship_method', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['ship_vendor']) && (mb_strlen($this->container['ship_vendor']) > 100)) {
            $invalidProperties[] = "invalid value for 'ship_vendor', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['tracking_number']) && (mb_strlen($this->container['tracking_number']) > 100)) {
            $invalidProperties[] = "invalid value for 'tracking_number', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['tracking_url']) && (mb_strlen($this->container['tracking_url']) > 400)) {
            $invalidProperties[] = "invalid value for 'tracking_url', the character length must be smaller than or equal to 400.";
        }

        if (!is_null($this->container['routing_number']) && (mb_strlen($this->container['routing_number']) > 30)) {
            $invalidProperties[] = "invalid value for 'routing_number', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['bill_to_account_number']) && (mb_strlen($this->container['bill_to_account_number']) > 30)) {
            $invalidProperties[] = "invalid value for 'bill_to_account_number', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['freight_bill_to_account']) && (mb_strlen($this->container['freight_bill_to_account']) > 50)) {
            $invalidProperties[] = "invalid value for 'freight_bill_to_account', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['lpn_number']) && (mb_strlen($this->container['lpn_number']) > 30)) {
            $invalidProperties[] = "invalid value for 'lpn_number', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['container_type']) && (mb_strlen($this->container['container_type']) > 50)) {
            $invalidProperties[] = "invalid value for 'container_type', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['total_pieces']) && ($this->container['total_pieces'] > 10000000)) {
            $invalidProperties[] = "invalid value for 'total_pieces', must be smaller than or equal to 10000000.";
        }

        if (!is_null($this->container['total_pieces']) && ($this->container['total_pieces'] < 0)) {
            $invalidProperties[] = "invalid value for 'total_pieces', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['total_packages']) && ($this->container['total_packages'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'total_packages', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['total_packages']) && ($this->container['total_packages'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'total_packages', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['full_case_packages']) && ($this->container['full_case_packages'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'full_case_packages', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['full_case_packages']) && ($this->container['full_case_packages'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'full_case_packages', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['split_case_packages']) && ($this->container['split_case_packages'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'split_case_packages', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['split_case_packages']) && ($this->container['split_case_packages'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'split_case_packages', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['bol_number']) && (mb_strlen($this->container['bol_number']) > 17)) {
            $invalidProperties[] = "invalid value for 'bol_number', the character length must be smaller than or equal to 17.";
        }

        if (!is_null($this->container['handling_instructions']) && (mb_strlen($this->container['handling_instructions']) > 250)) {
            $invalidProperties[] = "invalid value for 'handling_instructions', the character length must be smaller than or equal to 250.";
        }

        if (!is_null($this->container['authorization_code']) && (mb_strlen($this->container['authorization_code']) > 200)) {
            $invalidProperties[] = "invalid value for 'authorization_code', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['trailer_loaded_by']) && (mb_strlen($this->container['trailer_loaded_by']) > 50)) {
            $invalidProperties[] = "invalid value for 'trailer_loaded_by', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['delivery_confirmation']) && ($this->container['delivery_confirmation'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'delivery_confirmation', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['delivery_confirmation']) && ($this->container['delivery_confirmation'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'delivery_confirmation', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['hub_id']) && (mb_strlen($this->container['hub_id']) > 10)) {
            $invalidProperties[] = "invalid value for 'hub_id', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['cod_amount']) && ($this->container['cod_amount'] > 10000000)) {
            $invalidProperties[] = "invalid value for 'cod_amount', must be smaller than or equal to 10000000.";
        }

        if (!is_null($this->container['cod_amount']) && ($this->container['cod_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'cod_amount', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getShipModeAllowableValues();
        if (!is_null($this->container['ship_mode']) && !in_array($this->container['ship_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ship_mode', must be one of '%s'",
                $this->container['ship_mode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['total_distance']) && ($this->container['total_distance'] > 10000000)) {
            $invalidProperties[] = "invalid value for 'total_distance', must be smaller than or equal to 10000000.";
        }

        if (!is_null($this->container['total_distance']) && ($this->container['total_distance'] < 0)) {
            $invalidProperties[] = "invalid value for 'total_distance', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['notification_code1']) && (mb_strlen($this->container['notification_code1']) > 200)) {
            $invalidProperties[] = "invalid value for 'notification_code1', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['notification_code2']) && (mb_strlen($this->container['notification_code2']) > 10)) {
            $invalidProperties[] = "invalid value for 'notification_code2', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['notification_code3']) && (mb_strlen($this->container['notification_code3']) > 10)) {
            $invalidProperties[] = "invalid value for 'notification_code3', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['verbal_confirmation_phone_number']) && (mb_strlen($this->container['verbal_confirmation_phone_number']) > 45)) {
            $invalidProperties[] = "invalid value for 'verbal_confirmation_phone_number', the character length must be smaller than or equal to 45.";
        }

        if (!is_null($this->container['import_reference']) && (mb_strlen($this->container['import_reference']) > 50)) {
            $invalidProperties[] = "invalid value for 'import_reference', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['export_reference']) && (mb_strlen($this->container['export_reference']) > 50)) {
            $invalidProperties[] = "invalid value for 'export_reference', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['other_reference_number']) && (mb_strlen($this->container['other_reference_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'other_reference_number', the character length must be smaller than or equal to 50.";
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets self
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $self self
     *
     * @return self
     */
    public function setSelf($self)
    {
        if (is_null($self)) {
            throw new \InvalidArgumentException('non-nullable self cannot be null');
        }
        $this->container['self'] = $self;

        return $this;
    }

    /**
     * Gets business_unit
     *
     * @return \BeLenka\Deposco\Model\EntityRef
     */
    public function getBusinessUnit()
    {
        return $this->container['business_unit'];
    }

    /**
     * Sets business_unit
     *
     * @param \BeLenka\Deposco\Model\EntityRef $business_unit business_unit
     *
     * @return self
     */
    public function setBusinessUnit($business_unit)
    {
        if (is_null($business_unit)) {
            throw new \InvalidArgumentException('non-nullable business_unit cannot be null');
        }
        $this->container['business_unit'] = $business_unit;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number Unique identification number for the shipment.
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }
        if ((mb_strlen($number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $number when calling OutboundShipmentDTO., must be smaller than or equal to 50.');
        }
        if ((!preg_match("/.*\\S.*/", ObjectSerializer::toString($number)))) {
            throw new \InvalidArgumentException("invalid value for \$number when calling OutboundShipmentDTO., must conform to the pattern /.*\\S.*/.");
        }

        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets order_headers
     *
     * @return \BeLenka\Deposco\Model\BaseShipmentDTOOrderHeaders|null
     */
    public function getOrderHeaders()
    {
        return $this->container['order_headers'];
    }

    /**
     * Sets order_headers
     *
     * @param \BeLenka\Deposco\Model\BaseShipmentDTOOrderHeaders|null $order_headers order_headers
     *
     * @return self
     */
    public function setOrderHeaders($order_headers)
    {
        if (is_null($order_headers)) {
            throw new \InvalidArgumentException('non-nullable order_headers cannot be null');
        }
        $this->container['order_headers'] = $order_headers;

        return $this;
    }

    /**
     * Gets ship_via
     *
     * @return string|null
     */
    public function getShipVia()
    {
        return $this->container['ship_via'];
    }

    /**
     * Sets ship_via
     *
     * @param string|null $ship_via Shipping service that is used to send the shipment.
     *
     * @return self
     */
    public function setShipVia($ship_via)
    {
        if (is_null($ship_via)) {
            throw new \InvalidArgumentException('non-nullable ship_via cannot be null');
        }
        if ((mb_strlen($ship_via) > 192)) {
            throw new \InvalidArgumentException('invalid length for $ship_via when calling OutboundShipmentDTO., must be smaller than or equal to 192.');
        }

        $this->container['ship_via'] = $ship_via;

        return $this;
    }

    /**
     * Gets ship_method
     *
     * @return string|null
     */
    public function getShipMethod()
    {
        return $this->container['ship_method'];
    }

    /**
     * Sets ship_method
     *
     * @param string|null $ship_method Shipping method that is used to send the shipment.
     *
     * @return self
     */
    public function setShipMethod($ship_method)
    {
        if (is_null($ship_method)) {
            throw new \InvalidArgumentException('non-nullable ship_method cannot be null');
        }
        if ((mb_strlen($ship_method) > 50)) {
            throw new \InvalidArgumentException('invalid length for $ship_method when calling OutboundShipmentDTO., must be smaller than or equal to 50.');
        }

        $this->container['ship_method'] = $ship_method;

        return $this;
    }

    /**
     * Gets ship_vendor
     *
     * @return string|null
     */
    public function getShipVendor()
    {
        return $this->container['ship_vendor'];
    }

    /**
     * Sets ship_vendor
     *
     * @param string|null $ship_vendor Shipping carrier that is used to send the shipment.
     *
     * @return self
     */
    public function setShipVendor($ship_vendor)
    {
        if (is_null($ship_vendor)) {
            throw new \InvalidArgumentException('non-nullable ship_vendor cannot be null');
        }
        if ((mb_strlen($ship_vendor) > 100)) {
            throw new \InvalidArgumentException('invalid length for $ship_vendor when calling OutboundShipmentDTO., must be smaller than or equal to 100.');
        }

        $this->container['ship_vendor'] = $ship_vendor;

        return $this;
    }

    /**
     * Gets tracking_number
     *
     * @return string|null
     */
    public function getTrackingNumber()
    {
        return $this->container['tracking_number'];
    }

    /**
     * Sets tracking_number
     *
     * @param string|null $tracking_number Tracking number for the shipment.
     *
     * @return self
     */
    public function setTrackingNumber($tracking_number)
    {
        if (is_null($tracking_number)) {
            throw new \InvalidArgumentException('non-nullable tracking_number cannot be null');
        }
        if ((mb_strlen($tracking_number) > 100)) {
            throw new \InvalidArgumentException('invalid length for $tracking_number when calling OutboundShipmentDTO., must be smaller than or equal to 100.');
        }

        $this->container['tracking_number'] = $tracking_number;

        return $this;
    }

    /**
     * Gets tracking_url
     *
     * @return string|null
     */
    public function getTrackingUrl()
    {
        return $this->container['tracking_url'];
    }

    /**
     * Sets tracking_url
     *
     * @param string|null $tracking_url Tracking URL and tracking number for the shipment.
     *
     * @return self
     */
    public function setTrackingUrl($tracking_url)
    {
        if (is_null($tracking_url)) {
            throw new \InvalidArgumentException('non-nullable tracking_url cannot be null');
        }
        if ((mb_strlen($tracking_url) > 400)) {
            throw new \InvalidArgumentException('invalid length for $tracking_url when calling OutboundShipmentDTO., must be smaller than or equal to 400.');
        }

        $this->container['tracking_url'] = $tracking_url;

        return $this;
    }

    /**
     * Gets routing_number
     *
     * @return string|null
     */
    public function getRoutingNumber()
    {
        return $this->container['routing_number'];
    }

    /**
     * Sets routing_number
     *
     * @param string|null $routing_number Transportation routing number for the trip to which the shipment is assigned.
     *
     * @return self
     */
    public function setRoutingNumber($routing_number)
    {
        if (is_null($routing_number)) {
            throw new \InvalidArgumentException('non-nullable routing_number cannot be null');
        }
        if ((mb_strlen($routing_number) > 30)) {
            throw new \InvalidArgumentException('invalid length for $routing_number when calling OutboundShipmentDTO., must be smaller than or equal to 30.');
        }

        $this->container['routing_number'] = $routing_number;

        return $this;
    }

    /**
     * Gets ship_to_contact
     *
     * @return \BeLenka\Deposco\Model\AddressContactDTO|null
     */
    public function getShipToContact()
    {
        return $this->container['ship_to_contact'];
    }

    /**
     * Sets ship_to_contact
     *
     * @param \BeLenka\Deposco\Model\AddressContactDTO|null $ship_to_contact ship_to_contact
     *
     * @return self
     */
    public function setShipToContact($ship_to_contact)
    {
        if (is_null($ship_to_contact)) {
            throw new \InvalidArgumentException('non-nullable ship_to_contact cannot be null');
        }
        $this->container['ship_to_contact'] = $ship_to_contact;

        return $this;
    }

    /**
     * Gets ship_to_address
     *
     * @return \BeLenka\Deposco\Model\AddressDTO|null
     */
    public function getShipToAddress()
    {
        return $this->container['ship_to_address'];
    }

    /**
     * Sets ship_to_address
     *
     * @param \BeLenka\Deposco\Model\AddressDTO|null $ship_to_address ship_to_address
     *
     * @return self
     */
    public function setShipToAddress($ship_to_address)
    {
        if (is_null($ship_to_address)) {
            throw new \InvalidArgumentException('non-nullable ship_to_address cannot be null');
        }
        $this->container['ship_to_address'] = $ship_to_address;

        return $this;
    }

    /**
     * Gets ship_from_contact
     *
     * @return \BeLenka\Deposco\Model\AddressContactDTO|null
     */
    public function getShipFromContact()
    {
        return $this->container['ship_from_contact'];
    }

    /**
     * Sets ship_from_contact
     *
     * @param \BeLenka\Deposco\Model\AddressContactDTO|null $ship_from_contact ship_from_contact
     *
     * @return self
     */
    public function setShipFromContact($ship_from_contact)
    {
        if (is_null($ship_from_contact)) {
            throw new \InvalidArgumentException('non-nullable ship_from_contact cannot be null');
        }
        $this->container['ship_from_contact'] = $ship_from_contact;

        return $this;
    }

    /**
     * Gets ship_from_address
     *
     * @return \BeLenka\Deposco\Model\AddressDTO|null
     */
    public function getShipFromAddress()
    {
        return $this->container['ship_from_address'];
    }

    /**
     * Sets ship_from_address
     *
     * @param \BeLenka\Deposco\Model\AddressDTO|null $ship_from_address ship_from_address
     *
     * @return self
     */
    public function setShipFromAddress($ship_from_address)
    {
        if (is_null($ship_from_address)) {
            throw new \InvalidArgumentException('non-nullable ship_from_address cannot be null');
        }
        $this->container['ship_from_address'] = $ship_from_address;

        return $this;
    }

    /**
     * Gets ship_from_zone
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getShipFromZone()
    {
        return $this->container['ship_from_zone'];
    }

    /**
     * Sets ship_from_zone
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $ship_from_zone ship_from_zone
     *
     * @return self
     */
    public function setShipFromZone($ship_from_zone)
    {
        if (is_null($ship_from_zone)) {
            array_push($this->openAPINullablesSetToNull, 'ship_from_zone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ship_from_zone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ship_from_zone'] = $ship_from_zone;

        return $this;
    }

    /**
     * Gets consignee_partner
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getConsigneePartner()
    {
        return $this->container['consignee_partner'];
    }

    /**
     * Sets consignee_partner
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $consignee_partner consignee_partner
     *
     * @return self
     */
    public function setConsigneePartner($consignee_partner)
    {
        if (is_null($consignee_partner)) {
            array_push($this->openAPINullablesSetToNull, 'consignee_partner');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('consignee_partner', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['consignee_partner'] = $consignee_partner;

        return $this;
    }

    /**
     * Gets bill_to_contact
     *
     * @return \BeLenka\Deposco\Model\AddressContactDTO|null
     */
    public function getBillToContact()
    {
        return $this->container['bill_to_contact'];
    }

    /**
     * Sets bill_to_contact
     *
     * @param \BeLenka\Deposco\Model\AddressContactDTO|null $bill_to_contact bill_to_contact
     *
     * @return self
     */
    public function setBillToContact($bill_to_contact)
    {
        if (is_null($bill_to_contact)) {
            throw new \InvalidArgumentException('non-nullable bill_to_contact cannot be null');
        }
        $this->container['bill_to_contact'] = $bill_to_contact;

        return $this;
    }

    /**
     * Gets bill_to_account_number
     *
     * @return string|null
     */
    public function getBillToAccountNumber()
    {
        return $this->container['bill_to_account_number'];
    }

    /**
     * Sets bill_to_account_number
     *
     * @param string|null $bill_to_account_number Account number of the person or company to whom the order on the shipment is billed.
     *
     * @return self
     */
    public function setBillToAccountNumber($bill_to_account_number)
    {
        if (is_null($bill_to_account_number)) {
            throw new \InvalidArgumentException('non-nullable bill_to_account_number cannot be null');
        }
        if ((mb_strlen($bill_to_account_number) > 30)) {
            throw new \InvalidArgumentException('invalid length for $bill_to_account_number when calling OutboundShipmentDTO., must be smaller than or equal to 30.');
        }

        $this->container['bill_to_account_number'] = $bill_to_account_number;

        return $this;
    }

    /**
     * Gets bill_to_address
     *
     * @return \BeLenka\Deposco\Model\AddressDTO|null
     */
    public function getBillToAddress()
    {
        return $this->container['bill_to_address'];
    }

    /**
     * Sets bill_to_address
     *
     * @param \BeLenka\Deposco\Model\AddressDTO|null $bill_to_address bill_to_address
     *
     * @return self
     */
    public function setBillToAddress($bill_to_address)
    {
        if (is_null($bill_to_address)) {
            throw new \InvalidArgumentException('non-nullable bill_to_address cannot be null');
        }
        $this->container['bill_to_address'] = $bill_to_address;

        return $this;
    }

    /**
     * Gets bill_to_partner
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getBillToPartner()
    {
        return $this->container['bill_to_partner'];
    }

    /**
     * Sets bill_to_partner
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $bill_to_partner bill_to_partner
     *
     * @return self
     */
    public function setBillToPartner($bill_to_partner)
    {
        if (is_null($bill_to_partner)) {
            array_push($this->openAPINullablesSetToNull, 'bill_to_partner');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bill_to_partner', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bill_to_partner'] = $bill_to_partner;

        return $this;
    }

    /**
     * Gets freight_bill_to_partner
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getFreightBillToPartner()
    {
        return $this->container['freight_bill_to_partner'];
    }

    /**
     * Sets freight_bill_to_partner
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $freight_bill_to_partner freight_bill_to_partner
     *
     * @return self
     */
    public function setFreightBillToPartner($freight_bill_to_partner)
    {
        if (is_null($freight_bill_to_partner)) {
            array_push($this->openAPINullablesSetToNull, 'freight_bill_to_partner');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('freight_bill_to_partner', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['freight_bill_to_partner'] = $freight_bill_to_partner;

        return $this;
    }

    /**
     * Gets freight_bill_to_contact
     *
     * @return \BeLenka\Deposco\Model\AddressContactDTO|null
     */
    public function getFreightBillToContact()
    {
        return $this->container['freight_bill_to_contact'];
    }

    /**
     * Sets freight_bill_to_contact
     *
     * @param \BeLenka\Deposco\Model\AddressContactDTO|null $freight_bill_to_contact freight_bill_to_contact
     *
     * @return self
     */
    public function setFreightBillToContact($freight_bill_to_contact)
    {
        if (is_null($freight_bill_to_contact)) {
            throw new \InvalidArgumentException('non-nullable freight_bill_to_contact cannot be null');
        }
        $this->container['freight_bill_to_contact'] = $freight_bill_to_contact;

        return $this;
    }

    /**
     * Gets freight_bill_to_account
     *
     * @return string|null
     */
    public function getFreightBillToAccount()
    {
        return $this->container['freight_bill_to_account'];
    }

    /**
     * Sets freight_bill_to_account
     *
     * @param string|null $freight_bill_to_account Account number that is used to pay shipping costs for the order on the shipment.
     *
     * @return self
     */
    public function setFreightBillToAccount($freight_bill_to_account)
    {
        if (is_null($freight_bill_to_account)) {
            throw new \InvalidArgumentException('non-nullable freight_bill_to_account cannot be null');
        }
        if ((mb_strlen($freight_bill_to_account) > 50)) {
            throw new \InvalidArgumentException('invalid length for $freight_bill_to_account when calling OutboundShipmentDTO., must be smaller than or equal to 50.');
        }

        $this->container['freight_bill_to_account'] = $freight_bill_to_account;

        return $this;
    }

    /**
     * Gets freight_bill_to_address
     *
     * @return \BeLenka\Deposco\Model\AddressDTO|null
     */
    public function getFreightBillToAddress()
    {
        return $this->container['freight_bill_to_address'];
    }

    /**
     * Sets freight_bill_to_address
     *
     * @param \BeLenka\Deposco\Model\AddressDTO|null $freight_bill_to_address freight_bill_to_address
     *
     * @return self
     */
    public function setFreightBillToAddress($freight_bill_to_address)
    {
        if (is_null($freight_bill_to_address)) {
            throw new \InvalidArgumentException('non-nullable freight_bill_to_address cannot be null');
        }
        $this->container['freight_bill_to_address'] = $freight_bill_to_address;

        return $this;
    }

    /**
     * Gets deliver_to_contact
     *
     * @return \BeLenka\Deposco\Model\AddressContactDTO|null
     */
    public function getDeliverToContact()
    {
        return $this->container['deliver_to_contact'];
    }

    /**
     * Sets deliver_to_contact
     *
     * @param \BeLenka\Deposco\Model\AddressContactDTO|null $deliver_to_contact deliver_to_contact
     *
     * @return self
     */
    public function setDeliverToContact($deliver_to_contact)
    {
        if (is_null($deliver_to_contact)) {
            throw new \InvalidArgumentException('non-nullable deliver_to_contact cannot be null');
        }
        $this->container['deliver_to_contact'] = $deliver_to_contact;

        return $this;
    }

    /**
     * Gets deliver_to_address
     *
     * @return \BeLenka\Deposco\Model\AddressDTO|null
     */
    public function getDeliverToAddress()
    {
        return $this->container['deliver_to_address'];
    }

    /**
     * Sets deliver_to_address
     *
     * @param \BeLenka\Deposco\Model\AddressDTO|null $deliver_to_address deliver_to_address
     *
     * @return self
     */
    public function setDeliverToAddress($deliver_to_address)
    {
        if (is_null($deliver_to_address)) {
            throw new \InvalidArgumentException('non-nullable deliver_to_address cannot be null');
        }
        $this->container['deliver_to_address'] = $deliver_to_address;

        return $this;
    }

    /**
     * Gets shipment_dates
     *
     * @return \BeLenka\Deposco\Model\BaseShipmentDTOShipmentDates|null
     */
    public function getShipmentDates()
    {
        return $this->container['shipment_dates'];
    }

    /**
     * Sets shipment_dates
     *
     * @param \BeLenka\Deposco\Model\BaseShipmentDTOShipmentDates|null $shipment_dates shipment_dates
     *
     * @return self
     */
    public function setShipmentDates($shipment_dates)
    {
        if (is_null($shipment_dates)) {
            throw new \InvalidArgumentException('non-nullable shipment_dates cannot be null');
        }
        $this->container['shipment_dates'] = $shipment_dates;

        return $this;
    }

    /**
     * Gets total_weight
     *
     * @return \BeLenka\Deposco\Model\BaseShipmentDTOTotalWeight|null
     */
    public function getTotalWeight()
    {
        return $this->container['total_weight'];
    }

    /**
     * Sets total_weight
     *
     * @param \BeLenka\Deposco\Model\BaseShipmentDTOTotalWeight|null $total_weight total_weight
     *
     * @return self
     */
    public function setTotalWeight($total_weight)
    {
        if (is_null($total_weight)) {
            throw new \InvalidArgumentException('non-nullable total_weight cannot be null');
        }
        $this->container['total_weight'] = $total_weight;

        return $this;
    }

    /**
     * Gets chargeable_weight
     *
     * @return \BeLenka\Deposco\Model\BaseShipmentDTOChargeableWeight|null
     */
    public function getChargeableWeight()
    {
        return $this->container['chargeable_weight'];
    }

    /**
     * Sets chargeable_weight
     *
     * @param \BeLenka\Deposco\Model\BaseShipmentDTOChargeableWeight|null $chargeable_weight chargeable_weight
     *
     * @return self
     */
    public function setChargeableWeight($chargeable_weight)
    {
        if (is_null($chargeable_weight)) {
            throw new \InvalidArgumentException('non-nullable chargeable_weight cannot be null');
        }
        $this->container['chargeable_weight'] = $chargeable_weight;

        return $this;
    }

    /**
     * Gets total_cube
     *
     * @return \BeLenka\Deposco\Model\Measurement|null
     */
    public function getTotalCube()
    {
        return $this->container['total_cube'];
    }

    /**
     * Sets total_cube
     *
     * @param \BeLenka\Deposco\Model\Measurement|null $total_cube total_cube
     *
     * @return self
     */
    public function setTotalCube($total_cube)
    {
        if (is_null($total_cube)) {
            throw new \InvalidArgumentException('non-nullable total_cube cannot be null');
        }
        $this->container['total_cube'] = $total_cube;

        return $this;
    }

    /**
     * Gets lpn_number
     *
     * @return string|null
     */
    public function getLpnNumber()
    {
        return $this->container['lpn_number'];
    }

    /**
     * Sets lpn_number
     *
     * @param string|null $lpn_number Container number of the container for the shipment. For freight shipping scenarios, this is the reference number for the trailer.
     *
     * @return self
     */
    public function setLpnNumber($lpn_number)
    {
        if (is_null($lpn_number)) {
            throw new \InvalidArgumentException('non-nullable lpn_number cannot be null');
        }
        if ((mb_strlen($lpn_number) > 30)) {
            throw new \InvalidArgumentException('invalid length for $lpn_number when calling OutboundShipmentDTO., must be smaller than or equal to 30.');
        }

        $this->container['lpn_number'] = $lpn_number;

        return $this;
    }

    /**
     * Gets container_type
     *
     * @return string|null
     */
    public function getContainerType()
    {
        return $this->container['container_type'];
    }

    /**
     * Sets container_type
     *
     * @param string|null $container_type General shipment attribute.
     *
     * @return self
     */
    public function setContainerType($container_type)
    {
        if (is_null($container_type)) {
            throw new \InvalidArgumentException('non-nullable container_type cannot be null');
        }
        if ((mb_strlen($container_type) > 50)) {
            throw new \InvalidArgumentException('invalid length for $container_type when calling OutboundShipmentDTO., must be smaller than or equal to 50.');
        }

        $this->container['container_type'] = $container_type;

        return $this;
    }

    /**
     * Gets total_pieces
     *
     * @return int|null
     */
    public function getTotalPieces()
    {
        return $this->container['total_pieces'];
    }

    /**
     * Sets total_pieces
     *
     * @param int|null $total_pieces Total number of units of stock in the shipment.
     *
     * @return self
     */
    public function setTotalPieces($total_pieces)
    {
        if (is_null($total_pieces)) {
            throw new \InvalidArgumentException('non-nullable total_pieces cannot be null');
        }

        if (($total_pieces > 0)) {
            throw new \InvalidArgumentException('invalid value for $total_pieces when calling OutboundShipmentDTO., must be smaller than or equal to 10000000.');
        }
        if (($total_pieces < 0)) {
            throw new \InvalidArgumentException('invalid value for $total_pieces when calling OutboundShipmentDTO., must be bigger than or equal to 0.');
        }

        $this->container['total_pieces'] = $total_pieces;

        return $this;
    }

    /**
     * Gets total_packages
     *
     * @return int|null
     */
    public function getTotalPackages()
    {
        return $this->container['total_packages'];
    }

    /**
     * Sets total_packages
     *
     * @param int|null $total_packages Total number of LPNs in the shipment.
     *
     * @return self
     */
    public function setTotalPackages($total_packages)
    {
        if (is_null($total_packages)) {
            throw new \InvalidArgumentException('non-nullable total_packages cannot be null');
        }

        if (($total_packages > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $total_packages when calling OutboundShipmentDTO., must be smaller than or equal to 2147483647.');
        }
        if (($total_packages < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $total_packages when calling OutboundShipmentDTO., must be bigger than or equal to -2147483648.');
        }

        $this->container['total_packages'] = $total_packages;

        return $this;
    }

    /**
     * Gets full_case_packages
     *
     * @return int|null
     */
    public function getFullCasePackages()
    {
        return $this->container['full_case_packages'];
    }

    /**
     * Sets full_case_packages
     *
     * @param int|null $full_case_packages General shipment attribute.
     *
     * @return self
     */
    public function setFullCasePackages($full_case_packages)
    {
        if (is_null($full_case_packages)) {
            throw new \InvalidArgumentException('non-nullable full_case_packages cannot be null');
        }

        if (($full_case_packages > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $full_case_packages when calling OutboundShipmentDTO., must be smaller than or equal to 2147483647.');
        }
        if (($full_case_packages < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $full_case_packages when calling OutboundShipmentDTO., must be bigger than or equal to -2147483648.');
        }

        $this->container['full_case_packages'] = $full_case_packages;

        return $this;
    }

    /**
     * Gets split_case_packages
     *
     * @return int|null
     */
    public function getSplitCasePackages()
    {
        return $this->container['split_case_packages'];
    }

    /**
     * Sets split_case_packages
     *
     * @param int|null $split_case_packages General shipment attribute.
     *
     * @return self
     */
    public function setSplitCasePackages($split_case_packages)
    {
        if (is_null($split_case_packages)) {
            throw new \InvalidArgumentException('non-nullable split_case_packages cannot be null');
        }

        if (($split_case_packages > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $split_case_packages when calling OutboundShipmentDTO., must be smaller than or equal to 2147483647.');
        }
        if (($split_case_packages < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $split_case_packages when calling OutboundShipmentDTO., must be bigger than or equal to -2147483648.');
        }

        $this->container['split_case_packages'] = $split_case_packages;

        return $this;
    }

    /**
     * Gets full_case_pick_complete
     *
     * @return bool|null
     */
    public function getFullCasePickComplete()
    {
        return $this->container['full_case_pick_complete'];
    }

    /**
     * Sets full_case_pick_complete
     *
     * @param bool|null $full_case_pick_complete General shipment attribute.
     *
     * @return self
     */
    public function setFullCasePickComplete($full_case_pick_complete)
    {
        if (is_null($full_case_pick_complete)) {
            throw new \InvalidArgumentException('non-nullable full_case_pick_complete cannot be null');
        }
        $this->container['full_case_pick_complete'] = $full_case_pick_complete;

        return $this;
    }

    /**
     * Gets split_case_pick_complete
     *
     * @return bool|null
     */
    public function getSplitCasePickComplete()
    {
        return $this->container['split_case_pick_complete'];
    }

    /**
     * Sets split_case_pick_complete
     *
     * @param bool|null $split_case_pick_complete General shipment attribute.
     *
     * @return self
     */
    public function setSplitCasePickComplete($split_case_pick_complete)
    {
        if (is_null($split_case_pick_complete)) {
            throw new \InvalidArgumentException('non-nullable split_case_pick_complete cannot be null');
        }
        $this->container['split_case_pick_complete'] = $split_case_pick_complete;

        return $this;
    }

    /**
     * Gets driver_pallet_count_flag
     *
     * @return bool|null
     */
    public function getDriverPalletCountFlag()
    {
        return $this->container['driver_pallet_count_flag'];
    }

    /**
     * Sets driver_pallet_count_flag
     *
     * @param bool|null $driver_pallet_count_flag General shipment attribute.
     *
     * @return self
     */
    public function setDriverPalletCountFlag($driver_pallet_count_flag)
    {
        if (is_null($driver_pallet_count_flag)) {
            throw new \InvalidArgumentException('non-nullable driver_pallet_count_flag cannot be null');
        }
        $this->container['driver_pallet_count_flag'] = $driver_pallet_count_flag;

        return $this;
    }

    /**
     * Gets shipping_costs
     *
     * @return \BeLenka\Deposco\Model\BaseShipmentDTOShippingCosts|null
     */
    public function getShippingCosts()
    {
        return $this->container['shipping_costs'];
    }

    /**
     * Sets shipping_costs
     *
     * @param \BeLenka\Deposco\Model\BaseShipmentDTOShippingCosts|null $shipping_costs shipping_costs
     *
     * @return self
     */
    public function setShippingCosts($shipping_costs)
    {
        if (is_null($shipping_costs)) {
            throw new \InvalidArgumentException('non-nullable shipping_costs cannot be null');
        }
        $this->container['shipping_costs'] = $shipping_costs;

        return $this;
    }

    /**
     * Gets bol_number
     *
     * @return string|null
     */
    public function getBolNumber()
    {
        return $this->container['bol_number'];
    }

    /**
     * Sets bol_number
     *
     * @param string|null $bol_number Bill of lading (BOL) number for the shipment. A BOL is a legal document that details the type, quantity, and ownership of the goods, as well as their destination.
     *
     * @return self
     */
    public function setBolNumber($bol_number)
    {
        if (is_null($bol_number)) {
            throw new \InvalidArgumentException('non-nullable bol_number cannot be null');
        }
        if ((mb_strlen($bol_number) > 17)) {
            throw new \InvalidArgumentException('invalid length for $bol_number when calling OutboundShipmentDTO., must be smaller than or equal to 17.');
        }

        $this->container['bol_number'] = $bol_number;

        return $this;
    }

    /**
     * Gets handling_instructions
     *
     * @return string|null
     */
    public function getHandlingInstructions()
    {
        return $this->container['handling_instructions'];
    }

    /**
     * Sets handling_instructions
     *
     * @param string|null $handling_instructions Standard Carrier Alpha Code (SCAC) for the shipment. A SCAC is a unique 2 to 4-letter code used to identify carriers and transportation companies.
     *
     * @return self
     */
    public function setHandlingInstructions($handling_instructions)
    {
        if (is_null($handling_instructions)) {
            throw new \InvalidArgumentException('non-nullable handling_instructions cannot be null');
        }
        if ((mb_strlen($handling_instructions) > 250)) {
            throw new \InvalidArgumentException('invalid length for $handling_instructions when calling OutboundShipmentDTO., must be smaller than or equal to 250.');
        }

        $this->container['handling_instructions'] = $handling_instructions;

        return $this;
    }

    /**
     * Gets authorization_code
     *
     * @return string|null
     */
    public function getAuthorizationCode()
    {
        return $this->container['authorization_code'];
    }

    /**
     * Sets authorization_code
     *
     * @param string|null $authorization_code Number for the seal on the inbound trailer for freight shipping scenarios.
     *
     * @return self
     */
    public function setAuthorizationCode($authorization_code)
    {
        if (is_null($authorization_code)) {
            throw new \InvalidArgumentException('non-nullable authorization_code cannot be null');
        }
        if ((mb_strlen($authorization_code) > 200)) {
            throw new \InvalidArgumentException('invalid length for $authorization_code when calling OutboundShipmentDTO., must be smaller than or equal to 200.');
        }

        $this->container['authorization_code'] = $authorization_code;

        return $this;
    }

    /**
     * Gets trailer_loaded_by
     *
     * @return string|null
     */
    public function getTrailerLoadedBy()
    {
        return $this->container['trailer_loaded_by'];
    }

    /**
     * Sets trailer_loaded_by
     *
     * @param string|null $trailer_loaded_by General shipment attribute.
     *
     * @return self
     */
    public function setTrailerLoadedBy($trailer_loaded_by)
    {
        if (is_null($trailer_loaded_by)) {
            throw new \InvalidArgumentException('non-nullable trailer_loaded_by cannot be null');
        }
        if ((mb_strlen($trailer_loaded_by) > 50)) {
            throw new \InvalidArgumentException('invalid length for $trailer_loaded_by when calling OutboundShipmentDTO., must be smaller than or equal to 50.');
        }

        $this->container['trailer_loaded_by'] = $trailer_loaded_by;

        return $this;
    }

    /**
     * Gets shipper_freight_count_flag
     *
     * @return bool|null
     */
    public function getShipperFreightCountFlag()
    {
        return $this->container['shipper_freight_count_flag'];
    }

    /**
     * Sets shipper_freight_count_flag
     *
     * @param bool|null $shipper_freight_count_flag General shipment attribute.
     *
     * @return self
     */
    public function setShipperFreightCountFlag($shipper_freight_count_flag)
    {
        if (is_null($shipper_freight_count_flag)) {
            throw new \InvalidArgumentException('non-nullable shipper_freight_count_flag cannot be null');
        }
        $this->container['shipper_freight_count_flag'] = $shipper_freight_count_flag;

        return $this;
    }

    /**
     * Gets driver_piece_count_flag
     *
     * @return bool|null
     */
    public function getDriverPieceCountFlag()
    {
        return $this->container['driver_piece_count_flag'];
    }

    /**
     * Sets driver_piece_count_flag
     *
     * @param bool|null $driver_piece_count_flag General shipment attribute.
     *
     * @return self
     */
    public function setDriverPieceCountFlag($driver_piece_count_flag)
    {
        if (is_null($driver_piece_count_flag)) {
            throw new \InvalidArgumentException('non-nullable driver_piece_count_flag cannot be null');
        }
        $this->container['driver_piece_count_flag'] = $driver_piece_count_flag;

        return $this;
    }

    /**
     * Gets returns
     *
     * @return \BeLenka\Deposco\Model\BaseShipmentDTOReturns|null
     */
    public function getReturns()
    {
        return $this->container['returns'];
    }

    /**
     * Sets returns
     *
     * @param \BeLenka\Deposco\Model\BaseShipmentDTOReturns|null $returns returns
     *
     * @return self
     */
    public function setReturns($returns)
    {
        if (is_null($returns)) {
            throw new \InvalidArgumentException('non-nullable returns cannot be null');
        }
        $this->container['returns'] = $returns;

        return $this;
    }

    /**
     * Gets residential
     *
     * @return bool|null
     */
    public function getResidential()
    {
        return $this->container['residential'];
    }

    /**
     * Sets residential
     *
     * @param bool|null $residential Used when UPS is the shipping carrier to identify whether the address is a residential address. May be set by the address validation process.
     *
     * @return self
     */
    public function setResidential($residential)
    {
        if (is_null($residential)) {
            throw new \InvalidArgumentException('non-nullable residential cannot be null');
        }
        $this->container['residential'] = $residential;

        return $this;
    }

    /**
     * Gets home_delivery
     *
     * @return bool|null
     */
    public function getHomeDelivery()
    {
        return $this->container['home_delivery'];
    }

    /**
     * Sets home_delivery
     *
     * @param bool|null $home_delivery Used when FedEx is the shipping carrier to specify whether FedEx Home Delivery is required.
     *
     * @return self
     */
    public function setHomeDelivery($home_delivery)
    {
        if (is_null($home_delivery)) {
            throw new \InvalidArgumentException('non-nullable home_delivery cannot be null');
        }
        $this->container['home_delivery'] = $home_delivery;

        return $this;
    }

    /**
     * Gets saturday_delivery
     *
     * @return bool|null
     */
    public function getSaturdayDelivery()
    {
        return $this->container['saturday_delivery'];
    }

    /**
     * Sets saturday_delivery
     *
     * @param bool|null $saturday_delivery Used when UPS is the shipping carrier to specify whether the customer is requesting Saturday delivery for the order.
     *
     * @return self
     */
    public function setSaturdayDelivery($saturday_delivery)
    {
        if (is_null($saturday_delivery)) {
            throw new \InvalidArgumentException('non-nullable saturday_delivery cannot be null');
        }
        $this->container['saturday_delivery'] = $saturday_delivery;

        return $this;
    }

    /**
     * Gets delivery_confirmation
     *
     * @return int|null
     */
    public function getDeliveryConfirmation()
    {
        return $this->container['delivery_confirmation'];
    }

    /**
     * Sets delivery_confirmation
     *
     * @param int|null $delivery_confirmation Provide a null value if no signature is required. Set to `2` if a signature is required. Use of other values depends on the shipping carrier.
     *
     * @return self
     */
    public function setDeliveryConfirmation($delivery_confirmation)
    {
        if (is_null($delivery_confirmation)) {
            throw new \InvalidArgumentException('non-nullable delivery_confirmation cannot be null');
        }

        if (($delivery_confirmation > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $delivery_confirmation when calling OutboundShipmentDTO., must be smaller than or equal to 2147483647.');
        }
        if (($delivery_confirmation < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $delivery_confirmation when calling OutboundShipmentDTO., must be bigger than or equal to -2147483648.');
        }

        $this->container['delivery_confirmation'] = $delivery_confirmation;

        return $this;
    }

    /**
     * Gets hub_id
     *
     * @return string|null
     */
    public function getHubId()
    {
        return $this->container['hub_id'];
    }

    /**
     * Sets hub_id
     *
     * @param string|null $hub_id Used when a FedEx SmartPost shipping service is assigned to the order to identify the associated FedEx SmartPost hub.
     *
     * @return self
     */
    public function setHubId($hub_id)
    {
        if (is_null($hub_id)) {
            throw new \InvalidArgumentException('non-nullable hub_id cannot be null');
        }
        if ((mb_strlen($hub_id) > 10)) {
            throw new \InvalidArgumentException('invalid length for $hub_id when calling OutboundShipmentDTO., must be smaller than or equal to 10.');
        }

        $this->container['hub_id'] = $hub_id;

        return $this;
    }

    /**
     * Gets cod_amount
     *
     * @return int|null
     */
    public function getCodAmount()
    {
        return $this->container['cod_amount'];
    }

    /**
     * Sets cod_amount
     *
     * @param int|null $cod_amount Amount to collect on delivery for COD shipments.
     *
     * @return self
     */
    public function setCodAmount($cod_amount)
    {
        if (is_null($cod_amount)) {
            throw new \InvalidArgumentException('non-nullable cod_amount cannot be null');
        }

        if (($cod_amount > 0)) {
            throw new \InvalidArgumentException('invalid value for $cod_amount when calling OutboundShipmentDTO., must be smaller than or equal to 10000000.');
        }
        if (($cod_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $cod_amount when calling OutboundShipmentDTO., must be bigger than or equal to 0.');
        }

        $this->container['cod_amount'] = $cod_amount;

        return $this;
    }

    /**
     * Gets ship_mode
     *
     * @return string|null
     */
    public function getShipMode()
    {
        return $this->container['ship_mode'];
    }

    /**
     * Sets ship_mode
     *
     * @param string|null $ship_mode Mode of transportation for the shipment.
     *
     * @return self
     */
    public function setShipMode($ship_mode)
    {
        if (is_null($ship_mode)) {
            throw new \InvalidArgumentException('non-nullable ship_mode cannot be null');
        }
        $allowedValues = $this->getShipModeAllowableValues();
        if (!in_array($ship_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ship_mode', must be one of '%s'",
                    $ship_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ship_mode'] = $ship_mode;

        return $this;
    }

    /**
     * Gets drop_ship
     *
     * @return bool|null
     */
    public function getDropShip()
    {
        return $this->container['drop_ship'];
    }

    /**
     * Sets drop_ship
     *
     * @param bool|null $drop_ship Whether the shipment is associated with a dropship order, where the order is fulfilled by the company when the company is serving as a supplier for some external company. Dropship fulfillment requires custom configuration in Deposco.
     *
     * @return self
     */
    public function setDropShip($drop_ship)
    {
        if (is_null($drop_ship)) {
            throw new \InvalidArgumentException('non-nullable drop_ship cannot be null');
        }
        $this->container['drop_ship'] = $drop_ship;

        return $this;
    }

    /**
     * Gets complete
     *
     * @return bool|null
     */
    public function getComplete()
    {
        return $this->container['complete'];
    }

    /**
     * Sets complete
     *
     * @param bool|null $complete General shipment attribute.
     *
     * @return self
     */
    public function setComplete($complete)
    {
        if (is_null($complete)) {
            throw new \InvalidArgumentException('non-nullable complete cannot be null');
        }
        $this->container['complete'] = $complete;

        return $this;
    }

    /**
     * Gets correct
     *
     * @return bool|null
     */
    public function getCorrect()
    {
        return $this->container['correct'];
    }

    /**
     * Sets correct
     *
     * @param bool|null $correct General shipment attribute.
     *
     * @return self
     */
    public function setCorrect($correct)
    {
        if (is_null($correct)) {
            throw new \InvalidArgumentException('non-nullable correct cannot be null');
        }
        $this->container['correct'] = $correct;

        return $this;
    }

    /**
     * Gets on_time
     *
     * @return bool|null
     */
    public function getOnTime()
    {
        return $this->container['on_time'];
    }

    /**
     * Sets on_time
     *
     * @param bool|null $on_time General shipment attribute.
     *
     * @return self
     */
    public function setOnTime($on_time)
    {
        if (is_null($on_time)) {
            throw new \InvalidArgumentException('non-nullable on_time cannot be null');
        }
        $this->container['on_time'] = $on_time;

        return $this;
    }

    /**
     * Gets cust_check_flag
     *
     * @return bool|null
     */
    public function getCustCheckFlag()
    {
        return $this->container['cust_check_flag'];
    }

    /**
     * Sets cust_check_flag
     *
     * @param bool|null $cust_check_flag General shipment attribute.
     *
     * @return self
     */
    public function setCustCheckFlag($cust_check_flag)
    {
        if (is_null($cust_check_flag)) {
            throw new \InvalidArgumentException('non-nullable cust_check_flag cannot be null');
        }
        $this->container['cust_check_flag'] = $cust_check_flag;

        return $this;
    }

    /**
     * Gets master_flag
     *
     * @return bool|null
     */
    public function getMasterFlag()
    {
        return $this->container['master_flag'];
    }

    /**
     * Sets master_flag
     *
     * @param bool|null $master_flag General shipment attribute.
     *
     * @return self
     */
    public function setMasterFlag($master_flag)
    {
        if (is_null($master_flag)) {
            throw new \InvalidArgumentException('non-nullable master_flag cannot be null');
        }
        $this->container['master_flag'] = $master_flag;

        return $this;
    }

    /**
     * Gets ship_from_fob_flag
     *
     * @return bool|null
     */
    public function getShipFromFobFlag()
    {
        return $this->container['ship_from_fob_flag'];
    }

    /**
     * Sets ship_from_fob_flag
     *
     * @param bool|null $ship_from_fob_flag General shipment attribute.
     *
     * @return self
     */
    public function setShipFromFobFlag($ship_from_fob_flag)
    {
        if (is_null($ship_from_fob_flag)) {
            throw new \InvalidArgumentException('non-nullable ship_from_fob_flag cannot be null');
        }
        $this->container['ship_from_fob_flag'] = $ship_from_fob_flag;

        return $this;
    }

    /**
     * Gets ship_to_fob_flag
     *
     * @return bool|null
     */
    public function getShipToFobFlag()
    {
        return $this->container['ship_to_fob_flag'];
    }

    /**
     * Sets ship_to_fob_flag
     *
     * @param bool|null $ship_to_fob_flag General shipment attribute.
     *
     * @return self
     */
    public function setShipToFobFlag($ship_to_fob_flag)
    {
        if (is_null($ship_to_fob_flag)) {
            throw new \InvalidArgumentException('non-nullable ship_to_fob_flag cannot be null');
        }
        $this->container['ship_to_fob_flag'] = $ship_to_fob_flag;

        return $this;
    }

    /**
     * Gets total_distance
     *
     * @return int|null
     */
    public function getTotalDistance()
    {
        return $this->container['total_distance'];
    }

    /**
     * Sets total_distance
     *
     * @param int|null $total_distance General shipment attribute.
     *
     * @return self
     */
    public function setTotalDistance($total_distance)
    {
        if (is_null($total_distance)) {
            throw new \InvalidArgumentException('non-nullable total_distance cannot be null');
        }

        if (($total_distance > 0)) {
            throw new \InvalidArgumentException('invalid value for $total_distance when calling OutboundShipmentDTO., must be smaller than or equal to 10000000.');
        }
        if (($total_distance < 0)) {
            throw new \InvalidArgumentException('invalid value for $total_distance when calling OutboundShipmentDTO., must be bigger than or equal to 0.');
        }

        $this->container['total_distance'] = $total_distance;

        return $this;
    }

    /**
     * Gets total_miles
     *
     * @return int|null
     */
    public function getTotalMiles()
    {
        return $this->container['total_miles'];
    }

    /**
     * Sets total_miles
     *
     * @param int|null $total_miles General shipment attribute.
     *
     * @return self
     */
    public function setTotalMiles($total_miles)
    {
        if (is_null($total_miles)) {
            throw new \InvalidArgumentException('non-nullable total_miles cannot be null');
        }
        $this->container['total_miles'] = $total_miles;

        return $this;
    }

    /**
     * Gets notification_code1
     *
     * @return string|null
     */
    public function getNotificationCode1()
    {
        return $this->container['notification_code1'];
    }

    /**
     * Sets notification_code1
     *
     * @param string|null $notification_code1 Reserved for future use.
     *
     * @return self
     */
    public function setNotificationCode1($notification_code1)
    {
        if (is_null($notification_code1)) {
            throw new \InvalidArgumentException('non-nullable notification_code1 cannot be null');
        }
        if ((mb_strlen($notification_code1) > 200)) {
            throw new \InvalidArgumentException('invalid length for $notification_code1 when calling OutboundShipmentDTO., must be smaller than or equal to 200.');
        }

        $this->container['notification_code1'] = $notification_code1;

        return $this;
    }

    /**
     * Gets notification_code2
     *
     * @return string|null
     */
    public function getNotificationCode2()
    {
        return $this->container['notification_code2'];
    }

    /**
     * Sets notification_code2
     *
     * @param string|null $notification_code2 Reserved for future use.
     *
     * @return self
     */
    public function setNotificationCode2($notification_code2)
    {
        if (is_null($notification_code2)) {
            throw new \InvalidArgumentException('non-nullable notification_code2 cannot be null');
        }
        if ((mb_strlen($notification_code2) > 10)) {
            throw new \InvalidArgumentException('invalid length for $notification_code2 when calling OutboundShipmentDTO., must be smaller than or equal to 10.');
        }

        $this->container['notification_code2'] = $notification_code2;

        return $this;
    }

    /**
     * Gets notification_code3
     *
     * @return string|null
     */
    public function getNotificationCode3()
    {
        return $this->container['notification_code3'];
    }

    /**
     * Sets notification_code3
     *
     * @param string|null $notification_code3 Reserved for future use.
     *
     * @return self
     */
    public function setNotificationCode3($notification_code3)
    {
        if (is_null($notification_code3)) {
            throw new \InvalidArgumentException('non-nullable notification_code3 cannot be null');
        }
        if ((mb_strlen($notification_code3) > 10)) {
            throw new \InvalidArgumentException('invalid length for $notification_code3 when calling OutboundShipmentDTO., must be smaller than or equal to 10.');
        }

        $this->container['notification_code3'] = $notification_code3;

        return $this;
    }

    /**
     * Gets verbal_confirmation_phone_number
     *
     * @return string|null
     */
    public function getVerbalConfirmationPhoneNumber()
    {
        return $this->container['verbal_confirmation_phone_number'];
    }

    /**
     * Sets verbal_confirmation_phone_number
     *
     * @param string|null $verbal_confirmation_phone_number Reserved for future use.
     *
     * @return self
     */
    public function setVerbalConfirmationPhoneNumber($verbal_confirmation_phone_number)
    {
        if (is_null($verbal_confirmation_phone_number)) {
            throw new \InvalidArgumentException('non-nullable verbal_confirmation_phone_number cannot be null');
        }
        if ((mb_strlen($verbal_confirmation_phone_number) > 45)) {
            throw new \InvalidArgumentException('invalid length for $verbal_confirmation_phone_number when calling OutboundShipmentDTO., must be smaller than or equal to 45.');
        }

        $this->container['verbal_confirmation_phone_number'] = $verbal_confirmation_phone_number;

        return $this;
    }

    /**
     * Gets integration_source
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getIntegrationSource()
    {
        return $this->container['integration_source'];
    }

    /**
     * Sets integration_source
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $integration_source integration_source
     *
     * @return self
     */
    public function setIntegrationSource($integration_source)
    {
        if (is_null($integration_source)) {
            array_push($this->openAPINullablesSetToNull, 'integration_source');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('integration_source', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['integration_source'] = $integration_source;

        return $this;
    }

    /**
     * Gets integration_point
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getIntegrationPoint()
    {
        return $this->container['integration_point'];
    }

    /**
     * Sets integration_point
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $integration_point integration_point
     *
     * @return self
     */
    public function setIntegrationPoint($integration_point)
    {
        if (is_null($integration_point)) {
            throw new \InvalidArgumentException('non-nullable integration_point cannot be null');
        }
        $this->container['integration_point'] = $integration_point;

        return $this;
    }

    /**
     * Gets import_reference
     *
     * @return string|null
     */
    public function getImportReference()
    {
        return $this->container['import_reference'];
    }

    /**
     * Sets import_reference
     *
     * @param string|null $import_reference Reference number for the order that is associated with the shipment when the order was imported into Deposco.
     *
     * @return self
     */
    public function setImportReference($import_reference)
    {
        if (is_null($import_reference)) {
            throw new \InvalidArgumentException('non-nullable import_reference cannot be null');
        }
        if ((mb_strlen($import_reference) > 50)) {
            throw new \InvalidArgumentException('invalid length for $import_reference when calling OutboundShipmentDTO., must be smaller than or equal to 50.');
        }

        $this->container['import_reference'] = $import_reference;

        return $this;
    }

    /**
     * Gets export_reference
     *
     * @return string|null
     */
    public function getExportReference()
    {
        return $this->container['export_reference'];
    }

    /**
     * Sets export_reference
     *
     * @param string|null $export_reference Reference number for the order that is associated with the shipment when the order was exported from Deposco to another system.
     *
     * @return self
     */
    public function setExportReference($export_reference)
    {
        if (is_null($export_reference)) {
            throw new \InvalidArgumentException('non-nullable export_reference cannot be null');
        }
        if ((mb_strlen($export_reference) > 50)) {
            throw new \InvalidArgumentException('invalid length for $export_reference when calling OutboundShipmentDTO., must be smaller than or equal to 50.');
        }

        $this->container['export_reference'] = $export_reference;

        return $this;
    }

    /**
     * Gets other_reference_number
     *
     * @return string|null
     */
    public function getOtherReferenceNumber()
    {
        return $this->container['other_reference_number'];
    }

    /**
     * Sets other_reference_number
     *
     * @param string|null $other_reference_number Additional reference number for the shipment.
     *
     * @return self
     */
    public function setOtherReferenceNumber($other_reference_number)
    {
        if (is_null($other_reference_number)) {
            throw new \InvalidArgumentException('non-nullable other_reference_number cannot be null');
        }
        if ((mb_strlen($other_reference_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $other_reference_number when calling OutboundShipmentDTO., must be smaller than or equal to 50.');
        }

        $this->container['other_reference_number'] = $other_reference_number;

        return $this;
    }

    /**
     * Gets channels
     *
     * @return \BeLenka\Deposco\Model\ChannelDTO[]|null
     */
    public function getChannels()
    {
        return $this->container['channels'];
    }

    /**
     * Sets channels
     *
     * @param \BeLenka\Deposco\Model\ChannelDTO[]|null $channels Array of channel cross-references for the shipment.
     *
     * @return self
     */
    public function setChannels($channels)
    {
        if (is_null($channels)) {
            throw new \InvalidArgumentException('non-nullable channels cannot be null');
        }
        $this->container['channels'] = $channels;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return \BeLenka\Deposco\Model\CustomFieldDTO[]|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param \BeLenka\Deposco\Model\CustomFieldDTO[]|null $custom_fields Array of custom fields for the shipment.
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {
        if (is_null($custom_fields)) {
            throw new \InvalidArgumentException('non-nullable custom_fields cannot be null');
        }
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime|null $created_date Date and time that the shipment was created.
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets updated_date
     *
     * @return \DateTime|null
     */
    public function getUpdatedDate()
    {
        return $this->container['updated_date'];
    }

    /**
     * Sets updated_date
     *
     * @param \DateTime|null $updated_date Date and time that the shipment was last updated.
     *
     * @return self
     */
    public function setUpdatedDate($updated_date)
    {
        if (is_null($updated_date)) {
            throw new \InvalidArgumentException('non-nullable updated_date cannot be null');
        }
        $this->container['updated_date'] = $updated_date;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            throw new \InvalidArgumentException('non-nullable created_by cannot be null');
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $updated_by updated_by
     *
     * @return self
     */
    public function setUpdatedBy($updated_by)
    {
        if (is_null($updated_by)) {
            throw new \InvalidArgumentException('non-nullable updated_by cannot be null');
        }
        $this->container['updated_by'] = $updated_by;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Type of shipment.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets ship_from_facility
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getShipFromFacility()
    {
        return $this->container['ship_from_facility'];
    }

    /**
     * Sets ship_from_facility
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $ship_from_facility ship_from_facility
     *
     * @return self
     */
    public function setShipFromFacility($ship_from_facility)
    {
        if (is_null($ship_from_facility)) {
            array_push($this->openAPINullablesSetToNull, 'ship_from_facility');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ship_from_facility', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ship_from_facility'] = $ship_from_facility;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Status of the shipment.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets shipment_lines
     *
     * @return \BeLenka\Deposco\Model\OutboundShipmentLineCollectionDTO|null
     */
    public function getShipmentLines()
    {
        return $this->container['shipment_lines'];
    }

    /**
     * Sets shipment_lines
     *
     * @param \BeLenka\Deposco\Model\OutboundShipmentLineCollectionDTO|null $shipment_lines shipment_lines
     *
     * @return self
     */
    public function setShipmentLines($shipment_lines)
    {
        if (is_null($shipment_lines)) {
            throw new \InvalidArgumentException('non-nullable shipment_lines cannot be null');
        }
        $this->container['shipment_lines'] = $shipment_lines;

        return $this;
    }

    /**
     * Gets shipped_containers
     *
     * @return \BeLenka\Deposco\Model\ShippedContainerCollectionDTO|null
     */
    public function getShippedContainers()
    {
        return $this->container['shipped_containers'];
    }

    /**
     * Sets shipped_containers
     *
     * @param \BeLenka\Deposco\Model\ShippedContainerCollectionDTO|null $shipped_containers shipped_containers
     *
     * @return self
     */
    public function setShippedContainers($shipped_containers)
    {
        if (is_null($shipped_containers)) {
            throw new \InvalidArgumentException('non-nullable shipped_containers cannot be null');
        }
        $this->container['shipped_containers'] = $shipped_containers;

        return $this;
    }

    /**
     * Gets trip
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getTrip()
    {
        return $this->container['trip'];
    }

    /**
     * Sets trip
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $trip trip
     *
     * @return self
     */
    public function setTrip($trip)
    {
        if (is_null($trip)) {
            array_push($this->openAPINullablesSetToNull, 'trip');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('trip', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['trip'] = $trip;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


