<?php
/**
 * AsyncResponseDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deposco API
 *
 * Welcome to the Deposco API Reference! The Deposco API enables you to integrate your system with Deposco.  * Integrate a product information system (PIM) by creating and retrieving data for items, packs, UPCs, and kits. * Set up warehouse data by creating facilities, zones, locations, and storage details. * Create inbound orders that can be received and outbound orders that can be fulfilled with Deposco warehouse management processes.  This reference provides details on available operations, endpoints, parameters, schemas, and responses.  Example requests and responses are also available for you to use as a reference. You can copy the examples to use as a starting point for your own requests.  Review the guides to learn how the API is used in common business scenarios such as setting up the warehouse and integrating a Product Information Management (PIM) system.  When you're ready to get started, register for a developer account and then log in to create your application in the developer portal.
 *
 * The version of the OpenAPI document: 2.0.2519
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\Deposco\Model;

use \ArrayAccess;
use \BeLenka\Deposco\ObjectSerializer;

/**
 * AsyncResponseDTO Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AsyncResponseDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AsyncResponseDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'status' => 'string',
        'total_entities' => 'int',
        'successes' => 'int',
        'failures' => 'int',
        'error_message' => 'string',
        'results' => '\BeLenka\Deposco\Model\AsyncDetailDTO[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'status' => null,
        'total_entities' => 'int64',
        'successes' => 'int64',
        'failures' => 'int64',
        'error_message' => null,
        'results' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'status' => false,
        'total_entities' => true,
        'successes' => true,
        'failures' => true,
        'error_message' => true,
        'results' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'total_entities' => 'totalEntities',
        'successes' => 'successes',
        'failures' => 'failures',
        'error_message' => 'errorMessage',
        'results' => 'results'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'total_entities' => 'setTotalEntities',
        'successes' => 'setSuccesses',
        'failures' => 'setFailures',
        'error_message' => 'setErrorMessage',
        'results' => 'setResults'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'total_entities' => 'getTotalEntities',
        'successes' => 'getSuccesses',
        'failures' => 'getFailures',
        'error_message' => 'getErrorMessage',
        'results' => 'getResults'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_SUCCESS = 'Success';
    public const STATUS_PROCESSING = 'Processing';
    public const STATUS_FAILED = 'Failed';
    public const STATUS_PARTIALLY_FAILED = 'Partially Failed';
    public const STATUS_ERROR = 'Error';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_SUCCESS,
            self::STATUS_PROCESSING,
            self::STATUS_FAILED,
            self::STATUS_PARTIALLY_FAILED,
            self::STATUS_ERROR,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('total_entities', $data ?? [], null);
        $this->setIfExists('successes', $data ?? [], null);
        $this->setIfExists('failures', $data ?? [], null);
        $this->setIfExists('error_message', $data ?? [], null);
        $this->setIfExists('results', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['total_entities']) && ($this->container['total_entities'] > -9223372036854775616)) {
            $invalidProperties[] = "invalid value for 'total_entities', must be smaller than or equal to -9223372036854775616.";
        }

        if (!is_null($this->container['total_entities']) && ($this->container['total_entities'] < 9223372036854775616)) {
            $invalidProperties[] = "invalid value for 'total_entities', must be bigger than or equal to 9223372036854775616.";
        }

        if (!is_null($this->container['successes']) && ($this->container['successes'] > -9223372036854775616)) {
            $invalidProperties[] = "invalid value for 'successes', must be smaller than or equal to -9223372036854775616.";
        }

        if (!is_null($this->container['successes']) && ($this->container['successes'] < 9223372036854775616)) {
            $invalidProperties[] = "invalid value for 'successes', must be bigger than or equal to 9223372036854775616.";
        }

        if (!is_null($this->container['failures']) && ($this->container['failures'] > -9223372036854775616)) {
            $invalidProperties[] = "invalid value for 'failures', must be smaller than or equal to -9223372036854775616.";
        }

        if (!is_null($this->container['failures']) && ($this->container['failures'] < 9223372036854775616)) {
            $invalidProperties[] = "invalid value for 'failures', must be bigger than or equal to 9223372036854775616.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Status of the asynchronous request.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets total_entities
     *
     * @return int|null
     */
    public function getTotalEntities()
    {
        return $this->container['total_entities'];
    }

    /**
     * Sets total_entities
     *
     * @param int|null $total_entities Total number of entities that were processed for the request.
     *
     * @return self
     */
    public function setTotalEntities($total_entities)
    {
        if (is_null($total_entities)) {
            array_push($this->openAPINullablesSetToNull, 'total_entities');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_entities', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($total_entities) && ($total_entities > -9223372036854775616)) {
            throw new \InvalidArgumentException('invalid value for $total_entities when calling AsyncResponseDTO., must be smaller than or equal to -9223372036854775616.');
        }
        if (!is_null($total_entities) && ($total_entities < 9223372036854775616)) {
            throw new \InvalidArgumentException('invalid value for $total_entities when calling AsyncResponseDTO., must be bigger than or equal to 9223372036854775616.');
        }

        $this->container['total_entities'] = $total_entities;

        return $this;
    }

    /**
     * Gets successes
     *
     * @return int|null
     */
    public function getSuccesses()
    {
        return $this->container['successes'];
    }

    /**
     * Sets successes
     *
     * @param int|null $successes Total number of entities that were successfully processed for the request.
     *
     * @return self
     */
    public function setSuccesses($successes)
    {
        if (is_null($successes)) {
            array_push($this->openAPINullablesSetToNull, 'successes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('successes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($successes) && ($successes > -9223372036854775616)) {
            throw new \InvalidArgumentException('invalid value for $successes when calling AsyncResponseDTO., must be smaller than or equal to -9223372036854775616.');
        }
        if (!is_null($successes) && ($successes < 9223372036854775616)) {
            throw new \InvalidArgumentException('invalid value for $successes when calling AsyncResponseDTO., must be bigger than or equal to 9223372036854775616.');
        }

        $this->container['successes'] = $successes;

        return $this;
    }

    /**
     * Gets failures
     *
     * @return int|null
     */
    public function getFailures()
    {
        return $this->container['failures'];
    }

    /**
     * Sets failures
     *
     * @param int|null $failures Total number of entities with a processing failure for the request.
     *
     * @return self
     */
    public function setFailures($failures)
    {
        if (is_null($failures)) {
            array_push($this->openAPINullablesSetToNull, 'failures');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('failures', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($failures) && ($failures > -9223372036854775616)) {
            throw new \InvalidArgumentException('invalid value for $failures when calling AsyncResponseDTO., must be smaller than or equal to -9223372036854775616.');
        }
        if (!is_null($failures) && ($failures < 9223372036854775616)) {
            throw new \InvalidArgumentException('invalid value for $failures when calling AsyncResponseDTO., must be bigger than or equal to 9223372036854775616.');
        }

        $this->container['failures'] = $failures;

        return $this;
    }

    /**
     * Gets error_message
     *
     * @return string|null
     */
    public function getErrorMessage()
    {
        return $this->container['error_message'];
    }

    /**
     * Sets error_message
     *
     * @param string|null $error_message Text that describes the error that occurred for the request.
     *
     * @return self
     */
    public function setErrorMessage($error_message)
    {
        if (is_null($error_message)) {
            array_push($this->openAPINullablesSetToNull, 'error_message');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('error_message', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['error_message'] = $error_message;

        return $this;
    }

    /**
     * Gets results
     *
     * @return \BeLenka\Deposco\Model\AsyncDetailDTO[]|null
     */
    public function getResults()
    {
        return $this->container['results'];
    }

    /**
     * Sets results
     *
     * @param \BeLenka\Deposco\Model\AsyncDetailDTO[]|null $results Array of status updates for the asynchronous request.
     *
     * @return self
     */
    public function setResults($results)
    {
        if (is_null($results)) {
            throw new \InvalidArgumentException('non-nullable results cannot be null');
        }
        $this->container['results'] = $results;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


