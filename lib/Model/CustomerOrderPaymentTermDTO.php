<?php
/**
 * CustomerOrderPaymentTermDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deposco API
 *
 * Welcome to the Deposco API Reference! The Deposco API enables you to integrate your system with Deposco.  * Integrate a product information system (PIM) by creating and retrieving data for items, packs, UPCs, and kits. * Set up warehouse data by creating facilities, zones, locations, and storage details. * Create inbound orders that can be received and outbound orders that can be fulfilled with Deposco warehouse management processes.  This reference provides details on available operations, endpoints, parameters, schemas, and responses.  Example requests and responses are also available for you to use as a reference. You can copy the examples to use as a starting point for your own requests.  Review the guides to learn how the API is used in common business scenarios such as setting up the warehouse and integrating a Product Information Management (PIM) system.  When you're ready to get started, register for a developer account and then log in to create your application in the developer portal.
 *
 * The version of the OpenAPI document: 2.0.2519
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\Deposco\Model;

use \ArrayAccess;
use \BeLenka\Deposco\ObjectSerializer;

/**
 * CustomerOrderPaymentTermDTO Class Doc Comment
 *
 * @category Class
 * @description Payment term record for a customer order or order line, which identifies the terms of the payment as well as any associated discounts.
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CustomerOrderPaymentTermDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CustomerOrderPaymentTermDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'self' => '\BeLenka\Deposco\Model\EntityRef',
        'terms_type' => 'string',
        'description' => 'string',
        'terms_basis_date_code' => 'string',
        'net_due_days' => 'int',
        'net_due_date' => '\DateTime',
        'discount_date' => '\DateTime',
        'discount_rate' => 'int',
        'discount_amount' => 'int',
        'discount_percentage' => 'int',
        'discount_due_days' => 'int',
        'created_date' => '\DateTime',
        'updated_date' => '\DateTime',
        'created_by' => '\BeLenka\Deposco\Model\EntityRef',
        'updated_by' => '\BeLenka\Deposco\Model\EntityRef'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'self' => null,
        'terms_type' => null,
        'description' => null,
        'terms_basis_date_code' => null,
        'net_due_days' => 'double',
        'net_due_date' => 'date-time',
        'discount_date' => 'date-time',
        'discount_rate' => 'double',
        'discount_amount' => 'double',
        'discount_percentage' => 'double',
        'discount_due_days' => 'double',
        'created_date' => 'date-time',
        'updated_date' => 'date-time',
        'created_by' => null,
        'updated_by' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'self' => false,
        'terms_type' => false,
        'description' => true,
        'terms_basis_date_code' => true,
        'net_due_days' => false,
        'net_due_date' => false,
        'discount_date' => true,
        'discount_rate' => false,
        'discount_amount' => false,
        'discount_percentage' => false,
        'discount_due_days' => false,
        'created_date' => false,
        'updated_date' => false,
        'created_by' => false,
        'updated_by' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'self' => 'self',
        'terms_type' => 'termsType',
        'description' => 'description',
        'terms_basis_date_code' => 'termsBasisDateCode',
        'net_due_days' => 'netDueDays',
        'net_due_date' => 'netDueDate',
        'discount_date' => 'discountDate',
        'discount_rate' => 'discountRate',
        'discount_amount' => 'discountAmount',
        'discount_percentage' => 'discountPercentage',
        'discount_due_days' => 'discountDueDays',
        'created_date' => 'createdDate',
        'updated_date' => 'updatedDate',
        'created_by' => 'createdBy',
        'updated_by' => 'updatedBy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'self' => 'setSelf',
        'terms_type' => 'setTermsType',
        'description' => 'setDescription',
        'terms_basis_date_code' => 'setTermsBasisDateCode',
        'net_due_days' => 'setNetDueDays',
        'net_due_date' => 'setNetDueDate',
        'discount_date' => 'setDiscountDate',
        'discount_rate' => 'setDiscountRate',
        'discount_amount' => 'setDiscountAmount',
        'discount_percentage' => 'setDiscountPercentage',
        'discount_due_days' => 'setDiscountDueDays',
        'created_date' => 'setCreatedDate',
        'updated_date' => 'setUpdatedDate',
        'created_by' => 'setCreatedBy',
        'updated_by' => 'setUpdatedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'self' => 'getSelf',
        'terms_type' => 'getTermsType',
        'description' => 'getDescription',
        'terms_basis_date_code' => 'getTermsBasisDateCode',
        'net_due_days' => 'getNetDueDays',
        'net_due_date' => 'getNetDueDate',
        'discount_date' => 'getDiscountDate',
        'discount_rate' => 'getDiscountRate',
        'discount_amount' => 'getDiscountAmount',
        'discount_percentage' => 'getDiscountPercentage',
        'discount_due_days' => 'getDiscountDueDays',
        'created_date' => 'getCreatedDate',
        'updated_date' => 'getUpdatedDate',
        'created_by' => 'getCreatedBy',
        'updated_by' => 'getUpdatedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('self', $data ?? [], null);
        $this->setIfExists('terms_type', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('terms_basis_date_code', $data ?? [], null);
        $this->setIfExists('net_due_days', $data ?? [], null);
        $this->setIfExists('net_due_date', $data ?? [], null);
        $this->setIfExists('discount_date', $data ?? [], null);
        $this->setIfExists('discount_rate', $data ?? [], null);
        $this->setIfExists('discount_amount', $data ?? [], null);
        $this->setIfExists('discount_percentage', $data ?? [], null);
        $this->setIfExists('discount_due_days', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('updated_date', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('updated_by', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['terms_type'] === null) {
            $invalidProperties[] = "'terms_type' can't be null";
        }
        if ((mb_strlen($this->container['terms_type']) > 50)) {
            $invalidProperties[] = "invalid value for 'terms_type', the character length must be smaller than or equal to 50.";
        }

        if (!preg_match("/.*\\S.*/", $this->container['terms_type'])) {
            $invalidProperties[] = "invalid value for 'terms_type', must be conform to the pattern /.*\\S.*/.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 50)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['terms_basis_date_code']) && (mb_strlen($this->container['terms_basis_date_code']) > 50)) {
            $invalidProperties[] = "invalid value for 'terms_basis_date_code', the character length must be smaller than or equal to 50.";
        }

        if ($this->container['net_due_days'] === null) {
            $invalidProperties[] = "'net_due_days' can't be null";
        }
        if (($this->container['net_due_days'] > 0)) {
            $invalidProperties[] = "invalid value for 'net_due_days', must be smaller than or equal to 0.";
        }

        if (($this->container['net_due_days'] < 0)) {
            $invalidProperties[] = "invalid value for 'net_due_days', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['discount_rate']) && ($this->container['discount_rate'] > 0)) {
            $invalidProperties[] = "invalid value for 'discount_rate', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['discount_rate']) && ($this->container['discount_rate'] < 0)) {
            $invalidProperties[] = "invalid value for 'discount_rate', must be bigger than or equal to 0.";
        }

        if ($this->container['discount_amount'] === null) {
            $invalidProperties[] = "'discount_amount' can't be null";
        }
        if (($this->container['discount_amount'] > 0)) {
            $invalidProperties[] = "invalid value for 'discount_amount', must be smaller than or equal to 0.";
        }

        if (($this->container['discount_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'discount_amount', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['discount_percentage']) && ($this->container['discount_percentage'] > 0)) {
            $invalidProperties[] = "invalid value for 'discount_percentage', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['discount_percentage']) && ($this->container['discount_percentage'] < 0)) {
            $invalidProperties[] = "invalid value for 'discount_percentage', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['discount_due_days']) && ($this->container['discount_due_days'] > 0)) {
            $invalidProperties[] = "invalid value for 'discount_due_days', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['discount_due_days']) && ($this->container['discount_due_days'] < 0)) {
            $invalidProperties[] = "invalid value for 'discount_due_days', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets self
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $self self
     *
     * @return self
     */
    public function setSelf($self)
    {
        if (is_null($self)) {
            throw new \InvalidArgumentException('non-nullable self cannot be null');
        }
        $this->container['self'] = $self;

        return $this;
    }

    /**
     * Gets terms_type
     *
     * @return string
     */
    public function getTermsType()
    {
        return $this->container['terms_type'];
    }

    /**
     * Sets terms_type
     *
     * @param string $terms_type Code or name associated with a specific set of payment terms.
     *
     * @return self
     */
    public function setTermsType($terms_type)
    {
        if (is_null($terms_type)) {
            throw new \InvalidArgumentException('non-nullable terms_type cannot be null');
        }
        if ((mb_strlen($terms_type) > 50)) {
            throw new \InvalidArgumentException('invalid length for $terms_type when calling CustomerOrderPaymentTermDTO., must be smaller than or equal to 50.');
        }
        if ((!preg_match("/.*\\S.*/", ObjectSerializer::toString($terms_type)))) {
            throw new \InvalidArgumentException("invalid value for \$terms_type when calling CustomerOrderPaymentTermDTO., must conform to the pattern /.*\\S.*/.");
        }

        $this->container['terms_type'] = $terms_type;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Text that provides additional information about the payment terms.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($description) && (mb_strlen($description) > 50)) {
            throw new \InvalidArgumentException('invalid length for $description when calling CustomerOrderPaymentTermDTO., must be smaller than or equal to 50.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets terms_basis_date_code
     *
     * @return string|null
     */
    public function getTermsBasisDateCode()
    {
        return $this->container['terms_basis_date_code'];
    }

    /**
     * Sets terms_basis_date_code
     *
     * @param string|null $terms_basis_date_code Date code from which the payment term duration is calculated.
     *
     * @return self
     */
    public function setTermsBasisDateCode($terms_basis_date_code)
    {
        if (is_null($terms_basis_date_code)) {
            array_push($this->openAPINullablesSetToNull, 'terms_basis_date_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('terms_basis_date_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($terms_basis_date_code) && (mb_strlen($terms_basis_date_code) > 50)) {
            throw new \InvalidArgumentException('invalid length for $terms_basis_date_code when calling CustomerOrderPaymentTermDTO., must be smaller than or equal to 50.');
        }

        $this->container['terms_basis_date_code'] = $terms_basis_date_code;

        return $this;
    }

    /**
     * Gets net_due_days
     *
     * @return int
     */
    public function getNetDueDays()
    {
        return $this->container['net_due_days'];
    }

    /**
     * Sets net_due_days
     *
     * @param int $net_due_days Number of days from the basis date code within which payment is due.
     *
     * @return self
     */
    public function setNetDueDays($net_due_days)
    {
        if (is_null($net_due_days)) {
            throw new \InvalidArgumentException('non-nullable net_due_days cannot be null');
        }

        if (($net_due_days > 0)) {
            throw new \InvalidArgumentException('invalid value for $net_due_days when calling CustomerOrderPaymentTermDTO., must be smaller than or equal to 0.');
        }
        if (($net_due_days < 0)) {
            throw new \InvalidArgumentException('invalid value for $net_due_days when calling CustomerOrderPaymentTermDTO., must be bigger than or equal to 0.');
        }

        $this->container['net_due_days'] = $net_due_days;

        return $this;
    }

    /**
     * Gets net_due_date
     *
     * @return \DateTime|null
     */
    public function getNetDueDate()
    {
        return $this->container['net_due_date'];
    }

    /**
     * Sets net_due_date
     *
     * @param \DateTime|null $net_due_date Date by which payment is due.
     *
     * @return self
     */
    public function setNetDueDate($net_due_date)
    {
        if (is_null($net_due_date)) {
            throw new \InvalidArgumentException('non-nullable net_due_date cannot be null');
        }
        $this->container['net_due_date'] = $net_due_date;

        return $this;
    }

    /**
     * Gets discount_date
     *
     * @return \DateTime|null
     */
    public function getDiscountDate()
    {
        return $this->container['discount_date'];
    }

    /**
     * Sets discount_date
     *
     * @param \DateTime|null $discount_date Date before which payment is at a discounted rate.
     *
     * @return self
     */
    public function setDiscountDate($discount_date)
    {
        if (is_null($discount_date)) {
            array_push($this->openAPINullablesSetToNull, 'discount_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('discount_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['discount_date'] = $discount_date;

        return $this;
    }

    /**
     * Gets discount_rate
     *
     * @return int|null
     */
    public function getDiscountRate()
    {
        return $this->container['discount_rate'];
    }

    /**
     * Sets discount_rate
     *
     * @param int|null $discount_rate Discount rate that is applied based on the payment terms.
     *
     * @return self
     */
    public function setDiscountRate($discount_rate)
    {
        if (is_null($discount_rate)) {
            throw new \InvalidArgumentException('non-nullable discount_rate cannot be null');
        }

        if (($discount_rate > 0)) {
            throw new \InvalidArgumentException('invalid value for $discount_rate when calling CustomerOrderPaymentTermDTO., must be smaller than or equal to 0.');
        }
        if (($discount_rate < 0)) {
            throw new \InvalidArgumentException('invalid value for $discount_rate when calling CustomerOrderPaymentTermDTO., must be bigger than or equal to 0.');
        }

        $this->container['discount_rate'] = $discount_rate;

        return $this;
    }

    /**
     * Gets discount_amount
     *
     * @return int
     */
    public function getDiscountAmount()
    {
        return $this->container['discount_amount'];
    }

    /**
     * Sets discount_amount
     *
     * @param int $discount_amount Discount amount that is applied based on the payment terms.
     *
     * @return self
     */
    public function setDiscountAmount($discount_amount)
    {
        if (is_null($discount_amount)) {
            throw new \InvalidArgumentException('non-nullable discount_amount cannot be null');
        }

        if (($discount_amount > 0)) {
            throw new \InvalidArgumentException('invalid value for $discount_amount when calling CustomerOrderPaymentTermDTO., must be smaller than or equal to 0.');
        }
        if (($discount_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $discount_amount when calling CustomerOrderPaymentTermDTO., must be bigger than or equal to 0.');
        }

        $this->container['discount_amount'] = $discount_amount;

        return $this;
    }

    /**
     * Gets discount_percentage
     *
     * @return int|null
     */
    public function getDiscountPercentage()
    {
        return $this->container['discount_percentage'];
    }

    /**
     * Sets discount_percentage
     *
     * @param int|null $discount_percentage Discount percentage that is applied within the discount date.
     *
     * @return self
     */
    public function setDiscountPercentage($discount_percentage)
    {
        if (is_null($discount_percentage)) {
            throw new \InvalidArgumentException('non-nullable discount_percentage cannot be null');
        }

        if (($discount_percentage > 0)) {
            throw new \InvalidArgumentException('invalid value for $discount_percentage when calling CustomerOrderPaymentTermDTO., must be smaller than or equal to 0.');
        }
        if (($discount_percentage < 0)) {
            throw new \InvalidArgumentException('invalid value for $discount_percentage when calling CustomerOrderPaymentTermDTO., must be bigger than or equal to 0.');
        }

        $this->container['discount_percentage'] = $discount_percentage;

        return $this;
    }

    /**
     * Gets discount_due_days
     *
     * @return int|null
     */
    public function getDiscountDueDays()
    {
        return $this->container['discount_due_days'];
    }

    /**
     * Sets discount_due_days
     *
     * @param int|null $discount_due_days Days from basis date code within which payment is at a discounted rate.
     *
     * @return self
     */
    public function setDiscountDueDays($discount_due_days)
    {
        if (is_null($discount_due_days)) {
            throw new \InvalidArgumentException('non-nullable discount_due_days cannot be null');
        }

        if (($discount_due_days > 0)) {
            throw new \InvalidArgumentException('invalid value for $discount_due_days when calling CustomerOrderPaymentTermDTO., must be smaller than or equal to 0.');
        }
        if (($discount_due_days < 0)) {
            throw new \InvalidArgumentException('invalid value for $discount_due_days when calling CustomerOrderPaymentTermDTO., must be bigger than or equal to 0.');
        }

        $this->container['discount_due_days'] = $discount_due_days;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime|null $created_date Date and time that the payment term was created.
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets updated_date
     *
     * @return \DateTime|null
     */
    public function getUpdatedDate()
    {
        return $this->container['updated_date'];
    }

    /**
     * Sets updated_date
     *
     * @param \DateTime|null $updated_date Date and time that the payment term was last updated.
     *
     * @return self
     */
    public function setUpdatedDate($updated_date)
    {
        if (is_null($updated_date)) {
            throw new \InvalidArgumentException('non-nullable updated_date cannot be null');
        }
        $this->container['updated_date'] = $updated_date;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            throw new \InvalidArgumentException('non-nullable created_by cannot be null');
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $updated_by updated_by
     *
     * @return self
     */
    public function setUpdatedBy($updated_by)
    {
        if (is_null($updated_by)) {
            throw new \InvalidArgumentException('non-nullable updated_by cannot be null');
        }
        $this->container['updated_by'] = $updated_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


