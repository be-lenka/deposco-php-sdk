<?php
/**
 * ZoneDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deposco API
 *
 * Welcome to the Deposco API Reference! The Deposco API enables you to integrate your system with Deposco.  * Integrate a product information system (PIM) by creating and retrieving data for items, packs, UPCs, and kits. * Set up warehouse data by creating facilities, zones, locations, and storage details. * Create inbound orders that can be received and outbound orders that can be fulfilled with Deposco warehouse management processes.  This reference provides details on available operations, endpoints, parameters, schemas, and responses.  Example requests and responses are also available for you to use as a reference. You can copy the examples to use as a starting point for your own requests.  Review the guides to learn how the API is used in common business scenarios such as setting up the warehouse and integrating a Product Information Management (PIM) system.  When you're ready to get started, register for a developer account and then log in to create your application in the developer portal.
 *
 * The version of the OpenAPI document: 2.0.2519
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\Deposco\Model;

use \ArrayAccess;
use \BeLenka\Deposco\ObjectSerializer;

/**
 * ZoneDTO Class Doc Comment
 *
 * @category Class
 * @description Area in a facility that is dedicated to a specific functional task.
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ZoneDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ZoneDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'self' => '\BeLenka\Deposco\Model\EntityRef',
        'business_unit' => '\BeLenka\Deposco\Model\EntityRef',
        'facility' => '\BeLenka\Deposco\Model\EntityRef',
        'name' => 'string',
        'type' => 'string',
        'pick_rating' => 'int',
        'pick_system' => 'string',
        'max_number_of_units_to_work_group' => 'int',
        'allocate_all_stock_from_zone' => 'bool',
        'default_location' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'locations' => '\BeLenka\Deposco\Model\PaginatedEntityReference',
        'created_date' => '\DateTime',
        'updated_date' => '\DateTime',
        'created_by' => '\BeLenka\Deposco\Model\EntityRef',
        'updated_by' => '\BeLenka\Deposco\Model\EntityRef'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'self' => null,
        'business_unit' => null,
        'facility' => null,
        'name' => null,
        'type' => null,
        'pick_rating' => 'double',
        'pick_system' => null,
        'max_number_of_units_to_work_group' => null,
        'allocate_all_stock_from_zone' => null,
        'default_location' => null,
        'locations' => null,
        'created_date' => 'date-time',
        'updated_date' => 'date-time',
        'created_by' => null,
        'updated_by' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'self' => false,
        'business_unit' => false,
        'facility' => false,
        'name' => false,
        'type' => true,
        'pick_rating' => false,
        'pick_system' => true,
        'max_number_of_units_to_work_group' => false,
        'allocate_all_stock_from_zone' => false,
        'default_location' => true,
        'locations' => true,
        'created_date' => false,
        'updated_date' => false,
        'created_by' => false,
        'updated_by' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'self' => 'self',
        'business_unit' => 'businessUnit',
        'facility' => 'facility',
        'name' => 'name',
        'type' => 'type',
        'pick_rating' => 'pickRating',
        'pick_system' => 'pickSystem',
        'max_number_of_units_to_work_group' => 'maxNumberOfUnitsToWorkGroup',
        'allocate_all_stock_from_zone' => 'allocateAllStockFromZone',
        'default_location' => 'defaultLocation',
        'locations' => 'locations',
        'created_date' => 'createdDate',
        'updated_date' => 'updatedDate',
        'created_by' => 'createdBy',
        'updated_by' => 'updatedBy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'self' => 'setSelf',
        'business_unit' => 'setBusinessUnit',
        'facility' => 'setFacility',
        'name' => 'setName',
        'type' => 'setType',
        'pick_rating' => 'setPickRating',
        'pick_system' => 'setPickSystem',
        'max_number_of_units_to_work_group' => 'setMaxNumberOfUnitsToWorkGroup',
        'allocate_all_stock_from_zone' => 'setAllocateAllStockFromZone',
        'default_location' => 'setDefaultLocation',
        'locations' => 'setLocations',
        'created_date' => 'setCreatedDate',
        'updated_date' => 'setUpdatedDate',
        'created_by' => 'setCreatedBy',
        'updated_by' => 'setUpdatedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'self' => 'getSelf',
        'business_unit' => 'getBusinessUnit',
        'facility' => 'getFacility',
        'name' => 'getName',
        'type' => 'getType',
        'pick_rating' => 'getPickRating',
        'pick_system' => 'getPickSystem',
        'max_number_of_units_to_work_group' => 'getMaxNumberOfUnitsToWorkGroup',
        'allocate_all_stock_from_zone' => 'getAllocateAllStockFromZone',
        'default_location' => 'getDefaultLocation',
        'locations' => 'getLocations',
        'created_date' => 'getCreatedDate',
        'updated_date' => 'getUpdatedDate',
        'created_by' => 'getCreatedBy',
        'updated_by' => 'getUpdatedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('self', $data ?? [], null);
        $this->setIfExists('business_unit', $data ?? [], null);
        $this->setIfExists('facility', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('pick_rating', $data ?? [], null);
        $this->setIfExists('pick_system', $data ?? [], null);
        $this->setIfExists('max_number_of_units_to_work_group', $data ?? [], null);
        $this->setIfExists('allocate_all_stock_from_zone', $data ?? [], null);
        $this->setIfExists('default_location', $data ?? [], null);
        $this->setIfExists('locations', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('updated_date', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('updated_by', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['business_unit'] === null) {
            $invalidProperties[] = "'business_unit' can't be null";
        }
        if ($this->container['facility'] === null) {
            $invalidProperties[] = "'facility' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 30)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 30.";
        }

        if (!preg_match("/.*\\S.*/", $this->container['name'])) {
            $invalidProperties[] = "invalid value for 'name', must be conform to the pattern /.*\\S.*/.";
        }

        if (!is_null($this->container['type']) && (mb_strlen($this->container['type']) > 100)) {
            $invalidProperties[] = "invalid value for 'type', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['pick_rating']) && ($this->container['pick_rating'] > 0)) {
            $invalidProperties[] = "invalid value for 'pick_rating', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['pick_rating']) && ($this->container['pick_rating'] < 0)) {
            $invalidProperties[] = "invalid value for 'pick_rating', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['pick_system']) && (mb_strlen($this->container['pick_system']) > 30)) {
            $invalidProperties[] = "invalid value for 'pick_system', the character length must be smaller than or equal to 30.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets self
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $self self
     *
     * @return self
     */
    public function setSelf($self)
    {
        if (is_null($self)) {
            throw new \InvalidArgumentException('non-nullable self cannot be null');
        }
        $this->container['self'] = $self;

        return $this;
    }

    /**
     * Gets business_unit
     *
     * @return \BeLenka\Deposco\Model\EntityRef
     */
    public function getBusinessUnit()
    {
        return $this->container['business_unit'];
    }

    /**
     * Sets business_unit
     *
     * @param \BeLenka\Deposco\Model\EntityRef $business_unit business_unit
     *
     * @return self
     */
    public function setBusinessUnit($business_unit)
    {
        if (is_null($business_unit)) {
            throw new \InvalidArgumentException('non-nullable business_unit cannot be null');
        }
        $this->container['business_unit'] = $business_unit;

        return $this;
    }

    /**
     * Gets facility
     *
     * @return \BeLenka\Deposco\Model\EntityRef
     */
    public function getFacility()
    {
        return $this->container['facility'];
    }

    /**
     * Sets facility
     *
     * @param \BeLenka\Deposco\Model\EntityRef $facility facility
     *
     * @return self
     */
    public function setFacility($facility)
    {
        if (is_null($facility)) {
            throw new \InvalidArgumentException('non-nullable facility cannot be null');
        }
        $this->container['facility'] = $facility;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name that identifies the zone. You may have multiple zones with the same name, each belonging to a different facility.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 30)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ZoneDTO., must be smaller than or equal to 30.');
        }
        if ((!preg_match("/.*\\S.*/", ObjectSerializer::toString($name)))) {
            throw new \InvalidArgumentException("invalid value for \$name when calling ZoneDTO., must conform to the pattern /.*\\S.*/.");
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Type of zone. Provide a value of `Picking` for all picking zones to ensure that users can be assigned to pick from those zones. Provide a value of `Staging` for all receiving and shipping zones. Other available values include `Consignment`, `General`, `Kitting`, `Non-Consignment`, and `Packing`.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($type) && (mb_strlen($type) > 100)) {
            throw new \InvalidArgumentException('invalid length for $type when calling ZoneDTO., must be smaller than or equal to 100.');
        }

        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets pick_rating
     *
     * @return int|null
     */
    public function getPickRating()
    {
        return $this->container['pick_rating'];
    }

    /**
     * Sets pick_rating
     *
     * @param int|null $pick_rating In pick and pass scenarios, the order/sequence of the zone in relation to other zones. Also used in some configurations of Batch Picking to assign a work group to a picking user based on the zone with the highest pick rating.
     *
     * @return self
     */
    public function setPickRating($pick_rating)
    {
        if (is_null($pick_rating)) {
            throw new \InvalidArgumentException('non-nullable pick_rating cannot be null');
        }

        if (($pick_rating > 0)) {
            throw new \InvalidArgumentException('invalid value for $pick_rating when calling ZoneDTO., must be smaller than or equal to 0.');
        }
        if (($pick_rating < 0)) {
            throw new \InvalidArgumentException('invalid value for $pick_rating when calling ZoneDTO., must be bigger than or equal to 0.');
        }

        $this->container['pick_rating'] = $pick_rating;

        return $this;
    }

    /**
     * Gets pick_system
     *
     * @return string|null
     */
    public function getPickSystem()
    {
        return $this->container['pick_system'];
    }

    /**
     * Sets pick_system
     *
     * @param string|null $pick_system Used for build and release of pick waves for warehouse automation systems such as automated picking with robots.
     *
     * @return self
     */
    public function setPickSystem($pick_system)
    {
        if (is_null($pick_system)) {
            array_push($this->openAPINullablesSetToNull, 'pick_system');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pick_system', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($pick_system) && (mb_strlen($pick_system) > 30)) {
            throw new \InvalidArgumentException('invalid length for $pick_system when calling ZoneDTO., must be smaller than or equal to 30.');
        }

        $this->container['pick_system'] = $pick_system;

        return $this;
    }

    /**
     * Gets max_number_of_units_to_work_group
     *
     * @return int|null
     */
    public function getMaxNumberOfUnitsToWorkGroup()
    {
        return $this->container['max_number_of_units_to_work_group'];
    }

    /**
     * Sets max_number_of_units_to_work_group
     *
     * @param int|null $max_number_of_units_to_work_group Used when building pick waves to define the total number of pickable items that are allowed for a work group in the zone.
     *
     * @return self
     */
    public function setMaxNumberOfUnitsToWorkGroup($max_number_of_units_to_work_group)
    {
        if (is_null($max_number_of_units_to_work_group)) {
            throw new \InvalidArgumentException('non-nullable max_number_of_units_to_work_group cannot be null');
        }
        $this->container['max_number_of_units_to_work_group'] = $max_number_of_units_to_work_group;

        return $this;
    }

    /**
     * Gets allocate_all_stock_from_zone
     *
     * @return bool|null
     */
    public function getAllocateAllStockFromZone()
    {
        return $this->container['allocate_all_stock_from_zone'];
    }

    /**
     * Sets allocate_all_stock_from_zone
     *
     * @param bool|null $allocate_all_stock_from_zone Used during inventory allocation when releasing pick waves to completely deplete stock from the zone before allocating stock from another zone for an item.
     *
     * @return self
     */
    public function setAllocateAllStockFromZone($allocate_all_stock_from_zone)
    {
        if (is_null($allocate_all_stock_from_zone)) {
            throw new \InvalidArgumentException('non-nullable allocate_all_stock_from_zone cannot be null');
        }
        $this->container['allocate_all_stock_from_zone'] = $allocate_all_stock_from_zone;

        return $this;
    }

    /**
     * Gets default_location
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getDefaultLocation()
    {
        return $this->container['default_location'];
    }

    /**
     * Sets default_location
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $default_location default_location
     *
     * @return self
     */
    public function setDefaultLocation($default_location)
    {
        if (is_null($default_location)) {
            array_push($this->openAPINullablesSetToNull, 'default_location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('default_location', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['default_location'] = $default_location;

        return $this;
    }

    /**
     * Gets locations
     *
     * @return \BeLenka\Deposco\Model\PaginatedEntityReference|null
     */
    public function getLocations()
    {
        return $this->container['locations'];
    }

    /**
     * Sets locations
     *
     * @param \BeLenka\Deposco\Model\PaginatedEntityReference|null $locations locations
     *
     * @return self
     */
    public function setLocations($locations)
    {
        if (is_null($locations)) {
            array_push($this->openAPINullablesSetToNull, 'locations');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('locations', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['locations'] = $locations;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime|null $created_date Date and time that the zone was created.
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets updated_date
     *
     * @return \DateTime|null
     */
    public function getUpdatedDate()
    {
        return $this->container['updated_date'];
    }

    /**
     * Sets updated_date
     *
     * @param \DateTime|null $updated_date Date and time that the zone was last updated.
     *
     * @return self
     */
    public function setUpdatedDate($updated_date)
    {
        if (is_null($updated_date)) {
            throw new \InvalidArgumentException('non-nullable updated_date cannot be null');
        }
        $this->container['updated_date'] = $updated_date;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            throw new \InvalidArgumentException('non-nullable created_by cannot be null');
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $updated_by updated_by
     *
     * @return self
     */
    public function setUpdatedBy($updated_by)
    {
        if (is_null($updated_by)) {
            throw new \InvalidArgumentException('non-nullable updated_by cannot be null');
        }
        $this->container['updated_by'] = $updated_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


