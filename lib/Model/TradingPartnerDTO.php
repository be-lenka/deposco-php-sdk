<?php
/**
 * TradingPartnerDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deposco API
 *
 * Welcome to the Deposco API Reference! The Deposco API enables you to integrate your system with Deposco.  * Integrate a product information system (PIM) by creating and retrieving data for items, packs, UPCs, and kits. * Set up warehouse data by creating facilities, zones, locations, and storage details. * Create inbound orders that can be received and outbound orders that can be fulfilled with Deposco warehouse management processes.  This reference provides details on available operations, endpoints, parameters, schemas, and responses.  Example requests and responses are also available for you to use as a reference. You can copy the examples to use as a starting point for your own requests.  Review the guides to learn how the API is used in common business scenarios such as setting up the warehouse and integrating a Product Information Management (PIM) system.  When you're ready to get started, register for a developer account and then log in to create your application in the developer portal.
 *
 * The version of the OpenAPI document: 2.0.2519
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\Deposco\Model;

use \ArrayAccess;
use \BeLenka\Deposco\ObjectSerializer;

/**
 * TradingPartnerDTO Class Doc Comment
 *
 * @category Class
 * @description External party to the company such as a supplier or vendor that provides products or services or a customer that purchases products.
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TradingPartnerDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TradingPartnerDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'self' => '\BeLenka\Deposco\Model\EntityRef',
        'business_unit' => '\BeLenka\Deposco\Model\EntityRef',
        'code' => 'string',
        'name' => 'string',
        'partnership_type' => 'string',
        'description' => 'string',
        'contact' => '\BeLenka\Deposco\Model\TradingPartnerDTOContact',
        'address' => '\BeLenka\Deposco\Model\TradingPartnerDTOAddress',
        'bill_to_contact' => '\BeLenka\Deposco\Model\TradingPartnerDTOBillToContact',
        'bill_to_address' => '\BeLenka\Deposco\Model\TradingPartnerDTOBillToAddress',
        'sites' => '\BeLenka\Deposco\Model\TradingPartnerSiteCollectionDTO',
        'account_number' => 'string',
        'account_status' => 'string',
        'doing_business_as' => 'string',
        'packing_slip_level' => 'string',
        'packing_slip_report' => 'string',
        'zpl_label_report' => 'string',
        'send_asn' => 'string',
        'group_asnby' => 'string',
        'group_pallet_by' => 'string',
        'expiration_threshold_in_days' => 'int',
        'sscc_numbers_required_for_trip' => 'bool',
        'sequence_ssccby' => 'string',
        'uccean_company_number' => 'string',
        'sscc_expansion_digit' => 'int',
        'price_list' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'tax_rate' => 'int',
        'drop_ship_fee' => 'int',
        'quality_control_percent' => 'int',
        'use_ship_from_for_shipments' => 'bool',
        'ups_account_number' => 'string',
        'fedex_account_number' => 'string',
        'trans_routing_enabled' => 'bool',
        'min_order_amount' => 'int',
        'payment_terms' => 'string',
        'default_currency_code' => 'string',
        'supplier_blackout_calendar' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'parameters' => '\BeLenka\Deposco\Model\TradingPartnerParameterCollectionDTO',
        'custom_attribute1' => 'string',
        'custom_attribute2' => 'string',
        'custom_attribute3' => 'string',
        'custom_attribute4' => 'string',
        'import_reference1' => 'string',
        'import_reference2' => 'string',
        'export_reference1' => 'string',
        'export_reference2' => 'string',
        'channels' => '\BeLenka\Deposco\Model\ChannelDTO[]',
        'created_date' => '\DateTime',
        'updated_date' => '\DateTime',
        'created_by' => '\BeLenka\Deposco\Model\EntityRef',
        'updated_by' => '\BeLenka\Deposco\Model\EntityRef'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'self' => null,
        'business_unit' => null,
        'code' => null,
        'name' => null,
        'partnership_type' => null,
        'description' => null,
        'contact' => null,
        'address' => null,
        'bill_to_contact' => null,
        'bill_to_address' => null,
        'sites' => null,
        'account_number' => null,
        'account_status' => null,
        'doing_business_as' => null,
        'packing_slip_level' => null,
        'packing_slip_report' => null,
        'zpl_label_report' => null,
        'send_asn' => null,
        'group_asnby' => null,
        'group_pallet_by' => null,
        'expiration_threshold_in_days' => null,
        'sscc_numbers_required_for_trip' => null,
        'sequence_ssccby' => null,
        'uccean_company_number' => null,
        'sscc_expansion_digit' => null,
        'price_list' => null,
        'tax_rate' => null,
        'drop_ship_fee' => null,
        'quality_control_percent' => null,
        'use_ship_from_for_shipments' => null,
        'ups_account_number' => null,
        'fedex_account_number' => null,
        'trans_routing_enabled' => null,
        'min_order_amount' => null,
        'payment_terms' => null,
        'default_currency_code' => null,
        'supplier_blackout_calendar' => null,
        'parameters' => null,
        'custom_attribute1' => null,
        'custom_attribute2' => null,
        'custom_attribute3' => null,
        'custom_attribute4' => null,
        'import_reference1' => null,
        'import_reference2' => null,
        'export_reference1' => null,
        'export_reference2' => null,
        'channels' => null,
        'created_date' => 'date-time',
        'updated_date' => 'date-time',
        'created_by' => null,
        'updated_by' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'self' => false,
        'business_unit' => false,
        'code' => false,
        'name' => false,
        'partnership_type' => true,
        'description' => true,
        'contact' => false,
        'address' => false,
        'bill_to_contact' => false,
        'bill_to_address' => false,
        'sites' => false,
        'account_number' => true,
        'account_status' => true,
        'doing_business_as' => true,
        'packing_slip_level' => true,
        'packing_slip_report' => true,
        'zpl_label_report' => true,
        'send_asn' => true,
        'group_asnby' => true,
        'group_pallet_by' => true,
        'expiration_threshold_in_days' => true,
        'sscc_numbers_required_for_trip' => true,
        'sequence_ssccby' => true,
        'uccean_company_number' => true,
        'sscc_expansion_digit' => false,
        'price_list' => true,
        'tax_rate' => false,
        'drop_ship_fee' => false,
        'quality_control_percent' => true,
        'use_ship_from_for_shipments' => true,
        'ups_account_number' => true,
        'fedex_account_number' => true,
        'trans_routing_enabled' => true,
        'min_order_amount' => false,
        'payment_terms' => true,
        'default_currency_code' => true,
        'supplier_blackout_calendar' => true,
        'parameters' => false,
        'custom_attribute1' => true,
        'custom_attribute2' => true,
        'custom_attribute3' => true,
        'custom_attribute4' => true,
        'import_reference1' => true,
        'import_reference2' => true,
        'export_reference1' => true,
        'export_reference2' => true,
        'channels' => true,
        'created_date' => false,
        'updated_date' => false,
        'created_by' => false,
        'updated_by' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'self' => 'self',
        'business_unit' => 'businessUnit',
        'code' => 'code',
        'name' => 'name',
        'partnership_type' => 'partnershipType',
        'description' => 'description',
        'contact' => 'contact',
        'address' => 'address',
        'bill_to_contact' => 'billToContact',
        'bill_to_address' => 'billToAddress',
        'sites' => 'sites',
        'account_number' => 'accountNumber',
        'account_status' => 'accountStatus',
        'doing_business_as' => 'doingBusinessAs',
        'packing_slip_level' => 'packingSlipLevel',
        'packing_slip_report' => 'packingSlipReport',
        'zpl_label_report' => 'zplLabelReport',
        'send_asn' => 'sendASN',
        'group_asnby' => 'groupASNBy',
        'group_pallet_by' => 'groupPalletBy',
        'expiration_threshold_in_days' => 'expirationThresholdInDays',
        'sscc_numbers_required_for_trip' => 'ssccNumbersRequiredForTrip',
        'sequence_ssccby' => 'sequenceSSCCBy',
        'uccean_company_number' => 'ucceanCompanyNumber',
        'sscc_expansion_digit' => 'ssccExpansionDigit',
        'price_list' => 'priceList',
        'tax_rate' => 'taxRate',
        'drop_ship_fee' => 'dropShipFee',
        'quality_control_percent' => 'qualityControlPercent',
        'use_ship_from_for_shipments' => 'useShipFromForShipments',
        'ups_account_number' => 'upsAccountNumber',
        'fedex_account_number' => 'fedexAccountNumber',
        'trans_routing_enabled' => 'transRoutingEnabled',
        'min_order_amount' => 'minOrderAmount',
        'payment_terms' => 'paymentTerms',
        'default_currency_code' => 'defaultCurrencyCode',
        'supplier_blackout_calendar' => 'supplierBlackoutCalendar',
        'parameters' => 'parameters',
        'custom_attribute1' => 'customAttribute1',
        'custom_attribute2' => 'customAttribute2',
        'custom_attribute3' => 'customAttribute3',
        'custom_attribute4' => 'customAttribute4',
        'import_reference1' => 'importReference1',
        'import_reference2' => 'importReference2',
        'export_reference1' => 'exportReference1',
        'export_reference2' => 'exportReference2',
        'channels' => 'channels',
        'created_date' => 'createdDate',
        'updated_date' => 'updatedDate',
        'created_by' => 'createdBy',
        'updated_by' => 'updatedBy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'self' => 'setSelf',
        'business_unit' => 'setBusinessUnit',
        'code' => 'setCode',
        'name' => 'setName',
        'partnership_type' => 'setPartnershipType',
        'description' => 'setDescription',
        'contact' => 'setContact',
        'address' => 'setAddress',
        'bill_to_contact' => 'setBillToContact',
        'bill_to_address' => 'setBillToAddress',
        'sites' => 'setSites',
        'account_number' => 'setAccountNumber',
        'account_status' => 'setAccountStatus',
        'doing_business_as' => 'setDoingBusinessAs',
        'packing_slip_level' => 'setPackingSlipLevel',
        'packing_slip_report' => 'setPackingSlipReport',
        'zpl_label_report' => 'setZplLabelReport',
        'send_asn' => 'setSendAsn',
        'group_asnby' => 'setGroupAsnby',
        'group_pallet_by' => 'setGroupPalletBy',
        'expiration_threshold_in_days' => 'setExpirationThresholdInDays',
        'sscc_numbers_required_for_trip' => 'setSsccNumbersRequiredForTrip',
        'sequence_ssccby' => 'setSequenceSsccby',
        'uccean_company_number' => 'setUcceanCompanyNumber',
        'sscc_expansion_digit' => 'setSsccExpansionDigit',
        'price_list' => 'setPriceList',
        'tax_rate' => 'setTaxRate',
        'drop_ship_fee' => 'setDropShipFee',
        'quality_control_percent' => 'setQualityControlPercent',
        'use_ship_from_for_shipments' => 'setUseShipFromForShipments',
        'ups_account_number' => 'setUpsAccountNumber',
        'fedex_account_number' => 'setFedexAccountNumber',
        'trans_routing_enabled' => 'setTransRoutingEnabled',
        'min_order_amount' => 'setMinOrderAmount',
        'payment_terms' => 'setPaymentTerms',
        'default_currency_code' => 'setDefaultCurrencyCode',
        'supplier_blackout_calendar' => 'setSupplierBlackoutCalendar',
        'parameters' => 'setParameters',
        'custom_attribute1' => 'setCustomAttribute1',
        'custom_attribute2' => 'setCustomAttribute2',
        'custom_attribute3' => 'setCustomAttribute3',
        'custom_attribute4' => 'setCustomAttribute4',
        'import_reference1' => 'setImportReference1',
        'import_reference2' => 'setImportReference2',
        'export_reference1' => 'setExportReference1',
        'export_reference2' => 'setExportReference2',
        'channels' => 'setChannels',
        'created_date' => 'setCreatedDate',
        'updated_date' => 'setUpdatedDate',
        'created_by' => 'setCreatedBy',
        'updated_by' => 'setUpdatedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'self' => 'getSelf',
        'business_unit' => 'getBusinessUnit',
        'code' => 'getCode',
        'name' => 'getName',
        'partnership_type' => 'getPartnershipType',
        'description' => 'getDescription',
        'contact' => 'getContact',
        'address' => 'getAddress',
        'bill_to_contact' => 'getBillToContact',
        'bill_to_address' => 'getBillToAddress',
        'sites' => 'getSites',
        'account_number' => 'getAccountNumber',
        'account_status' => 'getAccountStatus',
        'doing_business_as' => 'getDoingBusinessAs',
        'packing_slip_level' => 'getPackingSlipLevel',
        'packing_slip_report' => 'getPackingSlipReport',
        'zpl_label_report' => 'getZplLabelReport',
        'send_asn' => 'getSendAsn',
        'group_asnby' => 'getGroupAsnby',
        'group_pallet_by' => 'getGroupPalletBy',
        'expiration_threshold_in_days' => 'getExpirationThresholdInDays',
        'sscc_numbers_required_for_trip' => 'getSsccNumbersRequiredForTrip',
        'sequence_ssccby' => 'getSequenceSsccby',
        'uccean_company_number' => 'getUcceanCompanyNumber',
        'sscc_expansion_digit' => 'getSsccExpansionDigit',
        'price_list' => 'getPriceList',
        'tax_rate' => 'getTaxRate',
        'drop_ship_fee' => 'getDropShipFee',
        'quality_control_percent' => 'getQualityControlPercent',
        'use_ship_from_for_shipments' => 'getUseShipFromForShipments',
        'ups_account_number' => 'getUpsAccountNumber',
        'fedex_account_number' => 'getFedexAccountNumber',
        'trans_routing_enabled' => 'getTransRoutingEnabled',
        'min_order_amount' => 'getMinOrderAmount',
        'payment_terms' => 'getPaymentTerms',
        'default_currency_code' => 'getDefaultCurrencyCode',
        'supplier_blackout_calendar' => 'getSupplierBlackoutCalendar',
        'parameters' => 'getParameters',
        'custom_attribute1' => 'getCustomAttribute1',
        'custom_attribute2' => 'getCustomAttribute2',
        'custom_attribute3' => 'getCustomAttribute3',
        'custom_attribute4' => 'getCustomAttribute4',
        'import_reference1' => 'getImportReference1',
        'import_reference2' => 'getImportReference2',
        'export_reference1' => 'getExportReference1',
        'export_reference2' => 'getExportReference2',
        'channels' => 'getChannels',
        'created_date' => 'getCreatedDate',
        'updated_date' => 'getUpdatedDate',
        'created_by' => 'getCreatedBy',
        'updated_by' => 'getUpdatedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PARTNERSHIP_TYPE_VENDOR = 'Vendor';
    public const PARTNERSHIP_TYPE_CUSTOMER = 'Customer';
    public const PARTNERSHIP_TYPE_BILL_TO = 'Bill-To';
    public const PARTNERSHIP_TYPE_DROP_SHIP_VENDOR = 'Drop Ship Vendor';
    public const PARTNERSHIP_TYPE_RETAILER_LABEL_AND_PARCEL = 'Retailer Label and Parcel';
    public const PARTNERSHIP_TYPE_TRANSPORTATION_PROVIDER = 'Transportation Provider';
    public const PARTNERSHIP_TYPE_OTHER = 'Other';
    public const PARTNERSHIP_TYPE_COMPANY = 'Company';
    public const PACKING_SLIP_LEVEL_CONTAINER = 'Container';
    public const PACKING_SLIP_LEVEL_SHIPMENT = 'Shipment';
    public const SEND_ASN_YES = 'Yes';
    public const SEND_ASN_NO = 'No';
    public const SEND_ASN_FULLY_SHIPPED = 'Fully Shipped';
    public const GROUP_ASNBY_ST = 'ST';
    public const GROUP_ASNBY_DC = 'DC';
    public const GROUP_PALLET_BY_TP_SITE = 'TP_SITE';
    public const GROUP_PALLET_BY_CONTRACT_NUMBER = 'CONTRACT_NUMBER';
    public const GROUP_PALLET_BY_CONTRACT_NUMBER_AND_TP_SITE = 'CONTRACT_NUMBER_AND_TP_SITE';
    public const SEQUENCE_SSCCBY_ITEM = 'Item';
    public const SEQUENCE_SSCCBY_PALLET = 'Pallet';
    public const PAYMENT_TERMS_NET_30 = 'Net 30';
    public const PAYMENT_TERMS_NET_45 = 'Net 45';
    public const PAYMENT_TERMS_NET_60 = 'Net 60';
    public const PAYMENT_TERMS_NET_90 = 'Net 90';
    public const PAYMENT_TERMS_PAYMENT_IN_ADVANCE = 'Payment in advance';
    public const PAYMENT_TERMS__2_10_NET_30 = '2/10 Net 30';
    public const DEFAULT_CURRENCY_CODE_USD = 'USD';
    public const DEFAULT_CURRENCY_CODE_EUR = 'EUR';
    public const DEFAULT_CURRENCY_CODE_MXN = 'MXN';
    public const DEFAULT_CURRENCY_CODE_CAN = 'CAN';
    public const DEFAULT_CURRENCY_CODE_GBP = 'GBP';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPartnershipTypeAllowableValues()
    {
        return [
            self::PARTNERSHIP_TYPE_VENDOR,
            self::PARTNERSHIP_TYPE_CUSTOMER,
            self::PARTNERSHIP_TYPE_BILL_TO,
            self::PARTNERSHIP_TYPE_DROP_SHIP_VENDOR,
            self::PARTNERSHIP_TYPE_RETAILER_LABEL_AND_PARCEL,
            self::PARTNERSHIP_TYPE_TRANSPORTATION_PROVIDER,
            self::PARTNERSHIP_TYPE_OTHER,
            self::PARTNERSHIP_TYPE_COMPANY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPackingSlipLevelAllowableValues()
    {
        return [
            self::PACKING_SLIP_LEVEL_CONTAINER,
            self::PACKING_SLIP_LEVEL_SHIPMENT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSendAsnAllowableValues()
    {
        return [
            self::SEND_ASN_YES,
            self::SEND_ASN_NO,
            self::SEND_ASN_FULLY_SHIPPED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGroupAsnbyAllowableValues()
    {
        return [
            self::GROUP_ASNBY_ST,
            self::GROUP_ASNBY_DC,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGroupPalletByAllowableValues()
    {
        return [
            self::GROUP_PALLET_BY_TP_SITE,
            self::GROUP_PALLET_BY_CONTRACT_NUMBER,
            self::GROUP_PALLET_BY_CONTRACT_NUMBER_AND_TP_SITE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSequenceSsccbyAllowableValues()
    {
        return [
            self::SEQUENCE_SSCCBY_ITEM,
            self::SEQUENCE_SSCCBY_PALLET,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentTermsAllowableValues()
    {
        return [
            self::PAYMENT_TERMS_NET_30,
            self::PAYMENT_TERMS_NET_45,
            self::PAYMENT_TERMS_NET_60,
            self::PAYMENT_TERMS_NET_90,
            self::PAYMENT_TERMS_PAYMENT_IN_ADVANCE,
            self::PAYMENT_TERMS__2_10_NET_30,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDefaultCurrencyCodeAllowableValues()
    {
        return [
            self::DEFAULT_CURRENCY_CODE_USD,
            self::DEFAULT_CURRENCY_CODE_EUR,
            self::DEFAULT_CURRENCY_CODE_MXN,
            self::DEFAULT_CURRENCY_CODE_CAN,
            self::DEFAULT_CURRENCY_CODE_GBP,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('self', $data ?? [], null);
        $this->setIfExists('business_unit', $data ?? [], null);
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('partnership_type', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('contact', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('bill_to_contact', $data ?? [], null);
        $this->setIfExists('bill_to_address', $data ?? [], null);
        $this->setIfExists('sites', $data ?? [], null);
        $this->setIfExists('account_number', $data ?? [], null);
        $this->setIfExists('account_status', $data ?? [], null);
        $this->setIfExists('doing_business_as', $data ?? [], null);
        $this->setIfExists('packing_slip_level', $data ?? [], null);
        $this->setIfExists('packing_slip_report', $data ?? [], null);
        $this->setIfExists('zpl_label_report', $data ?? [], null);
        $this->setIfExists('send_asn', $data ?? [], null);
        $this->setIfExists('group_asnby', $data ?? [], null);
        $this->setIfExists('group_pallet_by', $data ?? [], null);
        $this->setIfExists('expiration_threshold_in_days', $data ?? [], null);
        $this->setIfExists('sscc_numbers_required_for_trip', $data ?? [], null);
        $this->setIfExists('sequence_ssccby', $data ?? [], null);
        $this->setIfExists('uccean_company_number', $data ?? [], null);
        $this->setIfExists('sscc_expansion_digit', $data ?? [], null);
        $this->setIfExists('price_list', $data ?? [], null);
        $this->setIfExists('tax_rate', $data ?? [], null);
        $this->setIfExists('drop_ship_fee', $data ?? [], null);
        $this->setIfExists('quality_control_percent', $data ?? [], null);
        $this->setIfExists('use_ship_from_for_shipments', $data ?? [], null);
        $this->setIfExists('ups_account_number', $data ?? [], null);
        $this->setIfExists('fedex_account_number', $data ?? [], null);
        $this->setIfExists('trans_routing_enabled', $data ?? [], null);
        $this->setIfExists('min_order_amount', $data ?? [], null);
        $this->setIfExists('payment_terms', $data ?? [], null);
        $this->setIfExists('default_currency_code', $data ?? [], null);
        $this->setIfExists('supplier_blackout_calendar', $data ?? [], null);
        $this->setIfExists('parameters', $data ?? [], null);
        $this->setIfExists('custom_attribute1', $data ?? [], null);
        $this->setIfExists('custom_attribute2', $data ?? [], null);
        $this->setIfExists('custom_attribute3', $data ?? [], null);
        $this->setIfExists('custom_attribute4', $data ?? [], null);
        $this->setIfExists('import_reference1', $data ?? [], null);
        $this->setIfExists('import_reference2', $data ?? [], null);
        $this->setIfExists('export_reference1', $data ?? [], null);
        $this->setIfExists('export_reference2', $data ?? [], null);
        $this->setIfExists('channels', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('updated_date', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('updated_by', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        if ((mb_strlen($this->container['code']) > 20)) {
            $invalidProperties[] = "invalid value for 'code', the character length must be smaller than or equal to 20.";
        }

        if (!preg_match("/.*\\S.*/", $this->container['code'])) {
            $invalidProperties[] = "invalid value for 'code', must be conform to the pattern /.*\\S.*/.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 50)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 50.";
        }

        $allowedValues = $this->getPartnershipTypeAllowableValues();
        if (!is_null($this->container['partnership_type']) && !in_array($this->container['partnership_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'partnership_type', must be one of '%s'",
                $this->container['partnership_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['account_number']) && (mb_strlen($this->container['account_number']) > 30)) {
            $invalidProperties[] = "invalid value for 'account_number', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['account_status']) && (mb_strlen($this->container['account_status']) > 20)) {
            $invalidProperties[] = "invalid value for 'account_status', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['doing_business_as']) && (mb_strlen($this->container['doing_business_as']) > 50)) {
            $invalidProperties[] = "invalid value for 'doing_business_as', the character length must be smaller than or equal to 50.";
        }

        $allowedValues = $this->getPackingSlipLevelAllowableValues();
        if (!is_null($this->container['packing_slip_level']) && !in_array($this->container['packing_slip_level'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'packing_slip_level', must be one of '%s'",
                $this->container['packing_slip_level'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['packing_slip_report']) && (mb_strlen($this->container['packing_slip_report']) > 50)) {
            $invalidProperties[] = "invalid value for 'packing_slip_report', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['zpl_label_report']) && (mb_strlen($this->container['zpl_label_report']) > 50)) {
            $invalidProperties[] = "invalid value for 'zpl_label_report', the character length must be smaller than or equal to 50.";
        }

        $allowedValues = $this->getSendAsnAllowableValues();
        if (!is_null($this->container['send_asn']) && !in_array($this->container['send_asn'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'send_asn', must be one of '%s'",
                $this->container['send_asn'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGroupAsnbyAllowableValues();
        if (!is_null($this->container['group_asnby']) && !in_array($this->container['group_asnby'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'group_asnby', must be one of '%s'",
                $this->container['group_asnby'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGroupPalletByAllowableValues();
        if (!is_null($this->container['group_pallet_by']) && !in_array($this->container['group_pallet_by'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'group_pallet_by', must be one of '%s'",
                $this->container['group_pallet_by'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSequenceSsccbyAllowableValues();
        if (!is_null($this->container['sequence_ssccby']) && !in_array($this->container['sequence_ssccby'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sequence_ssccby', must be one of '%s'",
                $this->container['sequence_ssccby'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['uccean_company_number']) && (mb_strlen($this->container['uccean_company_number']) > 10)) {
            $invalidProperties[] = "invalid value for 'uccean_company_number', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['ups_account_number']) && (mb_strlen($this->container['ups_account_number']) > 100)) {
            $invalidProperties[] = "invalid value for 'ups_account_number', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['fedex_account_number']) && (mb_strlen($this->container['fedex_account_number']) > 10)) {
            $invalidProperties[] = "invalid value for 'fedex_account_number', the character length must be smaller than or equal to 10.";
        }

        $allowedValues = $this->getPaymentTermsAllowableValues();
        if (!is_null($this->container['payment_terms']) && !in_array($this->container['payment_terms'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payment_terms', must be one of '%s'",
                $this->container['payment_terms'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDefaultCurrencyCodeAllowableValues();
        if (!is_null($this->container['default_currency_code']) && !in_array($this->container['default_currency_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'default_currency_code', must be one of '%s'",
                $this->container['default_currency_code'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['custom_attribute1']) && (mb_strlen($this->container['custom_attribute1']) > 50)) {
            $invalidProperties[] = "invalid value for 'custom_attribute1', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['custom_attribute2']) && (mb_strlen($this->container['custom_attribute2']) > 50)) {
            $invalidProperties[] = "invalid value for 'custom_attribute2', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['custom_attribute3']) && (mb_strlen($this->container['custom_attribute3']) > 50)) {
            $invalidProperties[] = "invalid value for 'custom_attribute3', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['custom_attribute4']) && (mb_strlen($this->container['custom_attribute4']) > 50)) {
            $invalidProperties[] = "invalid value for 'custom_attribute4', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['import_reference1']) && (mb_strlen($this->container['import_reference1']) > 50)) {
            $invalidProperties[] = "invalid value for 'import_reference1', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['import_reference2']) && (mb_strlen($this->container['import_reference2']) > 50)) {
            $invalidProperties[] = "invalid value for 'import_reference2', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['export_reference1']) && (mb_strlen($this->container['export_reference1']) > 50)) {
            $invalidProperties[] = "invalid value for 'export_reference1', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['export_reference2']) && (mb_strlen($this->container['export_reference2']) > 50)) {
            $invalidProperties[] = "invalid value for 'export_reference2', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets self
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $self self
     *
     * @return self
     */
    public function setSelf($self)
    {
        if (is_null($self)) {
            throw new \InvalidArgumentException('non-nullable self cannot be null');
        }
        $this->container['self'] = $self;

        return $this;
    }

    /**
     * Gets business_unit
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getBusinessUnit()
    {
        return $this->container['business_unit'];
    }

    /**
     * Sets business_unit
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $business_unit business_unit
     *
     * @return self
     */
    public function setBusinessUnit($business_unit)
    {
        if (is_null($business_unit)) {
            throw new \InvalidArgumentException('non-nullable business_unit cannot be null');
        }
        $this->container['business_unit'] = $business_unit;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code Unique identification code for the trading partner.
     *
     * @return self
     */
    public function setCode($code)
    {
        if (is_null($code)) {
            throw new \InvalidArgumentException('non-nullable code cannot be null');
        }
        if ((mb_strlen($code) > 20)) {
            throw new \InvalidArgumentException('invalid length for $code when calling TradingPartnerDTO., must be smaller than or equal to 20.');
        }
        if ((!preg_match("/.*\\S.*/", ObjectSerializer::toString($code)))) {
            throw new \InvalidArgumentException("invalid value for \$code when calling TradingPartnerDTO., must conform to the pattern /.*\\S.*/.");
        }

        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of the trading partner. Required when the trading partner is the consignee partner on an order and will be responsible for shipping charges.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $name when calling TradingPartnerDTO., must be smaller than or equal to 50.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets partnership_type
     *
     * @return string|null
     */
    public function getPartnershipType()
    {
        return $this->container['partnership_type'];
    }

    /**
     * Sets partnership_type
     *
     * @param string|null $partnership_type Type of partnership that the company has with the trading partner. Use a value of `Customer` for partner companies that are purchasing products from the company. Use a value of `Vendor` for partner companies that a company is buying products from.
     *
     * @return self
     */
    public function setPartnershipType($partnership_type)
    {
        if (is_null($partnership_type)) {
            array_push($this->openAPINullablesSetToNull, 'partnership_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('partnership_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getPartnershipTypeAllowableValues();
        if (!is_null($partnership_type) && !in_array($partnership_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'partnership_type', must be one of '%s'",
                    $partnership_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['partnership_type'] = $partnership_type;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Additional information about the trading partner.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return \BeLenka\Deposco\Model\TradingPartnerDTOContact|null
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param \BeLenka\Deposco\Model\TradingPartnerDTOContact|null $contact contact
     *
     * @return self
     */
    public function setContact($contact)
    {
        if (is_null($contact)) {
            throw new \InvalidArgumentException('non-nullable contact cannot be null');
        }
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \BeLenka\Deposco\Model\TradingPartnerDTOAddress|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \BeLenka\Deposco\Model\TradingPartnerDTOAddress|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets bill_to_contact
     *
     * @return \BeLenka\Deposco\Model\TradingPartnerDTOBillToContact|null
     */
    public function getBillToContact()
    {
        return $this->container['bill_to_contact'];
    }

    /**
     * Sets bill_to_contact
     *
     * @param \BeLenka\Deposco\Model\TradingPartnerDTOBillToContact|null $bill_to_contact bill_to_contact
     *
     * @return self
     */
    public function setBillToContact($bill_to_contact)
    {
        if (is_null($bill_to_contact)) {
            throw new \InvalidArgumentException('non-nullable bill_to_contact cannot be null');
        }
        $this->container['bill_to_contact'] = $bill_to_contact;

        return $this;
    }

    /**
     * Gets bill_to_address
     *
     * @return \BeLenka\Deposco\Model\TradingPartnerDTOBillToAddress|null
     */
    public function getBillToAddress()
    {
        return $this->container['bill_to_address'];
    }

    /**
     * Sets bill_to_address
     *
     * @param \BeLenka\Deposco\Model\TradingPartnerDTOBillToAddress|null $bill_to_address bill_to_address
     *
     * @return self
     */
    public function setBillToAddress($bill_to_address)
    {
        if (is_null($bill_to_address)) {
            throw new \InvalidArgumentException('non-nullable bill_to_address cannot be null');
        }
        $this->container['bill_to_address'] = $bill_to_address;

        return $this;
    }

    /**
     * Gets sites
     *
     * @return \BeLenka\Deposco\Model\TradingPartnerSiteCollectionDTO|null
     */
    public function getSites()
    {
        return $this->container['sites'];
    }

    /**
     * Sets sites
     *
     * @param \BeLenka\Deposco\Model\TradingPartnerSiteCollectionDTO|null $sites sites
     *
     * @return self
     */
    public function setSites($sites)
    {
        if (is_null($sites)) {
            throw new \InvalidArgumentException('non-nullable sites cannot be null');
        }
        $this->container['sites'] = $sites;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string|null
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string|null $account_number Account number for the trading partner. Required when the trading partner is the consignee partner on an order and will be responsible for shipping charges.
     *
     * @return self
     */
    public function setAccountNumber($account_number)
    {
        if (is_null($account_number)) {
            array_push($this->openAPINullablesSetToNull, 'account_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('account_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($account_number) && (mb_strlen($account_number) > 30)) {
            throw new \InvalidArgumentException('invalid length for $account_number when calling TradingPartnerDTO., must be smaller than or equal to 30.');
        }

        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets account_status
     *
     * @return string|null
     */
    public function getAccountStatus()
    {
        return $this->container['account_status'];
    }

    /**
     * Sets account_status
     *
     * @param string|null $account_status If this field is set to `Credit Hold`, `Late Payment`, `On Hold`, or other values that are not `Active`, then the value appears next to the trading partner (customer) on the sales order entry page, which enables sales representatives to view the account status and determine whether to submit new orders for the account. If set to the default value of `Active`, then no account status appears on the sales order entry page.
     *
     * @return self
     */
    public function setAccountStatus($account_status)
    {
        if (is_null($account_status)) {
            array_push($this->openAPINullablesSetToNull, 'account_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('account_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($account_status) && (mb_strlen($account_status) > 20)) {
            throw new \InvalidArgumentException('invalid length for $account_status when calling TradingPartnerDTO., must be smaller than or equal to 20.');
        }

        $this->container['account_status'] = $account_status;

        return $this;
    }

    /**
     * Gets doing_business_as
     *
     * @return string|null
     */
    public function getDoingBusinessAs()
    {
        return $this->container['doing_business_as'];
    }

    /**
     * Sets doing_business_as
     *
     * @param string|null $doing_business_as User-friendly company name. Used, for example, on documents that may be formatted for printing such as orders or invoices. Required when creating a Bill-To trading partner for purchase orders that are manually created through data entry in the Purchase Order application.
     *
     * @return self
     */
    public function setDoingBusinessAs($doing_business_as)
    {
        if (is_null($doing_business_as)) {
            array_push($this->openAPINullablesSetToNull, 'doing_business_as');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('doing_business_as', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($doing_business_as) && (mb_strlen($doing_business_as) > 50)) {
            throw new \InvalidArgumentException('invalid length for $doing_business_as when calling TradingPartnerDTO., must be smaller than or equal to 50.');
        }

        $this->container['doing_business_as'] = $doing_business_as;

        return $this;
    }

    /**
     * Gets packing_slip_level
     *
     * @return string|null
     */
    public function getPackingSlipLevel()
    {
        return $this->container['packing_slip_level'];
    }

    /**
     * Sets packing_slip_level
     *
     * @param string|null $packing_slip_level Whether a packing slip is printed at either the shipment level or at the LPN level for orders that are associated with the trading partner. Available values are `Shipment` and `Container`.
     *
     * @return self
     */
    public function setPackingSlipLevel($packing_slip_level)
    {
        if (is_null($packing_slip_level)) {
            array_push($this->openAPINullablesSetToNull, 'packing_slip_level');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('packing_slip_level', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getPackingSlipLevelAllowableValues();
        if (!is_null($packing_slip_level) && !in_array($packing_slip_level, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'packing_slip_level', must be one of '%s'",
                    $packing_slip_level,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['packing_slip_level'] = $packing_slip_level;

        return $this;
    }

    /**
     * Gets packing_slip_report
     *
     * @return string|null
     */
    public function getPackingSlipReport()
    {
        return $this->container['packing_slip_report'];
    }

    /**
     * Sets packing_slip_report
     *
     * @param string|null $packing_slip_report Name of the global (Pentaho) report to use for formatting packing slips for orders that are associated with the trading partner.
     *
     * @return self
     */
    public function setPackingSlipReport($packing_slip_report)
    {
        if (is_null($packing_slip_report)) {
            array_push($this->openAPINullablesSetToNull, 'packing_slip_report');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('packing_slip_report', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($packing_slip_report) && (mb_strlen($packing_slip_report) > 50)) {
            throw new \InvalidArgumentException('invalid length for $packing_slip_report when calling TradingPartnerDTO., must be smaller than or equal to 50.');
        }

        $this->container['packing_slip_report'] = $packing_slip_report;

        return $this;
    }

    /**
     * Gets zpl_label_report
     *
     * @return string|null
     */
    public function getZplLabelReport()
    {
        return $this->container['zpl_label_report'];
    }

    /**
     * Sets zpl_label_report
     *
     * @param string|null $zpl_label_report Name of the label report to use when printing labels such as retail compliant labels for Single Scan Packing or Print to Panda. Use a comma-separated list to enter multiple values.
     *
     * @return self
     */
    public function setZplLabelReport($zpl_label_report)
    {
        if (is_null($zpl_label_report)) {
            array_push($this->openAPINullablesSetToNull, 'zpl_label_report');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('zpl_label_report', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($zpl_label_report) && (mb_strlen($zpl_label_report) > 50)) {
            throw new \InvalidArgumentException('invalid length for $zpl_label_report when calling TradingPartnerDTO., must be smaller than or equal to 50.');
        }

        $this->container['zpl_label_report'] = $zpl_label_report;

        return $this;
    }

    /**
     * Gets send_asn
     *
     * @return string|null
     */
    public function getSendAsn()
    {
        return $this->container['send_asn'];
    }

    /**
     * Sets send_asn
     *
     * @param string|null $send_asn Controls if and when an advance shipping notice (ASN) is sent for orders where the trading partner is the consignee partner:  - `Fully Shipped` - Only send an ASN once the full order is shipped.  - `No` - Never send an ASN. The ASN may be sent based on other configured processes.  - `Yes` - Send an ASN for each shipment, even if the full order is not shipped.
     *
     * @return self
     */
    public function setSendAsn($send_asn)
    {
        if (is_null($send_asn)) {
            array_push($this->openAPINullablesSetToNull, 'send_asn');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('send_asn', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getSendAsnAllowableValues();
        if (!is_null($send_asn) && !in_array($send_asn, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'send_asn', must be one of '%s'",
                    $send_asn,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['send_asn'] = $send_asn;

        return $this;
    }

    /**
     * Gets group_asnby
     *
     * @return string|null
     */
    public function getGroupAsnby()
    {
        return $this->container['group_asnby'];
    }

    /**
     * Sets group_asnby
     *
     * @param string|null $group_asnby Used to group advance ship notices (ASNs) by store or distribution center. By default, one ASN is sent per order.
     *
     * @return self
     */
    public function setGroupAsnby($group_asnby)
    {
        if (is_null($group_asnby)) {
            array_push($this->openAPINullablesSetToNull, 'group_asnby');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('group_asnby', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getGroupAsnbyAllowableValues();
        if (!is_null($group_asnby) && !in_array($group_asnby, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'group_asnby', must be one of '%s'",
                    $group_asnby,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['group_asnby'] = $group_asnby;

        return $this;
    }

    /**
     * Gets group_pallet_by
     *
     * @return string|null
     */
    public function getGroupPalletBy()
    {
        return $this->container['group_pallet_by'];
    }

    /**
     * Sets group_pallet_by
     *
     * @param string|null $group_pallet_by Method for grouping pallets for retailer label printing by the Print to Panda process.
     *
     * @return self
     */
    public function setGroupPalletBy($group_pallet_by)
    {
        if (is_null($group_pallet_by)) {
            array_push($this->openAPINullablesSetToNull, 'group_pallet_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('group_pallet_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getGroupPalletByAllowableValues();
        if (!is_null($group_pallet_by) && !in_array($group_pallet_by, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'group_pallet_by', must be one of '%s'",
                    $group_pallet_by,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['group_pallet_by'] = $group_pallet_by;

        return $this;
    }

    /**
     * Gets expiration_threshold_in_days
     *
     * @return int|null
     */
    public function getExpirationThresholdInDays()
    {
        return $this->container['expiration_threshold_in_days'];
    }

    /**
     * Sets expiration_threshold_in_days
     *
     * @param int|null $expiration_threshold_in_days Used with the 'Sort by FEFO within an expiration day threshold' pick strategy for an order release profile. During the stock allocation process, available pick locations are filtered based on whether the stock meets the threshold for the trading partner on the order.
     *
     * @return self
     */
    public function setExpirationThresholdInDays($expiration_threshold_in_days)
    {
        if (is_null($expiration_threshold_in_days)) {
            array_push($this->openAPINullablesSetToNull, 'expiration_threshold_in_days');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('expiration_threshold_in_days', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['expiration_threshold_in_days'] = $expiration_threshold_in_days;

        return $this;
    }

    /**
     * Gets sscc_numbers_required_for_trip
     *
     * @return bool|null
     */
    public function getSsccNumbersRequiredForTrip()
    {
        return $this->container['sscc_numbers_required_for_trip'];
    }

    /**
     * Sets sscc_numbers_required_for_trip
     *
     * @param bool|null $sscc_numbers_required_for_trip Whether to enable printing of retailer labels with the Print to Panda process.
     *
     * @return self
     */
    public function setSsccNumbersRequiredForTrip($sscc_numbers_required_for_trip)
    {
        if (is_null($sscc_numbers_required_for_trip)) {
            array_push($this->openAPINullablesSetToNull, 'sscc_numbers_required_for_trip');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sscc_numbers_required_for_trip', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sscc_numbers_required_for_trip'] = $sscc_numbers_required_for_trip;

        return $this;
    }

    /**
     * Gets sequence_ssccby
     *
     * @return string|null
     */
    public function getSequenceSsccby()
    {
        return $this->container['sequence_ssccby'];
    }

    /**
     * Sets sequence_ssccby
     *
     * @param string|null $sequence_ssccby Controls inner container grouping for the Print to Panda process (in other words, the type of Y value in the X of Y calculation).  - `Item` - Group at the item-level container on the pallet.  - `Pallet` - Group all containers on the pallet.
     *
     * @return self
     */
    public function setSequenceSsccby($sequence_ssccby)
    {
        if (is_null($sequence_ssccby)) {
            array_push($this->openAPINullablesSetToNull, 'sequence_ssccby');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sequence_ssccby', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getSequenceSsccbyAllowableValues();
        if (!is_null($sequence_ssccby) && !in_array($sequence_ssccby, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sequence_ssccby', must be one of '%s'",
                    $sequence_ssccby,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sequence_ssccby'] = $sequence_ssccby;

        return $this;
    }

    /**
     * Gets uccean_company_number
     *
     * @return string|null
     */
    public function getUcceanCompanyNumber()
    {
        return $this->container['uccean_company_number'];
    }

    /**
     * Sets uccean_company_number
     *
     * @param string|null $uccean_company_number Prefix that is used to generate serial shipping container codes (SSCCs) for shipping labels to retailers that require SSCC-18 codes.
     *
     * @return self
     */
    public function setUcceanCompanyNumber($uccean_company_number)
    {
        if (is_null($uccean_company_number)) {
            array_push($this->openAPINullablesSetToNull, 'uccean_company_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('uccean_company_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($uccean_company_number) && (mb_strlen($uccean_company_number) > 10)) {
            throw new \InvalidArgumentException('invalid length for $uccean_company_number when calling TradingPartnerDTO., must be smaller than or equal to 10.');
        }

        $this->container['uccean_company_number'] = $uccean_company_number;

        return $this;
    }

    /**
     * Gets sscc_expansion_digit
     *
     * @return int|null
     */
    public function getSsccExpansionDigit()
    {
        return $this->container['sscc_expansion_digit'];
    }

    /**
     * Sets sscc_expansion_digit
     *
     * @param int|null $sscc_expansion_digit Extension digit for a Serial Shipping Container Code (SSCC).
     *
     * @return self
     */
    public function setSsccExpansionDigit($sscc_expansion_digit)
    {
        if (is_null($sscc_expansion_digit)) {
            throw new \InvalidArgumentException('non-nullable sscc_expansion_digit cannot be null');
        }
        $this->container['sscc_expansion_digit'] = $sscc_expansion_digit;

        return $this;
    }

    /**
     * Gets price_list
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getPriceList()
    {
        return $this->container['price_list'];
    }

    /**
     * Sets price_list
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $price_list price_list
     *
     * @return self
     */
    public function setPriceList($price_list)
    {
        if (is_null($price_list)) {
            array_push($this->openAPINullablesSetToNull, 'price_list');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('price_list', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['price_list'] = $price_list;

        return $this;
    }

    /**
     * Gets tax_rate
     *
     * @return int|null
     */
    public function getTaxRate()
    {
        return $this->container['tax_rate'];
    }

    /**
     * Sets tax_rate
     *
     * @param int|null $tax_rate Tax rate that is used to calculate tax for a sales order for the trading partner when the Tax Calculation Method is set to Manual on the sales order.
     *
     * @return self
     */
    public function setTaxRate($tax_rate)
    {
        if (is_null($tax_rate)) {
            throw new \InvalidArgumentException('non-nullable tax_rate cannot be null');
        }
        $this->container['tax_rate'] = $tax_rate;

        return $this;
    }

    /**
     * Gets drop_ship_fee
     *
     * @return int|null
     */
    public function getDropShipFee()
    {
        return $this->container['drop_ship_fee'];
    }

    /**
     * Sets drop_ship_fee
     *
     * @param int|null $drop_ship_fee Reserved for future use.
     *
     * @return self
     */
    public function setDropShipFee($drop_ship_fee)
    {
        if (is_null($drop_ship_fee)) {
            throw new \InvalidArgumentException('non-nullable drop_ship_fee cannot be null');
        }
        $this->container['drop_ship_fee'] = $drop_ship_fee;

        return $this;
    }

    /**
     * Gets quality_control_percent
     *
     * @return int|null
     */
    public function getQualityControlPercent()
    {
        return $this->container['quality_control_percent'];
    }

    /**
     * Sets quality_control_percent
     *
     * @param int|null $quality_control_percent Reserved for future use.
     *
     * @return self
     */
    public function setQualityControlPercent($quality_control_percent)
    {
        if (is_null($quality_control_percent)) {
            array_push($this->openAPINullablesSetToNull, 'quality_control_percent');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('quality_control_percent', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['quality_control_percent'] = $quality_control_percent;

        return $this;
    }

    /**
     * Gets use_ship_from_for_shipments
     *
     * @return bool|null
     */
    public function getUseShipFromForShipments()
    {
        return $this->container['use_ship_from_for_shipments'];
    }

    /**
     * Sets use_ship_from_for_shipments
     *
     * @param bool|null $use_ship_from_for_shipments Whether to use the trading partner's address or the facility address as the Ship From address on shipping labels for orders where the trading partner is the consignee partner.
     *
     * @return self
     */
    public function setUseShipFromForShipments($use_ship_from_for_shipments)
    {
        if (is_null($use_ship_from_for_shipments)) {
            array_push($this->openAPINullablesSetToNull, 'use_ship_from_for_shipments');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('use_ship_from_for_shipments', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['use_ship_from_for_shipments'] = $use_ship_from_for_shipments;

        return $this;
    }

    /**
     * Gets ups_account_number
     *
     * @return string|null
     */
    public function getUpsAccountNumber()
    {
        return $this->container['ups_account_number'];
    }

    /**
     * Sets ups_account_number
     *
     * @param string|null $ups_account_number UPS account number to use for shipments to the trading partner that are billed to the trading partner.
     *
     * @return self
     */
    public function setUpsAccountNumber($ups_account_number)
    {
        if (is_null($ups_account_number)) {
            array_push($this->openAPINullablesSetToNull, 'ups_account_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ups_account_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($ups_account_number) && (mb_strlen($ups_account_number) > 100)) {
            throw new \InvalidArgumentException('invalid length for $ups_account_number when calling TradingPartnerDTO., must be smaller than or equal to 100.');
        }

        $this->container['ups_account_number'] = $ups_account_number;

        return $this;
    }

    /**
     * Gets fedex_account_number
     *
     * @return string|null
     */
    public function getFedexAccountNumber()
    {
        return $this->container['fedex_account_number'];
    }

    /**
     * Sets fedex_account_number
     *
     * @param string|null $fedex_account_number FedEx account number to use for shipments to the trading partner that are billed to the trading partner.
     *
     * @return self
     */
    public function setFedexAccountNumber($fedex_account_number)
    {
        if (is_null($fedex_account_number)) {
            array_push($this->openAPINullablesSetToNull, 'fedex_account_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fedex_account_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($fedex_account_number) && (mb_strlen($fedex_account_number) > 10)) {
            throw new \InvalidArgumentException('invalid length for $fedex_account_number when calling TradingPartnerDTO., must be smaller than or equal to 10.');
        }

        $this->container['fedex_account_number'] = $fedex_account_number;

        return $this;
    }

    /**
     * Gets trans_routing_enabled
     *
     * @return bool|null
     */
    public function getTransRoutingEnabled()
    {
        return $this->container['trans_routing_enabled'];
    }

    /**
     * Sets trans_routing_enabled
     *
     * @param bool|null $trans_routing_enabled Whether transportation routing is enabled for trips that are associated with the trading partner.
     *
     * @return self
     */
    public function setTransRoutingEnabled($trans_routing_enabled)
    {
        if (is_null($trans_routing_enabled)) {
            array_push($this->openAPINullablesSetToNull, 'trans_routing_enabled');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('trans_routing_enabled', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['trans_routing_enabled'] = $trans_routing_enabled;

        return $this;
    }

    /**
     * Gets min_order_amount
     *
     * @return int|null
     */
    public function getMinOrderAmount()
    {
        return $this->container['min_order_amount'];
    }

    /**
     * Sets min_order_amount
     *
     * @param int|null $min_order_amount Minimum order amount for purchase orders that are submitted to the trading partner.
     *
     * @return self
     */
    public function setMinOrderAmount($min_order_amount)
    {
        if (is_null($min_order_amount)) {
            throw new \InvalidArgumentException('non-nullable min_order_amount cannot be null');
        }
        $this->container['min_order_amount'] = $min_order_amount;

        return $this;
    }

    /**
     * Gets payment_terms
     *
     * @return string|null
     */
    public function getPaymentTerms()
    {
        return $this->container['payment_terms'];
    }

    /**
     * Sets payment_terms
     *
     * @param string|null $payment_terms Identifies when payment is due for a purchase order where the trading partner is the supplier.
     *
     * @return self
     */
    public function setPaymentTerms($payment_terms)
    {
        if (is_null($payment_terms)) {
            array_push($this->openAPINullablesSetToNull, 'payment_terms');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_terms', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getPaymentTermsAllowableValues();
        if (!is_null($payment_terms) && !in_array($payment_terms, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payment_terms', must be one of '%s'",
                    $payment_terms,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_terms'] = $payment_terms;

        return $this;
    }

    /**
     * Gets default_currency_code
     *
     * @return string|null
     */
    public function getDefaultCurrencyCode()
    {
        return $this->container['default_currency_code'];
    }

    /**
     * Sets default_currency_code
     *
     * @param string|null $default_currency_code ISO currency code that is assigned to purchase orders that are generated from plan orders during inventory planning when the trading partner is the supplier.
     *
     * @return self
     */
    public function setDefaultCurrencyCode($default_currency_code)
    {
        if (is_null($default_currency_code)) {
            array_push($this->openAPINullablesSetToNull, 'default_currency_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('default_currency_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getDefaultCurrencyCodeAllowableValues();
        if (!is_null($default_currency_code) && !in_array($default_currency_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'default_currency_code', must be one of '%s'",
                    $default_currency_code,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['default_currency_code'] = $default_currency_code;

        return $this;
    }

    /**
     * Gets supplier_blackout_calendar
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getSupplierBlackoutCalendar()
    {
        return $this->container['supplier_blackout_calendar'];
    }

    /**
     * Sets supplier_blackout_calendar
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $supplier_blackout_calendar supplier_blackout_calendar
     *
     * @return self
     */
    public function setSupplierBlackoutCalendar($supplier_blackout_calendar)
    {
        if (is_null($supplier_blackout_calendar)) {
            array_push($this->openAPINullablesSetToNull, 'supplier_blackout_calendar');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplier_blackout_calendar', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['supplier_blackout_calendar'] = $supplier_blackout_calendar;

        return $this;
    }

    /**
     * Gets parameters
     *
     * @return \BeLenka\Deposco\Model\TradingPartnerParameterCollectionDTO|null
     */
    public function getParameters()
    {
        return $this->container['parameters'];
    }

    /**
     * Sets parameters
     *
     * @param \BeLenka\Deposco\Model\TradingPartnerParameterCollectionDTO|null $parameters parameters
     *
     * @return self
     */
    public function setParameters($parameters)
    {
        if (is_null($parameters)) {
            throw new \InvalidArgumentException('non-nullable parameters cannot be null');
        }
        $this->container['parameters'] = $parameters;

        return $this;
    }

    /**
     * Gets custom_attribute1
     *
     * @return string|null
     */
    public function getCustomAttribute1()
    {
        return $this->container['custom_attribute1'];
    }

    /**
     * Sets custom_attribute1
     *
     * @param string|null $custom_attribute1 Custom field for the trading partner.
     *
     * @return self
     */
    public function setCustomAttribute1($custom_attribute1)
    {
        if (is_null($custom_attribute1)) {
            array_push($this->openAPINullablesSetToNull, 'custom_attribute1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_attribute1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($custom_attribute1) && (mb_strlen($custom_attribute1) > 50)) {
            throw new \InvalidArgumentException('invalid length for $custom_attribute1 when calling TradingPartnerDTO., must be smaller than or equal to 50.');
        }

        $this->container['custom_attribute1'] = $custom_attribute1;

        return $this;
    }

    /**
     * Gets custom_attribute2
     *
     * @return string|null
     */
    public function getCustomAttribute2()
    {
        return $this->container['custom_attribute2'];
    }

    /**
     * Sets custom_attribute2
     *
     * @param string|null $custom_attribute2 Custom field for the trading partner.
     *
     * @return self
     */
    public function setCustomAttribute2($custom_attribute2)
    {
        if (is_null($custom_attribute2)) {
            array_push($this->openAPINullablesSetToNull, 'custom_attribute2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_attribute2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($custom_attribute2) && (mb_strlen($custom_attribute2) > 50)) {
            throw new \InvalidArgumentException('invalid length for $custom_attribute2 when calling TradingPartnerDTO., must be smaller than or equal to 50.');
        }

        $this->container['custom_attribute2'] = $custom_attribute2;

        return $this;
    }

    /**
     * Gets custom_attribute3
     *
     * @return string|null
     */
    public function getCustomAttribute3()
    {
        return $this->container['custom_attribute3'];
    }

    /**
     * Sets custom_attribute3
     *
     * @param string|null $custom_attribute3 Custom field for the trading partner.
     *
     * @return self
     */
    public function setCustomAttribute3($custom_attribute3)
    {
        if (is_null($custom_attribute3)) {
            array_push($this->openAPINullablesSetToNull, 'custom_attribute3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_attribute3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($custom_attribute3) && (mb_strlen($custom_attribute3) > 50)) {
            throw new \InvalidArgumentException('invalid length for $custom_attribute3 when calling TradingPartnerDTO., must be smaller than or equal to 50.');
        }

        $this->container['custom_attribute3'] = $custom_attribute3;

        return $this;
    }

    /**
     * Gets custom_attribute4
     *
     * @return string|null
     */
    public function getCustomAttribute4()
    {
        return $this->container['custom_attribute4'];
    }

    /**
     * Sets custom_attribute4
     *
     * @param string|null $custom_attribute4 Custom field for the trading partner.
     *
     * @return self
     */
    public function setCustomAttribute4($custom_attribute4)
    {
        if (is_null($custom_attribute4)) {
            array_push($this->openAPINullablesSetToNull, 'custom_attribute4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_attribute4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($custom_attribute4) && (mb_strlen($custom_attribute4) > 50)) {
            throw new \InvalidArgumentException('invalid length for $custom_attribute4 when calling TradingPartnerDTO., must be smaller than or equal to 50.');
        }

        $this->container['custom_attribute4'] = $custom_attribute4;

        return $this;
    }

    /**
     * Gets import_reference1
     *
     * @return string|null
     */
    public function getImportReference1()
    {
        return $this->container['import_reference1'];
    }

    /**
     * Sets import_reference1
     *
     * @param string|null $import_reference1 Used for matching incoming EDI files to the trading partner.
     *
     * @return self
     */
    public function setImportReference1($import_reference1)
    {
        if (is_null($import_reference1)) {
            array_push($this->openAPINullablesSetToNull, 'import_reference1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('import_reference1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($import_reference1) && (mb_strlen($import_reference1) > 50)) {
            throw new \InvalidArgumentException('invalid length for $import_reference1 when calling TradingPartnerDTO., must be smaller than or equal to 50.');
        }

        $this->container['import_reference1'] = $import_reference1;

        return $this;
    }

    /**
     * Gets import_reference2
     *
     * @return string|null
     */
    public function getImportReference2()
    {
        return $this->container['import_reference2'];
    }

    /**
     * Sets import_reference2
     *
     * @param string|null $import_reference2 Used for matching incoming EDI files to the trading partner.
     *
     * @return self
     */
    public function setImportReference2($import_reference2)
    {
        if (is_null($import_reference2)) {
            array_push($this->openAPINullablesSetToNull, 'import_reference2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('import_reference2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($import_reference2) && (mb_strlen($import_reference2) > 50)) {
            throw new \InvalidArgumentException('invalid length for $import_reference2 when calling TradingPartnerDTO., must be smaller than or equal to 50.');
        }

        $this->container['import_reference2'] = $import_reference2;

        return $this;
    }

    /**
     * Gets export_reference1
     *
     * @return string|null
     */
    public function getExportReference1()
    {
        return $this->container['export_reference1'];
    }

    /**
     * Sets export_reference1
     *
     * @param string|null $export_reference1 Information about the trading partner that is sent as part of outgoing data that is associated with the trading partner.
     *
     * @return self
     */
    public function setExportReference1($export_reference1)
    {
        if (is_null($export_reference1)) {
            array_push($this->openAPINullablesSetToNull, 'export_reference1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('export_reference1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($export_reference1) && (mb_strlen($export_reference1) > 50)) {
            throw new \InvalidArgumentException('invalid length for $export_reference1 when calling TradingPartnerDTO., must be smaller than or equal to 50.');
        }

        $this->container['export_reference1'] = $export_reference1;

        return $this;
    }

    /**
     * Gets export_reference2
     *
     * @return string|null
     */
    public function getExportReference2()
    {
        return $this->container['export_reference2'];
    }

    /**
     * Sets export_reference2
     *
     * @param string|null $export_reference2 Information about the trading partner that is sent as part of outgoing data that is associated with the trading partner.
     *
     * @return self
     */
    public function setExportReference2($export_reference2)
    {
        if (is_null($export_reference2)) {
            array_push($this->openAPINullablesSetToNull, 'export_reference2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('export_reference2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($export_reference2) && (mb_strlen($export_reference2) > 50)) {
            throw new \InvalidArgumentException('invalid length for $export_reference2 when calling TradingPartnerDTO., must be smaller than or equal to 50.');
        }

        $this->container['export_reference2'] = $export_reference2;

        return $this;
    }

    /**
     * Gets channels
     *
     * @return \BeLenka\Deposco\Model\ChannelDTO[]|null
     */
    public function getChannels()
    {
        return $this->container['channels'];
    }

    /**
     * Sets channels
     *
     * @param \BeLenka\Deposco\Model\ChannelDTO[]|null $channels Array of channel cross-references for the trading partner.
     *
     * @return self
     */
    public function setChannels($channels)
    {
        if (is_null($channels)) {
            array_push($this->openAPINullablesSetToNull, 'channels');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('channels', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['channels'] = $channels;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime|null $created_date Date and time that the trading partner was created.
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets updated_date
     *
     * @return \DateTime|null
     */
    public function getUpdatedDate()
    {
        return $this->container['updated_date'];
    }

    /**
     * Sets updated_date
     *
     * @param \DateTime|null $updated_date Date and time that the trading partner was last updated.
     *
     * @return self
     */
    public function setUpdatedDate($updated_date)
    {
        if (is_null($updated_date)) {
            throw new \InvalidArgumentException('non-nullable updated_date cannot be null');
        }
        $this->container['updated_date'] = $updated_date;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            throw new \InvalidArgumentException('non-nullable created_by cannot be null');
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $updated_by updated_by
     *
     * @return self
     */
    public function setUpdatedBy($updated_by)
    {
        if (is_null($updated_by)) {
            throw new \InvalidArgumentException('non-nullable updated_by cannot be null');
        }
        $this->container['updated_by'] = $updated_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


