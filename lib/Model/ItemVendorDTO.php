<?php
/**
 * ItemVendorDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deposco API
 *
 * Welcome to the Deposco API Reference! The Deposco API enables you to integrate your system with Deposco.  * Integrate a product information system (PIM) by creating and retrieving data for items, packs, UPCs, and kits. * Set up warehouse data by creating facilities, zones, locations, and storage details. * Create inbound orders that can be received and outbound orders that can be fulfilled with Deposco warehouse management processes.  This reference provides details on available operations, endpoints, parameters, schemas, and responses.  Example requests and responses are also available for you to use as a reference. You can copy the examples to use as a starting point for your own requests.  Review the guides to learn how the API is used in common business scenarios such as setting up the warehouse and integrating a Product Information Management (PIM) system.  When you're ready to get started, register for a developer account and then log in to create your application in the developer portal.
 *
 * The version of the OpenAPI document: 2.0.2519
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\Deposco\Model;

use \ArrayAccess;
use \BeLenka\Deposco\ObjectSerializer;

/**
 * ItemVendorDTO Class Doc Comment
 *
 * @category Class
 * @description Record that connects an item to a supplier or vendor (trading partner) from which the item is purchased.
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ItemVendorDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ItemVendorDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'self' => '\BeLenka\Deposco\Model\EntityRef',
        'item' => '\BeLenka\Deposco\Model\EntityRef',
        'trading_partner' => '\BeLenka\Deposco\Model\EntityRef',
        'item_sku_upc' => 'string',
        'unit_cost' => 'int',
        'short_description' => 'string',
        'long_description' => 'string',
        'is_preferred' => 'bool',
        'fulfillment_type' => 'string',
        'reorder_point' => 'int',
        'reorder_quantity' => 'int',
        'quantity' => 'int',
        'import_reference1' => 'string',
        'import_reference2' => 'string',
        'export_reference1' => 'string',
        'export_reference2' => 'string',
        'created_date' => '\DateTime',
        'updated_date' => '\DateTime',
        'created_by' => '\BeLenka\Deposco\Model\EntityRef',
        'updated_by' => '\BeLenka\Deposco\Model\EntityRef'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'self' => null,
        'item' => null,
        'trading_partner' => null,
        'item_sku_upc' => null,
        'unit_cost' => 'double',
        'short_description' => null,
        'long_description' => null,
        'is_preferred' => null,
        'fulfillment_type' => null,
        'reorder_point' => null,
        'reorder_quantity' => null,
        'quantity' => null,
        'import_reference1' => null,
        'import_reference2' => null,
        'export_reference1' => null,
        'export_reference2' => null,
        'created_date' => 'date-time',
        'updated_date' => 'date-time',
        'created_by' => null,
        'updated_by' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'self' => false,
        'item' => false,
        'trading_partner' => false,
        'item_sku_upc' => true,
        'unit_cost' => false,
        'short_description' => true,
        'long_description' => true,
        'is_preferred' => false,
        'fulfillment_type' => true,
        'reorder_point' => false,
        'reorder_quantity' => false,
        'quantity' => false,
        'import_reference1' => true,
        'import_reference2' => true,
        'export_reference1' => true,
        'export_reference2' => true,
        'created_date' => false,
        'updated_date' => false,
        'created_by' => false,
        'updated_by' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'self' => 'self',
        'item' => 'item',
        'trading_partner' => 'tradingPartner',
        'item_sku_upc' => 'itemSkuUpc',
        'unit_cost' => 'unitCost',
        'short_description' => 'shortDescription',
        'long_description' => 'longDescription',
        'is_preferred' => 'isPreferred',
        'fulfillment_type' => 'fulfillmentType',
        'reorder_point' => 'reorderPoint',
        'reorder_quantity' => 'reorderQuantity',
        'quantity' => 'quantity',
        'import_reference1' => 'importReference1',
        'import_reference2' => 'importReference2',
        'export_reference1' => 'exportReference1',
        'export_reference2' => 'exportReference2',
        'created_date' => 'createdDate',
        'updated_date' => 'updatedDate',
        'created_by' => 'createdBy',
        'updated_by' => 'updatedBy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'self' => 'setSelf',
        'item' => 'setItem',
        'trading_partner' => 'setTradingPartner',
        'item_sku_upc' => 'setItemSkuUpc',
        'unit_cost' => 'setUnitCost',
        'short_description' => 'setShortDescription',
        'long_description' => 'setLongDescription',
        'is_preferred' => 'setIsPreferred',
        'fulfillment_type' => 'setFulfillmentType',
        'reorder_point' => 'setReorderPoint',
        'reorder_quantity' => 'setReorderQuantity',
        'quantity' => 'setQuantity',
        'import_reference1' => 'setImportReference1',
        'import_reference2' => 'setImportReference2',
        'export_reference1' => 'setExportReference1',
        'export_reference2' => 'setExportReference2',
        'created_date' => 'setCreatedDate',
        'updated_date' => 'setUpdatedDate',
        'created_by' => 'setCreatedBy',
        'updated_by' => 'setUpdatedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'self' => 'getSelf',
        'item' => 'getItem',
        'trading_partner' => 'getTradingPartner',
        'item_sku_upc' => 'getItemSkuUpc',
        'unit_cost' => 'getUnitCost',
        'short_description' => 'getShortDescription',
        'long_description' => 'getLongDescription',
        'is_preferred' => 'getIsPreferred',
        'fulfillment_type' => 'getFulfillmentType',
        'reorder_point' => 'getReorderPoint',
        'reorder_quantity' => 'getReorderQuantity',
        'quantity' => 'getQuantity',
        'import_reference1' => 'getImportReference1',
        'import_reference2' => 'getImportReference2',
        'export_reference1' => 'getExportReference1',
        'export_reference2' => 'getExportReference2',
        'created_date' => 'getCreatedDate',
        'updated_date' => 'getUpdatedDate',
        'created_by' => 'getCreatedBy',
        'updated_by' => 'getUpdatedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const FULFILLMENT_TYPE_INVENTORY = 'INVENTORY';
    public const FULFILLMENT_TYPE_DROP_SHIP = 'DROP SHIP';
    public const FULFILLMENT_TYPE_CROSS_SHIP = 'CROSS SHIP';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFulfillmentTypeAllowableValues()
    {
        return [
            self::FULFILLMENT_TYPE_INVENTORY,
            self::FULFILLMENT_TYPE_DROP_SHIP,
            self::FULFILLMENT_TYPE_CROSS_SHIP,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('self', $data ?? [], null);
        $this->setIfExists('item', $data ?? [], null);
        $this->setIfExists('trading_partner', $data ?? [], null);
        $this->setIfExists('item_sku_upc', $data ?? [], null);
        $this->setIfExists('unit_cost', $data ?? [], null);
        $this->setIfExists('short_description', $data ?? [], null);
        $this->setIfExists('long_description', $data ?? [], null);
        $this->setIfExists('is_preferred', $data ?? [], null);
        $this->setIfExists('fulfillment_type', $data ?? [], null);
        $this->setIfExists('reorder_point', $data ?? [], null);
        $this->setIfExists('reorder_quantity', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('import_reference1', $data ?? [], null);
        $this->setIfExists('import_reference2', $data ?? [], null);
        $this->setIfExists('export_reference1', $data ?? [], null);
        $this->setIfExists('export_reference2', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('updated_date', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('updated_by', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['trading_partner'] === null) {
            $invalidProperties[] = "'trading_partner' can't be null";
        }
        if (!is_null($this->container['item_sku_upc']) && (mb_strlen($this->container['item_sku_upc']) > 50)) {
            $invalidProperties[] = "invalid value for 'item_sku_upc', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['unit_cost']) && ($this->container['unit_cost'] > 10000000)) {
            $invalidProperties[] = "invalid value for 'unit_cost', must be smaller than or equal to 10000000.";
        }

        if (!is_null($this->container['unit_cost']) && ($this->container['unit_cost'] < 0)) {
            $invalidProperties[] = "invalid value for 'unit_cost', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['short_description']) && (mb_strlen($this->container['short_description']) > 50)) {
            $invalidProperties[] = "invalid value for 'short_description', the character length must be smaller than or equal to 50.";
        }

        $allowedValues = $this->getFulfillmentTypeAllowableValues();
        if (!is_null($this->container['fulfillment_type']) && !in_array($this->container['fulfillment_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fulfillment_type', must be one of '%s'",
                $this->container['fulfillment_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['import_reference1']) && (mb_strlen($this->container['import_reference1']) > 50)) {
            $invalidProperties[] = "invalid value for 'import_reference1', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['import_reference2']) && (mb_strlen($this->container['import_reference2']) > 50)) {
            $invalidProperties[] = "invalid value for 'import_reference2', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['export_reference1']) && (mb_strlen($this->container['export_reference1']) > 50)) {
            $invalidProperties[] = "invalid value for 'export_reference1', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['export_reference2']) && (mb_strlen($this->container['export_reference2']) > 50)) {
            $invalidProperties[] = "invalid value for 'export_reference2', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets self
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $self self
     *
     * @return self
     */
    public function setSelf($self)
    {
        if (is_null($self)) {
            throw new \InvalidArgumentException('non-nullable self cannot be null');
        }
        $this->container['self'] = $self;

        return $this;
    }

    /**
     * Gets item
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getItem()
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $item item
     *
     * @return self
     */
    public function setItem($item)
    {
        if (is_null($item)) {
            throw new \InvalidArgumentException('non-nullable item cannot be null');
        }
        $this->container['item'] = $item;

        return $this;
    }

    /**
     * Gets trading_partner
     *
     * @return \BeLenka\Deposco\Model\EntityRef
     */
    public function getTradingPartner()
    {
        return $this->container['trading_partner'];
    }

    /**
     * Sets trading_partner
     *
     * @param \BeLenka\Deposco\Model\EntityRef $trading_partner trading_partner
     *
     * @return self
     */
    public function setTradingPartner($trading_partner)
    {
        if (is_null($trading_partner)) {
            throw new \InvalidArgumentException('non-nullable trading_partner cannot be null');
        }
        $this->container['trading_partner'] = $trading_partner;

        return $this;
    }

    /**
     * Gets item_sku_upc
     *
     * @return string|null
     */
    public function getItemSkuUpc()
    {
        return $this->container['item_sku_upc'];
    }

    /**
     * Sets item_sku_upc
     *
     * @param string|null $item_sku_upc UPC of the item for the supplier.
     *
     * @return self
     */
    public function setItemSkuUpc($item_sku_upc)
    {
        if (is_null($item_sku_upc)) {
            array_push($this->openAPINullablesSetToNull, 'item_sku_upc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_sku_upc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($item_sku_upc) && (mb_strlen($item_sku_upc) > 50)) {
            throw new \InvalidArgumentException('invalid length for $item_sku_upc when calling ItemVendorDTO., must be smaller than or equal to 50.');
        }

        $this->container['item_sku_upc'] = $item_sku_upc;

        return $this;
    }

    /**
     * Gets unit_cost
     *
     * @return int|null
     */
    public function getUnitCost()
    {
        return $this->container['unit_cost'];
    }

    /**
     * Sets unit_cost
     *
     * @param int|null $unit_cost Unit cost for purchasing the item from the supplier.
     *
     * @return self
     */
    public function setUnitCost($unit_cost)
    {
        if (is_null($unit_cost)) {
            throw new \InvalidArgumentException('non-nullable unit_cost cannot be null');
        }

        if (($unit_cost > 0)) {
            throw new \InvalidArgumentException('invalid value for $unit_cost when calling ItemVendorDTO., must be smaller than or equal to 10000000.');
        }
        if (($unit_cost < 0)) {
            throw new \InvalidArgumentException('invalid value for $unit_cost when calling ItemVendorDTO., must be bigger than or equal to 0.');
        }

        $this->container['unit_cost'] = $unit_cost;

        return $this;
    }

    /**
     * Gets short_description
     *
     * @return string|null
     */
    public function getShortDescription()
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     *
     * @param string|null $short_description Brief description of the item from the supplier.
     *
     * @return self
     */
    public function setShortDescription($short_description)
    {
        if (is_null($short_description)) {
            array_push($this->openAPINullablesSetToNull, 'short_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('short_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($short_description) && (mb_strlen($short_description) > 50)) {
            throw new \InvalidArgumentException('invalid length for $short_description when calling ItemVendorDTO., must be smaller than or equal to 50.');
        }

        $this->container['short_description'] = $short_description;

        return $this;
    }

    /**
     * Gets long_description
     *
     * @return string|null
     */
    public function getLongDescription()
    {
        return $this->container['long_description'];
    }

    /**
     * Sets long_description
     *
     * @param string|null $long_description Full description of the item from the supplier.
     *
     * @return self
     */
    public function setLongDescription($long_description)
    {
        if (is_null($long_description)) {
            array_push($this->openAPINullablesSetToNull, 'long_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('long_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['long_description'] = $long_description;

        return $this;
    }

    /**
     * Gets is_preferred
     *
     * @return bool|null
     */
    public function getIsPreferred()
    {
        return $this->container['is_preferred'];
    }

    /**
     * Sets is_preferred
     *
     * @param bool|null $is_preferred Whether the supplier is the preferred supplier from which the item is purchased.
     *
     * @return self
     */
    public function setIsPreferred($is_preferred)
    {
        if (is_null($is_preferred)) {
            throw new \InvalidArgumentException('non-nullable is_preferred cannot be null');
        }
        $this->container['is_preferred'] = $is_preferred;

        return $this;
    }

    /**
     * Gets fulfillment_type
     *
     * @return string|null
     */
    public function getFulfillmentType()
    {
        return $this->container['fulfillment_type'];
    }

    /**
     * Sets fulfillment_type
     *
     * @param string|null $fulfillment_type How orders for the item are fulfilled by the supplier.
     *
     * @return self
     */
    public function setFulfillmentType($fulfillment_type)
    {
        if (is_null($fulfillment_type)) {
            array_push($this->openAPINullablesSetToNull, 'fulfillment_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fulfillment_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getFulfillmentTypeAllowableValues();
        if (!is_null($fulfillment_type) && !in_array($fulfillment_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fulfillment_type', must be one of '%s'",
                    $fulfillment_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fulfillment_type'] = $fulfillment_type;

        return $this;
    }

    /**
     * Gets reorder_point
     *
     * @return int|null
     */
    public function getReorderPoint()
    {
        return $this->container['reorder_point'];
    }

    /**
     * Sets reorder_point
     *
     * @param int|null $reorder_point Inventory level at which stock needs to be reordered. Used for informational purposes only. For inventory planning with Bright Inventory, this value is automatically calculated and stored on the plan item record.
     *
     * @return self
     */
    public function setReorderPoint($reorder_point)
    {
        if (is_null($reorder_point)) {
            throw new \InvalidArgumentException('non-nullable reorder_point cannot be null');
        }
        $this->container['reorder_point'] = $reorder_point;

        return $this;
    }

    /**
     * Gets reorder_quantity
     *
     * @return int|null
     */
    public function getReorderQuantity()
    {
        return $this->container['reorder_quantity'];
    }

    /**
     * Sets reorder_quantity
     *
     * @param int|null $reorder_quantity Minimum quantity of the item that can be ordered from the supplier. Used for informational purposes only. For inventory planning with Bright Inventory, this value is defined on the plan item supplier record.
     *
     * @return self
     */
    public function setReorderQuantity($reorder_quantity)
    {
        if (is_null($reorder_quantity)) {
            throw new \InvalidArgumentException('non-nullable reorder_quantity cannot be null');
        }
        $this->container['reorder_quantity'] = $reorder_quantity;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int|null $quantity Quantity of the item that is available from the supplier. Used for informational purposes only.
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets import_reference1
     *
     * @return string|null
     */
    public function getImportReference1()
    {
        return $this->container['import_reference1'];
    }

    /**
     * Sets import_reference1
     *
     * @param string|null $import_reference1 Used for socket integrations to store the supplier's ID for the item.
     *
     * @return self
     */
    public function setImportReference1($import_reference1)
    {
        if (is_null($import_reference1)) {
            array_push($this->openAPINullablesSetToNull, 'import_reference1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('import_reference1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($import_reference1) && (mb_strlen($import_reference1) > 50)) {
            throw new \InvalidArgumentException('invalid length for $import_reference1 when calling ItemVendorDTO., must be smaller than or equal to 50.');
        }

        $this->container['import_reference1'] = $import_reference1;

        return $this;
    }

    /**
     * Gets import_reference2
     *
     * @return string|null
     */
    public function getImportReference2()
    {
        return $this->container['import_reference2'];
    }

    /**
     * Sets import_reference2
     *
     * @param string|null $import_reference2 Used for socket integrations to store additional supplier information for the item, such as a SKU.
     *
     * @return self
     */
    public function setImportReference2($import_reference2)
    {
        if (is_null($import_reference2)) {
            array_push($this->openAPINullablesSetToNull, 'import_reference2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('import_reference2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($import_reference2) && (mb_strlen($import_reference2) > 50)) {
            throw new \InvalidArgumentException('invalid length for $import_reference2 when calling ItemVendorDTO., must be smaller than or equal to 50.');
        }

        $this->container['import_reference2'] = $import_reference2;

        return $this;
    }

    /**
     * Gets export_reference1
     *
     * @return string|null
     */
    public function getExportReference1()
    {
        return $this->container['export_reference1'];
    }

    /**
     * Sets export_reference1
     *
     * @param string|null $export_reference1 Used for socket integrations to store information about the supplier.
     *
     * @return self
     */
    public function setExportReference1($export_reference1)
    {
        if (is_null($export_reference1)) {
            array_push($this->openAPINullablesSetToNull, 'export_reference1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('export_reference1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($export_reference1) && (mb_strlen($export_reference1) > 50)) {
            throw new \InvalidArgumentException('invalid length for $export_reference1 when calling ItemVendorDTO., must be smaller than or equal to 50.');
        }

        $this->container['export_reference1'] = $export_reference1;

        return $this;
    }

    /**
     * Gets export_reference2
     *
     * @return string|null
     */
    public function getExportReference2()
    {
        return $this->container['export_reference2'];
    }

    /**
     * Sets export_reference2
     *
     * @param string|null $export_reference2 Used for socket integrations to store information about the supplier.
     *
     * @return self
     */
    public function setExportReference2($export_reference2)
    {
        if (is_null($export_reference2)) {
            array_push($this->openAPINullablesSetToNull, 'export_reference2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('export_reference2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($export_reference2) && (mb_strlen($export_reference2) > 50)) {
            throw new \InvalidArgumentException('invalid length for $export_reference2 when calling ItemVendorDTO., must be smaller than or equal to 50.');
        }

        $this->container['export_reference2'] = $export_reference2;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime|null $created_date Date and time that the item vendor was created.
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets updated_date
     *
     * @return \DateTime|null
     */
    public function getUpdatedDate()
    {
        return $this->container['updated_date'];
    }

    /**
     * Sets updated_date
     *
     * @param \DateTime|null $updated_date Date and time that the item vendor was last updated.
     *
     * @return self
     */
    public function setUpdatedDate($updated_date)
    {
        if (is_null($updated_date)) {
            throw new \InvalidArgumentException('non-nullable updated_date cannot be null');
        }
        $this->container['updated_date'] = $updated_date;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            throw new \InvalidArgumentException('non-nullable created_by cannot be null');
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $updated_by updated_by
     *
     * @return self
     */
    public function setUpdatedBy($updated_by)
    {
        if (is_null($updated_by)) {
            throw new \InvalidArgumentException('non-nullable updated_by cannot be null');
        }
        $this->container['updated_by'] = $updated_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


