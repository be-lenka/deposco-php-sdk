<?php
/**
 * FacilityDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deposco API
 *
 * Welcome to the Deposco API Reference! The Deposco API enables you to integrate your system with Deposco.  * Integrate a product information system (PIM) by creating and retrieving data for items, packs, UPCs, and kits. * Set up warehouse data by creating facilities, zones, locations, and storage details. * Create inbound orders that can be received and outbound orders that can be fulfilled with Deposco warehouse management processes.  This reference provides details on available operations, endpoints, parameters, schemas, and responses.  Example requests and responses are also available for you to use as a reference. You can copy the examples to use as a starting point for your own requests.  Review the guides to learn how the API is used in common business scenarios such as setting up the warehouse and integrating a Product Information Management (PIM) system.  When you're ready to get started, register for a developer account and then log in to create your application in the developer portal.
 *
 * The version of the OpenAPI document: 2.0.2519
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\Deposco\Model;

use \ArrayAccess;
use \BeLenka\Deposco\ObjectSerializer;

/**
 * FacilityDTO Class Doc Comment
 *
 * @category Class
 * @description Physical location for a company, such as a warehouse/distribution center or a retail store.
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FacilityDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FacilityDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'self' => '\BeLenka\Deposco\Model\EntityRef',
        'business_unit' => '\BeLenka\Deposco\Model\EntityRef',
        'number' => 'string',
        'name' => 'string',
        'type' => 'string',
        'is_virtual' => 'bool',
        'dba_name' => 'string',
        'description' => 'string',
        'phone' => 'string',
        'contact' => '\BeLenka\Deposco\Model\FacilityDTOContact',
        'address' => '\BeLenka\Deposco\Model\FacilityDTOAddress',
        'facility_uom_system' => 'string',
        'time_zone' => '\BeLenka\Deposco\Model\TimeZone',
        'enable_customer_pickup' => 'bool',
        'enable_ship_to_customer' => 'bool',
        'latitude' => 'int',
        'longitude' => 'int',
        'square_feet' => 'int',
        'fulfillment_facility' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'import_reference' => 'string',
        'created_date' => '\DateTime',
        'updated_date' => '\DateTime',
        'created_by' => '\BeLenka\Deposco\Model\EntityRef',
        'updated_by' => '\BeLenka\Deposco\Model\EntityRef'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'self' => null,
        'business_unit' => null,
        'number' => null,
        'name' => null,
        'type' => null,
        'is_virtual' => null,
        'dba_name' => null,
        'description' => null,
        'phone' => null,
        'contact' => null,
        'address' => null,
        'facility_uom_system' => null,
        'time_zone' => null,
        'enable_customer_pickup' => null,
        'enable_ship_to_customer' => null,
        'latitude' => null,
        'longitude' => null,
        'square_feet' => null,
        'fulfillment_facility' => null,
        'import_reference' => null,
        'created_date' => 'date-time',
        'updated_date' => 'date-time',
        'created_by' => null,
        'updated_by' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'self' => false,
        'business_unit' => false,
        'number' => false,
        'name' => true,
        'type' => true,
        'is_virtual' => false,
        'dba_name' => true,
        'description' => true,
        'phone' => true,
        'contact' => false,
        'address' => false,
        'facility_uom_system' => true,
        'time_zone' => true,
        'enable_customer_pickup' => false,
        'enable_ship_to_customer' => false,
        'latitude' => true,
        'longitude' => true,
        'square_feet' => false,
        'fulfillment_facility' => true,
        'import_reference' => true,
        'created_date' => false,
        'updated_date' => false,
        'created_by' => false,
        'updated_by' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'self' => 'self',
        'business_unit' => 'businessUnit',
        'number' => 'number',
        'name' => 'name',
        'type' => 'type',
        'is_virtual' => 'isVirtual',
        'dba_name' => 'dbaName',
        'description' => 'description',
        'phone' => 'phone',
        'contact' => 'contact',
        'address' => 'address',
        'facility_uom_system' => 'facilityUOMSystem',
        'time_zone' => 'timeZone',
        'enable_customer_pickup' => 'enableCustomerPickup',
        'enable_ship_to_customer' => 'enableShipToCustomer',
        'latitude' => 'latitude',
        'longitude' => 'longitude',
        'square_feet' => 'squareFeet',
        'fulfillment_facility' => 'fulfillmentFacility',
        'import_reference' => 'importReference',
        'created_date' => 'createdDate',
        'updated_date' => 'updatedDate',
        'created_by' => 'createdBy',
        'updated_by' => 'updatedBy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'self' => 'setSelf',
        'business_unit' => 'setBusinessUnit',
        'number' => 'setNumber',
        'name' => 'setName',
        'type' => 'setType',
        'is_virtual' => 'setIsVirtual',
        'dba_name' => 'setDbaName',
        'description' => 'setDescription',
        'phone' => 'setPhone',
        'contact' => 'setContact',
        'address' => 'setAddress',
        'facility_uom_system' => 'setFacilityUomSystem',
        'time_zone' => 'setTimeZone',
        'enable_customer_pickup' => 'setEnableCustomerPickup',
        'enable_ship_to_customer' => 'setEnableShipToCustomer',
        'latitude' => 'setLatitude',
        'longitude' => 'setLongitude',
        'square_feet' => 'setSquareFeet',
        'fulfillment_facility' => 'setFulfillmentFacility',
        'import_reference' => 'setImportReference',
        'created_date' => 'setCreatedDate',
        'updated_date' => 'setUpdatedDate',
        'created_by' => 'setCreatedBy',
        'updated_by' => 'setUpdatedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'self' => 'getSelf',
        'business_unit' => 'getBusinessUnit',
        'number' => 'getNumber',
        'name' => 'getName',
        'type' => 'getType',
        'is_virtual' => 'getIsVirtual',
        'dba_name' => 'getDbaName',
        'description' => 'getDescription',
        'phone' => 'getPhone',
        'contact' => 'getContact',
        'address' => 'getAddress',
        'facility_uom_system' => 'getFacilityUomSystem',
        'time_zone' => 'getTimeZone',
        'enable_customer_pickup' => 'getEnableCustomerPickup',
        'enable_ship_to_customer' => 'getEnableShipToCustomer',
        'latitude' => 'getLatitude',
        'longitude' => 'getLongitude',
        'square_feet' => 'getSquareFeet',
        'fulfillment_facility' => 'getFulfillmentFacility',
        'import_reference' => 'getImportReference',
        'created_date' => 'getCreatedDate',
        'updated_date' => 'getUpdatedDate',
        'created_by' => 'getCreatedBy',
        'updated_by' => 'getUpdatedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_DISTRIBUTION_CENTER = 'Distribution Center';
    public const TYPE_RETAIL_STORE = 'Retail Store';
    public const FACILITY_UOM_SYSTEM_METRIC = 'Metric';
    public const FACILITY_UOM_SYSTEM_IMPERIAL = 'Imperial';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_DISTRIBUTION_CENTER,
            self::TYPE_RETAIL_STORE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFacilityUomSystemAllowableValues()
    {
        return [
            self::FACILITY_UOM_SYSTEM_METRIC,
            self::FACILITY_UOM_SYSTEM_IMPERIAL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('self', $data ?? [], null);
        $this->setIfExists('business_unit', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('is_virtual', $data ?? [], null);
        $this->setIfExists('dba_name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('contact', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('facility_uom_system', $data ?? [], null);
        $this->setIfExists('time_zone', $data ?? [], null);
        $this->setIfExists('enable_customer_pickup', $data ?? [], null);
        $this->setIfExists('enable_ship_to_customer', $data ?? [], null);
        $this->setIfExists('latitude', $data ?? [], null);
        $this->setIfExists('longitude', $data ?? [], null);
        $this->setIfExists('square_feet', $data ?? [], null);
        $this->setIfExists('fulfillment_facility', $data ?? [], null);
        $this->setIfExists('import_reference', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('updated_date', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('updated_by', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['business_unit'] === null) {
            $invalidProperties[] = "'business_unit' can't be null";
        }
        if ($this->container['number'] === null) {
            $invalidProperties[] = "'number' can't be null";
        }
        if ((mb_strlen($this->container['number']) > 20)) {
            $invalidProperties[] = "invalid value for 'number', the character length must be smaller than or equal to 20.";
        }

        if (!preg_match("/.*\\S.*/", $this->container['number'])) {
            $invalidProperties[] = "invalid value for 'number', must be conform to the pattern /.*\\S.*/.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 30)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 30.";
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['dba_name']) && (mb_strlen($this->container['dba_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'dba_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['phone']) && (mb_strlen($this->container['phone']) > 30)) {
            $invalidProperties[] = "invalid value for 'phone', the character length must be smaller than or equal to 30.";
        }

        $allowedValues = $this->getFacilityUomSystemAllowableValues();
        if (!is_null($this->container['facility_uom_system']) && !in_array($this->container['facility_uom_system'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'facility_uom_system', must be one of '%s'",
                $this->container['facility_uom_system'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['import_reference']) && (mb_strlen($this->container['import_reference']) > 25)) {
            $invalidProperties[] = "invalid value for 'import_reference', the character length must be smaller than or equal to 25.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets self
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $self self
     *
     * @return self
     */
    public function setSelf($self)
    {
        if (is_null($self)) {
            throw new \InvalidArgumentException('non-nullable self cannot be null');
        }
        $this->container['self'] = $self;

        return $this;
    }

    /**
     * Gets business_unit
     *
     * @return \BeLenka\Deposco\Model\EntityRef
     */
    public function getBusinessUnit()
    {
        return $this->container['business_unit'];
    }

    /**
     * Sets business_unit
     *
     * @param \BeLenka\Deposco\Model\EntityRef $business_unit business_unit
     *
     * @return self
     */
    public function setBusinessUnit($business_unit)
    {
        if (is_null($business_unit)) {
            throw new \InvalidArgumentException('non-nullable business_unit cannot be null');
        }
        $this->container['business_unit'] = $business_unit;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number Unique code that identifies the facility. Consider using an abbreviated descriptive naming convention for the facility number, such as LA-DC for the Los Angeles distribution center facility.
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }
        if ((mb_strlen($number) > 20)) {
            throw new \InvalidArgumentException('invalid length for $number when calling FacilityDTO., must be smaller than or equal to 20.');
        }
        if ((!preg_match("/.*\\S.*/", ObjectSerializer::toString($number)))) {
            throw new \InvalidArgumentException("invalid value for \$number when calling FacilityDTO., must conform to the pattern /.*\\S.*/.");
        }

        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of the facility.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($name) && (mb_strlen($name) > 30)) {
            throw new \InvalidArgumentException('invalid length for $name when calling FacilityDTO., must be smaller than or equal to 30.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Type of facility.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets is_virtual
     *
     * @return bool|null
     */
    public function getIsVirtual()
    {
        return $this->container['is_virtual'];
    }

    /**
     * Sets is_virtual
     *
     * @param bool|null $is_virtual Used with Bright Order. Whether the inventory in the facility is managed by Deposco (`false`) or by a different system (`true`). Customer orders can be routed to virtual facilities for fulfillment through a system other than Deposco.
     *
     * @return self
     */
    public function setIsVirtual($is_virtual)
    {
        if (is_null($is_virtual)) {
            throw new \InvalidArgumentException('non-nullable is_virtual cannot be null');
        }
        $this->container['is_virtual'] = $is_virtual;

        return $this;
    }

    /**
     * Gets dba_name
     *
     * @return string|null
     */
    public function getDbaName()
    {
        return $this->container['dba_name'];
    }

    /**
     * Sets dba_name
     *
     * @param string|null $dba_name User-friendly doing business as (DBA) name for the company that uses the facility.
     *
     * @return self
     */
    public function setDbaName($dba_name)
    {
        if (is_null($dba_name)) {
            array_push($this->openAPINullablesSetToNull, 'dba_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dba_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($dba_name) && (mb_strlen($dba_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $dba_name when calling FacilityDTO., must be smaller than or equal to 50.');
        }

        $this->container['dba_name'] = $dba_name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Text that provides more information about the facility.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone Primary phone number for the facility.
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            array_push($this->openAPINullablesSetToNull, 'phone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($phone) && (mb_strlen($phone) > 30)) {
            throw new \InvalidArgumentException('invalid length for $phone when calling FacilityDTO., must be smaller than or equal to 30.');
        }

        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return \BeLenka\Deposco\Model\FacilityDTOContact|null
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param \BeLenka\Deposco\Model\FacilityDTOContact|null $contact contact
     *
     * @return self
     */
    public function setContact($contact)
    {
        if (is_null($contact)) {
            throw new \InvalidArgumentException('non-nullable contact cannot be null');
        }
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \BeLenka\Deposco\Model\FacilityDTOAddress|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \BeLenka\Deposco\Model\FacilityDTOAddress|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets facility_uom_system
     *
     * @return string|null
     */
    public function getFacilityUomSystem()
    {
        return $this->container['facility_uom_system'];
    }

    /**
     * Sets facility_uom_system
     *
     * @param string|null $facility_uom_system Whether `Metric` (CM/KG) or `Imperial` (IN/LB) units of measure (UOM) are used for outbound warehouse processes at the facility such as packing, shipping, rate shopping, and cartonization.
     *
     * @return self
     */
    public function setFacilityUomSystem($facility_uom_system)
    {
        if (is_null($facility_uom_system)) {
            array_push($this->openAPINullablesSetToNull, 'facility_uom_system');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('facility_uom_system', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getFacilityUomSystemAllowableValues();
        if (!is_null($facility_uom_system) && !in_array($facility_uom_system, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'facility_uom_system', must be one of '%s'",
                    $facility_uom_system,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['facility_uom_system'] = $facility_uom_system;

        return $this;
    }

    /**
     * Gets time_zone
     *
     * @return \BeLenka\Deposco\Model\TimeZone|null
     */
    public function getTimeZone()
    {
        return $this->container['time_zone'];
    }

    /**
     * Sets time_zone
     *
     * @param \BeLenka\Deposco\Model\TimeZone|null $time_zone time_zone
     *
     * @return self
     */
    public function setTimeZone($time_zone)
    {
        if (is_null($time_zone)) {
            array_push($this->openAPINullablesSetToNull, 'time_zone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('time_zone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['time_zone'] = $time_zone;

        return $this;
    }

    /**
     * Gets enable_customer_pickup
     *
     * @return bool|null
     */
    public function getEnableCustomerPickup()
    {
        return $this->container['enable_customer_pickup'];
    }

    /**
     * Sets enable_customer_pickup
     *
     * @param bool|null $enable_customer_pickup Used with Bright Order. Whether the facility is used to fulfill orders by pickup in store or only by shipping.
     *
     * @return self
     */
    public function setEnableCustomerPickup($enable_customer_pickup)
    {
        if (is_null($enable_customer_pickup)) {
            throw new \InvalidArgumentException('non-nullable enable_customer_pickup cannot be null');
        }
        $this->container['enable_customer_pickup'] = $enable_customer_pickup;

        return $this;
    }

    /**
     * Gets enable_ship_to_customer
     *
     * @return bool|null
     */
    public function getEnableShipToCustomer()
    {
        return $this->container['enable_ship_to_customer'];
    }

    /**
     * Sets enable_ship_to_customer
     *
     * @param bool|null $enable_ship_to_customer Used with Bright Order. Whether the facility is used to fulfill orders by shipping or only by pickup in store.
     *
     * @return self
     */
    public function setEnableShipToCustomer($enable_ship_to_customer)
    {
        if (is_null($enable_ship_to_customer)) {
            throw new \InvalidArgumentException('non-nullable enable_ship_to_customer cannot be null');
        }
        $this->container['enable_ship_to_customer'] = $enable_ship_to_customer;

        return $this;
    }

    /**
     * Gets latitude
     *
     * @return int|null
     */
    public function getLatitude()
    {
        return $this->container['latitude'];
    }

    /**
     * Sets latitude
     *
     * @param int|null $latitude Latitude of the facility. Used with Bright Order for the geo-proximity method for order routing.
     *
     * @return self
     */
    public function setLatitude($latitude)
    {
        if (is_null($latitude)) {
            array_push($this->openAPINullablesSetToNull, 'latitude');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('latitude', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['latitude'] = $latitude;

        return $this;
    }

    /**
     * Gets longitude
     *
     * @return int|null
     */
    public function getLongitude()
    {
        return $this->container['longitude'];
    }

    /**
     * Sets longitude
     *
     * @param int|null $longitude Longitude of the facility. Used with Bright Order for the geo-proximity method for order routing.
     *
     * @return self
     */
    public function setLongitude($longitude)
    {
        if (is_null($longitude)) {
            array_push($this->openAPINullablesSetToNull, 'longitude');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('longitude', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['longitude'] = $longitude;

        return $this;
    }

    /**
     * Gets square_feet
     *
     * @return int|null
     */
    public function getSquareFeet()
    {
        return $this->container['square_feet'];
    }

    /**
     * Sets square_feet
     *
     * @param int|null $square_feet Size of the facility in square feet.
     *
     * @return self
     */
    public function setSquareFeet($square_feet)
    {
        if (is_null($square_feet)) {
            throw new \InvalidArgumentException('non-nullable square_feet cannot be null');
        }
        $this->container['square_feet'] = $square_feet;

        return $this;
    }

    /**
     * Gets fulfillment_facility
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getFulfillmentFacility()
    {
        return $this->container['fulfillment_facility'];
    }

    /**
     * Sets fulfillment_facility
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $fulfillment_facility fulfillment_facility
     *
     * @return self
     */
    public function setFulfillmentFacility($fulfillment_facility)
    {
        if (is_null($fulfillment_facility)) {
            array_push($this->openAPINullablesSetToNull, 'fulfillment_facility');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fulfillment_facility', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fulfillment_facility'] = $fulfillment_facility;

        return $this;
    }

    /**
     * Gets import_reference
     *
     * @return string|null
     */
    public function getImportReference()
    {
        return $this->container['import_reference'];
    }

    /**
     * Sets import_reference
     *
     * @param string|null $import_reference Identifying information for the facility in an external system if the facility is imported.
     *
     * @return self
     */
    public function setImportReference($import_reference)
    {
        if (is_null($import_reference)) {
            array_push($this->openAPINullablesSetToNull, 'import_reference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('import_reference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($import_reference) && (mb_strlen($import_reference) > 25)) {
            throw new \InvalidArgumentException('invalid length for $import_reference when calling FacilityDTO., must be smaller than or equal to 25.');
        }

        $this->container['import_reference'] = $import_reference;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime|null $created_date Date and time that the facility was created.
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets updated_date
     *
     * @return \DateTime|null
     */
    public function getUpdatedDate()
    {
        return $this->container['updated_date'];
    }

    /**
     * Sets updated_date
     *
     * @param \DateTime|null $updated_date Date and time that the facility was last updated.
     *
     * @return self
     */
    public function setUpdatedDate($updated_date)
    {
        if (is_null($updated_date)) {
            throw new \InvalidArgumentException('non-nullable updated_date cannot be null');
        }
        $this->container['updated_date'] = $updated_date;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            throw new \InvalidArgumentException('non-nullable created_by cannot be null');
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $updated_by updated_by
     *
     * @return self
     */
    public function setUpdatedBy($updated_by)
    {
        if (is_null($updated_by)) {
            throw new \InvalidArgumentException('non-nullable updated_by cannot be null');
        }
        $this->container['updated_by'] = $updated_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


