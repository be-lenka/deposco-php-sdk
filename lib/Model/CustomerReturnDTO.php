<?php
/**
 * CustomerReturnDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deposco API
 *
 * Welcome to the Deposco API Reference! The Deposco API enables you to integrate your system with Deposco.  * Integrate a product information system (PIM) by creating and retrieving data for items, packs, UPCs, and kits. * Set up warehouse data by creating facilities, zones, locations, and storage details. * Create inbound orders that can be received and outbound orders that can be fulfilled with Deposco warehouse management processes.  This reference provides details on available operations, endpoints, parameters, schemas, and responses.  Example requests and responses are also available for you to use as a reference. You can copy the examples to use as a starting point for your own requests.  Review the guides to learn how the API is used in common business scenarios such as setting up the warehouse and integrating a Product Information Management (PIM) system.  When you're ready to get started, register for a developer account and then log in to create your application in the developer portal.
 *
 * The version of the OpenAPI document: 2.0.2519
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\Deposco\Model;

use \ArrayAccess;
use \BeLenka\Deposco\ObjectSerializer;

/**
 * CustomerReturnDTO Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CustomerReturnDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CustomerReturnDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'self' => '\BeLenka\Deposco\Model\EntityRef',
        'business_unit' => '\BeLenka\Deposco\Model\EntityRef',
        'number' => 'string',
        'order_priority' => 'int',
        'order_summary' => 'string',
        'order_source' => 'string',
        'secondary_order_source' => 'string',
        'customer_order_number' => 'string',
        'related_order_number' => 'string',
        'partner_invoice_number' => 'string',
        'consignee_partner' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'trading_partner_site' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'ship_to_contact' => '\BeLenka\Deposco\Model\AddressContactDTO',
        'ship_to_address' => '\BeLenka\Deposco\Model\AddressDTO',
        'bill_to_partner' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'bill_to_contact' => '\BeLenka\Deposco\Model\AddressContactDTO',
        'bill_to_account_number' => 'string',
        'bill_to_address' => '\BeLenka\Deposco\Model\AddressDTO',
        'ship_from_contact' => '\BeLenka\Deposco\Model\AddressContactDTO',
        'ship_from_address' => '\BeLenka\Deposco\Model\AddressDTO',
        'placed_date' => '\DateTime',
        'planned_arrival_date' => '\DateTime',
        'planned_release_date' => '\DateTime',
        'planned_ship_date' => '\DateTime',
        'earliest_ship_date' => '\DateTime',
        'earliest_delivery_date' => '\DateTime',
        'cancel_by_arrival_date' => '\DateTime',
        'cancel_by_release_date' => '\DateTime',
        'cancel_by_ship_date' => '\DateTime',
        'actual_arrival_date' => '\DateTime',
        'actual_release_date' => '\DateTime',
        'actual_ship_date' => '\DateTime',
        'price_list' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'order_total' => 'int',
        'order_subtotal' => 'int',
        'order_discount_subtotal' => 'int',
        'order_shipping_total' => 'int',
        'order_ship_total' => 'int',
        'taxable' => 'bool',
        'order_tax_total' => 'int',
        'order_taxable_total' => 'int',
        'order_untaxable_total' => 'int',
        'shipping_tax_total' => 'int',
        'ship_via' => 'string',
        'ship_vendor' => 'string',
        'ship_method' => 'string',
        'freight_terms_type' => 'string',
        'freight_bill_to_contact' => '\BeLenka\Deposco\Model\AddressContactDTO',
        'freight_bill_to_account' => 'string',
        'freight_bill_to_address' => '\BeLenka\Deposco\Model\AddressDTO',
        'weight' => '\BeLenka\Deposco\Model\BaseOrderHeaderDTOWeight',
        'return_required' => 'bool',
        'return_ship_via' => 'string',
        'return_ship_option' => 'string',
        'delivery_confirmation' => 'string',
        'insurance_required' => 'bool',
        'home_delivery' => 'bool',
        'residential' => 'bool',
        'saturday_delivery' => 'bool',
        'hub_id' => 'string',
        'routing_number' => 'string',
        'incoterms_type' => 'string',
        'import_type' => 'string',
        'import_reference' => 'string',
        'export_reference' => 'string',
        'other_reference_number' => 'string',
        'other_reference_number2' => 'string',
        'integration_source' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'send_asn' => '\BeLenka\Deposco\Model\SendASNDTO',
        'drop_ship' => 'bool',
        'pick_wave' => '\BeLenka\Deposco\Model\EntityRef',
        'post_release_state' => '\BeLenka\Deposco\Model\PostReleaseStateDTO',
        'entry_name' => 'string',
        'entry_phone1' => 'string',
        'sale_condition_code' => 'string',
        'seller' => 'string',
        'notification_code1' => 'string',
        'notification_code2' => 'string',
        'notification_code3' => 'string',
        'verbal_confirmation_name' => 'string',
        'verbal_confirmation_phone_number' => 'string',
        'custom_attribute1' => 'string',
        'custom_attribute2' => 'string',
        'custom_attribute3' => 'string',
        'custom_attribute4' => 'string',
        'custom_attribute5' => 'string',
        'custom_attribute6' => 'string',
        'custom_attribute7' => 'string',
        'custom_fields' => '\BeLenka\Deposco\Model\CustomFieldDTO[]',
        'notes' => '\BeLenka\Deposco\Model\NoteDTO[]',
        'channels' => '\BeLenka\Deposco\Model\ChannelDTO[]',
        'created_date' => '\DateTime',
        'updated_date' => '\DateTime',
        'created_by' => '\BeLenka\Deposco\Model\EntityRef',
        'updated_by' => '\BeLenka\Deposco\Model\EntityRef',
        'type' => 'string',
        'order_status' => 'string',
        'ship_to_facility' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'parent_order' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'co_header' => '\BeLenka\Deposco\Model\NullableEntityRef',
        'order_lines' => '\BeLenka\Deposco\Model\CustomerReturnLineCollectionDTO'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'self' => null,
        'business_unit' => null,
        'number' => null,
        'order_priority' => 'int32',
        'order_summary' => null,
        'order_source' => null,
        'secondary_order_source' => null,
        'customer_order_number' => null,
        'related_order_number' => null,
        'partner_invoice_number' => null,
        'consignee_partner' => null,
        'trading_partner_site' => null,
        'ship_to_contact' => null,
        'ship_to_address' => null,
        'bill_to_partner' => null,
        'bill_to_contact' => null,
        'bill_to_account_number' => null,
        'bill_to_address' => null,
        'ship_from_contact' => null,
        'ship_from_address' => null,
        'placed_date' => 'date-time',
        'planned_arrival_date' => 'date-time',
        'planned_release_date' => 'date-time',
        'planned_ship_date' => 'date-time',
        'earliest_ship_date' => 'date-time',
        'earliest_delivery_date' => 'date-time',
        'cancel_by_arrival_date' => 'date-time',
        'cancel_by_release_date' => 'date-time',
        'cancel_by_ship_date' => 'date-time',
        'actual_arrival_date' => 'date-time',
        'actual_release_date' => 'date-time',
        'actual_ship_date' => 'date-time',
        'price_list' => null,
        'order_total' => 'double',
        'order_subtotal' => 'double',
        'order_discount_subtotal' => 'double',
        'order_shipping_total' => 'double',
        'order_ship_total' => 'double',
        'taxable' => null,
        'order_tax_total' => 'double',
        'order_taxable_total' => 'double',
        'order_untaxable_total' => 'double',
        'shipping_tax_total' => 'double',
        'ship_via' => null,
        'ship_vendor' => null,
        'ship_method' => null,
        'freight_terms_type' => null,
        'freight_bill_to_contact' => null,
        'freight_bill_to_account' => null,
        'freight_bill_to_address' => null,
        'weight' => null,
        'return_required' => null,
        'return_ship_via' => null,
        'return_ship_option' => null,
        'delivery_confirmation' => null,
        'insurance_required' => null,
        'home_delivery' => null,
        'residential' => null,
        'saturday_delivery' => null,
        'hub_id' => null,
        'routing_number' => null,
        'incoterms_type' => null,
        'import_type' => null,
        'import_reference' => null,
        'export_reference' => null,
        'other_reference_number' => null,
        'other_reference_number2' => null,
        'integration_source' => null,
        'send_asn' => null,
        'drop_ship' => null,
        'pick_wave' => null,
        'post_release_state' => null,
        'entry_name' => null,
        'entry_phone1' => null,
        'sale_condition_code' => null,
        'seller' => null,
        'notification_code1' => null,
        'notification_code2' => null,
        'notification_code3' => null,
        'verbal_confirmation_name' => null,
        'verbal_confirmation_phone_number' => null,
        'custom_attribute1' => null,
        'custom_attribute2' => null,
        'custom_attribute3' => null,
        'custom_attribute4' => null,
        'custom_attribute5' => null,
        'custom_attribute6' => null,
        'custom_attribute7' => null,
        'custom_fields' => null,
        'notes' => null,
        'channels' => null,
        'created_date' => 'date-time',
        'updated_date' => 'date-time',
        'created_by' => null,
        'updated_by' => null,
        'type' => null,
        'order_status' => null,
        'ship_to_facility' => null,
        'parent_order' => null,
        'co_header' => null,
        'order_lines' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'self' => false,
        'business_unit' => false,
        'number' => false,
        'order_priority' => false,
        'order_summary' => false,
        'order_source' => false,
        'secondary_order_source' => false,
        'customer_order_number' => false,
        'related_order_number' => false,
        'partner_invoice_number' => false,
        'consignee_partner' => true,
        'trading_partner_site' => true,
        'ship_to_contact' => false,
        'ship_to_address' => false,
        'bill_to_partner' => true,
        'bill_to_contact' => false,
        'bill_to_account_number' => false,
        'bill_to_address' => false,
        'ship_from_contact' => false,
        'ship_from_address' => false,
        'placed_date' => false,
        'planned_arrival_date' => false,
        'planned_release_date' => false,
        'planned_ship_date' => false,
        'earliest_ship_date' => false,
        'earliest_delivery_date' => false,
        'cancel_by_arrival_date' => false,
        'cancel_by_release_date' => false,
        'cancel_by_ship_date' => false,
        'actual_arrival_date' => false,
        'actual_release_date' => false,
        'actual_ship_date' => false,
        'price_list' => true,
        'order_total' => false,
        'order_subtotal' => false,
        'order_discount_subtotal' => false,
        'order_shipping_total' => false,
        'order_ship_total' => false,
        'taxable' => false,
        'order_tax_total' => false,
        'order_taxable_total' => false,
        'order_untaxable_total' => false,
        'shipping_tax_total' => false,
        'ship_via' => false,
        'ship_vendor' => false,
        'ship_method' => false,
        'freight_terms_type' => false,
        'freight_bill_to_contact' => false,
        'freight_bill_to_account' => false,
        'freight_bill_to_address' => false,
        'weight' => false,
        'return_required' => false,
        'return_ship_via' => false,
        'return_ship_option' => false,
        'delivery_confirmation' => false,
        'insurance_required' => false,
        'home_delivery' => false,
        'residential' => false,
        'saturday_delivery' => false,
        'hub_id' => false,
        'routing_number' => false,
        'incoterms_type' => false,
        'import_type' => false,
        'import_reference' => false,
        'export_reference' => false,
        'other_reference_number' => false,
        'other_reference_number2' => false,
        'integration_source' => true,
        'send_asn' => true,
        'drop_ship' => false,
        'pick_wave' => false,
        'post_release_state' => true,
        'entry_name' => false,
        'entry_phone1' => false,
        'sale_condition_code' => false,
        'seller' => false,
        'notification_code1' => false,
        'notification_code2' => false,
        'notification_code3' => false,
        'verbal_confirmation_name' => false,
        'verbal_confirmation_phone_number' => false,
        'custom_attribute1' => false,
        'custom_attribute2' => false,
        'custom_attribute3' => false,
        'custom_attribute4' => false,
        'custom_attribute5' => false,
        'custom_attribute6' => false,
        'custom_attribute7' => false,
        'custom_fields' => false,
        'notes' => false,
        'channels' => true,
        'created_date' => false,
        'updated_date' => false,
        'created_by' => false,
        'updated_by' => false,
        'type' => true,
        'order_status' => true,
        'ship_to_facility' => true,
        'parent_order' => true,
        'co_header' => true,
        'order_lines' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'self' => 'self',
        'business_unit' => 'businessUnit',
        'number' => 'number',
        'order_priority' => 'orderPriority',
        'order_summary' => 'orderSummary',
        'order_source' => 'orderSource',
        'secondary_order_source' => 'secondaryOrderSource',
        'customer_order_number' => 'customerOrderNumber',
        'related_order_number' => 'relatedOrderNumber',
        'partner_invoice_number' => 'partnerInvoiceNumber',
        'consignee_partner' => 'consigneePartner',
        'trading_partner_site' => 'tradingPartnerSite',
        'ship_to_contact' => 'shipToContact',
        'ship_to_address' => 'shipToAddress',
        'bill_to_partner' => 'billToPartner',
        'bill_to_contact' => 'billToContact',
        'bill_to_account_number' => 'billToAccountNumber',
        'bill_to_address' => 'billToAddress',
        'ship_from_contact' => 'shipFromContact',
        'ship_from_address' => 'shipFromAddress',
        'placed_date' => 'placedDate',
        'planned_arrival_date' => 'plannedArrivalDate',
        'planned_release_date' => 'plannedReleaseDate',
        'planned_ship_date' => 'plannedShipDate',
        'earliest_ship_date' => 'earliestShipDate',
        'earliest_delivery_date' => 'earliestDeliveryDate',
        'cancel_by_arrival_date' => 'cancelByArrivalDate',
        'cancel_by_release_date' => 'cancelByReleaseDate',
        'cancel_by_ship_date' => 'cancelByShipDate',
        'actual_arrival_date' => 'actualArrivalDate',
        'actual_release_date' => 'actualReleaseDate',
        'actual_ship_date' => 'actualShipDate',
        'price_list' => 'priceList',
        'order_total' => 'orderTotal',
        'order_subtotal' => 'orderSubtotal',
        'order_discount_subtotal' => 'orderDiscountSubtotal',
        'order_shipping_total' => 'orderShippingTotal',
        'order_ship_total' => 'orderShipTotal',
        'taxable' => 'taxable',
        'order_tax_total' => 'orderTaxTotal',
        'order_taxable_total' => 'orderTaxableTotal',
        'order_untaxable_total' => 'orderUntaxableTotal',
        'shipping_tax_total' => 'shippingTaxTotal',
        'ship_via' => 'shipVia',
        'ship_vendor' => 'shipVendor',
        'ship_method' => 'shipMethod',
        'freight_terms_type' => 'freightTermsType',
        'freight_bill_to_contact' => 'freightBillToContact',
        'freight_bill_to_account' => 'freightBillToAccount',
        'freight_bill_to_address' => 'freightBillToAddress',
        'weight' => 'weight',
        'return_required' => 'returnRequired',
        'return_ship_via' => 'returnShipVia',
        'return_ship_option' => 'returnShipOption',
        'delivery_confirmation' => 'deliveryConfirmation',
        'insurance_required' => 'insuranceRequired',
        'home_delivery' => 'homeDelivery',
        'residential' => 'residential',
        'saturday_delivery' => 'saturdayDelivery',
        'hub_id' => 'hubId',
        'routing_number' => 'routingNumber',
        'incoterms_type' => 'incotermsType',
        'import_type' => 'importType',
        'import_reference' => 'importReference',
        'export_reference' => 'exportReference',
        'other_reference_number' => 'otherReferenceNumber',
        'other_reference_number2' => 'otherReferenceNumber2',
        'integration_source' => 'integrationSource',
        'send_asn' => 'sendASN',
        'drop_ship' => 'dropShip',
        'pick_wave' => 'pickWave',
        'post_release_state' => 'postReleaseState',
        'entry_name' => 'entryName',
        'entry_phone1' => 'entryPhone1',
        'sale_condition_code' => 'saleConditionCode',
        'seller' => 'seller',
        'notification_code1' => 'notificationCode1',
        'notification_code2' => 'notificationCode2',
        'notification_code3' => 'notificationCode3',
        'verbal_confirmation_name' => 'verbalConfirmationName',
        'verbal_confirmation_phone_number' => 'verbalConfirmationPhoneNumber',
        'custom_attribute1' => 'customAttribute1',
        'custom_attribute2' => 'customAttribute2',
        'custom_attribute3' => 'customAttribute3',
        'custom_attribute4' => 'customAttribute4',
        'custom_attribute5' => 'customAttribute5',
        'custom_attribute6' => 'customAttribute6',
        'custom_attribute7' => 'customAttribute7',
        'custom_fields' => 'customFields',
        'notes' => 'notes',
        'channels' => 'channels',
        'created_date' => 'createdDate',
        'updated_date' => 'updatedDate',
        'created_by' => 'createdBy',
        'updated_by' => 'updatedBy',
        'type' => 'type',
        'order_status' => 'orderStatus',
        'ship_to_facility' => 'shipToFacility',
        'parent_order' => 'parentOrder',
        'co_header' => 'coHeader',
        'order_lines' => 'orderLines'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'self' => 'setSelf',
        'business_unit' => 'setBusinessUnit',
        'number' => 'setNumber',
        'order_priority' => 'setOrderPriority',
        'order_summary' => 'setOrderSummary',
        'order_source' => 'setOrderSource',
        'secondary_order_source' => 'setSecondaryOrderSource',
        'customer_order_number' => 'setCustomerOrderNumber',
        'related_order_number' => 'setRelatedOrderNumber',
        'partner_invoice_number' => 'setPartnerInvoiceNumber',
        'consignee_partner' => 'setConsigneePartner',
        'trading_partner_site' => 'setTradingPartnerSite',
        'ship_to_contact' => 'setShipToContact',
        'ship_to_address' => 'setShipToAddress',
        'bill_to_partner' => 'setBillToPartner',
        'bill_to_contact' => 'setBillToContact',
        'bill_to_account_number' => 'setBillToAccountNumber',
        'bill_to_address' => 'setBillToAddress',
        'ship_from_contact' => 'setShipFromContact',
        'ship_from_address' => 'setShipFromAddress',
        'placed_date' => 'setPlacedDate',
        'planned_arrival_date' => 'setPlannedArrivalDate',
        'planned_release_date' => 'setPlannedReleaseDate',
        'planned_ship_date' => 'setPlannedShipDate',
        'earliest_ship_date' => 'setEarliestShipDate',
        'earliest_delivery_date' => 'setEarliestDeliveryDate',
        'cancel_by_arrival_date' => 'setCancelByArrivalDate',
        'cancel_by_release_date' => 'setCancelByReleaseDate',
        'cancel_by_ship_date' => 'setCancelByShipDate',
        'actual_arrival_date' => 'setActualArrivalDate',
        'actual_release_date' => 'setActualReleaseDate',
        'actual_ship_date' => 'setActualShipDate',
        'price_list' => 'setPriceList',
        'order_total' => 'setOrderTotal',
        'order_subtotal' => 'setOrderSubtotal',
        'order_discount_subtotal' => 'setOrderDiscountSubtotal',
        'order_shipping_total' => 'setOrderShippingTotal',
        'order_ship_total' => 'setOrderShipTotal',
        'taxable' => 'setTaxable',
        'order_tax_total' => 'setOrderTaxTotal',
        'order_taxable_total' => 'setOrderTaxableTotal',
        'order_untaxable_total' => 'setOrderUntaxableTotal',
        'shipping_tax_total' => 'setShippingTaxTotal',
        'ship_via' => 'setShipVia',
        'ship_vendor' => 'setShipVendor',
        'ship_method' => 'setShipMethod',
        'freight_terms_type' => 'setFreightTermsType',
        'freight_bill_to_contact' => 'setFreightBillToContact',
        'freight_bill_to_account' => 'setFreightBillToAccount',
        'freight_bill_to_address' => 'setFreightBillToAddress',
        'weight' => 'setWeight',
        'return_required' => 'setReturnRequired',
        'return_ship_via' => 'setReturnShipVia',
        'return_ship_option' => 'setReturnShipOption',
        'delivery_confirmation' => 'setDeliveryConfirmation',
        'insurance_required' => 'setInsuranceRequired',
        'home_delivery' => 'setHomeDelivery',
        'residential' => 'setResidential',
        'saturday_delivery' => 'setSaturdayDelivery',
        'hub_id' => 'setHubId',
        'routing_number' => 'setRoutingNumber',
        'incoterms_type' => 'setIncotermsType',
        'import_type' => 'setImportType',
        'import_reference' => 'setImportReference',
        'export_reference' => 'setExportReference',
        'other_reference_number' => 'setOtherReferenceNumber',
        'other_reference_number2' => 'setOtherReferenceNumber2',
        'integration_source' => 'setIntegrationSource',
        'send_asn' => 'setSendAsn',
        'drop_ship' => 'setDropShip',
        'pick_wave' => 'setPickWave',
        'post_release_state' => 'setPostReleaseState',
        'entry_name' => 'setEntryName',
        'entry_phone1' => 'setEntryPhone1',
        'sale_condition_code' => 'setSaleConditionCode',
        'seller' => 'setSeller',
        'notification_code1' => 'setNotificationCode1',
        'notification_code2' => 'setNotificationCode2',
        'notification_code3' => 'setNotificationCode3',
        'verbal_confirmation_name' => 'setVerbalConfirmationName',
        'verbal_confirmation_phone_number' => 'setVerbalConfirmationPhoneNumber',
        'custom_attribute1' => 'setCustomAttribute1',
        'custom_attribute2' => 'setCustomAttribute2',
        'custom_attribute3' => 'setCustomAttribute3',
        'custom_attribute4' => 'setCustomAttribute4',
        'custom_attribute5' => 'setCustomAttribute5',
        'custom_attribute6' => 'setCustomAttribute6',
        'custom_attribute7' => 'setCustomAttribute7',
        'custom_fields' => 'setCustomFields',
        'notes' => 'setNotes',
        'channels' => 'setChannels',
        'created_date' => 'setCreatedDate',
        'updated_date' => 'setUpdatedDate',
        'created_by' => 'setCreatedBy',
        'updated_by' => 'setUpdatedBy',
        'type' => 'setType',
        'order_status' => 'setOrderStatus',
        'ship_to_facility' => 'setShipToFacility',
        'parent_order' => 'setParentOrder',
        'co_header' => 'setCoHeader',
        'order_lines' => 'setOrderLines'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'self' => 'getSelf',
        'business_unit' => 'getBusinessUnit',
        'number' => 'getNumber',
        'order_priority' => 'getOrderPriority',
        'order_summary' => 'getOrderSummary',
        'order_source' => 'getOrderSource',
        'secondary_order_source' => 'getSecondaryOrderSource',
        'customer_order_number' => 'getCustomerOrderNumber',
        'related_order_number' => 'getRelatedOrderNumber',
        'partner_invoice_number' => 'getPartnerInvoiceNumber',
        'consignee_partner' => 'getConsigneePartner',
        'trading_partner_site' => 'getTradingPartnerSite',
        'ship_to_contact' => 'getShipToContact',
        'ship_to_address' => 'getShipToAddress',
        'bill_to_partner' => 'getBillToPartner',
        'bill_to_contact' => 'getBillToContact',
        'bill_to_account_number' => 'getBillToAccountNumber',
        'bill_to_address' => 'getBillToAddress',
        'ship_from_contact' => 'getShipFromContact',
        'ship_from_address' => 'getShipFromAddress',
        'placed_date' => 'getPlacedDate',
        'planned_arrival_date' => 'getPlannedArrivalDate',
        'planned_release_date' => 'getPlannedReleaseDate',
        'planned_ship_date' => 'getPlannedShipDate',
        'earliest_ship_date' => 'getEarliestShipDate',
        'earliest_delivery_date' => 'getEarliestDeliveryDate',
        'cancel_by_arrival_date' => 'getCancelByArrivalDate',
        'cancel_by_release_date' => 'getCancelByReleaseDate',
        'cancel_by_ship_date' => 'getCancelByShipDate',
        'actual_arrival_date' => 'getActualArrivalDate',
        'actual_release_date' => 'getActualReleaseDate',
        'actual_ship_date' => 'getActualShipDate',
        'price_list' => 'getPriceList',
        'order_total' => 'getOrderTotal',
        'order_subtotal' => 'getOrderSubtotal',
        'order_discount_subtotal' => 'getOrderDiscountSubtotal',
        'order_shipping_total' => 'getOrderShippingTotal',
        'order_ship_total' => 'getOrderShipTotal',
        'taxable' => 'getTaxable',
        'order_tax_total' => 'getOrderTaxTotal',
        'order_taxable_total' => 'getOrderTaxableTotal',
        'order_untaxable_total' => 'getOrderUntaxableTotal',
        'shipping_tax_total' => 'getShippingTaxTotal',
        'ship_via' => 'getShipVia',
        'ship_vendor' => 'getShipVendor',
        'ship_method' => 'getShipMethod',
        'freight_terms_type' => 'getFreightTermsType',
        'freight_bill_to_contact' => 'getFreightBillToContact',
        'freight_bill_to_account' => 'getFreightBillToAccount',
        'freight_bill_to_address' => 'getFreightBillToAddress',
        'weight' => 'getWeight',
        'return_required' => 'getReturnRequired',
        'return_ship_via' => 'getReturnShipVia',
        'return_ship_option' => 'getReturnShipOption',
        'delivery_confirmation' => 'getDeliveryConfirmation',
        'insurance_required' => 'getInsuranceRequired',
        'home_delivery' => 'getHomeDelivery',
        'residential' => 'getResidential',
        'saturday_delivery' => 'getSaturdayDelivery',
        'hub_id' => 'getHubId',
        'routing_number' => 'getRoutingNumber',
        'incoterms_type' => 'getIncotermsType',
        'import_type' => 'getImportType',
        'import_reference' => 'getImportReference',
        'export_reference' => 'getExportReference',
        'other_reference_number' => 'getOtherReferenceNumber',
        'other_reference_number2' => 'getOtherReferenceNumber2',
        'integration_source' => 'getIntegrationSource',
        'send_asn' => 'getSendAsn',
        'drop_ship' => 'getDropShip',
        'pick_wave' => 'getPickWave',
        'post_release_state' => 'getPostReleaseState',
        'entry_name' => 'getEntryName',
        'entry_phone1' => 'getEntryPhone1',
        'sale_condition_code' => 'getSaleConditionCode',
        'seller' => 'getSeller',
        'notification_code1' => 'getNotificationCode1',
        'notification_code2' => 'getNotificationCode2',
        'notification_code3' => 'getNotificationCode3',
        'verbal_confirmation_name' => 'getVerbalConfirmationName',
        'verbal_confirmation_phone_number' => 'getVerbalConfirmationPhoneNumber',
        'custom_attribute1' => 'getCustomAttribute1',
        'custom_attribute2' => 'getCustomAttribute2',
        'custom_attribute3' => 'getCustomAttribute3',
        'custom_attribute4' => 'getCustomAttribute4',
        'custom_attribute5' => 'getCustomAttribute5',
        'custom_attribute6' => 'getCustomAttribute6',
        'custom_attribute7' => 'getCustomAttribute7',
        'custom_fields' => 'getCustomFields',
        'notes' => 'getNotes',
        'channels' => 'getChannels',
        'created_date' => 'getCreatedDate',
        'updated_date' => 'getUpdatedDate',
        'created_by' => 'getCreatedBy',
        'updated_by' => 'getUpdatedBy',
        'type' => 'getType',
        'order_status' => 'getOrderStatus',
        'ship_to_facility' => 'getShipToFacility',
        'parent_order' => 'getParentOrder',
        'co_header' => 'getCoHeader',
        'order_lines' => 'getOrderLines'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_CUSTOMER_RETURN = 'Customer Return';
    public const TYPE_NULL = 'null';
    public const ORDER_STATUS__NEW = 'New';
    public const ORDER_STATUS_HOLD = 'Hold';
    public const ORDER_STATUS_RECEIVING = 'Receiving';
    public const ORDER_STATUS_PARTIAL_RECEIPT = 'Partial Receipt';
    public const ORDER_STATUS_RECEIVED = 'Received';
    public const ORDER_STATUS_CANCELED = 'Canceled';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_CUSTOMER_RETURN,
            self::TYPE_NULL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrderStatusAllowableValues()
    {
        return [
            self::ORDER_STATUS__NEW,
            self::ORDER_STATUS_HOLD,
            self::ORDER_STATUS_RECEIVING,
            self::ORDER_STATUS_PARTIAL_RECEIPT,
            self::ORDER_STATUS_RECEIVED,
            self::ORDER_STATUS_CANCELED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('self', $data ?? [], null);
        $this->setIfExists('business_unit', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('order_priority', $data ?? [], null);
        $this->setIfExists('order_summary', $data ?? [], null);
        $this->setIfExists('order_source', $data ?? [], null);
        $this->setIfExists('secondary_order_source', $data ?? [], null);
        $this->setIfExists('customer_order_number', $data ?? [], null);
        $this->setIfExists('related_order_number', $data ?? [], null);
        $this->setIfExists('partner_invoice_number', $data ?? [], null);
        $this->setIfExists('consignee_partner', $data ?? [], null);
        $this->setIfExists('trading_partner_site', $data ?? [], null);
        $this->setIfExists('ship_to_contact', $data ?? [], null);
        $this->setIfExists('ship_to_address', $data ?? [], null);
        $this->setIfExists('bill_to_partner', $data ?? [], null);
        $this->setIfExists('bill_to_contact', $data ?? [], null);
        $this->setIfExists('bill_to_account_number', $data ?? [], null);
        $this->setIfExists('bill_to_address', $data ?? [], null);
        $this->setIfExists('ship_from_contact', $data ?? [], null);
        $this->setIfExists('ship_from_address', $data ?? [], null);
        $this->setIfExists('placed_date', $data ?? [], null);
        $this->setIfExists('planned_arrival_date', $data ?? [], null);
        $this->setIfExists('planned_release_date', $data ?? [], null);
        $this->setIfExists('planned_ship_date', $data ?? [], null);
        $this->setIfExists('earliest_ship_date', $data ?? [], null);
        $this->setIfExists('earliest_delivery_date', $data ?? [], null);
        $this->setIfExists('cancel_by_arrival_date', $data ?? [], null);
        $this->setIfExists('cancel_by_release_date', $data ?? [], null);
        $this->setIfExists('cancel_by_ship_date', $data ?? [], null);
        $this->setIfExists('actual_arrival_date', $data ?? [], null);
        $this->setIfExists('actual_release_date', $data ?? [], null);
        $this->setIfExists('actual_ship_date', $data ?? [], null);
        $this->setIfExists('price_list', $data ?? [], null);
        $this->setIfExists('order_total', $data ?? [], null);
        $this->setIfExists('order_subtotal', $data ?? [], null);
        $this->setIfExists('order_discount_subtotal', $data ?? [], null);
        $this->setIfExists('order_shipping_total', $data ?? [], null);
        $this->setIfExists('order_ship_total', $data ?? [], null);
        $this->setIfExists('taxable', $data ?? [], null);
        $this->setIfExists('order_tax_total', $data ?? [], null);
        $this->setIfExists('order_taxable_total', $data ?? [], null);
        $this->setIfExists('order_untaxable_total', $data ?? [], null);
        $this->setIfExists('shipping_tax_total', $data ?? [], null);
        $this->setIfExists('ship_via', $data ?? [], null);
        $this->setIfExists('ship_vendor', $data ?? [], null);
        $this->setIfExists('ship_method', $data ?? [], null);
        $this->setIfExists('freight_terms_type', $data ?? [], null);
        $this->setIfExists('freight_bill_to_contact', $data ?? [], null);
        $this->setIfExists('freight_bill_to_account', $data ?? [], null);
        $this->setIfExists('freight_bill_to_address', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
        $this->setIfExists('return_required', $data ?? [], null);
        $this->setIfExists('return_ship_via', $data ?? [], null);
        $this->setIfExists('return_ship_option', $data ?? [], null);
        $this->setIfExists('delivery_confirmation', $data ?? [], null);
        $this->setIfExists('insurance_required', $data ?? [], null);
        $this->setIfExists('home_delivery', $data ?? [], null);
        $this->setIfExists('residential', $data ?? [], null);
        $this->setIfExists('saturday_delivery', $data ?? [], null);
        $this->setIfExists('hub_id', $data ?? [], null);
        $this->setIfExists('routing_number', $data ?? [], null);
        $this->setIfExists('incoterms_type', $data ?? [], null);
        $this->setIfExists('import_type', $data ?? [], null);
        $this->setIfExists('import_reference', $data ?? [], null);
        $this->setIfExists('export_reference', $data ?? [], null);
        $this->setIfExists('other_reference_number', $data ?? [], null);
        $this->setIfExists('other_reference_number2', $data ?? [], null);
        $this->setIfExists('integration_source', $data ?? [], null);
        $this->setIfExists('send_asn', $data ?? [], null);
        $this->setIfExists('drop_ship', $data ?? [], null);
        $this->setIfExists('pick_wave', $data ?? [], null);
        $this->setIfExists('post_release_state', $data ?? [], null);
        $this->setIfExists('entry_name', $data ?? [], null);
        $this->setIfExists('entry_phone1', $data ?? [], null);
        $this->setIfExists('sale_condition_code', $data ?? [], null);
        $this->setIfExists('seller', $data ?? [], null);
        $this->setIfExists('notification_code1', $data ?? [], null);
        $this->setIfExists('notification_code2', $data ?? [], null);
        $this->setIfExists('notification_code3', $data ?? [], null);
        $this->setIfExists('verbal_confirmation_name', $data ?? [], null);
        $this->setIfExists('verbal_confirmation_phone_number', $data ?? [], null);
        $this->setIfExists('custom_attribute1', $data ?? [], null);
        $this->setIfExists('custom_attribute2', $data ?? [], null);
        $this->setIfExists('custom_attribute3', $data ?? [], null);
        $this->setIfExists('custom_attribute4', $data ?? [], null);
        $this->setIfExists('custom_attribute5', $data ?? [], null);
        $this->setIfExists('custom_attribute6', $data ?? [], null);
        $this->setIfExists('custom_attribute7', $data ?? [], null);
        $this->setIfExists('custom_fields', $data ?? [], null);
        $this->setIfExists('notes', $data ?? [], null);
        $this->setIfExists('channels', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('updated_date', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('updated_by', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('order_status', $data ?? [], null);
        $this->setIfExists('ship_to_facility', $data ?? [], null);
        $this->setIfExists('parent_order', $data ?? [], null);
        $this->setIfExists('co_header', $data ?? [], null);
        $this->setIfExists('order_lines', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['business_unit'] === null) {
            $invalidProperties[] = "'business_unit' can't be null";
        }
        if ($this->container['number'] === null) {
            $invalidProperties[] = "'number' can't be null";
        }
        if ((mb_strlen($this->container['number']) > 50)) {
            $invalidProperties[] = "invalid value for 'number', the character length must be smaller than or equal to 50.";
        }

        if (!preg_match("/.*\\S.*/", $this->container['number'])) {
            $invalidProperties[] = "invalid value for 'number', must be conform to the pattern /.*\\S.*/.";
        }

        if (!is_null($this->container['order_priority']) && ($this->container['order_priority'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'order_priority', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['order_priority']) && ($this->container['order_priority'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'order_priority', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['order_summary']) && (mb_strlen($this->container['order_summary']) > 1000)) {
            $invalidProperties[] = "invalid value for 'order_summary', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['order_source']) && (mb_strlen($this->container['order_source']) > 100)) {
            $invalidProperties[] = "invalid value for 'order_source', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['secondary_order_source']) && (mb_strlen($this->container['secondary_order_source']) > 100)) {
            $invalidProperties[] = "invalid value for 'secondary_order_source', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['customer_order_number']) && (mb_strlen($this->container['customer_order_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'customer_order_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['related_order_number']) && (mb_strlen($this->container['related_order_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'related_order_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['partner_invoice_number']) && (mb_strlen($this->container['partner_invoice_number']) > 20)) {
            $invalidProperties[] = "invalid value for 'partner_invoice_number', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['bill_to_account_number']) && (mb_strlen($this->container['bill_to_account_number']) > 30)) {
            $invalidProperties[] = "invalid value for 'bill_to_account_number', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['order_total']) && ($this->container['order_total'] > 0)) {
            $invalidProperties[] = "invalid value for 'order_total', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['order_total']) && ($this->container['order_total'] < 0)) {
            $invalidProperties[] = "invalid value for 'order_total', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['order_subtotal']) && ($this->container['order_subtotal'] > 0)) {
            $invalidProperties[] = "invalid value for 'order_subtotal', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['order_subtotal']) && ($this->container['order_subtotal'] < 0)) {
            $invalidProperties[] = "invalid value for 'order_subtotal', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['order_discount_subtotal']) && ($this->container['order_discount_subtotal'] > 0)) {
            $invalidProperties[] = "invalid value for 'order_discount_subtotal', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['order_discount_subtotal']) && ($this->container['order_discount_subtotal'] < 0)) {
            $invalidProperties[] = "invalid value for 'order_discount_subtotal', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['order_shipping_total']) && ($this->container['order_shipping_total'] > 0)) {
            $invalidProperties[] = "invalid value for 'order_shipping_total', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['order_shipping_total']) && ($this->container['order_shipping_total'] < 0)) {
            $invalidProperties[] = "invalid value for 'order_shipping_total', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['order_ship_total']) && ($this->container['order_ship_total'] > 0)) {
            $invalidProperties[] = "invalid value for 'order_ship_total', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['order_ship_total']) && ($this->container['order_ship_total'] < 0)) {
            $invalidProperties[] = "invalid value for 'order_ship_total', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['order_tax_total']) && ($this->container['order_tax_total'] > 0)) {
            $invalidProperties[] = "invalid value for 'order_tax_total', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['order_tax_total']) && ($this->container['order_tax_total'] < 0)) {
            $invalidProperties[] = "invalid value for 'order_tax_total', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['order_taxable_total']) && ($this->container['order_taxable_total'] > 0)) {
            $invalidProperties[] = "invalid value for 'order_taxable_total', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['order_taxable_total']) && ($this->container['order_taxable_total'] < 0)) {
            $invalidProperties[] = "invalid value for 'order_taxable_total', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['order_untaxable_total']) && ($this->container['order_untaxable_total'] > 0)) {
            $invalidProperties[] = "invalid value for 'order_untaxable_total', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['order_untaxable_total']) && ($this->container['order_untaxable_total'] < 0)) {
            $invalidProperties[] = "invalid value for 'order_untaxable_total', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['shipping_tax_total']) && ($this->container['shipping_tax_total'] > 0)) {
            $invalidProperties[] = "invalid value for 'shipping_tax_total', must be smaller than or equal to 0.";
        }

        if (!is_null($this->container['shipping_tax_total']) && ($this->container['shipping_tax_total'] < 0)) {
            $invalidProperties[] = "invalid value for 'shipping_tax_total', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['ship_via']) && (mb_strlen($this->container['ship_via']) > 50)) {
            $invalidProperties[] = "invalid value for 'ship_via', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['ship_vendor']) && (mb_strlen($this->container['ship_vendor']) > 50)) {
            $invalidProperties[] = "invalid value for 'ship_vendor', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['ship_method']) && (mb_strlen($this->container['ship_method']) > 50)) {
            $invalidProperties[] = "invalid value for 'ship_method', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['freight_terms_type']) && (mb_strlen($this->container['freight_terms_type']) > 100)) {
            $invalidProperties[] = "invalid value for 'freight_terms_type', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['freight_bill_to_account']) && (mb_strlen($this->container['freight_bill_to_account']) > 50)) {
            $invalidProperties[] = "invalid value for 'freight_bill_to_account', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['return_ship_via']) && (mb_strlen($this->container['return_ship_via']) > 100)) {
            $invalidProperties[] = "invalid value for 'return_ship_via', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['return_ship_option']) && (mb_strlen($this->container['return_ship_option']) > 10)) {
            $invalidProperties[] = "invalid value for 'return_ship_option', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['delivery_confirmation']) && (mb_strlen($this->container['delivery_confirmation']) > 45)) {
            $invalidProperties[] = "invalid value for 'delivery_confirmation', the character length must be smaller than or equal to 45.";
        }

        if (!is_null($this->container['hub_id']) && (mb_strlen($this->container['hub_id']) > 10)) {
            $invalidProperties[] = "invalid value for 'hub_id', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['routing_number']) && (mb_strlen($this->container['routing_number']) > 30)) {
            $invalidProperties[] = "invalid value for 'routing_number', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['incoterms_type']) && (mb_strlen($this->container['incoterms_type']) > 50)) {
            $invalidProperties[] = "invalid value for 'incoterms_type', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['import_type']) && (mb_strlen($this->container['import_type']) > 100)) {
            $invalidProperties[] = "invalid value for 'import_type', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['import_reference']) && (mb_strlen($this->container['import_reference']) > 50)) {
            $invalidProperties[] = "invalid value for 'import_reference', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['export_reference']) && (mb_strlen($this->container['export_reference']) > 50)) {
            $invalidProperties[] = "invalid value for 'export_reference', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['other_reference_number']) && (mb_strlen($this->container['other_reference_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'other_reference_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['other_reference_number2']) && (mb_strlen($this->container['other_reference_number2']) > 45)) {
            $invalidProperties[] = "invalid value for 'other_reference_number2', the character length must be smaller than or equal to 45.";
        }

        if (!is_null($this->container['entry_name']) && (mb_strlen($this->container['entry_name']) > 200)) {
            $invalidProperties[] = "invalid value for 'entry_name', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['entry_phone1']) && (mb_strlen($this->container['entry_phone1']) > 30)) {
            $invalidProperties[] = "invalid value for 'entry_phone1', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['sale_condition_code']) && (mb_strlen($this->container['sale_condition_code']) > 50)) {
            $invalidProperties[] = "invalid value for 'sale_condition_code', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['seller']) && (mb_strlen($this->container['seller']) > 50)) {
            $invalidProperties[] = "invalid value for 'seller', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['notification_code1']) && (mb_strlen($this->container['notification_code1']) > 255)) {
            $invalidProperties[] = "invalid value for 'notification_code1', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['notification_code2']) && (mb_strlen($this->container['notification_code2']) > 5)) {
            $invalidProperties[] = "invalid value for 'notification_code2', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['notification_code3']) && (mb_strlen($this->container['notification_code3']) > 5)) {
            $invalidProperties[] = "invalid value for 'notification_code3', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['verbal_confirmation_name']) && (mb_strlen($this->container['verbal_confirmation_name']) > 45)) {
            $invalidProperties[] = "invalid value for 'verbal_confirmation_name', the character length must be smaller than or equal to 45.";
        }

        if (!is_null($this->container['verbal_confirmation_phone_number']) && (mb_strlen($this->container['verbal_confirmation_phone_number']) > 45)) {
            $invalidProperties[] = "invalid value for 'verbal_confirmation_phone_number', the character length must be smaller than or equal to 45.";
        }

        if (!is_null($this->container['custom_attribute1']) && (mb_strlen($this->container['custom_attribute1']) > 100)) {
            $invalidProperties[] = "invalid value for 'custom_attribute1', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['custom_attribute2']) && (mb_strlen($this->container['custom_attribute2']) > 100)) {
            $invalidProperties[] = "invalid value for 'custom_attribute2', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['custom_attribute3']) && (mb_strlen($this->container['custom_attribute3']) > 100)) {
            $invalidProperties[] = "invalid value for 'custom_attribute3', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['custom_attribute4']) && (mb_strlen($this->container['custom_attribute4']) > 100)) {
            $invalidProperties[] = "invalid value for 'custom_attribute4', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['custom_attribute5']) && (mb_strlen($this->container['custom_attribute5']) > 100)) {
            $invalidProperties[] = "invalid value for 'custom_attribute5', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['custom_attribute6']) && (mb_strlen($this->container['custom_attribute6']) > 100)) {
            $invalidProperties[] = "invalid value for 'custom_attribute6', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['custom_attribute7']) && (mb_strlen($this->container['custom_attribute7']) > 100)) {
            $invalidProperties[] = "invalid value for 'custom_attribute7', the character length must be smaller than or equal to 100.";
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOrderStatusAllowableValues();
        if (!is_null($this->container['order_status']) && !in_array($this->container['order_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'order_status', must be one of '%s'",
                $this->container['order_status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['ship_to_facility'] === null) {
            $invalidProperties[] = "'ship_to_facility' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets self
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $self self
     *
     * @return self
     */
    public function setSelf($self)
    {
        if (is_null($self)) {
            throw new \InvalidArgumentException('non-nullable self cannot be null');
        }
        $this->container['self'] = $self;

        return $this;
    }

    /**
     * Gets business_unit
     *
     * @return \BeLenka\Deposco\Model\EntityRef
     */
    public function getBusinessUnit()
    {
        return $this->container['business_unit'];
    }

    /**
     * Sets business_unit
     *
     * @param \BeLenka\Deposco\Model\EntityRef $business_unit business_unit
     *
     * @return self
     */
    public function setBusinessUnit($business_unit)
    {
        if (is_null($business_unit)) {
            throw new \InvalidArgumentException('non-nullable business_unit cannot be null');
        }
        $this->container['business_unit'] = $business_unit;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number Unique identifier for the order.
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }
        if ((mb_strlen($number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $number when calling CustomerReturnDTO., must be smaller than or equal to 50.');
        }
        if ((!preg_match("/.*\\S.*/", ObjectSerializer::toString($number)))) {
            throw new \InvalidArgumentException("invalid value for \$number when calling CustomerReturnDTO., must conform to the pattern /.*\\S.*/.");
        }

        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets order_priority
     *
     * @return int|null
     */
    public function getOrderPriority()
    {
        return $this->container['order_priority'];
    }

    /**
     * Sets order_priority
     *
     * @param int|null $order_priority Numeric value that represents the importance of the order, where 0 is the highest priority, and 5 is the lowest priority. Can be used in waving logic.
     *
     * @return self
     */
    public function setOrderPriority($order_priority)
    {
        if (is_null($order_priority)) {
            throw new \InvalidArgumentException('non-nullable order_priority cannot be null');
        }

        if (($order_priority > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $order_priority when calling CustomerReturnDTO., must be smaller than or equal to 2147483647.');
        }
        if (($order_priority < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $order_priority when calling CustomerReturnDTO., must be bigger than or equal to -2147483648.');
        }

        $this->container['order_priority'] = $order_priority;

        return $this;
    }

    /**
     * Gets order_summary
     *
     * @return string|null
     */
    public function getOrderSummary()
    {
        return $this->container['order_summary'];
    }

    /**
     * Sets order_summary
     *
     * @param string|null $order_summary Additional information about the order.
     *
     * @return self
     */
    public function setOrderSummary($order_summary)
    {
        if (is_null($order_summary)) {
            throw new \InvalidArgumentException('non-nullable order_summary cannot be null');
        }
        if ((mb_strlen($order_summary) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $order_summary when calling CustomerReturnDTO., must be smaller than or equal to 1000.');
        }

        $this->container['order_summary'] = $order_summary;

        return $this;
    }

    /**
     * Gets order_source
     *
     * @return string|null
     */
    public function getOrderSource()
    {
        return $this->container['order_source'];
    }

    /**
     * Sets order_source
     *
     * @param string|null $order_source Reference field that identifies the source system in which the order was placed.
     *
     * @return self
     */
    public function setOrderSource($order_source)
    {
        if (is_null($order_source)) {
            throw new \InvalidArgumentException('non-nullable order_source cannot be null');
        }
        if ((mb_strlen($order_source) > 100)) {
            throw new \InvalidArgumentException('invalid length for $order_source when calling CustomerReturnDTO., must be smaller than or equal to 100.');
        }

        $this->container['order_source'] = $order_source;

        return $this;
    }

    /**
     * Gets secondary_order_source
     *
     * @return string|null
     */
    public function getSecondaryOrderSource()
    {
        return $this->container['secondary_order_source'];
    }

    /**
     * Sets secondary_order_source
     *
     * @param string|null $secondary_order_source Additional source for the order. For example, the order may have been pulled from a ChannelAdvisor integration but was originally created through Amazon.
     *
     * @return self
     */
    public function setSecondaryOrderSource($secondary_order_source)
    {
        if (is_null($secondary_order_source)) {
            throw new \InvalidArgumentException('non-nullable secondary_order_source cannot be null');
        }
        if ((mb_strlen($secondary_order_source) > 100)) {
            throw new \InvalidArgumentException('invalid length for $secondary_order_source when calling CustomerReturnDTO., must be smaller than or equal to 100.');
        }

        $this->container['secondary_order_source'] = $secondary_order_source;

        return $this;
    }

    /**
     * Gets customer_order_number
     *
     * @return string|null
     */
    public function getCustomerOrderNumber()
    {
        return $this->container['customer_order_number'];
    }

    /**
     * Sets customer_order_number
     *
     * @param string|null $customer_order_number Order number from the external system where the order was created. If the order was generated from a customer order in Bright Order, then this is the customer order number.
     *
     * @return self
     */
    public function setCustomerOrderNumber($customer_order_number)
    {
        if (is_null($customer_order_number)) {
            throw new \InvalidArgumentException('non-nullable customer_order_number cannot be null');
        }
        if ((mb_strlen($customer_order_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $customer_order_number when calling CustomerReturnDTO., must be smaller than or equal to 50.');
        }

        $this->container['customer_order_number'] = $customer_order_number;

        return $this;
    }

    /**
     * Gets related_order_number
     *
     * @return string|null
     */
    public function getRelatedOrderNumber()
    {
        return $this->container['related_order_number'];
    }

    /**
     * Sets related_order_number
     *
     * @param string|null $related_order_number Order number of another order that is related to this order.
     *
     * @return self
     */
    public function setRelatedOrderNumber($related_order_number)
    {
        if (is_null($related_order_number)) {
            throw new \InvalidArgumentException('non-nullable related_order_number cannot be null');
        }
        if ((mb_strlen($related_order_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $related_order_number when calling CustomerReturnDTO., must be smaller than or equal to 50.');
        }

        $this->container['related_order_number'] = $related_order_number;

        return $this;
    }

    /**
     * Gets partner_invoice_number
     *
     * @return string|null
     */
    public function getPartnerInvoiceNumber()
    {
        return $this->container['partner_invoice_number'];
    }

    /**
     * Sets partner_invoice_number
     *
     * @param string|null $partner_invoice_number Used in some socket integrations. Also used to group ASNs with the Group ASN process.
     *
     * @return self
     */
    public function setPartnerInvoiceNumber($partner_invoice_number)
    {
        if (is_null($partner_invoice_number)) {
            throw new \InvalidArgumentException('non-nullable partner_invoice_number cannot be null');
        }
        if ((mb_strlen($partner_invoice_number) > 20)) {
            throw new \InvalidArgumentException('invalid length for $partner_invoice_number when calling CustomerReturnDTO., must be smaller than or equal to 20.');
        }

        $this->container['partner_invoice_number'] = $partner_invoice_number;

        return $this;
    }

    /**
     * Gets consignee_partner
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getConsigneePartner()
    {
        return $this->container['consignee_partner'];
    }

    /**
     * Sets consignee_partner
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $consignee_partner consignee_partner
     *
     * @return self
     */
    public function setConsigneePartner($consignee_partner)
    {
        if (is_null($consignee_partner)) {
            array_push($this->openAPINullablesSetToNull, 'consignee_partner');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('consignee_partner', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['consignee_partner'] = $consignee_partner;

        return $this;
    }

    /**
     * Gets trading_partner_site
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getTradingPartnerSite()
    {
        return $this->container['trading_partner_site'];
    }

    /**
     * Sets trading_partner_site
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $trading_partner_site trading_partner_site
     *
     * @return self
     */
    public function setTradingPartnerSite($trading_partner_site)
    {
        if (is_null($trading_partner_site)) {
            array_push($this->openAPINullablesSetToNull, 'trading_partner_site');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('trading_partner_site', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['trading_partner_site'] = $trading_partner_site;

        return $this;
    }

    /**
     * Gets ship_to_contact
     *
     * @return \BeLenka\Deposco\Model\AddressContactDTO|null
     */
    public function getShipToContact()
    {
        return $this->container['ship_to_contact'];
    }

    /**
     * Sets ship_to_contact
     *
     * @param \BeLenka\Deposco\Model\AddressContactDTO|null $ship_to_contact ship_to_contact
     *
     * @return self
     */
    public function setShipToContact($ship_to_contact)
    {
        if (is_null($ship_to_contact)) {
            throw new \InvalidArgumentException('non-nullable ship_to_contact cannot be null');
        }
        $this->container['ship_to_contact'] = $ship_to_contact;

        return $this;
    }

    /**
     * Gets ship_to_address
     *
     * @return \BeLenka\Deposco\Model\AddressDTO|null
     */
    public function getShipToAddress()
    {
        return $this->container['ship_to_address'];
    }

    /**
     * Sets ship_to_address
     *
     * @param \BeLenka\Deposco\Model\AddressDTO|null $ship_to_address ship_to_address
     *
     * @return self
     */
    public function setShipToAddress($ship_to_address)
    {
        if (is_null($ship_to_address)) {
            throw new \InvalidArgumentException('non-nullable ship_to_address cannot be null');
        }
        $this->container['ship_to_address'] = $ship_to_address;

        return $this;
    }

    /**
     * Gets bill_to_partner
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getBillToPartner()
    {
        return $this->container['bill_to_partner'];
    }

    /**
     * Sets bill_to_partner
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $bill_to_partner bill_to_partner
     *
     * @return self
     */
    public function setBillToPartner($bill_to_partner)
    {
        if (is_null($bill_to_partner)) {
            array_push($this->openAPINullablesSetToNull, 'bill_to_partner');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bill_to_partner', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bill_to_partner'] = $bill_to_partner;

        return $this;
    }

    /**
     * Gets bill_to_contact
     *
     * @return \BeLenka\Deposco\Model\AddressContactDTO|null
     */
    public function getBillToContact()
    {
        return $this->container['bill_to_contact'];
    }

    /**
     * Sets bill_to_contact
     *
     * @param \BeLenka\Deposco\Model\AddressContactDTO|null $bill_to_contact bill_to_contact
     *
     * @return self
     */
    public function setBillToContact($bill_to_contact)
    {
        if (is_null($bill_to_contact)) {
            throw new \InvalidArgumentException('non-nullable bill_to_contact cannot be null');
        }
        $this->container['bill_to_contact'] = $bill_to_contact;

        return $this;
    }

    /**
     * Gets bill_to_account_number
     *
     * @return string|null
     */
    public function getBillToAccountNumber()
    {
        return $this->container['bill_to_account_number'];
    }

    /**
     * Sets bill_to_account_number
     *
     * @param string|null $bill_to_account_number Account number of the person or company to whom the order is billed.
     *
     * @return self
     */
    public function setBillToAccountNumber($bill_to_account_number)
    {
        if (is_null($bill_to_account_number)) {
            throw new \InvalidArgumentException('non-nullable bill_to_account_number cannot be null');
        }
        if ((mb_strlen($bill_to_account_number) > 30)) {
            throw new \InvalidArgumentException('invalid length for $bill_to_account_number when calling CustomerReturnDTO., must be smaller than or equal to 30.');
        }

        $this->container['bill_to_account_number'] = $bill_to_account_number;

        return $this;
    }

    /**
     * Gets bill_to_address
     *
     * @return \BeLenka\Deposco\Model\AddressDTO|null
     */
    public function getBillToAddress()
    {
        return $this->container['bill_to_address'];
    }

    /**
     * Sets bill_to_address
     *
     * @param \BeLenka\Deposco\Model\AddressDTO|null $bill_to_address bill_to_address
     *
     * @return self
     */
    public function setBillToAddress($bill_to_address)
    {
        if (is_null($bill_to_address)) {
            throw new \InvalidArgumentException('non-nullable bill_to_address cannot be null');
        }
        $this->container['bill_to_address'] = $bill_to_address;

        return $this;
    }

    /**
     * Gets ship_from_contact
     *
     * @return \BeLenka\Deposco\Model\AddressContactDTO|null
     */
    public function getShipFromContact()
    {
        return $this->container['ship_from_contact'];
    }

    /**
     * Sets ship_from_contact
     *
     * @param \BeLenka\Deposco\Model\AddressContactDTO|null $ship_from_contact ship_from_contact
     *
     * @return self
     */
    public function setShipFromContact($ship_from_contact)
    {
        if (is_null($ship_from_contact)) {
            throw new \InvalidArgumentException('non-nullable ship_from_contact cannot be null');
        }
        $this->container['ship_from_contact'] = $ship_from_contact;

        return $this;
    }

    /**
     * Gets ship_from_address
     *
     * @return \BeLenka\Deposco\Model\AddressDTO|null
     */
    public function getShipFromAddress()
    {
        return $this->container['ship_from_address'];
    }

    /**
     * Sets ship_from_address
     *
     * @param \BeLenka\Deposco\Model\AddressDTO|null $ship_from_address ship_from_address
     *
     * @return self
     */
    public function setShipFromAddress($ship_from_address)
    {
        if (is_null($ship_from_address)) {
            throw new \InvalidArgumentException('non-nullable ship_from_address cannot be null');
        }
        $this->container['ship_from_address'] = $ship_from_address;

        return $this;
    }

    /**
     * Gets placed_date
     *
     * @return \DateTime|null
     */
    public function getPlacedDate()
    {
        return $this->container['placed_date'];
    }

    /**
     * Sets placed_date
     *
     * @param \DateTime|null $placed_date Date that the order was placed, regardless of when the order was sent to Deposco.
     *
     * @return self
     */
    public function setPlacedDate($placed_date)
    {
        if (is_null($placed_date)) {
            throw new \InvalidArgumentException('non-nullable placed_date cannot be null');
        }
        $this->container['placed_date'] = $placed_date;

        return $this;
    }

    /**
     * Gets planned_arrival_date
     *
     * @return \DateTime|null
     */
    public function getPlannedArrivalDate()
    {
        return $this->container['planned_arrival_date'];
    }

    /**
     * Sets planned_arrival_date
     *
     * @param \DateTime|null $planned_arrival_date Date when the buyer expects that stock for the order will be delivered.
     *
     * @return self
     */
    public function setPlannedArrivalDate($planned_arrival_date)
    {
        if (is_null($planned_arrival_date)) {
            throw new \InvalidArgumentException('non-nullable planned_arrival_date cannot be null');
        }
        $this->container['planned_arrival_date'] = $planned_arrival_date;

        return $this;
    }

    /**
     * Gets planned_release_date
     *
     * @return \DateTime|null
     */
    public function getPlannedReleaseDate()
    {
        return $this->container['planned_release_date'];
    }

    /**
     * Sets planned_release_date
     *
     * @param \DateTime|null $planned_release_date Date on which the order should be released for fulfillment. Used primarily for reporting purposes.
     *
     * @return self
     */
    public function setPlannedReleaseDate($planned_release_date)
    {
        if (is_null($planned_release_date)) {
            throw new \InvalidArgumentException('non-nullable planned_release_date cannot be null');
        }
        $this->container['planned_release_date'] = $planned_release_date;

        return $this;
    }

    /**
     * Gets planned_ship_date
     *
     * @return \DateTime|null
     */
    public function getPlannedShipDate()
    {
        return $this->container['planned_ship_date'];
    }

    /**
     * Sets planned_ship_date
     *
     * @param \DateTime|null $planned_ship_date Date on which the order should be shipped. Used primarily for reporting purposes.
     *
     * @return self
     */
    public function setPlannedShipDate($planned_ship_date)
    {
        if (is_null($planned_ship_date)) {
            throw new \InvalidArgumentException('non-nullable planned_ship_date cannot be null');
        }
        $this->container['planned_ship_date'] = $planned_ship_date;

        return $this;
    }

    /**
     * Gets earliest_ship_date
     *
     * @return \DateTime|null
     */
    public function getEarliestShipDate()
    {
        return $this->container['earliest_ship_date'];
    }

    /**
     * Sets earliest_ship_date
     *
     * @param \DateTime|null $earliest_ship_date Earliest date by which the order should be shipped. Custom configuration is required in Deposco to leverage this value.
     *
     * @return self
     */
    public function setEarliestShipDate($earliest_ship_date)
    {
        if (is_null($earliest_ship_date)) {
            throw new \InvalidArgumentException('non-nullable earliest_ship_date cannot be null');
        }
        $this->container['earliest_ship_date'] = $earliest_ship_date;

        return $this;
    }

    /**
     * Gets earliest_delivery_date
     *
     * @return \DateTime|null
     */
    public function getEarliestDeliveryDate()
    {
        return $this->container['earliest_delivery_date'];
    }

    /**
     * Sets earliest_delivery_date
     *
     * @param \DateTime|null $earliest_delivery_date Earliest date by which the order should be delivered. Custom configuration is required in Deposco to leverage this value.
     *
     * @return self
     */
    public function setEarliestDeliveryDate($earliest_delivery_date)
    {
        if (is_null($earliest_delivery_date)) {
            throw new \InvalidArgumentException('non-nullable earliest_delivery_date cannot be null');
        }
        $this->container['earliest_delivery_date'] = $earliest_delivery_date;

        return $this;
    }

    /**
     * Gets cancel_by_arrival_date
     *
     * @return \DateTime|null
     */
    public function getCancelByArrivalDate()
    {
        return $this->container['cancel_by_arrival_date'];
    }

    /**
     * Sets cancel_by_arrival_date
     *
     * @param \DateTime|null $cancel_by_arrival_date Date after which the deliveries for this order should be rejected. In other words, the order should be canceled if it has not arrived by this date. Automatic cancellation of orders requires custom configuration in Deposco.
     *
     * @return self
     */
    public function setCancelByArrivalDate($cancel_by_arrival_date)
    {
        if (is_null($cancel_by_arrival_date)) {
            throw new \InvalidArgumentException('non-nullable cancel_by_arrival_date cannot be null');
        }
        $this->container['cancel_by_arrival_date'] = $cancel_by_arrival_date;

        return $this;
    }

    /**
     * Gets cancel_by_release_date
     *
     * @return \DateTime|null
     */
    public function getCancelByReleaseDate()
    {
        return $this->container['cancel_by_release_date'];
    }

    /**
     * Sets cancel_by_release_date
     *
     * @param \DateTime|null $cancel_by_release_date Date by which the order should be canceled if it has not yet been released. Automatic cancellation of orders requires custom configuration in Deposco.
     *
     * @return self
     */
    public function setCancelByReleaseDate($cancel_by_release_date)
    {
        if (is_null($cancel_by_release_date)) {
            throw new \InvalidArgumentException('non-nullable cancel_by_release_date cannot be null');
        }
        $this->container['cancel_by_release_date'] = $cancel_by_release_date;

        return $this;
    }

    /**
     * Gets cancel_by_ship_date
     *
     * @return \DateTime|null
     */
    public function getCancelByShipDate()
    {
        return $this->container['cancel_by_ship_date'];
    }

    /**
     * Sets cancel_by_ship_date
     *
     * @param \DateTime|null $cancel_by_ship_date Date by which the order should be canceled if it has not yet shipped. Automatic cancellation of orders requires custom configuration in Deposco.
     *
     * @return self
     */
    public function setCancelByShipDate($cancel_by_ship_date)
    {
        if (is_null($cancel_by_ship_date)) {
            throw new \InvalidArgumentException('non-nullable cancel_by_ship_date cannot be null');
        }
        $this->container['cancel_by_ship_date'] = $cancel_by_ship_date;

        return $this;
    }

    /**
     * Gets actual_arrival_date
     *
     * @return \DateTime|null
     */
    public function getActualArrivalDate()
    {
        return $this->container['actual_arrival_date'];
    }

    /**
     * Sets actual_arrival_date
     *
     * @param \DateTime|null $actual_arrival_date Date that stock for the order was received.
     *
     * @return self
     */
    public function setActualArrivalDate($actual_arrival_date)
    {
        if (is_null($actual_arrival_date)) {
            throw new \InvalidArgumentException('non-nullable actual_arrival_date cannot be null');
        }
        $this->container['actual_arrival_date'] = $actual_arrival_date;

        return $this;
    }

    /**
     * Gets actual_release_date
     *
     * @return \DateTime|null
     */
    public function getActualReleaseDate()
    {
        return $this->container['actual_release_date'];
    }

    /**
     * Sets actual_release_date
     *
     * @param \DateTime|null $actual_release_date Date when the order is released for fulfillment.
     *
     * @return self
     */
    public function setActualReleaseDate($actual_release_date)
    {
        if (is_null($actual_release_date)) {
            throw new \InvalidArgumentException('non-nullable actual_release_date cannot be null');
        }
        $this->container['actual_release_date'] = $actual_release_date;

        return $this;
    }

    /**
     * Gets actual_ship_date
     *
     * @return \DateTime|null
     */
    public function getActualShipDate()
    {
        return $this->container['actual_ship_date'];
    }

    /**
     * Sets actual_ship_date
     *
     * @param \DateTime|null $actual_ship_date Date when the order ships.
     *
     * @return self
     */
    public function setActualShipDate($actual_ship_date)
    {
        if (is_null($actual_ship_date)) {
            throw new \InvalidArgumentException('non-nullable actual_ship_date cannot be null');
        }
        $this->container['actual_ship_date'] = $actual_ship_date;

        return $this;
    }

    /**
     * Gets price_list
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getPriceList()
    {
        return $this->container['price_list'];
    }

    /**
     * Sets price_list
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $price_list price_list
     *
     * @return self
     */
    public function setPriceList($price_list)
    {
        if (is_null($price_list)) {
            array_push($this->openAPINullablesSetToNull, 'price_list');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('price_list', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['price_list'] = $price_list;

        return $this;
    }

    /**
     * Gets order_total
     *
     * @return int|null
     */
    public function getOrderTotal()
    {
        return $this->container['order_total'];
    }

    /**
     * Sets order_total
     *
     * @param int|null $order_total Sum of the `orderSubtotal`, `orderTaxTotal`, and `orderShippingTotal` fields for the order.
     *
     * @return self
     */
    public function setOrderTotal($order_total)
    {
        if (is_null($order_total)) {
            throw new \InvalidArgumentException('non-nullable order_total cannot be null');
        }

        if (($order_total > 0)) {
            throw new \InvalidArgumentException('invalid value for $order_total when calling CustomerReturnDTO., must be smaller than or equal to 0.');
        }
        if (($order_total < 0)) {
            throw new \InvalidArgumentException('invalid value for $order_total when calling CustomerReturnDTO., must be bigger than or equal to 0.');
        }

        $this->container['order_total'] = $order_total;

        return $this;
    }

    /**
     * Gets order_subtotal
     *
     * @return int|null
     */
    public function getOrderSubtotal()
    {
        return $this->container['order_subtotal'];
    }

    /**
     * Sets order_subtotal
     *
     * @param int|null $order_subtotal Sum of all line discounted total prices (not including tax or shipping and handling).
     *
     * @return self
     */
    public function setOrderSubtotal($order_subtotal)
    {
        if (is_null($order_subtotal)) {
            throw new \InvalidArgumentException('non-nullable order_subtotal cannot be null');
        }

        if (($order_subtotal > 0)) {
            throw new \InvalidArgumentException('invalid value for $order_subtotal when calling CustomerReturnDTO., must be smaller than or equal to 0.');
        }
        if (($order_subtotal < 0)) {
            throw new \InvalidArgumentException('invalid value for $order_subtotal when calling CustomerReturnDTO., must be bigger than or equal to 0.');
        }

        $this->container['order_subtotal'] = $order_subtotal;

        return $this;
    }

    /**
     * Gets order_discount_subtotal
     *
     * @return int|null
     */
    public function getOrderDiscountSubtotal()
    {
        return $this->container['order_discount_subtotal'];
    }

    /**
     * Sets order_discount_subtotal
     *
     * @param int|null $order_discount_subtotal Total discount amount across the entire order (discount amount for all order lines multiplied by the order quantity and the pack quantity).
     *
     * @return self
     */
    public function setOrderDiscountSubtotal($order_discount_subtotal)
    {
        if (is_null($order_discount_subtotal)) {
            throw new \InvalidArgumentException('non-nullable order_discount_subtotal cannot be null');
        }

        if (($order_discount_subtotal > 0)) {
            throw new \InvalidArgumentException('invalid value for $order_discount_subtotal when calling CustomerReturnDTO., must be smaller than or equal to 0.');
        }
        if (($order_discount_subtotal < 0)) {
            throw new \InvalidArgumentException('invalid value for $order_discount_subtotal when calling CustomerReturnDTO., must be bigger than or equal to 0.');
        }

        $this->container['order_discount_subtotal'] = $order_discount_subtotal;

        return $this;
    }

    /**
     * Gets order_shipping_total
     *
     * @return int|null
     */
    public function getOrderShippingTotal()
    {
        return $this->container['order_shipping_total'];
    }

    /**
     * Sets order_shipping_total
     *
     * @param int|null $order_shipping_total Total cost (or estimated cost) to ship the entire order.
     *
     * @return self
     */
    public function setOrderShippingTotal($order_shipping_total)
    {
        if (is_null($order_shipping_total)) {
            throw new \InvalidArgumentException('non-nullable order_shipping_total cannot be null');
        }

        if (($order_shipping_total > 0)) {
            throw new \InvalidArgumentException('invalid value for $order_shipping_total when calling CustomerReturnDTO., must be smaller than or equal to 0.');
        }
        if (($order_shipping_total < 0)) {
            throw new \InvalidArgumentException('invalid value for $order_shipping_total when calling CustomerReturnDTO., must be bigger than or equal to 0.');
        }

        $this->container['order_shipping_total'] = $order_shipping_total;

        return $this;
    }

    /**
     * Gets order_ship_total
     *
     * @return int|null
     */
    public function getOrderShipTotal()
    {
        return $this->container['order_ship_total'];
    }

    /**
     * Sets order_ship_total
     *
     * @param int|null $order_ship_total Total cost (or estimated cost) to ship the entire order.
     *
     * @return self
     */
    public function setOrderShipTotal($order_ship_total)
    {
        if (is_null($order_ship_total)) {
            throw new \InvalidArgumentException('non-nullable order_ship_total cannot be null');
        }

        if (($order_ship_total > 0)) {
            throw new \InvalidArgumentException('invalid value for $order_ship_total when calling CustomerReturnDTO., must be smaller than or equal to 0.');
        }
        if (($order_ship_total < 0)) {
            throw new \InvalidArgumentException('invalid value for $order_ship_total when calling CustomerReturnDTO., must be bigger than or equal to 0.');
        }

        $this->container['order_ship_total'] = $order_ship_total;

        return $this;
    }

    /**
     * Gets taxable
     *
     * @return bool|null
     */
    public function getTaxable()
    {
        return $this->container['taxable'];
    }

    /**
     * Sets taxable
     *
     * @param bool|null $taxable Whether tax should be calculated for the order.
     *
     * @return self
     */
    public function setTaxable($taxable)
    {
        if (is_null($taxable)) {
            throw new \InvalidArgumentException('non-nullable taxable cannot be null');
        }
        $this->container['taxable'] = $taxable;

        return $this;
    }

    /**
     * Gets order_tax_total
     *
     * @return int|null
     */
    public function getOrderTaxTotal()
    {
        return $this->container['order_tax_total'];
    }

    /**
     * Sets order_tax_total
     *
     * @param int|null $order_tax_total Sum of the tax amount from all order lines for the order.
     *
     * @return self
     */
    public function setOrderTaxTotal($order_tax_total)
    {
        if (is_null($order_tax_total)) {
            throw new \InvalidArgumentException('non-nullable order_tax_total cannot be null');
        }

        if (($order_tax_total > 0)) {
            throw new \InvalidArgumentException('invalid value for $order_tax_total when calling CustomerReturnDTO., must be smaller than or equal to 0.');
        }
        if (($order_tax_total < 0)) {
            throw new \InvalidArgumentException('invalid value for $order_tax_total when calling CustomerReturnDTO., must be bigger than or equal to 0.');
        }

        $this->container['order_tax_total'] = $order_tax_total;

        return $this;
    }

    /**
     * Gets order_taxable_total
     *
     * @return int|null
     */
    public function getOrderTaxableTotal()
    {
        return $this->container['order_taxable_total'];
    }

    /**
     * Sets order_taxable_total
     *
     * @param int|null $order_taxable_total Sum of all line discounted total prices for taxable items.
     *
     * @return self
     */
    public function setOrderTaxableTotal($order_taxable_total)
    {
        if (is_null($order_taxable_total)) {
            throw new \InvalidArgumentException('non-nullable order_taxable_total cannot be null');
        }

        if (($order_taxable_total > 0)) {
            throw new \InvalidArgumentException('invalid value for $order_taxable_total when calling CustomerReturnDTO., must be smaller than or equal to 0.');
        }
        if (($order_taxable_total < 0)) {
            throw new \InvalidArgumentException('invalid value for $order_taxable_total when calling CustomerReturnDTO., must be bigger than or equal to 0.');
        }

        $this->container['order_taxable_total'] = $order_taxable_total;

        return $this;
    }

    /**
     * Gets order_untaxable_total
     *
     * @return int|null
     */
    public function getOrderUntaxableTotal()
    {
        return $this->container['order_untaxable_total'];
    }

    /**
     * Sets order_untaxable_total
     *
     * @param int|null $order_untaxable_total Sum of all line discounted total prices for items that do not require tax.
     *
     * @return self
     */
    public function setOrderUntaxableTotal($order_untaxable_total)
    {
        if (is_null($order_untaxable_total)) {
            throw new \InvalidArgumentException('non-nullable order_untaxable_total cannot be null');
        }

        if (($order_untaxable_total > 0)) {
            throw new \InvalidArgumentException('invalid value for $order_untaxable_total when calling CustomerReturnDTO., must be smaller than or equal to 0.');
        }
        if (($order_untaxable_total < 0)) {
            throw new \InvalidArgumentException('invalid value for $order_untaxable_total when calling CustomerReturnDTO., must be bigger than or equal to 0.');
        }

        $this->container['order_untaxable_total'] = $order_untaxable_total;

        return $this;
    }

    /**
     * Gets shipping_tax_total
     *
     * @return int|null
     */
    public function getShippingTaxTotal()
    {
        return $this->container['shipping_tax_total'];
    }

    /**
     * Sets shipping_tax_total
     *
     * @param int|null $shipping_tax_total Sum of the tax amount from all shipment lines for the order.
     *
     * @return self
     */
    public function setShippingTaxTotal($shipping_tax_total)
    {
        if (is_null($shipping_tax_total)) {
            throw new \InvalidArgumentException('non-nullable shipping_tax_total cannot be null');
        }

        if (($shipping_tax_total > 0)) {
            throw new \InvalidArgumentException('invalid value for $shipping_tax_total when calling CustomerReturnDTO., must be smaller than or equal to 0.');
        }
        if (($shipping_tax_total < 0)) {
            throw new \InvalidArgumentException('invalid value for $shipping_tax_total when calling CustomerReturnDTO., must be bigger than or equal to 0.');
        }

        $this->container['shipping_tax_total'] = $shipping_tax_total;

        return $this;
    }

    /**
     * Gets ship_via
     *
     * @return string|null
     */
    public function getShipVia()
    {
        return $this->container['ship_via'];
    }

    /**
     * Sets ship_via
     *
     * @param string|null $ship_via Shipping service that is used to ship the order.
     *
     * @return self
     */
    public function setShipVia($ship_via)
    {
        if (is_null($ship_via)) {
            throw new \InvalidArgumentException('non-nullable ship_via cannot be null');
        }
        if ((mb_strlen($ship_via) > 50)) {
            throw new \InvalidArgumentException('invalid length for $ship_via when calling CustomerReturnDTO., must be smaller than or equal to 50.');
        }

        $this->container['ship_via'] = $ship_via;

        return $this;
    }

    /**
     * Gets ship_vendor
     *
     * @return string|null
     */
    public function getShipVendor()
    {
        return $this->container['ship_vendor'];
    }

    /**
     * Sets ship_vendor
     *
     * @param string|null $ship_vendor Shipping carrier that is used to ship the order.
     *
     * @return self
     */
    public function setShipVendor($ship_vendor)
    {
        if (is_null($ship_vendor)) {
            throw new \InvalidArgumentException('non-nullable ship_vendor cannot be null');
        }
        if ((mb_strlen($ship_vendor) > 50)) {
            throw new \InvalidArgumentException('invalid length for $ship_vendor when calling CustomerReturnDTO., must be smaller than or equal to 50.');
        }

        $this->container['ship_vendor'] = $ship_vendor;

        return $this;
    }

    /**
     * Gets ship_method
     *
     * @return string|null
     */
    public function getShipMethod()
    {
        return $this->container['ship_method'];
    }

    /**
     * Sets ship_method
     *
     * @param string|null $ship_method Shipping method that is used to ship the order.
     *
     * @return self
     */
    public function setShipMethod($ship_method)
    {
        if (is_null($ship_method)) {
            throw new \InvalidArgumentException('non-nullable ship_method cannot be null');
        }
        if ((mb_strlen($ship_method) > 50)) {
            throw new \InvalidArgumentException('invalid length for $ship_method when calling CustomerReturnDTO., must be smaller than or equal to 50.');
        }

        $this->container['ship_method'] = $ship_method;

        return $this;
    }

    /**
     * Gets freight_terms_type
     *
     * @return string|null
     */
    public function getFreightTermsType()
    {
        return $this->container['freight_terms_type'];
    }

    /**
     * Sets freight_terms_type
     *
     * @param string|null $freight_terms_type Identifies how to determine the account that is responsible for payment of shipping costs for the order. Set to one of the following values:  - `Prepaid` - The shipping carrier account that created the shipment will be responsible for payment of shipping costs.  - `Collect` - The recipient is billed for the shipment. Either enter the shipping carrier account number in the `freightBillToAccount` field, or enter the account number in the trading partner record for the trading partner associated with the order.  - `Third Party` - A trading partner is billed for the shipment. Enter the shipping carrier account number in the trading partner record for the trading partner associated with the order.  - `Consignee` - Use contractual billing to bill the customer/recipient for UPS Ground shipping services. Consignee billing must be enabled in the contact information for the customer/recipient in the UPS account, and the address label must exactly match the UPS billing system information, including punctuation, spaces, and abbreviations in all lines, including the `Company Name` line.
     *
     * @return self
     */
    public function setFreightTermsType($freight_terms_type)
    {
        if (is_null($freight_terms_type)) {
            throw new \InvalidArgumentException('non-nullable freight_terms_type cannot be null');
        }
        if ((mb_strlen($freight_terms_type) > 100)) {
            throw new \InvalidArgumentException('invalid length for $freight_terms_type when calling CustomerReturnDTO., must be smaller than or equal to 100.');
        }

        $this->container['freight_terms_type'] = $freight_terms_type;

        return $this;
    }

    /**
     * Gets freight_bill_to_contact
     *
     * @return \BeLenka\Deposco\Model\AddressContactDTO|null
     */
    public function getFreightBillToContact()
    {
        return $this->container['freight_bill_to_contact'];
    }

    /**
     * Sets freight_bill_to_contact
     *
     * @param \BeLenka\Deposco\Model\AddressContactDTO|null $freight_bill_to_contact freight_bill_to_contact
     *
     * @return self
     */
    public function setFreightBillToContact($freight_bill_to_contact)
    {
        if (is_null($freight_bill_to_contact)) {
            throw new \InvalidArgumentException('non-nullable freight_bill_to_contact cannot be null');
        }
        $this->container['freight_bill_to_contact'] = $freight_bill_to_contact;

        return $this;
    }

    /**
     * Gets freight_bill_to_account
     *
     * @return string|null
     */
    public function getFreightBillToAccount()
    {
        return $this->container['freight_bill_to_account'];
    }

    /**
     * Sets freight_bill_to_account
     *
     * @param string|null $freight_bill_to_account Account number that is used to pay shipping costs for the order.
     *
     * @return self
     */
    public function setFreightBillToAccount($freight_bill_to_account)
    {
        if (is_null($freight_bill_to_account)) {
            throw new \InvalidArgumentException('non-nullable freight_bill_to_account cannot be null');
        }
        if ((mb_strlen($freight_bill_to_account) > 50)) {
            throw new \InvalidArgumentException('invalid length for $freight_bill_to_account when calling CustomerReturnDTO., must be smaller than or equal to 50.');
        }

        $this->container['freight_bill_to_account'] = $freight_bill_to_account;

        return $this;
    }

    /**
     * Gets freight_bill_to_address
     *
     * @return \BeLenka\Deposco\Model\AddressDTO|null
     */
    public function getFreightBillToAddress()
    {
        return $this->container['freight_bill_to_address'];
    }

    /**
     * Sets freight_bill_to_address
     *
     * @param \BeLenka\Deposco\Model\AddressDTO|null $freight_bill_to_address freight_bill_to_address
     *
     * @return self
     */
    public function setFreightBillToAddress($freight_bill_to_address)
    {
        if (is_null($freight_bill_to_address)) {
            throw new \InvalidArgumentException('non-nullable freight_bill_to_address cannot be null');
        }
        $this->container['freight_bill_to_address'] = $freight_bill_to_address;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return \BeLenka\Deposco\Model\BaseOrderHeaderDTOWeight|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param \BeLenka\Deposco\Model\BaseOrderHeaderDTOWeight|null $weight weight
     *
     * @return self
     */
    public function setWeight($weight)
    {
        if (is_null($weight)) {
            throw new \InvalidArgumentException('non-nullable weight cannot be null');
        }
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets return_required
     *
     * @return bool|null
     */
    public function getReturnRequired()
    {
        return $this->container['return_required'];
    }

    /**
     * Sets return_required
     *
     * @param bool|null $return_required Whether to generate and print a return label for the order.
     *
     * @return self
     */
    public function setReturnRequired($return_required)
    {
        if (is_null($return_required)) {
            throw new \InvalidArgumentException('non-nullable return_required cannot be null');
        }
        $this->container['return_required'] = $return_required;

        return $this;
    }

    /**
     * Gets return_ship_via
     *
     * @return string|null
     */
    public function getReturnShipVia()
    {
        return $this->container['return_ship_via'];
    }

    /**
     * Sets return_ship_via
     *
     * @param string|null $return_ship_via Shipping service that should be used for any returns for the order.
     *
     * @return self
     */
    public function setReturnShipVia($return_ship_via)
    {
        if (is_null($return_ship_via)) {
            throw new \InvalidArgumentException('non-nullable return_ship_via cannot be null');
        }
        if ((mb_strlen($return_ship_via) > 100)) {
            throw new \InvalidArgumentException('invalid length for $return_ship_via when calling CustomerReturnDTO., must be smaller than or equal to 100.');
        }

        $this->container['return_ship_via'] = $return_ship_via;

        return $this;
    }

    /**
     * Gets return_ship_option
     *
     * @return string|null
     */
    public function getReturnShipOption()
    {
        return $this->container['return_ship_option'];
    }

    /**
     * Sets return_ship_option
     *
     * @param string|null $return_ship_option Used by the GPPrintReturnLabel process to specify how to deliver the return label to the customer, such as print or electronic.
     *
     * @return self
     */
    public function setReturnShipOption($return_ship_option)
    {
        if (is_null($return_ship_option)) {
            throw new \InvalidArgumentException('non-nullable return_ship_option cannot be null');
        }
        if ((mb_strlen($return_ship_option) > 10)) {
            throw new \InvalidArgumentException('invalid length for $return_ship_option when calling CustomerReturnDTO., must be smaller than or equal to 10.');
        }

        $this->container['return_ship_option'] = $return_ship_option;

        return $this;
    }

    /**
     * Gets delivery_confirmation
     *
     * @return string|null
     */
    public function getDeliveryConfirmation()
    {
        return $this->container['delivery_confirmation'];
    }

    /**
     * Sets delivery_confirmation
     *
     * @param string|null $delivery_confirmation Leave blank if no signature is required. Set to 2 if a signature is required. Use of other values depends on the shipping carrier.
     *
     * @return self
     */
    public function setDeliveryConfirmation($delivery_confirmation)
    {
        if (is_null($delivery_confirmation)) {
            throw new \InvalidArgumentException('non-nullable delivery_confirmation cannot be null');
        }
        if ((mb_strlen($delivery_confirmation) > 45)) {
            throw new \InvalidArgumentException('invalid length for $delivery_confirmation when calling CustomerReturnDTO., must be smaller than or equal to 45.');
        }

        $this->container['delivery_confirmation'] = $delivery_confirmation;

        return $this;
    }

    /**
     * Gets insurance_required
     *
     * @return bool|null
     */
    public function getInsuranceRequired()
    {
        return $this->container['insurance_required'];
    }

    /**
     * Sets insurance_required
     *
     * @param bool|null $insurance_required Whether insurance is required for the package(s) in which the order ships. Can be set using post-order import related to setting the `shipVia` field. Must be set to `true` if insurance is required above the minimum default value for the shipping carrier. Insurance cost is calculated based on the value of items in the shipping container.
     *
     * @return self
     */
    public function setInsuranceRequired($insurance_required)
    {
        if (is_null($insurance_required)) {
            throw new \InvalidArgumentException('non-nullable insurance_required cannot be null');
        }
        $this->container['insurance_required'] = $insurance_required;

        return $this;
    }

    /**
     * Gets home_delivery
     *
     * @return bool|null
     */
    public function getHomeDelivery()
    {
        return $this->container['home_delivery'];
    }

    /**
     * Sets home_delivery
     *
     * @param bool|null $home_delivery Used when FedEx is the shipping carrier to specify whether FedEx Home Delivery is required.
     *
     * @return self
     */
    public function setHomeDelivery($home_delivery)
    {
        if (is_null($home_delivery)) {
            throw new \InvalidArgumentException('non-nullable home_delivery cannot be null');
        }
        $this->container['home_delivery'] = $home_delivery;

        return $this;
    }

    /**
     * Gets residential
     *
     * @return bool|null
     */
    public function getResidential()
    {
        return $this->container['residential'];
    }

    /**
     * Sets residential
     *
     * @param bool|null $residential Used when UPS is the shipping carrier to identify whether the address is a residential address. May be set by the address validation process.
     *
     * @return self
     */
    public function setResidential($residential)
    {
        if (is_null($residential)) {
            throw new \InvalidArgumentException('non-nullable residential cannot be null');
        }
        $this->container['residential'] = $residential;

        return $this;
    }

    /**
     * Gets saturday_delivery
     *
     * @return bool|null
     */
    public function getSaturdayDelivery()
    {
        return $this->container['saturday_delivery'];
    }

    /**
     * Sets saturday_delivery
     *
     * @param bool|null $saturday_delivery Used when UPS is the shipping carrier to specify whether the customer is requesting Saturday delivery for the order.
     *
     * @return self
     */
    public function setSaturdayDelivery($saturday_delivery)
    {
        if (is_null($saturday_delivery)) {
            throw new \InvalidArgumentException('non-nullable saturday_delivery cannot be null');
        }
        $this->container['saturday_delivery'] = $saturday_delivery;

        return $this;
    }

    /**
     * Gets hub_id
     *
     * @return string|null
     */
    public function getHubId()
    {
        return $this->container['hub_id'];
    }

    /**
     * Sets hub_id
     *
     * @param string|null $hub_id Used when a FedEx SmartPost shipping service is assigned to the order to identify the associated FedEx SmartPost hub.
     *
     * @return self
     */
    public function setHubId($hub_id)
    {
        if (is_null($hub_id)) {
            throw new \InvalidArgumentException('non-nullable hub_id cannot be null');
        }
        if ((mb_strlen($hub_id) > 10)) {
            throw new \InvalidArgumentException('invalid length for $hub_id when calling CustomerReturnDTO., must be smaller than or equal to 10.');
        }

        $this->container['hub_id'] = $hub_id;

        return $this;
    }

    /**
     * Gets routing_number
     *
     * @return string|null
     */
    public function getRoutingNumber()
    {
        return $this->container['routing_number'];
    }

    /**
     * Sets routing_number
     *
     * @param string|null $routing_number Transportation routing number for the trip to which the order is assigned.
     *
     * @return self
     */
    public function setRoutingNumber($routing_number)
    {
        if (is_null($routing_number)) {
            throw new \InvalidArgumentException('non-nullable routing_number cannot be null');
        }
        if ((mb_strlen($routing_number) > 30)) {
            throw new \InvalidArgumentException('invalid length for $routing_number when calling CustomerReturnDTO., must be smaller than or equal to 30.');
        }

        $this->container['routing_number'] = $routing_number;

        return $this;
    }

    /**
     * Gets incoterms_type
     *
     * @return string|null
     */
    public function getIncotermsType()
    {
        return $this->container['incoterms_type'];
    }

    /**
     * Sets incoterms_type
     *
     * @param string|null $incoterms_type International Commercial Terms type from the International Chamber of Commerce (ICC). Used for international orders.
     *
     * @return self
     */
    public function setIncotermsType($incoterms_type)
    {
        if (is_null($incoterms_type)) {
            throw new \InvalidArgumentException('non-nullable incoterms_type cannot be null');
        }
        if ((mb_strlen($incoterms_type) > 50)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_type when calling CustomerReturnDTO., must be smaller than or equal to 50.');
        }

        $this->container['incoterms_type'] = $incoterms_type;

        return $this;
    }

    /**
     * Gets import_type
     *
     * @return string|null
     */
    public function getImportType()
    {
        return $this->container['import_type'];
    }

    /**
     * Sets import_type
     *
     * @param string|null $import_type Whether an order is a `Single` or `Multi` order.
     *
     * @return self
     */
    public function setImportType($import_type)
    {
        if (is_null($import_type)) {
            throw new \InvalidArgumentException('non-nullable import_type cannot be null');
        }
        if ((mb_strlen($import_type) > 100)) {
            throw new \InvalidArgumentException('invalid length for $import_type when calling CustomerReturnDTO., must be smaller than or equal to 100.');
        }

        $this->container['import_type'] = $import_type;

        return $this;
    }

    /**
     * Gets import_reference
     *
     * @return string|null
     */
    public function getImportReference()
    {
        return $this->container['import_reference'];
    }

    /**
     * Sets import_reference
     *
     * @param string|null $import_reference Reference number that is used when orders are imported into Deposco.
     *
     * @return self
     */
    public function setImportReference($import_reference)
    {
        if (is_null($import_reference)) {
            throw new \InvalidArgumentException('non-nullable import_reference cannot be null');
        }
        if ((mb_strlen($import_reference) > 50)) {
            throw new \InvalidArgumentException('invalid length for $import_reference when calling CustomerReturnDTO., must be smaller than or equal to 50.');
        }

        $this->container['import_reference'] = $import_reference;

        return $this;
    }

    /**
     * Gets export_reference
     *
     * @return string|null
     */
    public function getExportReference()
    {
        return $this->container['export_reference'];
    }

    /**
     * Sets export_reference
     *
     * @param string|null $export_reference Reference number that is used when orders are exported from Deposco.
     *
     * @return self
     */
    public function setExportReference($export_reference)
    {
        if (is_null($export_reference)) {
            throw new \InvalidArgumentException('non-nullable export_reference cannot be null');
        }
        if ((mb_strlen($export_reference) > 50)) {
            throw new \InvalidArgumentException('invalid length for $export_reference when calling CustomerReturnDTO., must be smaller than or equal to 50.');
        }

        $this->container['export_reference'] = $export_reference;

        return $this;
    }

    /**
     * Gets other_reference_number
     *
     * @return string|null
     */
    public function getOtherReferenceNumber()
    {
        return $this->container['other_reference_number'];
    }

    /**
     * Sets other_reference_number
     *
     * @param string|null $other_reference_number Additional reference number for the order.
     *
     * @return self
     */
    public function setOtherReferenceNumber($other_reference_number)
    {
        if (is_null($other_reference_number)) {
            throw new \InvalidArgumentException('non-nullable other_reference_number cannot be null');
        }
        if ((mb_strlen($other_reference_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $other_reference_number when calling CustomerReturnDTO., must be smaller than or equal to 50.');
        }

        $this->container['other_reference_number'] = $other_reference_number;

        return $this;
    }

    /**
     * Gets other_reference_number2
     *
     * @return string|null
     */
    public function getOtherReferenceNumber2()
    {
        return $this->container['other_reference_number2'];
    }

    /**
     * Sets other_reference_number2
     *
     * @param string|null $other_reference_number2 Additional reference number for the order.
     *
     * @return self
     */
    public function setOtherReferenceNumber2($other_reference_number2)
    {
        if (is_null($other_reference_number2)) {
            throw new \InvalidArgumentException('non-nullable other_reference_number2 cannot be null');
        }
        if ((mb_strlen($other_reference_number2) > 45)) {
            throw new \InvalidArgumentException('invalid length for $other_reference_number2 when calling CustomerReturnDTO., must be smaller than or equal to 45.');
        }

        $this->container['other_reference_number2'] = $other_reference_number2;

        return $this;
    }

    /**
     * Gets integration_source
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getIntegrationSource()
    {
        return $this->container['integration_source'];
    }

    /**
     * Sets integration_source
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $integration_source integration_source
     *
     * @return self
     */
    public function setIntegrationSource($integration_source)
    {
        if (is_null($integration_source)) {
            array_push($this->openAPINullablesSetToNull, 'integration_source');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('integration_source', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['integration_source'] = $integration_source;

        return $this;
    }

    /**
     * Gets send_asn
     *
     * @return \BeLenka\Deposco\Model\SendASNDTO|null
     */
    public function getSendAsn()
    {
        return $this->container['send_asn'];
    }

    /**
     * Sets send_asn
     *
     * @param \BeLenka\Deposco\Model\SendASNDTO|null $send_asn send_asn
     *
     * @return self
     */
    public function setSendAsn($send_asn)
    {
        if (is_null($send_asn)) {
            array_push($this->openAPINullablesSetToNull, 'send_asn');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('send_asn', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['send_asn'] = $send_asn;

        return $this;
    }

    /**
     * Gets drop_ship
     *
     * @return bool|null
     */
    public function getDropShip()
    {
        return $this->container['drop_ship'];
    }

    /**
     * Sets drop_ship
     *
     * @param bool|null $drop_ship Whether the order is a dropship order, where the order is fulfilled by the company when the company is serving as a supplier for some external company. Dropship fulfillment requires custom configuration in Deposco.
     *
     * @return self
     */
    public function setDropShip($drop_ship)
    {
        if (is_null($drop_ship)) {
            throw new \InvalidArgumentException('non-nullable drop_ship cannot be null');
        }
        $this->container['drop_ship'] = $drop_ship;

        return $this;
    }

    /**
     * Gets pick_wave
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getPickWave()
    {
        return $this->container['pick_wave'];
    }

    /**
     * Sets pick_wave
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $pick_wave pick_wave
     *
     * @return self
     */
    public function setPickWave($pick_wave)
    {
        if (is_null($pick_wave)) {
            throw new \InvalidArgumentException('non-nullable pick_wave cannot be null');
        }
        $this->container['pick_wave'] = $pick_wave;

        return $this;
    }

    /**
     * Gets post_release_state
     *
     * @return \BeLenka\Deposco\Model\PostReleaseStateDTO|null
     */
    public function getPostReleaseState()
    {
        return $this->container['post_release_state'];
    }

    /**
     * Sets post_release_state
     *
     * @param \BeLenka\Deposco\Model\PostReleaseStateDTO|null $post_release_state post_release_state
     *
     * @return self
     */
    public function setPostReleaseState($post_release_state)
    {
        if (is_null($post_release_state)) {
            array_push($this->openAPINullablesSetToNull, 'post_release_state');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('post_release_state', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['post_release_state'] = $post_release_state;

        return $this;
    }

    /**
     * Gets entry_name
     *
     * @return string|null
     */
    public function getEntryName()
    {
        return $this->container['entry_name'];
    }

    /**
     * Sets entry_name
     *
     * @param string|null $entry_name Name of the sales representative for the order, which may not be the same person who created the order.
     *
     * @return self
     */
    public function setEntryName($entry_name)
    {
        if (is_null($entry_name)) {
            throw new \InvalidArgumentException('non-nullable entry_name cannot be null');
        }
        if ((mb_strlen($entry_name) > 200)) {
            throw new \InvalidArgumentException('invalid length for $entry_name when calling CustomerReturnDTO., must be smaller than or equal to 200.');
        }

        $this->container['entry_name'] = $entry_name;

        return $this;
    }

    /**
     * Gets entry_phone1
     *
     * @return string|null
     */
    public function getEntryPhone1()
    {
        return $this->container['entry_phone1'];
    }

    /**
     * Sets entry_phone1
     *
     * @param string|null $entry_phone1 Phone number of the sales representative for the order, which may not be the same person who created the order.
     *
     * @return self
     */
    public function setEntryPhone1($entry_phone1)
    {
        if (is_null($entry_phone1)) {
            throw new \InvalidArgumentException('non-nullable entry_phone1 cannot be null');
        }
        if ((mb_strlen($entry_phone1) > 30)) {
            throw new \InvalidArgumentException('invalid length for $entry_phone1 when calling CustomerReturnDTO., must be smaller than or equal to 30.');
        }

        $this->container['entry_phone1'] = $entry_phone1;

        return $this;
    }

    /**
     * Gets sale_condition_code
     *
     * @return string|null
     */
    public function getSaleConditionCode()
    {
        return $this->container['sale_condition_code'];
    }

    /**
     * Sets sale_condition_code
     *
     * @param string|null $sale_condition_code Used for Amazon Vendor Central and Amazon Advantage socket integrations.
     *
     * @return self
     */
    public function setSaleConditionCode($sale_condition_code)
    {
        if (is_null($sale_condition_code)) {
            throw new \InvalidArgumentException('non-nullable sale_condition_code cannot be null');
        }
        if ((mb_strlen($sale_condition_code) > 50)) {
            throw new \InvalidArgumentException('invalid length for $sale_condition_code when calling CustomerReturnDTO., must be smaller than or equal to 50.');
        }

        $this->container['sale_condition_code'] = $sale_condition_code;

        return $this;
    }

    /**
     * Gets seller
     *
     * @return string|null
     */
    public function getSeller()
    {
        return $this->container['seller'];
    }

    /**
     * Sets seller
     *
     * @param string|null $seller Used by socket integrations such as NetSuite and QuickBooks Desktop.
     *
     * @return self
     */
    public function setSeller($seller)
    {
        if (is_null($seller)) {
            throw new \InvalidArgumentException('non-nullable seller cannot be null');
        }
        if ((mb_strlen($seller) > 50)) {
            throw new \InvalidArgumentException('invalid length for $seller when calling CustomerReturnDTO., must be smaller than or equal to 50.');
        }

        $this->container['seller'] = $seller;

        return $this;
    }

    /**
     * Gets notification_code1
     *
     * @return string|null
     */
    public function getNotificationCode1()
    {
        return $this->container['notification_code1'];
    }

    /**
     * Sets notification_code1
     *
     * @param string|null $notification_code1 Reserved for future use.
     *
     * @return self
     */
    public function setNotificationCode1($notification_code1)
    {
        if (is_null($notification_code1)) {
            throw new \InvalidArgumentException('non-nullable notification_code1 cannot be null');
        }
        if ((mb_strlen($notification_code1) > 255)) {
            throw new \InvalidArgumentException('invalid length for $notification_code1 when calling CustomerReturnDTO., must be smaller than or equal to 255.');
        }

        $this->container['notification_code1'] = $notification_code1;

        return $this;
    }

    /**
     * Gets notification_code2
     *
     * @return string|null
     */
    public function getNotificationCode2()
    {
        return $this->container['notification_code2'];
    }

    /**
     * Sets notification_code2
     *
     * @param string|null $notification_code2 Reserved for future use.
     *
     * @return self
     */
    public function setNotificationCode2($notification_code2)
    {
        if (is_null($notification_code2)) {
            throw new \InvalidArgumentException('non-nullable notification_code2 cannot be null');
        }
        if ((mb_strlen($notification_code2) > 5)) {
            throw new \InvalidArgumentException('invalid length for $notification_code2 when calling CustomerReturnDTO., must be smaller than or equal to 5.');
        }

        $this->container['notification_code2'] = $notification_code2;

        return $this;
    }

    /**
     * Gets notification_code3
     *
     * @return string|null
     */
    public function getNotificationCode3()
    {
        return $this->container['notification_code3'];
    }

    /**
     * Sets notification_code3
     *
     * @param string|null $notification_code3 Reserved for future use.
     *
     * @return self
     */
    public function setNotificationCode3($notification_code3)
    {
        if (is_null($notification_code3)) {
            throw new \InvalidArgumentException('non-nullable notification_code3 cannot be null');
        }
        if ((mb_strlen($notification_code3) > 5)) {
            throw new \InvalidArgumentException('invalid length for $notification_code3 when calling CustomerReturnDTO., must be smaller than or equal to 5.');
        }

        $this->container['notification_code3'] = $notification_code3;

        return $this;
    }

    /**
     * Gets verbal_confirmation_name
     *
     * @return string|null
     */
    public function getVerbalConfirmationName()
    {
        return $this->container['verbal_confirmation_name'];
    }

    /**
     * Sets verbal_confirmation_name
     *
     * @param string|null $verbal_confirmation_name Reserved for future use.
     *
     * @return self
     */
    public function setVerbalConfirmationName($verbal_confirmation_name)
    {
        if (is_null($verbal_confirmation_name)) {
            throw new \InvalidArgumentException('non-nullable verbal_confirmation_name cannot be null');
        }
        if ((mb_strlen($verbal_confirmation_name) > 45)) {
            throw new \InvalidArgumentException('invalid length for $verbal_confirmation_name when calling CustomerReturnDTO., must be smaller than or equal to 45.');
        }

        $this->container['verbal_confirmation_name'] = $verbal_confirmation_name;

        return $this;
    }

    /**
     * Gets verbal_confirmation_phone_number
     *
     * @return string|null
     */
    public function getVerbalConfirmationPhoneNumber()
    {
        return $this->container['verbal_confirmation_phone_number'];
    }

    /**
     * Sets verbal_confirmation_phone_number
     *
     * @param string|null $verbal_confirmation_phone_number Reserved for future use.
     *
     * @return self
     */
    public function setVerbalConfirmationPhoneNumber($verbal_confirmation_phone_number)
    {
        if (is_null($verbal_confirmation_phone_number)) {
            throw new \InvalidArgumentException('non-nullable verbal_confirmation_phone_number cannot be null');
        }
        if ((mb_strlen($verbal_confirmation_phone_number) > 45)) {
            throw new \InvalidArgumentException('invalid length for $verbal_confirmation_phone_number when calling CustomerReturnDTO., must be smaller than or equal to 45.');
        }

        $this->container['verbal_confirmation_phone_number'] = $verbal_confirmation_phone_number;

        return $this;
    }

    /**
     * Gets custom_attribute1
     *
     * @return string|null
     */
    public function getCustomAttribute1()
    {
        return $this->container['custom_attribute1'];
    }

    /**
     * Sets custom_attribute1
     *
     * @param string|null $custom_attribute1 Custom attribute for the order.
     *
     * @return self
     */
    public function setCustomAttribute1($custom_attribute1)
    {
        if (is_null($custom_attribute1)) {
            throw new \InvalidArgumentException('non-nullable custom_attribute1 cannot be null');
        }
        if ((mb_strlen($custom_attribute1) > 100)) {
            throw new \InvalidArgumentException('invalid length for $custom_attribute1 when calling CustomerReturnDTO., must be smaller than or equal to 100.');
        }

        $this->container['custom_attribute1'] = $custom_attribute1;

        return $this;
    }

    /**
     * Gets custom_attribute2
     *
     * @return string|null
     */
    public function getCustomAttribute2()
    {
        return $this->container['custom_attribute2'];
    }

    /**
     * Sets custom_attribute2
     *
     * @param string|null $custom_attribute2 Custom attribute for the order.
     *
     * @return self
     */
    public function setCustomAttribute2($custom_attribute2)
    {
        if (is_null($custom_attribute2)) {
            throw new \InvalidArgumentException('non-nullable custom_attribute2 cannot be null');
        }
        if ((mb_strlen($custom_attribute2) > 100)) {
            throw new \InvalidArgumentException('invalid length for $custom_attribute2 when calling CustomerReturnDTO., must be smaller than or equal to 100.');
        }

        $this->container['custom_attribute2'] = $custom_attribute2;

        return $this;
    }

    /**
     * Gets custom_attribute3
     *
     * @return string|null
     */
    public function getCustomAttribute3()
    {
        return $this->container['custom_attribute3'];
    }

    /**
     * Sets custom_attribute3
     *
     * @param string|null $custom_attribute3 Custom attribute for the order.
     *
     * @return self
     */
    public function setCustomAttribute3($custom_attribute3)
    {
        if (is_null($custom_attribute3)) {
            throw new \InvalidArgumentException('non-nullable custom_attribute3 cannot be null');
        }
        if ((mb_strlen($custom_attribute3) > 100)) {
            throw new \InvalidArgumentException('invalid length for $custom_attribute3 when calling CustomerReturnDTO., must be smaller than or equal to 100.');
        }

        $this->container['custom_attribute3'] = $custom_attribute3;

        return $this;
    }

    /**
     * Gets custom_attribute4
     *
     * @return string|null
     */
    public function getCustomAttribute4()
    {
        return $this->container['custom_attribute4'];
    }

    /**
     * Sets custom_attribute4
     *
     * @param string|null $custom_attribute4 Custom attribute for the order.
     *
     * @return self
     */
    public function setCustomAttribute4($custom_attribute4)
    {
        if (is_null($custom_attribute4)) {
            throw new \InvalidArgumentException('non-nullable custom_attribute4 cannot be null');
        }
        if ((mb_strlen($custom_attribute4) > 100)) {
            throw new \InvalidArgumentException('invalid length for $custom_attribute4 when calling CustomerReturnDTO., must be smaller than or equal to 100.');
        }

        $this->container['custom_attribute4'] = $custom_attribute4;

        return $this;
    }

    /**
     * Gets custom_attribute5
     *
     * @return string|null
     */
    public function getCustomAttribute5()
    {
        return $this->container['custom_attribute5'];
    }

    /**
     * Sets custom_attribute5
     *
     * @param string|null $custom_attribute5 Custom attribute for the order.
     *
     * @return self
     */
    public function setCustomAttribute5($custom_attribute5)
    {
        if (is_null($custom_attribute5)) {
            throw new \InvalidArgumentException('non-nullable custom_attribute5 cannot be null');
        }
        if ((mb_strlen($custom_attribute5) > 100)) {
            throw new \InvalidArgumentException('invalid length for $custom_attribute5 when calling CustomerReturnDTO., must be smaller than or equal to 100.');
        }

        $this->container['custom_attribute5'] = $custom_attribute5;

        return $this;
    }

    /**
     * Gets custom_attribute6
     *
     * @return string|null
     */
    public function getCustomAttribute6()
    {
        return $this->container['custom_attribute6'];
    }

    /**
     * Sets custom_attribute6
     *
     * @param string|null $custom_attribute6 Custom attribute for the order.
     *
     * @return self
     */
    public function setCustomAttribute6($custom_attribute6)
    {
        if (is_null($custom_attribute6)) {
            throw new \InvalidArgumentException('non-nullable custom_attribute6 cannot be null');
        }
        if ((mb_strlen($custom_attribute6) > 100)) {
            throw new \InvalidArgumentException('invalid length for $custom_attribute6 when calling CustomerReturnDTO., must be smaller than or equal to 100.');
        }

        $this->container['custom_attribute6'] = $custom_attribute6;

        return $this;
    }

    /**
     * Gets custom_attribute7
     *
     * @return string|null
     */
    public function getCustomAttribute7()
    {
        return $this->container['custom_attribute7'];
    }

    /**
     * Sets custom_attribute7
     *
     * @param string|null $custom_attribute7 Custom attribute for the order.
     *
     * @return self
     */
    public function setCustomAttribute7($custom_attribute7)
    {
        if (is_null($custom_attribute7)) {
            throw new \InvalidArgumentException('non-nullable custom_attribute7 cannot be null');
        }
        if ((mb_strlen($custom_attribute7) > 100)) {
            throw new \InvalidArgumentException('invalid length for $custom_attribute7 when calling CustomerReturnDTO., must be smaller than or equal to 100.');
        }

        $this->container['custom_attribute7'] = $custom_attribute7;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return \BeLenka\Deposco\Model\CustomFieldDTO[]|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param \BeLenka\Deposco\Model\CustomFieldDTO[]|null $custom_fields Array of custom fields for the order.
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {
        if (is_null($custom_fields)) {
            throw new \InvalidArgumentException('non-nullable custom_fields cannot be null');
        }
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return \BeLenka\Deposco\Model\NoteDTO[]|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param \BeLenka\Deposco\Model\NoteDTO[]|null $notes Array of notes for the order.
     *
     * @return self
     */
    public function setNotes($notes)
    {
        if (is_null($notes)) {
            throw new \InvalidArgumentException('non-nullable notes cannot be null');
        }
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets channels
     *
     * @return \BeLenka\Deposco\Model\ChannelDTO[]|null
     */
    public function getChannels()
    {
        return $this->container['channels'];
    }

    /**
     * Sets channels
     *
     * @param \BeLenka\Deposco\Model\ChannelDTO[]|null $channels Array of channel cross-references for the order.
     *
     * @return self
     */
    public function setChannels($channels)
    {
        if (is_null($channels)) {
            array_push($this->openAPINullablesSetToNull, 'channels');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('channels', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['channels'] = $channels;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime|null $created_date Date and time that the order was created.
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets updated_date
     *
     * @return \DateTime|null
     */
    public function getUpdatedDate()
    {
        return $this->container['updated_date'];
    }

    /**
     * Sets updated_date
     *
     * @param \DateTime|null $updated_date Date and time that the order was last updated.
     *
     * @return self
     */
    public function setUpdatedDate($updated_date)
    {
        if (is_null($updated_date)) {
            throw new \InvalidArgumentException('non-nullable updated_date cannot be null');
        }
        $this->container['updated_date'] = $updated_date;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            throw new \InvalidArgumentException('non-nullable created_by cannot be null');
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $updated_by updated_by
     *
     * @return self
     */
    public function setUpdatedBy($updated_by)
    {
        if (is_null($updated_by)) {
            throw new \InvalidArgumentException('non-nullable updated_by cannot be null');
        }
        $this->container['updated_by'] = $updated_by;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Type of order.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets order_status
     *
     * @return string|null
     */
    public function getOrderStatus()
    {
        return $this->container['order_status'];
    }

    /**
     * Sets order_status
     *
     * @param string|null $order_status Overall status of the customer return as it progresses through the receiving process. New customer returns should be created with a status of New.
     *
     * @return self
     */
    public function setOrderStatus($order_status)
    {
        if (is_null($order_status)) {
            array_push($this->openAPINullablesSetToNull, 'order_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getOrderStatusAllowableValues();
        if (!is_null($order_status) && !in_array($order_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'order_status', must be one of '%s'",
                    $order_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['order_status'] = $order_status;

        return $this;
    }

    /**
     * Gets ship_to_facility
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef
     */
    public function getShipToFacility()
    {
        return $this->container['ship_to_facility'];
    }

    /**
     * Sets ship_to_facility
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef $ship_to_facility ship_to_facility
     *
     * @return self
     */
    public function setShipToFacility($ship_to_facility)
    {
        if (is_null($ship_to_facility)) {
            array_push($this->openAPINullablesSetToNull, 'ship_to_facility');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ship_to_facility', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ship_to_facility'] = $ship_to_facility;

        return $this;
    }

    /**
     * Gets parent_order
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getParentOrder()
    {
        return $this->container['parent_order'];
    }

    /**
     * Sets parent_order
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $parent_order parent_order
     *
     * @return self
     */
    public function setParentOrder($parent_order)
    {
        if (is_null($parent_order)) {
            array_push($this->openAPINullablesSetToNull, 'parent_order');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent_order', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parent_order'] = $parent_order;

        return $this;
    }

    /**
     * Gets co_header
     *
     * @return \BeLenka\Deposco\Model\NullableEntityRef|null
     */
    public function getCoHeader()
    {
        return $this->container['co_header'];
    }

    /**
     * Sets co_header
     *
     * @param \BeLenka\Deposco\Model\NullableEntityRef|null $co_header co_header
     *
     * @return self
     */
    public function setCoHeader($co_header)
    {
        if (is_null($co_header)) {
            array_push($this->openAPINullablesSetToNull, 'co_header');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('co_header', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['co_header'] = $co_header;

        return $this;
    }

    /**
     * Gets order_lines
     *
     * @return \BeLenka\Deposco\Model\CustomerReturnLineCollectionDTO|null
     */
    public function getOrderLines()
    {
        return $this->container['order_lines'];
    }

    /**
     * Sets order_lines
     *
     * @param \BeLenka\Deposco\Model\CustomerReturnLineCollectionDTO|null $order_lines order_lines
     *
     * @return self
     */
    public function setOrderLines($order_lines)
    {
        if (is_null($order_lines)) {
            throw new \InvalidArgumentException('non-nullable order_lines cannot be null');
        }
        $this->container['order_lines'] = $order_lines;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


