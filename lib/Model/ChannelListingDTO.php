<?php
/**
 * ChannelListingDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deposco API
 *
 * Welcome to the Deposco API Reference! The Deposco API enables you to integrate your system with Deposco.  * Integrate a product information system (PIM) by creating and retrieving data for items, packs, UPCs, and kits. * Set up warehouse data by creating facilities, zones, locations, and storage details. * Create inbound orders that can be received and outbound orders that can be fulfilled with Deposco warehouse management processes.  This reference provides details on available operations, endpoints, parameters, schemas, and responses.  Example requests and responses are also available for you to use as a reference. You can copy the examples to use as a starting point for your own requests.  Review the guides to learn how the API is used in common business scenarios such as setting up the warehouse and integrating a Product Information Management (PIM) system.  When you're ready to get started, register for a developer account and then log in to create your application in the developer portal.
 *
 * The version of the OpenAPI document: 2.0.2519
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\Deposco\Model;

use \ArrayAccess;
use \BeLenka\Deposco\ObjectSerializer;

/**
 * ChannelListingDTO Class Doc Comment
 *
 * @category Class
 * @description Record for managing the link between the item in Deposco and the data for the item in an external system.
 * @package  BeLenka\Deposco
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ChannelListingDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ChannelListingDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'self' => '\BeLenka\Deposco\Model\EntityRef',
        'item' => '\BeLenka\Deposco\Model\EntityRef',
        'integration' => '\BeLenka\Deposco\Model\EntityRef',
        'listing_status' => 'string',
        'pack_quantity' => 'int',
        'description' => 'string',
        'listing_price' => 'int',
        'item_condition' => 'string',
        'saleable' => 'bool',
        'sync_inventory' => 'bool',
        'ref1' => 'string',
        'ref2' => 'string',
        'ref3' => 'string',
        'ref4' => 'string',
        'ref5' => 'string',
        'sec_ref1' => 'string',
        'sec_ref2' => 'string',
        'sec_ref3' => 'string',
        'sec_ref4' => 'string',
        'sec_ref5' => 'string',
        'created_date' => '\DateTime',
        'updated_date' => '\DateTime',
        'created_by' => '\BeLenka\Deposco\Model\EntityRef',
        'updated_by' => '\BeLenka\Deposco\Model\EntityRef'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'self' => null,
        'item' => null,
        'integration' => null,
        'listing_status' => null,
        'pack_quantity' => 'double',
        'description' => null,
        'listing_price' => 'double',
        'item_condition' => null,
        'saleable' => null,
        'sync_inventory' => null,
        'ref1' => null,
        'ref2' => null,
        'ref3' => null,
        'ref4' => null,
        'ref5' => null,
        'sec_ref1' => null,
        'sec_ref2' => null,
        'sec_ref3' => null,
        'sec_ref4' => null,
        'sec_ref5' => null,
        'created_date' => 'date-time',
        'updated_date' => 'date-time',
        'created_by' => null,
        'updated_by' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'self' => false,
        'item' => false,
        'integration' => false,
        'listing_status' => true,
        'pack_quantity' => false,
        'description' => true,
        'listing_price' => true,
        'item_condition' => true,
        'saleable' => false,
        'sync_inventory' => false,
        'ref1' => false,
        'ref2' => true,
        'ref3' => true,
        'ref4' => true,
        'ref5' => true,
        'sec_ref1' => true,
        'sec_ref2' => true,
        'sec_ref3' => true,
        'sec_ref4' => true,
        'sec_ref5' => true,
        'created_date' => false,
        'updated_date' => false,
        'created_by' => false,
        'updated_by' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'self' => 'self',
        'item' => 'item',
        'integration' => 'integration',
        'listing_status' => 'listingStatus',
        'pack_quantity' => 'packQuantity',
        'description' => 'description',
        'listing_price' => 'listingPrice',
        'item_condition' => 'itemCondition',
        'saleable' => 'saleable',
        'sync_inventory' => 'syncInventory',
        'ref1' => 'ref1',
        'ref2' => 'ref2',
        'ref3' => 'ref3',
        'ref4' => 'ref4',
        'ref5' => 'ref5',
        'sec_ref1' => 'secRef1',
        'sec_ref2' => 'secRef2',
        'sec_ref3' => 'secRef3',
        'sec_ref4' => 'secRef4',
        'sec_ref5' => 'secRef5',
        'created_date' => 'createdDate',
        'updated_date' => 'updatedDate',
        'created_by' => 'createdBy',
        'updated_by' => 'updatedBy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'self' => 'setSelf',
        'item' => 'setItem',
        'integration' => 'setIntegration',
        'listing_status' => 'setListingStatus',
        'pack_quantity' => 'setPackQuantity',
        'description' => 'setDescription',
        'listing_price' => 'setListingPrice',
        'item_condition' => 'setItemCondition',
        'saleable' => 'setSaleable',
        'sync_inventory' => 'setSyncInventory',
        'ref1' => 'setRef1',
        'ref2' => 'setRef2',
        'ref3' => 'setRef3',
        'ref4' => 'setRef4',
        'ref5' => 'setRef5',
        'sec_ref1' => 'setSecRef1',
        'sec_ref2' => 'setSecRef2',
        'sec_ref3' => 'setSecRef3',
        'sec_ref4' => 'setSecRef4',
        'sec_ref5' => 'setSecRef5',
        'created_date' => 'setCreatedDate',
        'updated_date' => 'setUpdatedDate',
        'created_by' => 'setCreatedBy',
        'updated_by' => 'setUpdatedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'self' => 'getSelf',
        'item' => 'getItem',
        'integration' => 'getIntegration',
        'listing_status' => 'getListingStatus',
        'pack_quantity' => 'getPackQuantity',
        'description' => 'getDescription',
        'listing_price' => 'getListingPrice',
        'item_condition' => 'getItemCondition',
        'saleable' => 'getSaleable',
        'sync_inventory' => 'getSyncInventory',
        'ref1' => 'getRef1',
        'ref2' => 'getRef2',
        'ref3' => 'getRef3',
        'ref4' => 'getRef4',
        'ref5' => 'getRef5',
        'sec_ref1' => 'getSecRef1',
        'sec_ref2' => 'getSecRef2',
        'sec_ref3' => 'getSecRef3',
        'sec_ref4' => 'getSecRef4',
        'sec_ref5' => 'getSecRef5',
        'created_date' => 'getCreatedDate',
        'updated_date' => 'getUpdatedDate',
        'created_by' => 'getCreatedBy',
        'updated_by' => 'getUpdatedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const LISTING_STATUS_LINKED = 'Linked';
    public const LISTING_STATUS_DELETED = 'Deleted';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getListingStatusAllowableValues()
    {
        return [
            self::LISTING_STATUS_LINKED,
            self::LISTING_STATUS_DELETED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('self', $data ?? [], null);
        $this->setIfExists('item', $data ?? [], null);
        $this->setIfExists('integration', $data ?? [], null);
        $this->setIfExists('listing_status', $data ?? [], null);
        $this->setIfExists('pack_quantity', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('listing_price', $data ?? [], null);
        $this->setIfExists('item_condition', $data ?? [], null);
        $this->setIfExists('saleable', $data ?? [], null);
        $this->setIfExists('sync_inventory', $data ?? [], null);
        $this->setIfExists('ref1', $data ?? [], null);
        $this->setIfExists('ref2', $data ?? [], null);
        $this->setIfExists('ref3', $data ?? [], null);
        $this->setIfExists('ref4', $data ?? [], null);
        $this->setIfExists('ref5', $data ?? [], null);
        $this->setIfExists('sec_ref1', $data ?? [], null);
        $this->setIfExists('sec_ref2', $data ?? [], null);
        $this->setIfExists('sec_ref3', $data ?? [], null);
        $this->setIfExists('sec_ref4', $data ?? [], null);
        $this->setIfExists('sec_ref5', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('updated_date', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('updated_by', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['integration'] === null) {
            $invalidProperties[] = "'integration' can't be null";
        }
        $allowedValues = $this->getListingStatusAllowableValues();
        if (!is_null($this->container['listing_status']) && !in_array($this->container['listing_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'listing_status', must be one of '%s'",
                $this->container['listing_status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['pack_quantity'] === null) {
            $invalidProperties[] = "'pack_quantity' can't be null";
        }
        if (($this->container['pack_quantity'] > 10000000)) {
            $invalidProperties[] = "invalid value for 'pack_quantity', must be smaller than or equal to 10000000.";
        }

        if (($this->container['pack_quantity'] < 0)) {
            $invalidProperties[] = "invalid value for 'pack_quantity', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['listing_price']) && ($this->container['listing_price'] > 10000000)) {
            $invalidProperties[] = "invalid value for 'listing_price', must be smaller than or equal to 10000000.";
        }

        if (!is_null($this->container['listing_price']) && ($this->container['listing_price'] < 0)) {
            $invalidProperties[] = "invalid value for 'listing_price', must be bigger than or equal to 0.";
        }

        if ($this->container['ref1'] === null) {
            $invalidProperties[] = "'ref1' can't be null";
        }
        if (!preg_match("/.*\\S.*/", $this->container['ref1'])) {
            $invalidProperties[] = "invalid value for 'ref1', must be conform to the pattern /.*\\S.*/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets self
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $self self
     *
     * @return self
     */
    public function setSelf($self)
    {
        if (is_null($self)) {
            throw new \InvalidArgumentException('non-nullable self cannot be null');
        }
        $this->container['self'] = $self;

        return $this;
    }

    /**
     * Gets item
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getItem()
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $item item
     *
     * @return self
     */
    public function setItem($item)
    {
        if (is_null($item)) {
            throw new \InvalidArgumentException('non-nullable item cannot be null');
        }
        $this->container['item'] = $item;

        return $this;
    }

    /**
     * Gets integration
     *
     * @return \BeLenka\Deposco\Model\EntityRef
     */
    public function getIntegration()
    {
        return $this->container['integration'];
    }

    /**
     * Sets integration
     *
     * @param \BeLenka\Deposco\Model\EntityRef $integration integration
     *
     * @return self
     */
    public function setIntegration($integration)
    {
        if (is_null($integration)) {
            throw new \InvalidArgumentException('non-nullable integration cannot be null');
        }
        $this->container['integration'] = $integration;

        return $this;
    }

    /**
     * Gets listing_status
     *
     * @return string|null
     */
    public function getListingStatus()
    {
        return $this->container['listing_status'];
    }

    /**
     * Sets listing_status
     *
     * @param string|null $listing_status Status of the channel listing. A value of Linked indicates that the listing is active in the external system and linked to the item in Deposco. A value of Deleted is returned if the listing was created through a socket integration and then deleted in the external system.
     *
     * @return self
     */
    public function setListingStatus($listing_status)
    {
        if (is_null($listing_status)) {
            array_push($this->openAPINullablesSetToNull, 'listing_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('listing_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getListingStatusAllowableValues();
        if (!is_null($listing_status) && !in_array($listing_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'listing_status', must be one of '%s'",
                    $listing_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['listing_status'] = $listing_status;

        return $this;
    }

    /**
     * Gets pack_quantity
     *
     * @return int
     */
    public function getPackQuantity()
    {
        return $this->container['pack_quantity'];
    }

    /**
     * Sets pack_quantity
     *
     * @param int $pack_quantity Used in some sockets to perform the unit of measure conversion when an item is sold in different quantities.
     *
     * @return self
     */
    public function setPackQuantity($pack_quantity)
    {
        if (is_null($pack_quantity)) {
            throw new \InvalidArgumentException('non-nullable pack_quantity cannot be null');
        }

        if (($pack_quantity > 0)) {
            throw new \InvalidArgumentException('invalid value for $pack_quantity when calling ChannelListingDTO., must be smaller than or equal to 10000000.');
        }
        if (($pack_quantity < 0)) {
            throw new \InvalidArgumentException('invalid value for $pack_quantity when calling ChannelListingDTO., must be bigger than or equal to 0.');
        }

        $this->container['pack_quantity'] = $pack_quantity;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Reserved for future use for a description of the item from the external system.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets listing_price
     *
     * @return int|null
     */
    public function getListingPrice()
    {
        return $this->container['listing_price'];
    }

    /**
     * Sets listing_price
     *
     * @param int|null $listing_price Reserved for future use for the price of the item that is provided in the sales channel.
     *
     * @return self
     */
    public function setListingPrice($listing_price)
    {
        if (is_null($listing_price)) {
            array_push($this->openAPINullablesSetToNull, 'listing_price');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('listing_price', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($listing_price) && ($listing_price > 0)) {
            throw new \InvalidArgumentException('invalid value for $listing_price when calling ChannelListingDTO., must be smaller than or equal to 10000000.');
        }
        if (!is_null($listing_price) && ($listing_price < 0)) {
            throw new \InvalidArgumentException('invalid value for $listing_price when calling ChannelListingDTO., must be bigger than or equal to 0.');
        }

        $this->container['listing_price'] = $listing_price;

        return $this;
    }

    /**
     * Gets item_condition
     *
     * @return string|null
     */
    public function getItemCondition()
    {
        return $this->container['item_condition'];
    }

    /**
     * Sets item_condition
     *
     * @param string|null $item_condition Reserved for future use primarily in marketplaces to designate an item as Used or New.
     *
     * @return self
     */
    public function setItemCondition($item_condition)
    {
        if (is_null($item_condition)) {
            array_push($this->openAPINullablesSetToNull, 'item_condition');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_condition', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['item_condition'] = $item_condition;

        return $this;
    }

    /**
     * Gets saleable
     *
     * @return bool|null
     */
    public function getSaleable()
    {
        return $this->container['saleable'];
    }

    /**
     * Sets saleable
     *
     * @param bool|null $saleable Whether Deposco should fulfill and process orders for the item.
     *
     * @return self
     */
    public function setSaleable($saleable)
    {
        if (is_null($saleable)) {
            throw new \InvalidArgumentException('non-nullable saleable cannot be null');
        }
        $this->container['saleable'] = $saleable;

        return $this;
    }

    /**
     * Gets sync_inventory
     *
     * @return bool|null
     */
    public function getSyncInventory()
    {
        return $this->container['sync_inventory'];
    }

    /**
     * Sets sync_inventory
     *
     * @param bool|null $sync_inventory Used for socket integrations to indicate whether Deposco should perform inventory sync for the item.
     *
     * @return self
     */
    public function setSyncInventory($sync_inventory)
    {
        if (is_null($sync_inventory)) {
            throw new \InvalidArgumentException('non-nullable sync_inventory cannot be null');
        }
        $this->container['sync_inventory'] = $sync_inventory;

        return $this;
    }

    /**
     * Gets ref1
     *
     * @return string
     */
    public function getRef1()
    {
        return $this->container['ref1'];
    }

    /**
     * Sets ref1
     *
     * @param string $ref1 Internal reference for the item in the external system. This field should be set to the item number or ID.
     *
     * @return self
     */
    public function setRef1($ref1)
    {
        if (is_null($ref1)) {
            throw new \InvalidArgumentException('non-nullable ref1 cannot be null');
        }

        if ((!preg_match("/.*\\S.*/", ObjectSerializer::toString($ref1)))) {
            throw new \InvalidArgumentException("invalid value for \$ref1 when calling ChannelListingDTO., must conform to the pattern /.*\\S.*/.");
        }

        $this->container['ref1'] = $ref1;

        return $this;
    }

    /**
     * Gets ref2
     *
     * @return string|null
     */
    public function getRef2()
    {
        return $this->container['ref2'];
    }

    /**
     * Sets ref2
     *
     * @param string|null $ref2 Internal reference for the item in the external system.
     *
     * @return self
     */
    public function setRef2($ref2)
    {
        if (is_null($ref2)) {
            array_push($this->openAPINullablesSetToNull, 'ref2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ref2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ref2'] = $ref2;

        return $this;
    }

    /**
     * Gets ref3
     *
     * @return string|null
     */
    public function getRef3()
    {
        return $this->container['ref3'];
    }

    /**
     * Sets ref3
     *
     * @param string|null $ref3 Internal reference for the item in the external system.
     *
     * @return self
     */
    public function setRef3($ref3)
    {
        if (is_null($ref3)) {
            array_push($this->openAPINullablesSetToNull, 'ref3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ref3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ref3'] = $ref3;

        return $this;
    }

    /**
     * Gets ref4
     *
     * @return string|null
     */
    public function getRef4()
    {
        return $this->container['ref4'];
    }

    /**
     * Sets ref4
     *
     * @param string|null $ref4 Internal reference for the item in the external system.
     *
     * @return self
     */
    public function setRef4($ref4)
    {
        if (is_null($ref4)) {
            array_push($this->openAPINullablesSetToNull, 'ref4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ref4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ref4'] = $ref4;

        return $this;
    }

    /**
     * Gets ref5
     *
     * @return string|null
     */
    public function getRef5()
    {
        return $this->container['ref5'];
    }

    /**
     * Sets ref5
     *
     * @param string|null $ref5 Internal reference for the item in the external system.
     *
     * @return self
     */
    public function setRef5($ref5)
    {
        if (is_null($ref5)) {
            array_push($this->openAPINullablesSetToNull, 'ref5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ref5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ref5'] = $ref5;

        return $this;
    }

    /**
     * Gets sec_ref1
     *
     * @return string|null
     */
    public function getSecRef1()
    {
        return $this->container['sec_ref1'];
    }

    /**
     * Sets sec_ref1
     *
     * @param string|null $sec_ref1 Secondary reference for the item in the external system.
     *
     * @return self
     */
    public function setSecRef1($sec_ref1)
    {
        if (is_null($sec_ref1)) {
            array_push($this->openAPINullablesSetToNull, 'sec_ref1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sec_ref1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sec_ref1'] = $sec_ref1;

        return $this;
    }

    /**
     * Gets sec_ref2
     *
     * @return string|null
     */
    public function getSecRef2()
    {
        return $this->container['sec_ref2'];
    }

    /**
     * Sets sec_ref2
     *
     * @param string|null $sec_ref2 Secondary reference for the item in the external system.
     *
     * @return self
     */
    public function setSecRef2($sec_ref2)
    {
        if (is_null($sec_ref2)) {
            array_push($this->openAPINullablesSetToNull, 'sec_ref2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sec_ref2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sec_ref2'] = $sec_ref2;

        return $this;
    }

    /**
     * Gets sec_ref3
     *
     * @return string|null
     */
    public function getSecRef3()
    {
        return $this->container['sec_ref3'];
    }

    /**
     * Sets sec_ref3
     *
     * @param string|null $sec_ref3 Secondary reference for the item in the external system.
     *
     * @return self
     */
    public function setSecRef3($sec_ref3)
    {
        if (is_null($sec_ref3)) {
            array_push($this->openAPINullablesSetToNull, 'sec_ref3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sec_ref3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sec_ref3'] = $sec_ref3;

        return $this;
    }

    /**
     * Gets sec_ref4
     *
     * @return string|null
     */
    public function getSecRef4()
    {
        return $this->container['sec_ref4'];
    }

    /**
     * Sets sec_ref4
     *
     * @param string|null $sec_ref4 Secondary reference for the item in the external system.
     *
     * @return self
     */
    public function setSecRef4($sec_ref4)
    {
        if (is_null($sec_ref4)) {
            array_push($this->openAPINullablesSetToNull, 'sec_ref4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sec_ref4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sec_ref4'] = $sec_ref4;

        return $this;
    }

    /**
     * Gets sec_ref5
     *
     * @return string|null
     */
    public function getSecRef5()
    {
        return $this->container['sec_ref5'];
    }

    /**
     * Sets sec_ref5
     *
     * @param string|null $sec_ref5 Secondary reference for the item in the external system.
     *
     * @return self
     */
    public function setSecRef5($sec_ref5)
    {
        if (is_null($sec_ref5)) {
            array_push($this->openAPINullablesSetToNull, 'sec_ref5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sec_ref5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sec_ref5'] = $sec_ref5;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime|null $created_date Date and time that the channel listing was created.
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets updated_date
     *
     * @return \DateTime|null
     */
    public function getUpdatedDate()
    {
        return $this->container['updated_date'];
    }

    /**
     * Sets updated_date
     *
     * @param \DateTime|null $updated_date Date and time that the channel listing was last updated.
     *
     * @return self
     */
    public function setUpdatedDate($updated_date)
    {
        if (is_null($updated_date)) {
            throw new \InvalidArgumentException('non-nullable updated_date cannot be null');
        }
        $this->container['updated_date'] = $updated_date;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            throw new \InvalidArgumentException('non-nullable created_by cannot be null');
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return \BeLenka\Deposco\Model\EntityRef|null
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param \BeLenka\Deposco\Model\EntityRef|null $updated_by updated_by
     *
     * @return self
     */
    public function setUpdatedBy($updated_by)
    {
        if (is_null($updated_by)) {
            throw new \InvalidArgumentException('non-nullable updated_by cannot be null');
        }
        $this->container['updated_by'] = $updated_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


